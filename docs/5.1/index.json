[
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/",
	"title": "Catel",
	"tags": [],
	"description": "",
	"content": "   Type Description     ApplicationExtensions    Argument    AsyncEventHandler    AsyncEventHandlerExtensions    ByteArrayExtensions    CatelEnvironment    CompositeFilter    CompositePredicate    CoreModule    DesignTimeCodeAttribute    DesignTimeHelper    DesignTimeInitializer    Disposable    DisposableToken    Enum    EnvironmentHelper    EventHandlerExtensions    ExceptionExtensions    ExceptionFactory    ExpressionHelper    FastDateTime    HashHelper    IBindableEnum    ICommandManagerExtensions    ICompositeFilter    IDisposableToken    IExecute    IExecuteWithObject    IFluent    INotifyPropertyChangedExtensions    IUniqueIdentifyable    IWeakAction    IWeakEventListener    IWeakFunc    IWeakReference    JsonExtensions    KnownPlatforms    LanguageHelper    MustBeImplementedException    MVVMModule    NotSupportedInPlatformException    ObjectHelper    ObjectToStringHelper    OpenInstanceActionHandler    OpenInstanceEventHandler    ParallelHelper    Platforms    ProcessExtensions    ProgressContext    ResourceHelper    SerializationJsonModule    StringExtensions    StringToObjectHelper    SupportedPlatforms    TagHelper    ThemeHelper    ThreadHelper    UniqueIdentifierHelper    UriExtensions    WeakAction    WeakActionBase    WeakEventListener    WeakFunc     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/android/",
	"title": "Catel.Android",
	"tags": [],
	"description": "",
	"content": "   Type Description     ContextHelper     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/android/app/",
	"title": "Catel.Android.App",
	"tags": [],
	"description": "",
	"content": "   Type Description     Activity    Application    Fragment     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/",
	"title": "Catel.ApiCop",
	"tags": [],
	"description": "",
	"content": "   Type Description     ApiCop    ApiCopListenerBase    ApiCopListenerGrouping    ApiCopManager    ApiCopResult    ApiCopRule    ApiCopRuleLevel    IApiCop    IApiCopListener    IApiCopResult    IApiCopRule    TextApiCopListenerBase     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/listeners/",
	"title": "Catel.ApiCop.Listeners",
	"tags": [],
	"description": "",
	"content": "   Type Description     ConsoleApiCopListener    TextFileApiCopListener     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/rules/",
	"title": "Catel.ApiCop.Rules",
	"tags": [],
	"description": "",
	"content": "   Type Description     InitializationApiCopRule    InitializationMode    TooManyDependenciesApiCopRule    UnusedFeatureApiCopRule     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/caching/",
	"title": "Catel.Caching",
	"tags": [],
	"description": "",
	"content": "   Type Description     CacheStorage    ExpiredEventArgs    ExpiringEventArgs    ICacheStorage     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/caching/policies/",
	"title": "Catel.Caching.Policies",
	"tags": [],
	"description": "",
	"content": "   Type Description     AbsoluteExpirationPolicy    CompositeExpirationPolicy    CustomExpirationPolicy    DurationExpirationPolicy    ExpirationPolicy    SlidingExpirationPolicy     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/collections/",
	"title": "Catel.Collections",
	"tags": [],
	"description": "",
	"content": "   Type Description     ArrayShim    CollectionExtensions    CollectionHelper    DictionaryExtensions    ExtendedSuspensionContext    FastBindingList    FastObservableCollection    ISuspendChangeNotificationsCollection    ListDictionary    NotifyListChangedEventArgs    NotifyRangedCollectionChangedEventArgs    NotifyRangedListChangedAction    NotifyRangedListChangedEventArgs    SuspensionMode     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/componentmodel/",
	"title": "Catel.ComponentModel",
	"tags": [],
	"description": "",
	"content": "   Type Description     DisplayNameAttribute     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/configuration/",
	"title": "Catel.Configuration",
	"tags": [],
	"description": "",
	"content": "   Type Description     ConfigurationChangedEventArgs    ConfigurationContainer    ConfigurationExtensions    ConfigurationService    DynamicConfiguration    DynamicConfigurationExtensions    DynamicConfigurationSerializerModifier    IConfigurationService    IConfigurationServiceExtensions     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/core/",
	"title": "Catel.Core",
	"tags": [],
	"description": "",
	"content": "   Type Description     ModuleInitializer     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/",
	"title": "Catel.Data",
	"tags": [],
	"description": "",
	"content": "   Type Description     AdvancedPropertyChangedEventArgs    AttributeValidatorProvider    BoxingCache    BusinessRuleValidationResult    CatelTypeInfo    ChangeNotificationWrapper    ChildAwareModelBase    ComparableModelBase    CompositeValidator    CompositeValidatorProvider    DispatcherObservableObject    EditableObjectHelper    EventChangeType    ExcludeFromValidationAttribute    FieldValidationResult    IAdvancedNotifyPropertyChanged    IBusinessRuleValidationResult    IFieldValidationResult    IModel    IModelEditor    IModelEqualityComparer    IModelExtensions    IModelSerialization    InvalidPropertyException    InvalidPropertyValueException    ISavableModel    ISavableModelExtensions    IValidatable    IValidatableExtensions    IValidatableModel    IValidatableModelExtensions    IValidationContext    IValidationContextExtensions    IValidationResult    IValidationSummary    IValidator    IValidatorProvider    IValueValidator    ModelBase    ModelBaseExtensions    ModelEqualityComparer    ObservableObject    ObservableObjectExtensions    PropertyAlreadyRegisteredException    PropertyBag    PropertyData    PropertyDataManager    PropertyNotNullableException    PropertyNotRegisteredException    PropertyValue    SavableModelBase    SuspensionContext    ValidatableModelBase    ValidateModelAttribute    ValidationContext    ValidationContextChange    ValidationContextChangeType    ValidationContextHelper    ValidationEventArgs    ValidationExtensions    ValidationResult    ValidationResultType    ValidationSummary    ValidatorBase    ValidatorProviderBase    XmlNameMapper     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/exceptionhandling/",
	"title": "Catel.ExceptionHandling",
	"tags": [],
	"description": "",
	"content": "   Type Description     BufferedEventArgs    BufferPolicy    ExceptionHandler    ExceptionHandlerExtensions    ExceptionPredicate    ExceptionService    ExceptionServiceExtensions    IBufferPolicy    IExceptionHandler    IExceptionService    IPolicy    IRetryPolicy    PolicyBase    RetryingEventArgs    RetryPolicy     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/io/",
	"title": "Catel.IO",
	"tags": [],
	"description": "",
	"content": "   Type Description     ApplicationDataTarget    Path    StreamExtensions     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/",
	"title": "Catel.IoC",
	"tags": [],
	"description": "",
	"content": "   Type Description     CatelDependencyResolver    CircularDependencyException    DependencyResolverExtensions    DependencyResolverManager    ExternalContainerNotSupportedException    FirstInterfaceRegistrationConvention    IDependencyResolver    IDependencyResolverManager    INeedCustomInitialization    InjectAttribute    InjectionConstructorAttribute    IoCConfiguration    IoCConfigurationSection    IoCFactory    IRegistrationConvention    IRegistrationConventionHandler    IServiceLocator    IServiceLocatorInitializer    ITypeFactory    ITypeRequestPath    LateBoundImplementation    MissingTypeEventArgs    NamingRegistrationConvention    ObjectExtensions    Registration    RegistrationConventionBase    RegistrationConventionHandler    RegistrationConventionHandlerExtensions    RegistrationInfo    RegistrationType    ServiceLocator    ServiceLocatorAutoRegistrationManager    ServiceLocatorConfiguration    ServiceLocatorConfigurationCollection    ServiceLocatorExtensions    ServiceLocatorRegistration    ServiceLocatorRegistrationAttribute    ServiceLocatorRegistrationGroup    ServiceLocatorRegistrationMode    TypeFactory    TypeFactoryExtensions    TypeInstantiatedEventArgs    TypeNotRegisteredException    TypeRegisteredEventArgs    TypeRequestInfo    TypeRequestPath     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/",
	"title": "Catel.Logging",
	"tags": [],
	"description": "",
	"content": "   Type Description     BatchLogListenerBase    ConsoleLogListener    DebugLogListener    EtwLogListener    EventLogListener    FileLogListener    IBatchLogListener    IBatchLogListenerExtensions    IJsonLogFormatter    ILog    ILogListener    JsonLogFormatter    Log    LogBatchEntry    LogData    LogEntry    LogEvent    LogExtensions    LoggingConfigurationSection    LogListenerBase    LogListenerConfiguration    LogListenerConfigurationCollection    LogManager    LogMessageEventArgs    RollingInMemoryLogListener    SeqLogListener    StatusLogListener    TimeDisplay     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/",
	"title": "Catel.MVVM",
	"tags": [],
	"description": "",
	"content": "   Type Description     Binding    BindingBase    BindingContext    BindingContextExtensions    BindingExtensions    BindingMode    BindingParty    BindingPartyExtensions    CancelingEventArgs    CancellableEventArgs    Command    CommandBase    CommandBinding    CommandCanceledEventArgs    CommandContainerBase    CommandCreatedEventArgs    CommandEventArgs    CommandExecutedEventArgs    CommandHelper    CommandManager    CommandManagerWrapper    CommandProgressChangedEventArgs    CompositeCommand    DataContextSubscriptionMode    DataContextSubscriptionService    DefaultViewModelToModelMappingConverter    IAuthenticationProvider    ICatelCommand    ICatelTaskCommand    ICommandManager    ICompositeCommand    IDataContextSubscriptionService    ILocator    InvalidViewModelException    IProgressNotifyableViewModel    IRelationalViewModel    ITaskProgressReport    IUrlLocator    IViewLocator    IViewModel    IViewModelCommandManager    IViewModelContainer    IViewModelExtensions    IViewModelFactory    IViewModelFactoryExtensions    IViewModelLocator    IViewModelLocatorExtensions    IViewModelManager    IViewModelToModelConverter    LocatorBase    ModelAttribute    ModelCleanUpMode    ModelNotRegisteredException    ModuleInitializer    NavigationViewModelBase    ObjectExtensions    ObjectToDisplayNameConverter    ProgressiveTaskCommand    ProgressNotifyableViewModel    PropertyNotFoundInModelException    SavingEventArgs    TaskCommand    UrlLocator    ViewHelper    ViewLocator    ViewModelBase    ViewModelClosedEventArgs    ViewModelCommandManager    ViewModelExtensions    ViewModelFactory    ViewModelLocator    ViewModelManager    ViewModelManagerExtensions    ViewModelNotRegisteredException    ViewModelServiceHelper    ViewModelToModelAttribute    ViewModelToModelConverterBase    ViewModelToModelMapping    ViewModelToModelMode    WrongViewModelTypeException     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/auditing/",
	"title": "Catel.MVVM.Auditing",
	"tags": [],
	"description": "",
	"content": "   Type Description     AuditingHelper    AuditingManager    AuditorBase    IAuditor     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/",
	"title": "Catel.MVVM.Converters",
	"tags": [],
	"description": "",
	"content": "   Type Description     AreEqualMultiValueConverter    BooleanToCollapsingVisibilityConverter    BooleanToGrayscaleConverter    BooleanToHidingVisibilityConverter    BooleanToOppositeBooleanConverter    BooleanToTextConverter    CollapsingVisibilityConverterBase    CollectionToCollapsingVisibilityConverter    CollectionToCountConverter    CollectionToHidingVisibilityConverter    ColorToBrushConverter    ContainsItemsConverter    ConverterHelper    DebugConverter    EmptyStringToCollapsingVisibilityConverter    EmptyStringToHidingVisibilityConverter    EnumToCollapsingVisibilityConverter    EnumToHidingVisibilityConverter    FormattingConverter    GetFirstValidationErrorConverter    HidingVisibilityConverterBase    IntToStringConverter    IsSelectedConverter    IsSelectedValueConverter    IValueConverter    LanguageConverter    MethodToValueConverter    MultiplyConverter    NullableValueConverter    PlatformToBooleanConverter    ReferenceToBooleanConverter    ReferenceToCollapsingVisibilityConverter    ReferenceToHidingVisibilityConverter    ShortDateFormattingConverter    StringToIntConverter    StringToTypeConverter    TextToLowerCaseConverter    TextToUpperCaseConverter    UnsetBindingValue    ValueConverterBase    ValueConverterGroup    ViewModelToViewConverter    VisibilityConverterBase     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/navigation/",
	"title": "Catel.MVVM.Navigation",
	"tags": [],
	"description": "",
	"content": "   Type Description     ActivityEventArgs    ActivityLifecycleCallbacksListener    NavigatedEventArgs    NavigatingEventArgs    NavigationAdapter    NavigationAdapterBase    NavigationContext    NavigationEventArgsBase    NavigationEventArgsExtensions    NavigationMode    NavigationModeExtensions     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/properties/",
	"title": "Catel.MVVM.Properties",
	"tags": [],
	"description": "",
	"content": "   Type Description      "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/providers/",
	"title": "Catel.MVVM.Providers",
	"tags": [],
	"description": "",
	"content": "   Type Description     DetermineViewModelInstanceEventArgs    DetermineViewModelTypeEventArgs    LogicBase    LogicExtensions    LogicViewModelBehavior    NavigationLogicBase    PageLogic    UnloadBehavior    UserControlLogic    WindowLogic     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/tasks/",
	"title": "Catel.MVVM.Tasks",
	"tags": [],
	"description": "",
	"content": "   Type Description     ActionTask    ITask    ITaskProgressTracker    TaskBase     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/",
	"title": "Catel.MVVM.Views",
	"tags": [],
	"description": "",
	"content": "   Type Description     DataContextChangedEventArgs    FastViewPropertySelector    IDataWindow    INavigationView    IPage    IUserControl    IView    IViewLoadManager    IViewLoadState    IViewManager    IViewManagerExtensions    IViewModelWrapper    IViewPropertySelector    ViewExtensions    ViewLoadEventArgs    ViewLoadManager    ViewLoadStateEvent    ViewManager    ViewModelWrapper    ViewPropertySelector    ViewStack    ViewStackPartEventArgs    ViewToViewModelAttribute    ViewToViewModelMappingType    WeakViewInfo     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/messaging/",
	"title": "Catel.Messaging",
	"tags": [],
	"description": "",
	"content": "   Type Description     CombinedMessage    IMessageMediator    MessageBase    MessageMediator    MessageMediatorHelper    MessageRecipientAttribute    SimpleMessage     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/pooling/",
	"title": "Catel.Pooling",
	"tags": [],
	"description": "",
	"content": "   Type Description     Buffer4096Poolable    BufferPoolableBase    IPoolable    IPoolManager    PoolableBase    PoolManager     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/properties/",
	"title": "Catel.Properties",
	"tags": [],
	"description": "",
	"content": "   Type Description      "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/",
	"title": "Catel.Reflection",
	"tags": [],
	"description": "",
	"content": "   Type Description     AppDomainExtensions    AssemblyExtensions    AssemblyHelper    AssemblyLoadedEventArgs    BindingFlagsHelper    CachedPropertyInfo    CannotGetPropertyValueException    CannotSetPropertyValueException    DelegateExtensions    DelegateHelper    IEntryAssemblyResolver    MemberInfoExtensions    ObjectExtensions    PropertyHelper    PropertyNotFoundException    ReflectionExtensions    StaticHelper    TypeArray    TypeCache    TypeExtensions    TypeHelper    TypeInfo    TypeInfoExtensions     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/",
	"title": "Catel.Runtime",
	"tags": [],
	"description": "",
	"content": "   Type Description     ReferenceEqualityComparer    ReferenceInfo    ReferenceManager    RuntimeBindingRedirect     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/",
	"title": "Catel.Runtime.Serialization",
	"tags": [],
	"description": "",
	"content": "   Type Description     CacheInvalidatedEventArgs    ExcludeFromSerializationAttribute    IFieldSerializable    IncludeInSerializationAttribute    IObjectAdapter    IPropertySerializable    ISerializable    ISerializationConfiguration    ISerializationContext    ISerializationContextExtensions    ISerializationContextInfo    ISerializationContextInfoFactory    ISerializationManager    ISerializationManagerExtensions    ISerializer    ISerializerExtensions    ISerializerModifier    KeyValuePairSerializerModifier    MemberMetadata    MemberSerializationEventArgs    MemberValue    ObjectAdapter    SerializableKeyValuePair    SerializationConfiguration    SerializationContext    SerializationContextHelper    SerializationContextMode    SerializationEventArgs    SerializationFactory    SerializationInfoSerializationContextInfo    SerializationManager    SerializationMemberGroup    SerializationModelInfo    SerializationObject    SerializationScope    SerializeAsCollectionAttribute    SerializeEnumAsStringAttribute    SerializerBase    SerializerModifierAttribute    SerializerModifierBase    SerializeUsingParseAndToStringAttribute     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/binary/",
	"title": "Catel.Runtime.Serialization.Binary",
	"tags": [],
	"description": "",
	"content": "   Type Description     BinarySerializationContextInfo    BinarySerializationContextInfoFactory    BinarySerializer    IBinarySerializer    RedirectDeserializationBinder    RedirectTypeAttribute     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.serialization.json/catel/runtime/serialization/json/",
	"title": "Catel.Runtime.Serialization.Json",
	"tags": [],
	"description": "",
	"content": "   Type Description     CatelJsonContractResolver    CatelJsonConverter    ICustomJsonSerializable    IJsonSerializer    JsonSerializationConfiguration    JsonSerializationContextInfo    JsonSerializationContextInfoFactory    JsonSerializer     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/xml/",
	"title": "Catel.Runtime.Serialization.Xml",
	"tags": [],
	"description": "",
	"content": "   Type Description     DataContractSerializerFactory    ICustomXmlSerializable    IDataContractSerializerFactory    IXmlNamespaceManager    IXmlSerializer    XmlHelper    XmlNamespace    XmlNamespaceManager    XmlSchemaHelper    XmlSchemaManager    XmlSerializationConfiguration    XmlSerializationContextInfo    XmlSerializationContextInfoFactory    XmlSerializer    XmlSerializerOptimalizationMode     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/scoping/",
	"title": "Catel.Scoping",
	"tags": [],
	"description": "",
	"content": "   Type Description     ScopeClosedEventArgs    ScopeManager     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/",
	"title": "Catel.Services",
	"tags": [],
	"description": "",
	"content": "   Type Description     AccelerometerSensorListener    AccelerometerService    AccelerometerValue    AccelerometerValueChangedEventArgs    ApplicationClosingEventArgs    AutoCompletionService    CameraOperationCompletedEventArgs    CameraService    CameraServiceBase    CameraType    ContentReadyEventArgs    DispatcherService    ExportMode    FileServiceBase    FlashMode    IAccelerometerService    IAccelerometerValue    IAutoCompletionService    ICameraService    IDispatcherService    IDispatcherServiceExtensions    IFileSupport    ILanguageService    ILanguageSource    ILocation    ILocationService    IMessageService    INavigationRootService    INavigationService    IObjectConverterService    IObjectConverterServiceExtensions    IOpenFileService    IPleaseWaitService    IPleaseWaitServiceExtensions    IProcessService    IRollingInMemoryLogService    ISaveFileService    ISchedulerService    ISelectDirectoryService    ISensorService    IService    IStartUpInfoProvider    IStartUpInfoProviderExtensions    IState    IStateService    IStateServiceExtensions    IUIVisualizerService    IUIVisualizerServiceExtensions    IVibrateService    IViewExportService    IViewModelService    IViewModelWrapperService    IWrapControlService    LanguageResourceKey    LanguageResourceSource    LanguageService    LanguageServiceBase    Location    LocationChangedEventArgs    LocationListener    LocationService    LocationServiceBase    MessageButton    MessageImage    MessageResult    MessageService    NamingConvention    NavigationHelper    NavigationRootService    NavigationService    NavigationServiceBase    ObjectConverterService    OpenFileService    PageNotRegisteredException    PleaseWaitService    PleaseWaitWorkDelegate    ProcessCompletedDelegate    ProcessService    RollingInMemoryLogService    SaveFileService    SchedulerService    SelectDirectoryService    SensorServiceBase    ServiceBase    Size    StartUpInfoProvider    StateService    UICompletedEventArgs    UIVisualizerService    VibrateService    ViewExportService    ViewModelServiceBase    ViewModelWrapperService    ViewModelWrapperServiceBase    WindowNotRegisteredException    WrapControlService    WrapControlServiceControlNames    WrapControlServiceWrapOptions    WrapOptions     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/test/",
	"title": "Catel.Test",
	"tags": [],
	"description": "",
	"content": "   Type Description     ExceptionTester     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/text/",
	"title": "Catel.Text",
	"tags": [],
	"description": "",
	"content": "   Type Description     StringBuilderExtensions     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/threading/",
	"title": "Catel.Threading",
	"tags": [],
	"description": "",
	"content": "   Type Description     AsyncLock    AsyncWaitQueueExtensions    AwaitableDisposable    DefaultAsyncWaitQueue    IAsyncWaitQueue    ReaderWriterLockSlimExtensions    SynchronizationContext    SynchronizationContextExtensions    TaskExtensions    TaskHelper    TaskShim    Timeout    Timer    TimerCallback     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/",
	"title": "Catel.Windows",
	"tags": [],
	"description": "",
	"content": "   Type Description     ApplicationExtensions    DataContextChangedHelper    DataWindow    DataWindowButton    DataWindowDefaultButton    DataWindowMode    DependencyObjectExtensions    FrameworkElementExtensions    InfoBarMessageControlGenerationMode    PopupHelper    ResourceHelper    UIElementExtensions    Window    WindowExtensions    WrapControlHelper    WrapOptions     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/controls/",
	"title": "Catel.Windows.Controls",
	"tags": [],
	"description": "",
	"content": "   Type Description     ContentPage    ContentView    InfoBarMessageControl    InfoBarMessageControlMode    InfoBarMessageControlVisibilityConverter    Page    PopupLayout    UserControl    ValidationEventAction    ValidationEventArgs    ValidationType    WarningAndErrorValidator     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/data/",
	"title": "Catel.Windows.Data",
	"tags": [],
	"description": "",
	"content": "   Type Description     BindingHelper    BindingWithValidation    DependencyPropertyChangedHelper    DependencyPropertyHelper    DependencyPropertyInfo    DependencyPropertyValueChangedEventArgs     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/input/",
	"title": "Catel.Windows.Input",
	"tags": [],
	"description": "",
	"content": "   Type Description     InputGesture    InputGestureExtensions    KeyboardHelper     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/",
	"title": "Catel.Windows.Interactivity",
	"tags": [],
	"description": "",
	"content": "   Type Description     Authentication    AuthenticationAction    AutoCompletion    AutoScroll    BehaviorBase    BehaviorEventArgs    CommandBehaviorBase    CommandEventTriggerBase    CommandTriggerActionBase    CommandTriggerBase    DelayBindingUpdate    DoubleClickToCommand    DragDrop    EventToCommand    EventTriggerBase    Focus    FocusBehaviorBase    FocusFirstControl    FocusMoment    FocusOnKeyPress    HideUntilViewModelLoaded    IBehavior    ITrigger    KeyPressToCommand    MouseInfo    Navigate    NumericTextBox    RoutedEventTrigger    ScrollDirection    SelectTextOnFocus    TriggerActionBase    TriggerBase    TriggerEventArgs    UpdateBindingBehaviorBase    UpdateBindingOnPasswordChanged    UpdateBindingOnTextChanged    WindowEventToCommand     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/dragdrophelpers/",
	"title": "Catel.Windows.Interactivity.DragDropHelpers",
	"tags": [],
	"description": "",
	"content": "   Type Description      "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/markup/",
	"title": "Catel.Windows.Markup",
	"tags": [],
	"description": "",
	"content": "   Type Description     CommandManagerBinding    LanguageBinding    ServiceDependencyExtension    UpdatableMarkupExtension     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/threading/",
	"title": "Catel.Windows.Threading",
	"tags": [],
	"description": "",
	"content": "   Type Description     DispatcherExtensions    DispatcherHelper     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/xamarin/forms/",
	"title": "Catel.Xamarin.Forms",
	"tags": [],
	"description": "",
	"content": "   Type Description     Application    ArgumentsProxyFactory    IArgumentsProxy     "
},
{
	"uri": "http://docs.catelproject.com/5.1/introduction/platform-support/caveats-in-wpf/",
	"title": "Caveats in WPF",
	"tags": [],
	"description": "",
	"content": "Below are all caveats in WPF.\nKnow caveats? Feel free to add them!\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/getting-started/wpf/creating-the-project/",
	"title": "Creating the WPF project",
	"tags": [],
	"description": "",
	"content": " In this step we will create the project and add the relevant NuGet packages.\nThis guide uses the on-line templates that are available in the Visual Studio gallery. If you can\u0026rsquo;t find the templates on-line, please download them here.\n\rCreating the project To create the project, start Visual Studio and choose File =\u0026gt; New Project\u0026hellip; Then switch to the on-line template section as you can see in the screenshot below and search for Catel:\nPick a good name, in our case WPF.GettingStarted and click OK. The template will now be downloaded and the project will be created.\nAdding the NuGet packages As soon as the project is created, the Readme.txt will be opened and instruct your what to do. Right-click on the solution =\u0026gt; *Manage NuGet packages\u0026hellip; *Then search for Catel.Extensions.Controls and click Install.\nRunning the project Now the NuGet packages are installed, the project is created and can be built. The basics are created and the application is ready:\nExplanation of the project structure The project template creates the project structure that fits best with Catel. Below is an explanation of the new project structure:\nThe ViewModels folder contains the MainWindowViewModel, which contains the logic for the interaction with the MainWindow view.\nThe Views folder contains the MainWindow, which represents the actual view.\nThis structure ties to how Catel implements viewmodel location. You do not however have to follow this structure and could for example decide to place both the View and ViewModel under the same namespace/folder and implement a custom IViewModelLocator.\nUp next Creating the models\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/getting-started/xamarin-forms/creating-the-project/",
	"title": "Creating the Xamarin.Forms project",
	"tags": [],
	"description": "",
	"content": "In this step we will create the project and add the relevant NuGet packages.\nThis documentation is work in progress\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/serialization/customizing-serialization/customizing-serialization-engines/",
	"title": "Customizing the serialization engines",
	"tags": [],
	"description": "",
	"content": "Since the SerializerBase does all the heavy lifting, it is very easy to customize the behavior of an existing serializer or create a completely new one. Each serializer implements its own interface and are registered in the *ServiceLocator *using the following interfaces:\n XmlSerializer =\u0026gt; IXmlSerializer BinarySerializer =\u0026gt; IBinarySerializer  To customize a serializer, derive from an existing class and customize a method. The serializer below makes sure that specific members are never serialized. It keeps all other serialization logic intact.\npublic class SafeXmlSerializer : XmlSerializer { protected override bool ShouldIgnoreMember(ModelBase model, PropertyData property) { if (model is SecurityModel) { if (string.Equals(property.Name, \u0026quot;Password\u0026quot;)) { return true; } } return base.ShouldIgnoreProperty(model, property); } }  The only thing to do now is to register this custom instance in the ServiceLocator:\nServiceLocator.Default.RegisterType\u0026lt;IXmlSerializer, SafeXmlSerializer\u0026gt;();  The following methods on the serializer classes might be of interest when customizing the serialization:\n ShouldIgnoreProperty\n BeforeSerialization\n BeforeSerializeProperty\n AfterSerializeProperty\n AfterSerialization\n BeforeDeserialization\n BeforeDeserializeProperty\n AfterDeserializeProperty\n AfterDeserialization\n  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/ioc/dependency-injection/",
	"title": "Dependency injection",
	"tags": [],
	"description": "",
	"content": " The ServiceLocator in Catel supports dependency injection.\nIntroduction to dependency injection Some people make dependency injection hard to understand, or maybe they don\u0026rsquo;t understand it themselves. Dependency injection simply means that instead of hard referencing or instantiating other classes (dependendies), the dependencies are injected into the class via the constructor.\nExample 1: bad, instantiates the dependencies itself\npublic class MyClass { private IFirstDependency _firstDependency; private ISecondDependency _secondDependency; public MyClass() { _firstDependency = new FirstDependency(); _secondDependency = new SecondDependency(); } }  Example 2: good, retrieves the dependencies via the service locator\npublic class MyClass { private IFirstDependency _firstDependency; private ISecondDependency _secondDependency; public MyClass() { _firstDependency = ServiceLocator.Instance.ResolveType\u0026lt;IFirstDependency\u0026gt;(); _secondDependency = ServiceLocator.Instance.ResolveType\u0026lt;ISecondDependency\u0026gt;(); } }   Example 3: good, gets the dependencies injected\npublic class MyClass { private IFirstDependency _firstDependency; private ISecondDependency _secondDependency; public MyClass(IFirstDependency firstDependency, ISecondDependency secondDepdenceny) { Argument.IsNotNull(\u0026quot;firstDependency\u0026quot;, firstDependency); Argument.IsNotNull(\u0026quot;secondDependency\u0026quot;, secondDependency); _firstDependency = firstDependency; _secondDependency = secondDependency; } }  There are other ways of using dependency injection, for example via attributes. This documentation will focus on dependency injection via the constructor only\n\rUsing dependency injection in Catel Constructor injection Dependency injection via the ServiceLocator in Catel is enabled by default. This means that when a type is resolved from the container, it will automatically use dependency injection to construct the type if it is not registered as instance.\nIt will first search for all available constructors on the type that will be instantiated. Then, for each constructor, starting with the one with the most parameters, it will try to retrieve all values. If one fails, it will go to the next. If all fail, it will try to use the default constructor without parameters. If that fails as well, then the type cannot be constructed and an exception will be thrown.\nTo get a better understanding of what happens, see the class below:\npublic class MyClass { private IFirstDependency _firstDependency; private ISecondDependency _secondDependency; public MyClass() : this(null) { } public MyClass(IFirstDependency firstDependency) : this(firstDependency, null) { } public MyClass(IFirstDependency firstDependency, ISecondDependency secondDependency) { _firstDependency = firstDependency; _secondDependency = secondDependency; } }  When the MyClass will be retrieved from the ServiceLocator, this will happen:\n Find constructor with most parameters (the one with both firstDependency and secondDependency). If both IFirstDependency and ISecondDependency can be resolved from the ServiceLocator, the type will be constructed with the constructor. Otherwise it will proceed with step 2. Find next constructor with most parameters (the one with only firstDependency). If IFirstDependency can be resolved from the ServiceLocator, the type will be constructed with the constructor. Otherwise it will proceed with step 3. At this point, no constructor could be used. In this case, the ServiceLocator will try to use the default constructor (the one without parameters) as last resort to instantiate the type.  Manually defining the constructor to use for dependency injection Catel first sorts the constructors based on the number of parameters. Then it will \u0026ldquo;sub-sort\u0026rdquo; the same number of parameters and puts parameters with Object and DynamicObject as last so it will first try all constructors with the best possible matches\nIf Catel is still unable to pick the right constructor in a class, this behavior can be overridden by decorating the constructor with the DependencyInjectionConstructor attribute:\npublic MyClass(IPerson person) { } [InjectionConstructor] public MyClass(Person person) { // Catel will now first try to use this constructor, no matter the order or number of parameters }  Advanced dependency injection Starting with Catel 3.7, a new type of dependency injection is supported. It allows a developer to instantiate types that combine custom constructor injection with dependency injection. The class belows shows an interesting combination of custom values that need to be injected and dependencies that can be retrieved from the IoC container. Before Catel 3.7, one had to manually retrieve the dependencies from the IoC container when it also required other dependencies to be injected that were not registered in the IoC container:\npublic class PersonViewModel : ViewModelBase { private readonly IMessageService _messageService; private readonly IProcessService _processService; public PersonViewModel(IPerson person) { Argument.IsNotNull(() =\u0026gt; person); Person = person; _messageService = ServiceLocator.Default.ResolveType\u0026lt;IMessageService\u0026gt;(); _processService = ServiceLocator.Default.ResolveType\u0026lt;IProcessService\u0026gt;(); } ... }  With the new technology, such a constructor can be rewritten to truly support dependency injection:\npublic class PersonViewModel : ViewModelBase { private readonly IMessageService _messageService; private readonly IProcessService _processService; public PersonViewModel(IPerson person, IMessageService messageService, IProcessService processService) { Argument.IsNotNull(() =\u0026gt; person); Argument.IsNotNull(() =\u0026gt; messageService); Argument.IsNotNull(() =\u0026gt; processService); Person = person; _messageService = messageService; _processService = processService } ... }  This feature is initially written to support dependency injection in combination with nested user controls\n\rThe advanced dependency injection can be used by using the TypeFactory class. Below is an example on how to create a new type using advanced dependency injection:\nvar personViewModel = TypeFactory.Default.CreateInstanceWithParametersAndAutoCompletion\u0026lt;PersonViewModel\u0026gt;(new Person());  As you can see it is only required to pass in the objects that are not registered in the IoC container. All other dependencies will be automatically resolved from the ServiceLocator.\nNote that the order of the parameters must be the same as the constructor, otherwise the TypeFactory cannot determine the right constructor to use\n\rProperty injection Starting with Catel 3.8, it is also possible to use property injection. The difference with constructor injection is that the TypeFactory will automatically set up all properties that required dependency injection.\nNote that the Catel team recommends using constructor injection over property injection. Property injection looks like a silver bullet, but is very tricky because:\n1) It does not allow you to check for null values and store dependencies in private fields (when)?\n2) Dependency Injection is just a technique. When using a constructor, you can force a user to provide the value and check the input. With property injection, you can only hope that the user will set them for you, there is no way to check this (unless that is some after constructor and dependency injection initialization routine. This is never the case if a user manually creates a type though.\n\rTo use property injection, simply decorate the properties of a class with the Inject attribute. Below are several options:\nType is automatically determined based on property type public class MyClass { [Inject] public IMyDependency MyDependency { get; set; } }  Type is manually defined public class MyClass { [Inject(typeof(IMySubclassedDependency))] public IMyDependency MyDependency { get; set; } }  Using tags It is also possible to determine the tag of a registered dependency:\npublic class MyClass { [Inject(Tag = \u0026quot;myTag\u0026quot;)] public IMyDependency MyDependency { get; set; } }  Disabling dependency injection  Maybe you don\u0026rsquo;t want dependency injection because it does not give you what you need or you want a very, very small improvement in performance. In that case, the dependency injection can be disabled using the code below:\nServiceLocator.Default.SupportedDependencyInjection = false  "
},
{
	"uri": "http://docs.catelproject.com/5.1/introduction/mvvm/different-interpretations-of-mvvm/",
	"title": "Different interpretations of MVVM",
	"tags": [],
	"description": "",
	"content": " There are two different interpretations of MVVM, the \u0026ldquo;purist\u0026rdquo; way where the model is protected, or the \u0026ldquo;shortcut\u0026rdquo; way where the view model only provides the instance of the model and the view then binds directly to the model.\nShortcut interpretation This is what most people do. The view model implements the model, and then provides the model to the view. The view then binds directly to the model.\n Advantages\n Easy to use Fast since view model hardly contains any properties  Disadvantages\n Always need to bind to Model.[PropertyName], but for view model properties it\u0026rsquo;s just [PropertyName], might be confusing Less control over validation (you cannot insert logic between View \u0026lt;=\u0026gt; Model where MVVM is all about  Purist interpretation This is what the developers of Catel strongly believe in. It requires a bit more code, but gives great freedom and control and protection of the model because all bindings go through the view model.\n Advantages\n Full contol and freedom, you can inject both logic and validation between view and model (what MVVM is actually about) Everything is available on the view model, no need for \u0026ldquo;sub-bindings\u0026rdquo; (such as Model.[PropertyName]) Protection of your model from the view  Disadvantages\n Needs a bit more code (but thanks to code snippets and the Expose attribute, this is not a big disadvantage)\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/faq/general/",
	"title": "General",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://docs.catelproject.com/5.1/setup-deployment/getting-prerelease-versions-via-nuget/",
	"title": "Getting prerelease (beta) versions via NuGet &amp; MyGet",
	"tags": [],
	"description": "",
	"content": " Adding the custom package source Starting with Catel v5, the alpha prereleases are only available on the MyGet feed for Catel. Therefore you must first add the custom url to the NuGet Package Manager. The easiest way to do this is via Visual Studio.\n\r Go to Tools =\u0026gt; NuGet Package Manager =\u0026gt; Package Manager Settings Select Package Sources Click the + button at the right top and use the following values at the bottom: Name: MyGet - Catel Source: https://www.myget.org/F/catel/api/v3/index.json  Installing via package manager Please make sure to select the same settings as in the screenshow below:\nInstalling via package manager console This example installs Catel.MVVM as a package. However, to install other packages simple change the ID (name) of the package.\nInstalling the latest beta\nInstall-Package Catel.MVVM –IncludePrerelease  Installing a specific beta\nInstall-Package Catel.MVVM –IncludePrerelease -version 5.0.0-unstable0532  Updating to the latest beta\nUpdate-Package Catel.MVVM –IncludePrerelease  Updating to a specific beta\nUpdate-Package Catel.MVVM –IncludePrerelease -version 5.0.0-unstable0532  Updating to the latest stable version\nUpdate-Package Catel.MVVM  "
},
{
	"uri": "http://docs.catelproject.com/5.1/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Welcome to the introduction of Catel. Catel is a framework (or enterprise library, just use whatever you like) with data handling, diagnostics, logging, WPF controls, and an MVVM-framework. So Catel is more than \u0026ldquo;just\u0026rdquo; another MVVM-framework or some nice Extension Methods that can be used. It\u0026rsquo;s more like a library that you want to include in all the XAML applications you are going to develop in the near future.\nCatel is primarily meant for Line of Business (LoB) applications\n\rIt\u0026rsquo;s important to realize that Catel is not just another Extension Methods library, nor only an MVVM-framework, but it is a combination of basic data handling, useful controls, and an MVVM-framework.\nWhy another framework? You might be thinking: why another framework, there are literally thousands of them out there. Well, first of all, thousands of them is quite a lot, let\u0026rsquo;s just say there are hundreds of them. A few years ago, the lead developer of Catel was using serialization to serialize data from/to disk. But, as he noticed, he had to take care of different versions after every release. After every release, he had to take care of the serialization and backwards compatibility. Also, he had to implement some very basic interfaces (such as INotifyPropertyChanged) for every data object. Then, he decided to write a base class for data handling which can take care of different versions and serialization by itself, and implements the most basic interfaces of the .NET Framework out of the box. The article was published on CodeProject as DataObjectBase.\nThen, he was working on a WPF project with five other developers and needed an MVVM-framework since the application was not using MVVM at the moment. Writing an MVVM-framework was no option because there were so many other frameworks out there. But, after looking at some Open-Source MVVM-frameworks (such as the excellent Cinch framework, which was the best one we could find), none of them seemed to be a real option. Creating the View Models was too much work, and the View Models still contained lots of repetitive code in, for example, the property definitions. After taking a closer look at the source code of Cinch and other frameworks, the lead developer thought: if we use the DataObjectBase published before as the base for a View Model class, it should be possible to create a framework in a very short amount of time.\nThen, all other developers of the team he was working on the project got enthusiastic, and then the whole team decided to merge their personal libraries into one big enterprise library, and Catel was born.\nWhy use this framework? Before reading any further, it\u0026rsquo;s important to know why you should use the framework. Below are a few reasons why Catel might be interesting for you:\n Catel is Open-Source. This way, you can customize it any way you want. If you want a new feature request, and the team does not respond fast enough, you can simply implement it yourself. The codebase for Catel is available on GitHub. This way, you have the option to either download the latest stable release, or live on the edge by downloading the latest source code. Catel uses unit tests to make sure that new updates do not break existing functionality. Catel is very well documented. Every method and property has comments, and the comments are available in a separate reference help file. There is also a lot of documentation available, and in the future, in-depth articles will be written. Catel is developed by a group of talented software developers, and is heavily under development. This is a great advantage because the knowledge is not at just one person, but at a whole group. The developers of Catel all have more than three years of development experience with WPF, and are using Catel in real life applications for at least 2 years.  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/logging/log-listeners/",
	"title": "Log listeners",
	"tags": [],
	"description": "",
	"content": "\r\rBatch log listeners\r\r\rConsoleLogListener\r\r\rDebugLogListener\r\r\rEvent Tracing for Windows (ETW)\r\r\rEventLogListener\r\r\rFileLogListener\r\r\rRollingInMemoryLogListener\r\r\rSeqLogListener\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/messaging/messagebase/",
	"title": "MessageBase",
	"tags": [],
	"description": "",
	"content": " The MessageMediator is a very powerful class to send messages to other objects inside an application. However, it can sometimes by cumbersome to register and create messages. Therefore the MessageBase class is a very nice convenience class to create messages and allow easier registration.\nThe MessageBase provides the following additional functionality out of the box:\n Send messages with data without instantiating a message Register message handlers Unregister message handlers  Creating messages based on the MessageBase  It is very easy to create a new message. The message below is a message that contains a string and this little class provides lots of capabilities.\npublic class DemoMessage : MessageBase\u0026lt;DemoMessage, string\u0026gt; { public DemoMessage() { } public DemoMessage(string content) : base(content) { } }  Note that the message needs an empty constructor\n\r## Sending messages\nA user can send a message by using the following code:\nDemoMessage.SendWith(\u0026quot;hello world\u0026quot;);  Registering to messages\n A class that is interested in message can register to a message using the Register method:\nDemoMessage.Register(this, OnDemoMessage);  Unregistering from messages DemoMessage.Unregister(this, OnDemoMessage);  Instantiating a message with data The MessageBase class can also instantiate messages by using the With method:\nvar message = DemoMessage.With(\u0026quot;hello world\u0026quot;);  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/data-handling/observableobject/",
	"title": "ObservableObject",
	"tags": [],
	"description": "",
	"content": "The ObservableObject is a very lightweight class that only implements the INotifyPropertyChanging and INotifyPropertyChanged interfaces. This class is ideal for simple objects that only need property notification. Below is an example:\npublic class Person : ObservableObject { private string _firstName; private string _middleName; private string _lastName; public Person(string firstName, string middleName, string lastName) { FirstName = firstName; MiddleName = middleName; LastName = lastName; } public string FirstName { get { return _firstName; } set { RaisePropertyChanging(() =\u0026gt; FirstName); var oldValue = _firstName; _firstName = value; RaisePropertyChanged(() =\u0026gt; FirstName, oldValue, value); } } public string MiddleName { get { return _middleName; } set { RaisePropertyChanging(() =\u0026gt; MiddleName); var oldValue = _middleName; _middleName = value; RaisePropertyChanged(() =\u0026gt; MiddleName, oldValue, value); } } public string LastName { get { return _lastName; } set { RaisePropertyChanging(() =\u0026gt; LastName); var oldValue = _lastName; _lastName = value; RaisePropertyChanged(() =\u0026gt; LastName, oldValue, value); } } }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/getting-started/quick-introduction-for-developers/",
	"title": "Quick introduction for developers",
	"tags": [],
	"description": "",
	"content": " This is a quick introduction for developers who don\u0026rsquo;t have a lot of time to read all the docs. This document contains the absolute basics of what a developer needs to know.\nCore This pare contains the core functionality of Catel and what you should know when using Catel.\nLogging / debugging If you ever think Catel is behaving strange or does not work as expected, make sure to enable the logging. Below is an example on how to enable the logging:\n#if DEBUG LogManager.RegisterDebugListener(); #endif  Catel will then log everything to the output window and provide all the information about its internals.\nFor more information, read about logging.\nCatel properties All properties in classes deriving from ModelBase (thus also ViewModelBase) require a special property definition.\nNormally one would write something like this:\nprivate string _firstName; public string FirstName { get { return _firstName; } set { RaisePropertyChanging(\u0026quot;FirstName\u0026quot;); _firstName = value; RaisePropertyChanged(\u0026quot;FirstName\u0026quot;); } }  In Catel one should write this:\npublic string FirstName { get { return GetValue\u0026lt; string\u0026gt;(FirstNameProperty); } set { SetValue(FirstNameProperty, value); } } public static readonly PropertyData FirstNameProperty = RegisterProperty(\u0026quot;FirstName\u0026quot;, typeof(string), null);  Catel will automatically take care of change notifications.\nNote that you can use the modelprop or vmprop to easily create these properties using code snippets. You can also use Catel.Fody instead\nMVVM This part is especially meant for the MVVM part.\nHandling of viewmodels In other MVVM frameworks, you are obliged to set the data context of a view manually. It will look something like this:\nvar view = new PersonView(); view.DataContext = new PersonViewModel();  Catel automatically resolves the right view model based on the view. If a view is created, Catel automatically creates the view model:\nvar view = new PersonView(); // view model is automatically created  It goes even further. Catel can create view models based on the data context. For more information, read nested user controls.\nHandling hierarchy and parent/child view models Note that Catel is already fully aware of parent/child relations of view models so you don’t have to do anything for this yourself. For more information, read nested user controls.\nResolving views and view models Catel resolves views and view models by naming convention. This means that based on the name of a view, the view model can be determined. This also works the other way around where the view model can be determined based on the view. For more information, read about naming conventions.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/ioc/introduction-to-components/servicelocator/",
	"title": "ServiceLocator",
	"tags": [],
	"description": "",
	"content": " The ServiceLocator services as the container inside Catel.\nInternally it uses the TypeFactory as instantiator for the services.\nCatel uses it\u0026rsquo;s own ServiceLocator implementing the IServiceLocator to gather all services required by Catel. For example, default services are the IPleaseWaitService and the IUIVisualizerService. By default, when the first view model is instantiated, Catel registers all default out of the box services to the ServiceLocator. However, it only does this when the specific services are not already registered. This allows an end-developer to register his/her own implementations of the services before any view model is instantiated (for example, at application startup).\nThe ServiceLocator can be instantiated, but Catel instantiates one instance that can be used and shared amongst all objects inside the same AppDomain. The ServiceLocator can be retrieved by using ServiceLocator.Default.\nFor more information how types are instantiated and dependency injection, take a look at the TypeFactory documentation\n\rRegistering a type Use the following code to register a specific type in the ServiceLocator:\nServiceLocator.Default.RegisterType\u0026lt;IPleaseWaitService, PleaseWaitService\u0026gt;();  Registering a late-bound type Use the following code to register a late-bound type in the ServiceLocator:\nServiceLocator.Default.RegisterType\u0026lt;IPleaseWaitService\u0026gt;(x =\u0026gt; new PleaseWaitService());  Registering an instance of a type Catel uses the TypeFactory or Activator.CreateInstance to create the interface implementations when the object is first resolved. However, sometimes a service constructor requires parameters or takes a long time to construct. In such cases, it is recommended to create the type manually and register the instance of the type:\nvar pleaseWaitService = new PleaseWaitService(); ServiceLocator.Default.RegisterInstance\u0026lt;IPleaseWaitService\u0026gt;(pleaseWaitService);  Registering a type via MissingType event The ServiceLocator gives the end-developer a last-resort chance to register a type when it is not registered in the ServiceLocator or any of the external containers. This event is very useful for logging (then the developer in the log knows exactly what type is missing from the IoC container) or it can be used to determine at runtime in a very late stage what implementation of the service must be used. To register a type via the event, subscribe to the event and then use the following code:\nprivate void OnMissingType(object sender, MissingTypeEventArgs e) { if (e.InterfaceType == typeof(IPleaseWaitService)) { // Register an instance e.ImplementingInstance = new PleaseWaitService(); // Or a type e.ImplementingType = typeof(PleaseWaitService); } }  If both the ImplementingInstance and ImplementingType are filled, the ImplementingIntance will be used.\nResolving a type To retrieve the implementation of a service, use the following code:\nvar pleaseWaitService = ServiceLocator.Default.ResolveType\u0026lt;IPleaseWaitService\u0026gt;();  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/serialization/specifying-what-gets-serialized/",
	"title": "Specifying what gets serialized",
	"tags": [],
	"description": "",
	"content": " By default, Catel only serializes the defined Catel properties on the ModelBase or any deriving classes. It is possible to customize this behavior. Below is a class which will be used in all examples:\npublic class MyModel : ModelBase { private string _fieldValue; public string RegularProperty { get; set; } public string CatelProperty { get { return GetValue\u0026lt;string\u0026gt;(CatelPropertyProperty); } set { SetValue(CatelPropertyProperty, value); } } public static readonly PropertyData CatelPropertyProperty = RegisterProperty(\u0026quot;CatelProperty\u0026quot;, typeof(string), null); }  Member name|Gets serialized -|- _fieldValue|false RegularProperty|false CatelProperty|true\nIncluding fields and properties using IncludeInSerialization attribute To include fields or regular properties on an object, use the following code:\npublic class MyModel : ModelBase { [IncludeInSerialization] private string _fieldValue; [IncludeInSerialization] public string RegularProperty { get; set; } public string CatelProperty { get { return GetValue\u0026lt;string\u0026gt;(CatelPropertyProperty); } set { SetValue(CatelPropertyProperty, value); } } public static readonly PropertyData CatelPropertyProperty = RegisterProperty(\u0026quot;CatelProperty\u0026quot;, typeof(string), null); }  Member name|Gets serialized -|- _fieldValue|true RegularProperty|true CatelProperty|true\nNote that private members can only be serialized in full .NET, not in limited platforms such as UWP\n\rExcluding fields and properties using ExcludeFromSerialization attribute To exclude Catel properties on an object, use the following code:\npublic class MyModel : ModelBase { private string _fieldValue; public string RegularProperty { get; set; } [ExcludeFromSerialization] public string CatelProperty { get { return GetValue\u0026lt;string\u0026gt;(CatelPropertyProperty); } set { SetValue(CatelPropertyProperty, value); } } public static readonly PropertyData CatelPropertyProperty = RegisterProperty(\u0026quot;CatelProperty\u0026quot;, typeof(string), null); }  Member name|Gets serialized -|- _fieldValue|false RegularProperty|false CatelProperty|false\nSerializing a ModelBase as collection There is a very edge case that a class derives from ModelBase, but also implements IList\u0026lt;T\u0026gt;. In this case, it\u0026rsquo;s hard for the serializers to determine what to do. By default, it will treat the model as a Catel model (since it can contain more properties than just the Items property. If such a class should be serialized as collection (meaning it will only serialize the Items property), decorate it with the SerializeAsCollection attribute:\n [SerializeAsCollection] public class MyModel : ModelBase, IList\u0026lt;int\u0026gt; { // implementation left out for readability }  Implementing a custom ISerializationManager Internally Catel uses a default implementation of the ISerializationManager to determine what members of a type should be serialized. It is possible to customize this behavior by overriding a single method or by creating a brand new type. Below is an example which always excludes Password properties and fields from serialization.\npublic class SafeSerializationManager : SerializationManager { public override HashSet\u0026lt;string\u0026gt; GetFieldsToSerialize(Type type) { var fieldsList = new List\u0026lt;string\u0026gt;(base.GetFieldsToSerialize(type)); for (int i = 0; i \u0026lt; fieldsList.Count; i++) { if (string.Equals(fieldsList[i], \u0026quot;_password\u0026quot;)) { fieldsList.RemoveAt(i--); } } return new HashSet\u0026lt;string\u0026gt;(fieldsList); } public override HashSet\u0026lt;string\u0026gt; GetPropertiesToSerialize(Type type) { var propertiesList = new List\u0026lt;string\u0026gt;(base.GetPropertiesToSerialize(type)); for (int i = 0; i \u0026lt; propertiesList.Count; i++) { if (string.Equals(propertiesList[i], \u0026quot;Password\u0026quot;)) { propertiesList.RemoveAt(i--); } } return new HashSet\u0026lt;string\u0026gt;(propertiesList); } }  Don\u0026rsquo;t forget to register it in the ServiceLocator as well:\nvar serviceLocator = ServiceLocator.Default; serviceLocator.RegisterType\u0026lt;ISerializationManager, SafeSerializationManager\u0026gt;();  "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/system/componentmodel/",
	"title": "System.ComponentModel",
	"tags": [],
	"description": "",
	"content": "   Type Description     BeginEditEventArgs    CancelEditCompletedEventArgs    CancelEditEventArgs    EditEventArgs    EndEditEventArgs    IAdvancedEditableObject    IDataErrorInfo    IDataWarningInfo    INotifyDataWarningInfo    PropertyChangedEventArgsExtensions     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/system/reflection/",
	"title": "System.Reflection",
	"tags": [],
	"description": "",
	"content": "   Type Description     BindingFlags     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/system/windows/",
	"title": "System.Windows",
	"tags": [],
	"description": "",
	"content": "   Type Description     Visibility     "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/ioc/automatic-type-registration/using-attributes/",
	"title": "Using attributes",
	"tags": [],
	"description": "",
	"content": " The ServiceLocator in Catel can be set up to discover attribute based registration. Declaring a registration since the type definition There is a way to automatically register types into a service locator. Using ServiceLocatorRegistrationAttribute it is possible to register types into the service locator in a declarative way. The following code shows how use this attribute:\n[ServiceLocatorRegistration(typeof(IMyClass))] public class MyClass : IMyClass { }  All registration options are available in attribute based registration, such as registration type and tag, as ServiceLocatorRegistrationAttribute constructor arguments. The following code shows how use such options (it registers the MyClass using the IMyClass interface in a transient way (new type every time it is resolved) using the tag MyTag:\n[ServiceLocatorRegistration(typeof(IMyClass), RegistrationType.Transient, \u0026quot;MyTag\u0026quot;)] public class MyClass : IMyClass { }  Activating service locator to scan for automatically registration By default the service locator doesn\u0026rsquo;t scan for automatic registration. In order to activate this you should set AutoRegisterTypesViaAttributes to true.\nvar serviceLocator = ServiceLocator.Default; serviceLocator.AutoRegisterTypesViaAttributes = true;  "
},
{
	"uri": "http://docs.catelproject.com/5.1/setup-deployment/code-snippets-templates/using-the-code-snippets/",
	"title": "Using the code snippets",
	"tags": [],
	"description": "",
	"content": "This part of the documentation explains all the code snippets.\nCode snippet|Explanation -|- modelobject|Defines a model using the ModelBase class. modelprop|Defines a new property on a model class. modelpropchanged|Defines a new property with change notification on a model class. vm|Defines a new view model. vmcommand|Defines a new view model command with only an executed action. vmcommandwithcanexecute|Defines a new view model command with an executed action, but also a canexecute function. vmprop|Defines a new property on a view model. vmpropmodel|Defines a new property on a view model and decorates it with the ModelAttribute. vmpropviewmodeltomodel|Defines a new property on a view model and decorates it with the ViewModelToModelAttribute.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/validation/validation-via-validate-method/",
	"title": "Validation via validate methods",
	"tags": [],
	"description": "",
	"content": "The ViewModelBase derives from ModelBase, thus all information here also applies to the ViewModelBase\n\rThe easiest way to implement validation is to override the ValidateFields and ValidateBusinessRules methods. Below is an example of an implementation of the ValidateFields method:\nprotected override void ValidateFields(List\u0026lt;IFieldValidationResult\u0026gt; validationResults) { if (string.IsNullOrEmpty(FirstName)) { validationResults.Add(FieldValidationResult.CreateError(FirstNameProperty, \u0026quot;First name is required\u0026quot;)); } if (string.IsNullOrEmpty(LastName)) { validationResults.Add(FieldValidationResult.CreateError(LastNameProperty, \u0026quot;Last name is required\u0026quot;)); } if (Gender == Gender.Unknown) { validationResults.Add(FieldValidationResult.CreateError(GenderProperty, \u0026quot;Gender cannot be unknown\u0026quot;)); } }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/exception-handling/wpf-implementation-for-exception-handling/",
	"title": "WPF implementation for exception handling",
	"tags": [],
	"description": "",
	"content": " Creating a watcher The watcher below is a self-managed watcher that takes care of exception handling in case of unhandled exceptions in both the AppDomain and Dispatcher.\npublic class ExceptionWatcher { private static readonly ILog Log = LogManager.GetCurrentClassLogger(); private readonly IExceptionService _exceptionService; private readonly IMessageService _messageService; public ExceptionWatcher(IExceptionService exceptionService, IMessageService messageService) { Argument.IsNotNull(() =\u0026gt; exceptionService); Argument.IsNotNull(() =\u0026gt; messageService); _exceptionService = exceptionService; _messageService = messageService; exceptionService.Register\u0026lt;Exception\u0026gt;(async exception =\u0026gt; { await _messageService.ShowAsync(\u0026quot;An unknown exception occurred, please contact the developers\u0026quot;); }); var appDomain = AppDomain.CurrentDomain; appDomain.FirstChanceException += OnAppDomainFirstChanceException; appDomain.UnhandledException += OnAppDomainUnhandledException; var dispatcher = DispatcherHelper.CurrentDispatcher; if (dispatcher != null) { dispatcher.UnhandledException += OnDispatcherUnhandledException; } } private void OnAppDomainFirstChanceException(object sender, FirstChanceExceptionEventArgs e) { //var exception = e.Exception; //if (exception != null) //{ // _exceptionService.HandleException(exception); //} } private void OnAppDomainUnhandledException(object sender, UnhandledExceptionEventArgs e) { var exception = e.ExceptionObject as Exception; if (exception != null) { Log.Error(exception, \u0026quot;AppDomain.UnhandledException occurred\u0026quot;); _exceptionService.HandleException(exception); } } private void OnDispatcherUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e) { var exception = e.Exception; if (exception != null) { Log.Error(exception, \u0026quot;Dispatcher.UnhandledException occurred\u0026quot;); if (_exceptionService.HandleException(exception)) { e.Handled = true; } } } }  Registering the exception watcher In order for this exception handler to work, you need to register it so it stays alive in the application. Use the code below:\nvar serviceLocator = ServiceLocator.Default; serviceLocator.RegisterTypeAndInstantiate\u0026lt;ExceptionWatcher\u0026gt;();  "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/caching/policies/absoluteexpirationpolicy/",
	"title": "AbsoluteExpirationPolicy",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Caching.Policies   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class AbsoluteExpirationPolicy : ExpirationPolicy  Base types ExpirationPolicy\nThe cache item will expire on the absolute expiration date time.\nConstructors Properties IsExpired Gets a value indicating whether is expired.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/accelerometersensorlistener/",
	"title": "AccelerometerSensorListener",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on Xamarin - Android    public class AccelerometerSensorListener : Object  Base types Object\nSensor listener for the accelerometer.\nEvents SensorChanged Invoked when the sensor value has changed.\nMethods OnAccuracyChanged(Sensor sensor, SensorStatus accuracy) Called when the accuracy of a sensor has changed.\nParameters    Name Description     sensor The sensor.   accuracy The new accuracy of this sensor.    OnSensorChanged(SensorEvent e) Called when sensor values have changed.\nParameters    Name Description     e the``.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/accelerometerservice/",
	"title": "AccelerometerService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class AccelerometerService : IAccelerometerService, SensorServiceBase\u0026lt;IAccelerometerValue, AccelerometerValueChangedEventArgs\u0026gt;  Base types SensorServiceBase\nBase types\nIAccelerometerService\nImplementation of the IAccelerometerService.\nConstructors AccelerometerService(IDispatcherService dispatcherService) Initializes a new instance of the AccelerometerService class.\nParameters    Name Description     dispatcherService The dispatcher service.    Methods Start() Starts the sensor service so it\u0026rsquo;s retrieving data.\nStop() Stops the sensor service so it\u0026rsquo;s no longer retrieving data.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/accelerometervalue/",
	"title": "AccelerometerValue",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class AccelerometerValue : IAccelerometerValue  Base types\nIAccelerometerValue\nAccelerometer reading value.\nConstructors AccelerometerValue(DateTimeOffset timestamp, double x, double y, double z) Initializes a new instance of the AccelerometerValue class.\nParameters    Name Description     timestamp The timestamp.   x The X coordinate.   y The Y coordinate.   z The Z coordinate.    Properties Timestamp Gets the timestamp.\nX Gets the X coordinate.\nY Gets the Y coordinate.\nZ Gets the Z coordinate.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/accelerometervaluechangedeventargs/",
	"title": "AccelerometerValueChangedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class AccelerometerValueChangedEventArgs : EventArgs  Base types EventArgs\nimplementation which contains a new accelerometer value.\nConstructors AccelerometerValueChangedEventArgs(IAccelerometerValue newValue) Initializes a new instance of the AccelerometerValueChangedEventArgs class.\nParameters    Name Description     newValue The new accelerometer value.    Exceptions    Name Description     ArgumentNullException The newValue isnull.    Properties Value Gets the new accelerometer value.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/tasks/actiontask/",
	"title": "ActionTask",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Tasks   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ActionTask : TaskBase  Base types TaskBase\nThe action task.\nFields Constructors ActionTask(string name, Action action) Initializes a new instance of the ActionTask class.\nParameters    Name Description     name The name.   action The action.    Exceptions    Name Description     System.ArgumentNullException The action isnull.    Methods Execute() The execute.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/android/app/activity/",
	"title": "Activity",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Android.App   Available on Xamarin - Android    public class Activity : IPage, Activity  Base types Activity\nBase types\nIPage\nView implementation that automatically takes care of view models.\nFields Constructors Activity() Initializes a new instance of the Activity class.\nProperties DataContext Gets or sets the data context.\nIsEnabled Gets or sets a value indicating whether the view is enabled.\nPreventViewModelCreation Gets or sets a value indicating whether the view model container should prevent the creation of a view model. This property is very useful when using views in transitions where the view model is no longer required.\nTag Gets or sets the tag.\nViewModel Gets the view model that is contained by the container.\nViewModelType Gets the type of the view model that this user control uses.\nEvents DataContextChanged Occurs when the data context has changed.\nLoaded Occurs when the view is loaded.\nPropertyChanged Occurs when a property on the container has changed.\nRemarks This event makes it possible to externally subscribe to property changes of a view (mostly the container of a view model) because the .NET Framework does not allows us to.\nUnloaded Occurs when the view is unloaded.\nViewModelChanged Occurs when the ViewModel property has changed.\nViewModelPropertyChanged Occurs when a property on the ViewModel has changed.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/navigation/activityeventargs/",
	"title": "ActivityEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Navigation   Available on Xamarin - Android    public class ActivityEventArgs : EventArgs  Base types EventArgs\nEvent args for the activity.\nConstructors ActivityEventArgs(Activity activity) Initializes a new instance of the ActivityEventArgs class.\nParameters    Name Description     activity The activity.    Properties Activity Gets the activity.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/navigation/activitylifecyclecallbackslistener/",
	"title": "ActivityLifecycleCallbacksListener",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Navigation   Available on Xamarin - Android    public class ActivityLifecycleCallbacksListener : Object  Base types Object\nActivityLifecycleCallbacksListener implementation.\nFields Constructors ActivityLifecycleCallbacksListener(Activity activity) Initializes a new instance of the ActivityLifecycleCallbacksListener class.\nActivityLifecycleCallbacksListener(IntPtr handle, JniHandleOwnership transfer) Initializes a new instance of the ActivityLifecycleCallbacksListener class.\nParameters    Name Description     handle The handle.   transfer The transfer.    Events ActivityCreated Occurs when the activity is created.\nActivityDestroyed Occurs when the activity is destroyed.\nActivityPaused Occurs when the activity is paused.\nActivityResumed Occurs when the activity is resumed.\nActivityStarted Occurs when the activity is started.\nActivityStopped Occurs when the activity is stopped.\nMethods OnActivityCreated(Activity activity, Bundle savedInstanceState) Called when the activity is created.\nParameters    Name Description     activity The activity.   savedInstanceState State of the saved instance.    OnActivityDestroyed(Activity activity) Called when the activity is destroyed.\nParameters    Name Description     activity The activity.    OnActivityPaused(Activity activity) Called when the activity is paused.\nParameters    Name Description     activity The activity.    OnActivityResumed(Activity activity) Called when the activity is resumed.\nParameters    Name Description     activity The activity.    OnActivitySaveInstanceState(Activity activity, Bundle outState) Called when the acitvity saves the instance state.\nParameters    Name Description     activity The activity.   outState State of the out.    OnActivityStarted(Activity activity) Called when the activity is started.\nParameters    Name Description     activity The activity.    OnActivityStopped(Activity activity) Called when the activity is stopped.\nParameters    Name Description     activity The activity.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/advancedpropertychangedeventargs/",
	"title": "AdvancedPropertyChangedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class AdvancedPropertyChangedEventArgs : PropertyChangedEventArgs  Base types PropertyChangedEventArgs\nProperty changed event args that are used when a property has changed. The event arguments contains both the original sender as the current sender of the event. Best used in combination with IAdvancedNotifyPropertyChanged.\nConstructors AdvancedPropertyChangedEventArgs(object sender, AdvancedPropertyChangedEventArgs e) Initializes a new instance of the AdvancedPropertyChangedEventArgs \u0026ldquo;/\u0026gt; class.\nParameters    Name Description     sender The sender.   e The AdvancedPropertyChangedEventArgs \u0026ldquo;/\u0026gt; instance containing the event data.    AdvancedPropertyChangedEventArgs(object originalSender, object latestSender, string propertyName) Initializes a new instance of the AdvancedPropertyChangedEventArgs \u0026ldquo;/\u0026gt; class.\nParameters    Name Description     originalSender The original sender.   latestSender The latest sender.   propertyName Name of the property.    AdvancedPropertyChangedEventArgs(object originalSender, object latestSender, string propertyName, object newValue) Initializes a new instance of the AdvancedPropertyChangedEventArgs \u0026ldquo;/\u0026gt; class.\nParameters    Name Description     originalSender The original sender.   latestSender The latest sender.   propertyName Name of the property.   newValue The new value.    AdvancedPropertyChangedEventArgs(object originalSender, object latestSender, string propertyName, object oldValue, object newValue) Initializes a new instance of the AdvancedPropertyChangedEventArgs \u0026ldquo;/\u0026gt; class.\nParameters    Name Description     originalSender The original sender.   latestSender The latest sender.   propertyName Name of the property.   oldValue The old value.   newValue The new value.    AdvancedPropertyChangedEventArgs(object sender, string propertyName) Initializes a new instance of the AdvancedPropertyChangedEventArgs \u0026ldquo;/\u0026gt; class.\nParameters    Name Description     sender The sender.   propertyName Name of the property.    AdvancedPropertyChangedEventArgs(object sender, string propertyName, object newValue) Initializes a new instance of the AdvancedPropertyChangedEventArgs \u0026ldquo;/\u0026gt; class.\nParameters    Name Description     sender The sender.   propertyName Name of the property.   newValue The new value.    AdvancedPropertyChangedEventArgs(object sender, string propertyName, object oldValue, object newValue) Initializes a new instance of the AdvancedPropertyChangedEventArgs \u0026ldquo;/\u0026gt; class.\nParameters    Name Description     sender The sender.   propertyName Name of the property.   oldValue The old value.   newValue The new value.    Properties IsNewValueMeaningful Gets a value indicating whether the NewValue has any meaning. Sometimes it is not possible to determine the new value in case a 3rd party class triggered the event. In such a case, the NewValue will benull, but this does not mean that the new value isnull.\nIsOldValueMeaningful Gets a value indicating whether the OldValue has any meaning. Sometimes it is not possible to determine the old value in case a 3rd party class triggered the event. In such a case, the OldValue will benull, but this does not mean that the previous value wasnull.\nLatestSender Gets the latest sender.\nNewValue Gets the new value.\nOldValue Gets the old value.\nOriginalSender Gets the original sender.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/apicop/",
	"title": "ApiCop",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ApiCop   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ApiCop : IApiCop  Base types\nIApiCop\nApiCop writer class.\nFields Constructors ApiCop(Type targetType) Initializes a new instance of the ApiCop class.\nParameters    Name Description     targetType The type for which this ApiCop is intented.    Exceptions    Name Description     ArgumentNullException The targetType isnull.    Properties TargetType Gets the target type of the ApiCop. This is the type where the ApiCop is created for.\nMethods GetResults() Gets the results of this specific ApiCop.\nReturns The results of this ApiCop.\nRegisterRule(TRule rule) Registers the rule with this ApiCop.\nType Parameters TRule The type of the rule.\nParameters    Name Description     rule The rule.    Returns The rule.\nExceptions    Name Description     ArgumentNullException The rule isnull.    UpdateRule(string name, Action action) Updates the rule with the specified name. If the rule is found and the ApiCop functionality is enabled, the specified action will be invoked on the registered rule.\nType Parameters TRule The type of the rule.\nParameters    Name Description     name The name.   action The action.    Returns The rule ornull if the rule is not registered first.\nExceptions    Name Description     ArgumentException The name isnull or whitespace.   ArgumentNullException The action isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/apicoplistenerbase/",
	"title": "ApiCopListenerBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ApiCop   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class ApiCopListenerBase : IApiCopListener  Base types\nIApiCopListener\nBase class for ApiCop listeners.\nConstructors Properties Grouping Gets or sets the grouping for this listener.\nMethods WriteResults(IEnumerable results) Writes the results of the ApiCop feature. Note that this will only contain invalid results. Valid results are not written to the listeners.\nParameters    Name Description     results The results.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/apicoplistenergrouping/",
	"title": "ApiCopListenerGrouping",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ApiCop   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum ApiCopListenerGrouping : Enum  Base types Enum\nGrouping options for the IApiCopListener implementations.\nFields Cop 0\nGroup by cop.\nRule 1\nGroup by rule.\nTag 2\nGroup by tag.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/apicopmanager/",
	"title": "ApiCopManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ApiCop   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ApiCopManager  Manager class for the ApiCop feature.\nFields Constructors Properties IgnoredRules Gets the ignored rules.\nIsEnabled Gets a value indicating whether ApiCop is enabled.\nMethods AddListener(IApiCopListener listener) Adds the ApiCop listener which will receive all ApiCop information. This method does not check whether the listener is already added to the list of registered listeners.\nParameters    Name Description     listener The listener.    Exceptions    Name Description     ArgumentNullException The listener isnull.    ClearListeners() Clears all the current listeners.\nGetApiCop(Type type) Gets the ApiCop for the specified type.\nParameters    Name Description     type The type.    Returns Exceptions    Name Description     ArgumentNullException The type isnull.    GetCurrentClassApiCop() Gets the current class ApiCop.\nReturns GetListeners() Gets all the currently registered listeners.\nReturns An enumerable of all listeners.\nIsListenerRegistered(IApiCopListener listener) Determines whether the specified listener is already registered or not.\nParameters    Name Description     listener The listener.    Returns true if the specified listener is already registered; otherwise,false.\nExceptions    Name Description     ArgumentNullException The listener isnull.    RemoveListener(IApiCopListener listener) Removes the ApiCop which will stop receiving all ApiCop information.\nParameters    Name Description     listener The listener.    Exceptions    Name Description     ArgumentNullException The listener isnull.    WriteResults() Writes the results to all the registered listeners.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/apicopresult/",
	"title": "ApiCopResult",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ApiCop   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ApiCopResult : IApiCopResult  Base types\nIApiCopResult\nApiCop result class.\nConstructors ApiCopResult(IApiCop cop, IApiCopRule rule, string tag) Initializes a new instance of the ApiCopResult class.\nParameters    Name Description     cop The API cop.   rule The rule.   tag The tag.    Exceptions    Name Description     ArgumentNullException The cop isnull.   ArgumentException The tag isnull or whitespace.    Properties Cop Gets the cop.\nRule Gets the rule.\nTag Gets the tag.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/apicoprule/",
	"title": "ApiCopRule",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ApiCop   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class ApiCopRule : IApiCopRule  Base types\nIApiCopRule\nClass containing an ApiCop rule.\nFields Constructors Properties Description Gets the description.\nLevel Gets the level of impact this rule has.\nName Gets the name.\nUrl Gets the URL.\nMethods GetResultAsText(string tag) Gets the result as text.\nParameters    Name Description     tag The tag.    Returns The result as text.\nGetTags() Gets all the tags used by this rule.\nReturns The list of tags.\nIsValid(IApiCop apiCop, string tag) Determines whether the specified ApiCop rule is valid.\nParameters    Name Description     apiCop The ApiCop.   tag The tag.    Returns true if the specified ApiCop is valid; otherwise,false.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/apicoprulelevel/",
	"title": "ApiCopRuleLevel",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ApiCop   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum ApiCopRuleLevel : Enum  Base types Enum\nEnum containing the ApiCop rule levels.\nFields Error 2\nThis rule must be taken seriously.\nHint 0\nFollowing the hints of this rule might improve the usage of the Api, but can be ignored if too much work.\nWarning 1\nFollowing the hints of this rule might improve the usage of the Api.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/appdomainextensions/",
	"title": "AppDomainExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class AppDomainExtensions  extensions.\nFields Methods CreateInstanceAndUnwrap(AppDomain appDomain) Creates the instance in the specified and unwraps it.\nType Parameters T The type of instance to create.\nParameters    Name Description     appDomain The app domain.    Returns The created instance of the specified type\nExceptions    Name Description     ArgumentNullException The appDomain isnull.    LoadAssemblyIntoAppDomain(AppDomain appDomain, Assembly assembly, bool includeReferencedAssemblies) Loads the assembly into the specified.\nParameters    Name Description     appDomain The app domain.   assembly The assembly.   includeReferencedAssemblies if set totrue, referenced assemblies will be included as well.    Exceptions    Name Description     ArgumentNullException The appDomain isnull.    LoadAssemblyIntoAppDomain(AppDomain appDomain, Assembly assembly, bool includeReferencedAssemblies, HashSet alreadyLoadedAssemblies) Loads the assembly into the specified.\nParameters    Name Description     appDomain The app domain.   assembly The assembly.   includeReferencedAssemblies if set totrue, referenced assemblies will be included as well.   alreadyLoadedAssemblies The already loaded assemblies.    Exceptions    Name Description     ArgumentNullException The appDomain isnull.    LoadAssemblyIntoAppDomain(AppDomain appDomain, AssemblyName assemblyName, bool includeReferencedAssemblies) Loads the assembly into the specified.\nParameters    Name Description     appDomain The app domain.   assemblyName The assembly name.   includeReferencedAssemblies if set totrue, referenced assemblies will be included as well.    Exceptions    Name Description     ArgumentNullException The appDomain isnull.    LoadAssemblyIntoAppDomain(AppDomain appDomain, string assemblyFilename, bool includeReferencedAssemblies) Loads the assembly into the specified.\nParameters    Name Description     appDomain The app domain.   assemblyFilename The assembly filename.   includeReferencedAssemblies if set totrue, referenced assemblies will be included as well.    Exceptions    Name Description     ArgumentNullException The appDomain isnull.   ArgumentException The assemblyFilename isnull or whitespace.    PreloadAssemblies(AppDomain appDomain, string directory) Preloads all the assemblies inside the specified directory into the specified. This method also preloads all referenced assemblies.\nParameters    Name Description     appDomain The app domain.   directory The directory. Ifnull, only the referenced assemblies are forced to be loaded.    Exceptions    Name Description     ArgumentNullException The appDomain isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/android/app/application/",
	"title": "Application",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Android.App   Available on Xamarin - Android    public class Application : Application  Base types Application\nApplication class to be able to have a static context.\nConstructors Application(IntPtr javaReference, JniHandleOwnership transfer) The constructor of the application class.\nParameters    Name Description     javaReference    transfer     Properties Default Gets the default application instance.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/xamarin/forms/application/",
	"title": "Application",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Xamarin.Forms   Available on Portable Class Libraries    public class Application\u0026lt;TMainPage\u0026gt; : Application where TMainPage : Page  Base types Application\nThe application base class.\nType Parameters TMainPage The main page type.\nConstructors Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/applicationclosingeventargs/",
	"title": "ApplicationClosingEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ApplicationClosingEventArgs : EventArgs  Base types EventArgs\nEvent args class for an event when an application gets closed.\nProperties Cancel Gets or sets a value indicating whether the closing of the application should be canceled.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/io/applicationdatatarget/",
	"title": "ApplicationDataTarget",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IO   Available on .NET Framework 4.5, .NET Framework 4.6    public enum ApplicationDataTarget : Enum  Base types Enum\nGets the application data target.\nFields Machine 2\nThe machine.\nUserLocal 0\nThe user.\nUserRoaming 1\nThe user.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/applicationextensions/",
	"title": "ApplicationExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on Portable Class Libraries    public static class ApplicationExtensions  The application extension methods.\nMethods CurrentPage(Application this) Gets the current page.\nParameters    Name Description     this The instance.    Returns The current or top most page of the application.\nExceptions    Name Description     System.ArgumentNullException The this isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/applicationextensions/",
	"title": "ApplicationExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows   Available on .NET Framework 4.5, .NET Framework 4.6    public static class ApplicationExtensions  Extension methods for the class.\nMethods GetActiveWindow(Application application) Gets the currently active window of the application.\nParameters    Name Description     application The application.    Returns The active window of the application or null in case of none window is opened.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/areequalmultivalueconverter/",
	"title": "AreEqualMultiValueConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6    public class AreEqualMultiValueConverter : MarkupExtension  Base types MarkupExtension\nConverts a comparison of 2 bindings to a boolean whether the objects are equal or not.\nMethods Convert(object[] values, Type targetType, object parameter, CultureInfo culture) Converts the comparison of 2 values to a boolean.\nParameters    Name Description     values Values to convert. Only 2 values are supported.   targetType Not supported.   parameter Not supported.   culture Not supported.    Returns True if the values are equal, otherwise false.\nConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture) Not supported.\nParameters    Name Description     value Not supported.   targetTypes Not supported.   parameter Not supported.   culture Not supported.    Returns Not supported.\nProvideValue(IServiceProvider serviceProvider) When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension.\nParameters    Name Description     serviceProvider Object that can provide services for the markup extension.    Returns The object value to set on the property where the extension is applied.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/argument/",
	"title": "Argument",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class Argument  Argument validator class to help validating arguments that are passed into a method. This class automatically adds thrown exceptions to the log file.\nFields Methods ImplementsInterface(string paramName, Type type, Type interfaceType) Checks whether the specified type implements the specified interfaceType.\nParameters    Name Description     paramName Name of the param.   type The type to check.   interfaceType The type of the interface to check for.    Exceptions    Name Description     System.ArgumentException type   ArgumentNullException The type isnull.   ArgumentException The type does not implement the interfaceType.    ImplementsInterface(string paramName, object instance, Type interfaceType) Checks whether the specified instance implements the specified interfaceType.\nParameters    Name Description     paramName Name of the param.   instance The instance to check.   interfaceType The type of the interface to check for.    Exceptions    Name Description     ArgumentNullException The instance isnull.   ArgumentException The instance does not implement the interfaceType.    ImplementsInterface(Expression\u0026gt; expression, Type interfaceType) Checks whether the specified expression value implements the specified interfaceType.\nType Parameters T The type of the value.\nParameters    Name Description     expression The expression.   interfaceType The type of the interface to check for.    Exceptions    Name Description     ArgumentNullException The expression value isnull.   ArgumentException The expression value does not implement the interfaceType.   System.ArgumentException The expression body is not of type.    ImplementsInterface(string paramName, object instance) Checks whether the specified instance implements the specified TInterface.\nType Parameters TInterface The type of the T interface.\nParameters    Name Description     paramName Name of the param.   instance The instance to check.    Exceptions    Name Description     ArgumentException The paramName isnull.   ArgumentNullException The instance isnull.    ImplementsOneOfTheInterfaces(string paramName, Type type, Type[] interfaceTypes) Checks whether the specified type implements at least one of the the specified interfaceTypes.\nParameters    Name Description     paramName Name of the param.   type The type to check.   interfaceTypes The types of the interfaces to check for.    Exceptions    Name Description     System.ArgumentException type   ArgumentNullException The type isnull.   ArgumentException The interfaceTypes isnull or an empty array.    ImplementsOneOfTheInterfaces(string paramName, object instance, Type[] interfaceTypes) Checks whether the specified instance implements at least one of the specified interfaceTypes.\nParameters    Name Description     paramName Name of the param.   instance The instance to check.   interfaceTypes The types of the interfaces to check for.    Exceptions    Name Description     ArgumentNullException The instance isnull.   ArgumentException The interfaceTypes isnull or an empty array.    ImplementsOneOfTheInterfaces(Expression\u0026gt; expression, Type[] interfaceTypes) Checks whether the specified expression value implements at least one of the specified interfaceTypes.\nType Parameters T The type of the value.\nParameters    Name Description     expression The expression.   interfaceTypes The types of the interfaces to check for.    Exceptions    Name Description     ArgumentNullException The expression value isnull.   ArgumentException The expression value does not implement at least one of the interfaceTypes.   System.ArgumentException The expression body is not of type.    InheritsFrom(string paramName, Type type, Type baseType) Checks whether the specified type inherits from the baseType.\nParameters    Name Description     paramName Name of the parameter.   type The type.   baseType The base type.    Exceptions    Name Description     System.ArgumentException    ArgumentException The paramName isnull.   ArgumentNullException The type isnull.    InheritsFrom(string paramName, object instance, Type baseType) Checks whether the specified instance inherits from the baseType.\nParameters    Name Description     paramName Name of the param.   instance The instance.   baseType The base type.    Exceptions    Name Description     ArgumentException The paramName isnull.   ArgumentNullException The instance isnull.    InheritsFrom(string paramName, object instance) Checks whether the specified instance inherits from the specified TBase.\nType Parameters TBase The base type.\nParameters    Name Description     paramName Name of the param.   instance The instance.    Exceptions    Name Description     ArgumentException The paramName isnull.   ArgumentNullException The instance isnull.    IsMatch(Expression\u0026gt; expression, string pattern, RegexOptions regexOptions) Determines whether the specified argument match with a given pattern.\nParameters    Name Description     expression The expression.   pattern The pattern.   regexOptions The regular expression options.    Exceptions    Name Description     System.ArgumentException The pattern isnull.   System.ArgumentNullException The expression isnull.    IsMatch(string paramName, string paramValue, string pattern, RegexOptions regexOptions) Determines whether the specified argument match with a given pattern.\nParameters    Name Description     paramName Name of the param.   paramValue The param value.   pattern The pattern.   regexOptions The regular expression options.    Exceptions    Name Description     ArgumentException The paramName isnull or whitespace.    IsMaximum(Expression\u0026gt; expression, T maximumValue) Determines whether the specified argument has a maximum value.\nType Parameters T The value type.\nParameters    Name Description     expression The expression.   maximumValue The maximum value.    Exceptions    Name Description     ArgumentOutOfRangeException If expression value is out of range.   System.ArgumentException The expression body is not of type.   System.ArgumentNullException The expression isnull.    IsMaximum(Expression\u0026gt; expression, T maximumValue, Funcvalidation) Determines whether the specified argument has a maximum value.\nType Parameters T The value type.\nParameters    Name Description     expression The expression.   maximumValue The maximum value.   validation The validation function to call for validation.    Exceptions    Name Description     ArgumentNullException The validation isnull.   ArgumentOutOfRangeException If expression value is out of range.   System.ArgumentException The expression body is not of type.   System.ArgumentNullException The expression isnull.    IsMaximum(string paramName, T paramValue, T maximumValue) Determines whether the specified argument has a maximum value.\nType Parameters T Type of the argument.\nParameters    Name Description     paramName Name of the parameter.   paramValue Value of the parameter.   maximumValue The maximum value.    Exceptions    Name Description     ArgumentOutOfRangeException If paramValue is out of range.    IsMaximum(string paramName, T paramValue, T maximumValue, Funcvalidation) Determines whether the specified argument has a maximum value.\nType Parameters T Type of the argument.\nParameters    Name Description     paramName Name of the parameter.   paramValue Value of the parameter.   maximumValue The maximum value.   validation The validation function to call for validation.    Exceptions    Name Description     System.ArgumentOutOfRangeException    ArgumentNullException The validation isnull.   ArgumentOutOfRangeException If paramValue is out of range.    IsMinimal(Expression\u0026gt; expression, T minimumValue) Determines whether the specified argument has a minimum value.\nType Parameters T The value type.\nParameters    Name Description     expression The expression.   minimumValue The minimum value.    Exceptions    Name Description     ArgumentOutOfRangeException If expression value is out of range.   System.ArgumentException The expression body is not of type.   System.ArgumentNullException The expression isnull.    IsMinimal(Expression\u0026gt; expression, T minimumValue, Funcvalidation) Determines whether the specified argument has a minimum value.\nType Parameters T The value type.\nParameters    Name Description     expression The expression.   minimumValue The minimum value.   validation The validation function to call for validation.    Exceptions    Name Description     ArgumentNullException The validation isnull.   ArgumentOutOfRangeException If expression value is out of range.   System.ArgumentException The expression body is not of type.   System.ArgumentNullException The expression isnull.    IsMinimal(string paramName, T paramValue, T minimumValue) Determines whether the specified argument has a minimum value.\nType Parameters T Type of the argument.\nParameters    Name Description     paramName Name of the parameter.   paramValue Value of the parameter.   minimumValue The minimum value.    Exceptions    Name Description     ArgumentOutOfRangeException If paramValue is out of range.    IsMinimal(string paramName, T paramValue, T minimumValue, Funcvalidation) Determines whether the specified argument has a minimum value.\nType Parameters T Type of the argument.\nParameters    Name Description     paramName Name of the parameter.   paramValue Value of the parameter.   minimumValue The minimum value.   validation The validation function to call for validation.    Exceptions    Name Description     System.ArgumentOutOfRangeException    ArgumentNullException The validation isnull.   ArgumentOutOfRangeException If paramValue is out of range.    IsNotEmpty(Expression\u0026gt; expression) Determines whether the specified argument is not empty.\nParameters    Name Description     expression The expression.    Exceptions    Name Description     ArgumentException If expression value isnull or empty.   System.ArgumentException The expression body is not of type.   System.ArgumentNullException The expression isnull.    IsNotEmpty(string paramName, Guid paramValue) Determines whether the specified argument is not empty.\nParameters    Name Description     paramName Name of the parameter.   paramValue Value of the parameter.    Exceptions    Name Description     ArgumentException If paramValue isnull or empty.    IsNotMatch(Expression\u0026gt; expression, string pattern, RegexOptions regexOptions) Determines whether the specified argument doesn\u0026rsquo;t match with a given pattern.\nParameters    Name Description     expression The expression.   pattern The pattern.   regexOptions The regular expression options.    Exceptions    Name Description     System.ArgumentException The pattern isnull.   System.ArgumentNullException The expression isnull.    IsNotMatch(string paramName, string paramValue, string pattern, RegexOptions regexOptions) Determines whether the specified argument doesn\u0026rsquo;t match with a given pattern.\nParameters    Name Description     paramName Name of the param.   paramValue The para value.   pattern The pattern.   regexOptions The regular expression options.    Exceptions    Name Description     System.ArgumentException The paramName isnull or whitespace.    IsNotNull(string paramName, object paramValue) Determines whether the specified argument is notnull.\nParameters    Name Description     paramName Name of the parameter.   paramValue Value of the parameter.    Exceptions    Name Description     System.ArgumentNullException    ArgumentNullException If paramValue isnull.    IsNotNull(Expression\u0026gt; expression) Determines whether the specified argument is notnull.\nType Parameters T The parameter type.\nParameters    Name Description     expression The expression.    Exceptions    Name Description     ArgumentNullException If expression value isnull.   System.ArgumentException The expression body is not of type.   System.ArgumentNullException The expression isnull.    IsNotNullOrEmpty(Expression\u0026gt;\u0026gt; expression) Determines whether the specified argument is notnull or empty.\nParameters    Name Description     expression The expression.    Exceptions    Name Description     ArgumentException If expression value isnull or empty.   System.ArgumentException The expression body is not of type.   System.ArgumentNullException The expression isnull.    IsNotNullOrEmpty(Expression\u0026gt; expression) Determines whether the specified argument is notnull or empty.\nParameters    Name Description     expression The expression.    Exceptions    Name Description     ArgumentException If expression value isnull or empty.   System.ArgumentException The expression body is not of type.   System.ArgumentNullException The expression isnull.    IsNotNullOrEmpty(string paramName, Nullable paramValue) Determines whether the specified argument is notnull or empty.\nParameters    Name Description     paramName Name of the parameter.   paramValue Value of the parameter.    Exceptions    Name Description     System.ArgumentException    ArgumentException If paramValue isnull or empty.    IsNotNullOrEmpty(string paramName, string paramValue) Determines whether the specified argument is notnull or empty.\nParameters    Name Description     paramName Name of the parameter.   paramValue Value of the parameter.    Exceptions    Name Description     System.ArgumentException    ArgumentException If paramValue isnull or empty.    IsNotNullOrEmptyArray(Expression\u0026gt; expression) Determines whether the specified argument is notnull or an empty array (.Length == 0).\nParameters    Name Description     expression The expression    Exceptions    Name Description     ArgumentException If expression value isnull or an empty array.   System.ArgumentException The expression body is not of type.   System.ArgumentNullException The expression isnull.    IsNotNullOrEmptyArray(string paramName, Array paramValue) Determines whether the specified argument is notnull or an empty array (.Length == 0).\nParameters    Name Description     paramName Name of the parameter.   paramValue Value of the parameter.    Exceptions    Name Description     System.ArgumentException    ArgumentException If paramValue isnull or an empty array.    IsNotNullOrWhitespace(Expression\u0026gt; expression) Determines whether the specified argument is notnull or a whitespace.\nParameters    Name Description     expression The expression.    Exceptions    Name Description     ArgumentException If expression value isnull or a whitespace.   System.ArgumentException The expression body is not of type.   System.ArgumentNullException The expression isnull.    IsNotNullOrWhitespace(string paramName, string paramValue) Determines whether the specified argument is notnull or a whitespace.\nParameters    Name Description     paramName Name of the parameter.   paramValue Value of the parameter.    Exceptions    Name Description     System.ArgumentException    ArgumentException If paramValue isnull or a whitespace.    IsNotOfOneOfTheTypes(string paramName, Type type, Type[] notRequiredTypes) Checks whether the specified type is not of any of the specified notRequiredTypes.\nParameters    Name Description     paramName Name of the param.   type The type to check.   notRequiredTypes The types to check for.    Exceptions    Name Description     System.ArgumentException type   ArgumentNullException The type isnull.   ArgumentException The notRequiredTypes isnull or empty array.    IsNotOfOneOfTheTypes(string paramName, object instance, Type[] notRequiredTypes) Checks whether the specified instance is not of any of the specified notRequiredTypes.\nParameters    Name Description     paramName Name of the param.   instance The instance to check.   notRequiredTypes The types to check for.    Exceptions    Name Description     ArgumentNullException The instance isnull.   ArgumentException The notRequiredTypes isnull or empty array.    IsNotOfOneOfTheTypes(Expression\u0026gt; expression, Type[] notRequiredTypes) Checks whether the specified expression value is not of any of the specified notRequiredTypes.\nType Parameters T The type of the value.\nParameters    Name Description     expression The expression.   notRequiredTypes The types to check for.    Exceptions    Name Description     ArgumentNullException The expression value isnull.   ArgumentException The expression value is of one of the notRequiredTypes.    IsNotOfType(string paramName, Type type, Type notRequiredType) Checks whether the specified type is not of the specified notRequiredType.\nParameters    Name Description     paramName Name of the param.   type The type to check.   notRequiredType The type to check for.    Exceptions    Name Description     System.ArgumentException type   ArgumentNullException The type isnull.   ArgumentException The type is of type notRequiredType.    IsNotOfType(string paramName, object instance, Type notRequiredType) Checks whether the specified instance is not of the specified notRequiredType.\nParameters    Name Description     paramName Name of the param.   instance The instance to check.   notRequiredType The type to check for.    Exceptions    Name Description     ArgumentNullException The instance isnull.   ArgumentException The instance is of type notRequiredType.    IsNotOfType(Expression\u0026gt; expression, Type notRequiredType) Checks whether the specified expression value is not of the specified notRequiredType.\nType Parameters T The type of the value.\nParameters    Name Description     expression The expression.   notRequiredType The type to check for.    Exceptions    Name Description     ArgumentNullException The expression value isnull.   ArgumentException The expression value is of type notRequiredType.   System.ArgumentException The expression body is not of type.    IsNotOutOfRange(Expression\u0026gt; expression, T minimumValue, T maximumValue) Determines whether the specified argument is not out of range.\nType Parameters T The value type.\nParameters    Name Description     expression The expression.   minimumValue The minimum value.   maximumValue The maximum value.    Exceptions    Name Description     ArgumentOutOfRangeException If expression value is out of range.   System.ArgumentException The expression body is not of type.   System.ArgumentNullException The expression isnull.    IsNotOutOfRange(Expression\u0026gt; expression, T minimumValue, T maximumValue, Funcvalidation) Determines whether the specified argument is not out of range.\nType Parameters T The value type.\nParameters    Name Description     expression The expression.   minimumValue The minimum value.   maximumValue The maximum value.   validation The validation function to call for validation.    Exceptions    Name Description     ArgumentNullException The validation isnull.   ArgumentOutOfRangeException If expression value is out of range.   System.ArgumentException The expression body is not of type.   System.ArgumentNullException The expression isnull.    IsNotOutOfRange(string paramName, T paramValue, T minimumValue, T maximumValue) Determines whether the specified argument is not out of range.\nType Parameters T Type of the argument.\nParameters    Name Description     paramName Name of the parameter.   paramValue Value of the parameter.   minimumValue The minimum value.   maximumValue The maximum value.    Exceptions    Name Description     ArgumentOutOfRangeException If paramValue is out of range.    IsNotOutOfRange(string paramName, T paramValue, T minimumValue, T maximumValue, Funcvalidation) Determines whether the specified argument is not out of range.\nType Parameters T\nParameters    Name Description     paramName Name of the parameter.   paramValue Value of the parameter.   minimumValue The minimum value.   maximumValue The maximum value.   validation The validation function to call for validation.    Exceptions    Name Description     System.ArgumentOutOfRangeException    ArgumentNullException The validation isnull.   ArgumentOutOfRangeException If paramValue is out of range.    IsOfOneOfTheTypes(string paramName, Type type, Type[] requiredTypes) Checks whether the specified type is of at least one of the specified requiredTypes.\nParameters    Name Description     paramName Name of the param.   type The type to check.   requiredTypes The types to check for.    Exceptions    Name Description     System.ArgumentException type   ArgumentNullException The type isnull.   ArgumentException The requiredTypes isnull or an empty array.    IsOfOneOfTheTypes(string paramName, object instance, Type[] requiredTypes) Checks whether the specified instance is of at least one of the specified requiredTypes.\nParameters    Name Description     paramName Name of the param.   instance The instance to check.   requiredTypes The types to check for.    Exceptions    Name Description     ArgumentNullException The instance isnull.   ArgumentException The requiredTypes isnull or an empty array.    IsOfOneOfTheTypes(Expression\u0026gt; expression, Type[] requiredTypes) Checks whether the specified expression value is of at least one of the specified requiredTypes.\nType Parameters T The type of the value.\nParameters    Name Description     expression The expression type.   requiredTypes The types to check for.    Exceptions    Name Description     ArgumentNullException The requiredTypes isnull.   ArgumentException The expression value is not at least one of the requiredTypes.   System.ArgumentException The expression body is not of type.    IsOfType(string paramName, Type type, Type requiredType) Checks whether the specified type is of the specified requiredType.\nParameters    Name Description     paramName Name of the param.   type The type to check.   requiredType The type to check for.    Exceptions    Name Description     System.ArgumentException type   ArgumentNullException The type isnull.   ArgumentException The type is not of type requiredType.    IsOfType(string paramName, object instance, Type requiredType) Checks whether the specified instance is of the specified requiredType.\nParameters    Name Description     paramName Name of the param.   instance The instance to check.   requiredType The type to check for.    Exceptions    Name Description     ArgumentNullException The instance isnull.   ArgumentException The instance is not of type requiredType.    IsOfType(Expression\u0026gt; expression, Type requiredType) Checks whether the specified expression value is of the specified requiredType.\nType Parameters T The type of the value.\nParameters    Name Description     expression The expression.   requiredType The type to check for.    Exceptions    Name Description     ArgumentNullException The expression value isnull.   ArgumentException The expression value is not of type requiredType.   System.ArgumentException The expression body is not of type.    IsSupported(bool isSupported, string errorFormat, object[] args) Checks whether the passed in boolean check istrue. If not, this method will throw a.\nParameters    Name Description     isSupported if set totrue, the action is supported; otherwisefalse.   errorFormat The error format.   args The arguments for the string format.    Exceptions    Name Description     NotSupportedException The isSupported isfalse.   ArgumentException The errorFormat isnull or whitespace.    IsValid(Expression\u0026gt; expression, IValueValidator validator) Determines whether the specified argument is valid.\nType Parameters T The value type.\nParameters    Name Description     expression The expression.   validator The validator.    Exceptions    Name Description     ArgumentException If the Missing: of validator returnsfalse.   System.ArgumentException The expression body is not of type.   System.ArgumentNullException The expression isnull.    IsValid(Expression\u0026gt; expression, Func validation) Determines whether the specified argument is valid.\nType Parameters T The value type.\nParameters    Name Description     expression The expression.   validation The validation function.    Exceptions    Name Description     ArgumentException If the validation code returnsfalse.   System.ArgumentException The expression body is not of type.   System.ArgumentNullException The expression isnull.    IsValid(Expression\u0026gt; expression, Funcvalidation) Determines whether the specified argument is valid.\nType Parameters T The value type.\nParameters    Name Description     expression The expression.   validation The validation function.    Exceptions    Name Description     ArgumentException If the validation code returnsfalse.   System.ArgumentException The expression body is not of type.   System.ArgumentNullException The expression isnull.    IsValid(Expression\u0026gt; expression, bool validation) Determines whether the specified argument is valid.\nType Parameters T The value type.\nParameters    Name Description     expression The expression.   validation The validation result.    Exceptions    Name Description     ArgumentException If the validation code returnsfalse.   System.ArgumentException The expression body is not of type.   System.ArgumentNullException The expression isnull.    IsValid(string paramName, T paramValue, IValueValidator validator) Determines whether the specified argument is valid.\nType Parameters T The value type.\nParameters    Name Description     paramName Name of the parameter.   paramValue The parameter value.   validator The validator.    Exceptions    Name Description     ArgumentException If the Missing: of validator returnsfalse.   ArgumentNullException The paramName isnull.    IsValid(string paramName, T paramValue, Func validation) Determines whether the specified argument is valid.\nType Parameters T The value type.\nParameters    Name Description     paramName Name of the parameter.   paramValue The parameter value.   validation The validation function.    Exceptions    Name Description     ArgumentException If the validation code returnsfalse.   ArgumentNullException The paramName isnull.    IsValid(string paramName, T paramValue, Funcvalidation) Determines whether the specified argument is valid.\nType Parameters T The value type.\nParameters    Name Description     paramName Name of the parameter.   paramValue The parameter value.   validation The validation function.    Exceptions    Name Description     ArgumentException If the validation code returnsfalse.   ArgumentNullException The paramName isnull.    IsValid(string paramName, T paramValue, bool validation) Determines whether the specified argument is valid.\nType Parameters T The value type.\nParameters    Name Description     paramName Name of the parameter.   paramValue The parameter value.   validation The validation function.    Exceptions    Name Description     ArgumentException If the validation code returnsfalse.   System.ArgumentNullException The paramName isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/xamarin/forms/argumentsproxyfactory/",
	"title": "ArgumentsProxyFactory",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Xamarin.Forms   Available on Portable Class Libraries    public static class ArgumentsProxyFactory  Methods CreateAlertArgument(string caption, string message, string positiveButton, string negativeButton) Creates a proxy for.\nParameters    Name Description     caption The caption   message The message   positiveButton The positive button text   negativeButton The negative button text    Returns The proxy instance\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/collections/arrayshim/",
	"title": "ArrayShim",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Collections   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ArrayShim  Shim class for Array to provide support on all platforms.\nMethods Empty() Returns an empty array.\nType Parameters T The type of the elements of the array.\nReturns Returns an empty.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/assemblyextensions/",
	"title": "AssemblyExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class AssemblyExtensions  Assembly info helper class.\nMethods Company(Assembly assembly) Gets the company of a specific assembly.\nParameters    Name Description     assembly The assembly.    Returns The company of the assembly.\nCopyright(Assembly assembly) Gets the copyright of a specific assembly.\nParameters    Name Description     assembly The assembly.    Returns The copyright of the assembly.\nDescription(Assembly assembly) Gets the description of a specific assembly.\nParameters    Name Description     assembly The assembly.    Returns The description of the assembly.\nGetBuildDateTime(Assembly assembly) Gets the build date time of the assembly.\nParameters    Name Description     assembly The assembly.    Returns DateTime.\nGetDirectory(Assembly assembly) Gets the directory of a specific assembly.\nParameters    Name Description     assembly The assembly.    Returns The directory of the assembly.\nExceptions    Name Description     ArgumentNullException The assembly isnull.    InformationalVersion(Assembly assembly) Gets the informational version.\nParameters    Name Description     assembly The assembly.    Returns The informational version.\nProduct(Assembly assembly) Gets the product of a specific assembly.\nParameters    Name Description     assembly The assembly.    Returns The product of the assembly.\nTitle(Assembly assembly) Gets the title of a specific assembly.\nParameters    Name Description     assembly The assembly.    Returns The title of the assembly.\nVersion(Assembly assembly, int separatorCount) Gets the version of a specific assembly with a separator count.\nParameters    Name Description     assembly The assembly.   separatorCount Number that determines how many version numbers should be returned.    Returns The version of the assembly.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/assemblyhelper/",
	"title": "AssemblyHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class AssemblyHelper  Assembly helper class.\nFields Methods GetAllTypesSafely(Assembly assembly, bool logLoaderExceptions) Gets all types from the assembly safely. Sometimes, the is thrown, and no types are returned. In that case the user must manually get the successfully loaded types from the. This method automatically loads the types. If the occurs, this method will return the types that were loaded successfully.\nParameters    Name Description     assembly The assembly.   logLoaderExceptions If set totrue, the loader exceptions will be logged.    Returns The array of successfully loaded types.\nExceptions    Name Description     ArgumentNullException The assembly isnull.    GetAssemblyNameWithVersion(string assemblyNameWithoutVersion) Gets the assembly name with version which is currently available in the.\nParameters    Name Description     assemblyNameWithoutVersion The assembly name without version.    Returns The assembly name with version ornull if the assembly is not found in the.\nExceptions    Name Description     ArgumentException The assemblyNameWithoutVersion isnull or whitespace.    GetEntryAssembly() Gets the entry assembly.\nReturns Assembly.\nGetLinkerTimestamp(string fileName) Gets the linker timestamp.\nParameters    Name Description     fileName Name of the file.    Returns DateTime.\nGetLoadedAssemblies() Gets the loaded assemblies by using the right method. For Windows applications, it usesAppDomain.GetAssemblies().\nReturns of all loaded assemblies.\nGetLoadedAssemblies(AppDomain appDomain) Gets the loaded assemblies by using the right method. For Windows applications, it usesAppDomain.GetAssemblies().\nParameters    Name Description     appDomain The app domain to search in.    Returns of all loaded assemblies.\nGetLoadedAssemblies(AppDomain appDomain, bool ignoreDynamicAssemblies) Gets the loaded assemblies by using the right method. For Windows applications, it usesAppDomain.GetAssemblies().\nParameters    Name Description     appDomain The app domain to search in.   ignoreDynamicAssemblies if set totrue, dynamic assemblies are being ignored.    Returns of all loaded assemblies.\nIsDynamicAssembly(Assembly assembly) Determines whether the specified assembly is a dynamic assembly.\nParameters    Name Description     assembly     Returns true if the specified assembly is a dynamic assembly; otherwise,false.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/assemblyloadedeventargs/",
	"title": "AssemblyLoadedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class AssemblyLoadedEventArgs : EventArgs  Base types EventArgs\nEvent args for the AssemblyLoaded event.\nConstructors AssemblyLoadedEventArgs(Assembly assembly, IEnumerable loadedTypes) Initializes a new instance of the AssemblyLoadedEventArgs class.\nParameters    Name Description     assembly The assembly.   loadedTypes The loaded types.    Exceptions    Name Description     ArgumentNullException The assembly isnull.    Properties Assembly Gets the assembly.\nLoadedTypes Gets the loaded types.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/asynceventhandler/",
	"title": "AsyncEventHandler",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public delegate AsyncEventHandler\u0026lt;TEventArgs\u0026gt; : MulticastDelegate where TEventArgs : EventArgs  Base types MulticastDelegate\nRepresents the asynchronous method that will handle an event.\nType Parameters TEventArgs The type of the event data generated by the event.\nParameters    Name Description     sender The source of the event.   e An System.EventArgs that contains the event data.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/asynceventhandlerextensions/",
	"title": "AsyncEventHandlerExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class AsyncEventHandlerExtensions  Extensions for asynchronous event handlers.\nFields Methods SafeInvokeAsync(AsyncEventHandler handler, object sender, bool allowParallelExecution) Invokes the specified handler\nParameters    Name Description     handler The handler.   sender The sender.   allowParallelExecution if set totrue, allow parallel invocation of the handlers.    Returns Task\u0026lt;System.Boolean\u0026gt;.\nSafeInvokeAsync(AsyncEventHandler handler, object sender, TEventArgs e, bool allowParallelExecution) Invokes the specified handler\nType Parameters TEventArgs The type of the class.\nParameters    Name Description     handler The handler.   sender The sender.   e The event args.   allowParallelExecution if set totrue, allow parallel invocation of the handlers.    Returns Task\u0026lt;System.Boolean\u0026gt;.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/threading/asynclock/",
	"title": "AsyncLock",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class AsyncLock  A mutual exclusion lock that is compatible with async. Note that this lock is recursive!\nRemarks This code originally comes from AsyncEx: https://github.com/StephenCleary/AsyncEx\nFields Constructors AsyncLock() Creates a new async-compatible mutual exclusion lock.\nAsyncLock(IAsyncWaitQueue queue) Creates a new async-compatible mutual exclusion lock using the specified wait queue.\nParameters    Name Description     queue The wait queue used to manage waiters.    Properties Id Gets a semi-unique identifier for this asynchronous lock.\nIsTaken Gets a value indicating whether this lock is taken.\nMethods Lock() Synchronously acquires the lock. Returns a disposable that releases the lock when disposed. This method may block the calling thread.\nLock(CancellationToken cancellationToken) Synchronously acquires the lock. Returns a disposable that releases the lock when disposed. This method may block the calling thread.\nParameters    Name Description     cancellationToken The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).    LockAsync() Asynchronously acquires the lock. Returns a disposable that releases the lock when disposed.\nReturns A disposable that releases the lock when disposed.\nLockAsync(CancellationToken cancellationToken) Asynchronously acquires the lock. Returns a disposable that releases the lock when disposed.\nParameters    Name Description     cancellationToken The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).    Returns A disposable that releases the lock when disposed.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/threading/asyncwaitqueueextensions/",
	"title": "AsyncWaitQueueExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class AsyncWaitQueueExtensions  Provides extension methods for wait queues.\nRemarks This code originally comes from AsyncEx: https://github.com/StephenCleary/AsyncEx\nMethods EnqueueAsync(IAsyncWaitQueuethis, object syncObject, CancellationToken token) Creates a new entry and queues it to this wait queue. If the cancellation token is already canceled, this method immediately returns a canceled task without modifying the wait queue.\nParameters    Name Description     this The wait queue.   syncObject A synchronization object taken while cancelling the entry.   token The token used to cancel the wait.    Returns The queued task.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/attributevalidatorprovider/",
	"title": "AttributeValidatorProvider",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class AttributeValidatorProvider : ValidatorProviderBase  Base types ValidatorProviderBase\nValidator provider that provides the validator based on attributes on models.\nFields Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/auditing/auditinghelper/",
	"title": "AuditingHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Auditing   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class AuditingHelper  Helper for auditing which handles the complete subscription of an IViewModel instance to the current auditing manager.\nFields Constructors Methods RegisterViewModel(IViewModel viewModel) Registers the view model to the AuditingManager. This helper will automatically unsubscribe from all events when the view model is closed.\nParameters    Name Description     viewModel The view model to register.    Exceptions    Name Description     ArgumentNullException The viewModel isnull.    Remarks This helper will call the OnViewModelCreating(Type) and IViewModel) automatically.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/auditing/auditingmanager/",
	"title": "AuditingManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Auditing   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class AuditingManager  Handles the auditing for MVVM inside Catel. Use this manager to register custom auditors.\nFields Properties IsAuditingEnabled Gets a value indicating whether auditing is enabled. Auditing is enabled when at least 1 auditor is registered.\nRegisteredAuditorsCount Gets the number of registered auditors.\nMethods Clear() Clears all the current auditors.\nRegisterAuditor(IAuditor auditor) Registers a specific auditor.\nParameters    Name Description     auditor The auditor.    Exceptions    Name Description     ArgumentNullException The auditor isnull.    RegisterAuditor() Registers a auditor and automatically instantiates it by using the ITypeFactory.\nType Parameters TAuditor The type of the auditor.\nUnregisterAuditor(IAuditor auditor) Unregisters a specific auditor. If the auditor is not registered, nothing happens.\nExceptions    Name Description     ArgumentNullException The auditor isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/auditing/auditorbase/",
	"title": "AuditorBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Auditing   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class AuditorBase : IAuditor  Base types\nIAuditor\nConvenience implementation of the IAuditor interface so not all interface members have to be implemented by the developer. This auditor also ignores the default properties such asIsDirty since hardly anyone would be interested in such changes. To enable the notification, clear the PropertiesToIgnore.\nConstructors Properties PropertiesToIgnore Gets a list of properties that should be ignored.\nMethods OnCommandExecuted(IViewModel viewModel, string commandName, ICatelCommand command, object commandParameter) Called when a command of a view model has just been executed.\nParameters    Name Description     viewModel The view model.   commandName Name of the command, which is the name of the command property.   command The command that has been executed.   commandParameter The command parameter.    OnPropertyChanged(IViewModel viewModel, string propertyName, object newValue) Called when the property of a view model has just changed.\nParameters    Name Description     viewModel The view model.   propertyName Name of the property.   newValue The new property value.    OnViewModelCanceled(IViewModel viewModel) Called when a view model has just been canceled.\nParameters    Name Description     viewModel The view model.    OnViewModelCanceling(IViewModel viewModel) Called when a view model is about to be canceled.\nParameters    Name Description     viewModel The view model.    OnViewModelClosed(IViewModel viewModel) Called when a view model has just been closed.\nParameters    Name Description     viewModel The view model.    OnViewModelClosing(IViewModel viewModel) Called when a view model is about to be closed.\nParameters    Name Description     viewModel The view model.    OnViewModelCreated(IViewModel viewModel) Called when a specific view model type is created.\nParameters    Name Description     viewModel The view model.    OnViewModelCreating(Type viewModelType) Called when a specific view model type is being created.\nParameters    Name Description     viewModelType Type of the view model.    OnViewModelSaved(IViewModel viewModel) Called when a view model has just been saved.\nParameters    Name Description     viewModel The view model.    OnViewModelSaving(IViewModel viewModel) Called when a view model is about to be saved.\nParameters    Name Description     viewModel The view model.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/authentication/",
	"title": "Authentication",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class Authentication : BehaviorBase\u0026lt;FrameworkElement\u0026gt;  Base types BehaviorBase\nAuthentication behavior to show/hide UI elements based on the some authentication parameters.\nRemarks In Silverlight, theIsEnabled property is declared on instead of. If the is not a, but the Action is set to Disable, a will be thrown.\nFields ActionProperty Using a DependencyProperty as the backing store for Action. This enables animation, styling, binding, etc\u0026hellip;\nAuthenticationTagProperty Using a DependencyProperty as the backing store for AuthenticationTag. This enables animation, styling, binding, etc\u0026hellip;\nConstructors Authentication() Initializes a new instance of the Authentication class.\nProperties Action Gets or sets the action to execute when the user has no access to the specified UI element.\nAuthenticationTag Gets or sets the authentication tag which can be used to provide additional information to the IAuthenticationProvider.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/authenticationaction/",
	"title": "AuthenticationAction",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public enum AuthenticationAction : Enum  Base types Enum\nThe available actions to perform when a user is not able to view a specific UI element.\nFields Collapse 1\nCollapses the associated control.\nDisable 2\nDisables the associated control.\nHide 0\nHides the associated control.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/autocompletion/",
	"title": "AutoCompletion",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6    public class AutoCompletion : BehaviorBase\u0026lt;TextBox\u0026gt;  Base types BehaviorBase\nAuto complete behavior to support auto complete on aTextBox control.\nFields ItemsSourceProperty The items source property.\nPropertyNameProperty The property name property.\nUseAutoCompletionServiceProperty The use automatic completion service property.\nConstructors AutoCompletion() Initializes a new instance of the AutoCompletion class.\nProperties ItemsSource Gets or sets the items source.\nPropertyName Gets or sets the name of the property.\nUseAutoCompletionService Gets or sets a value indicating whether this behavior should use the auto completion service to filter the items source. If this value is set tofalse, it will show the ItemsSource as auto completion source without filtering. The default value istrue.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/autocompletionservice/",
	"title": "AutoCompletionService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class AutoCompletionService : IAutoCompletionService  Base types\nIAutoCompletionService\nService to implement auto completion features.\nConstructors AutoCompletionService() Initializes a new instance of the AutoCompletionService class.\nMethods GetAutoCompleteValues(string property, string filter, IEnumerable source) Gets the auto complete values.\nParameters    Name Description     property The property.   filter The filter.   source The source.    Returns System.String[].\nExceptions    Name Description     ArgumentNullException The source isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/autoscroll/",
	"title": "AutoScroll",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6    public class AutoScroll : BehaviorBase\u0026lt;ItemsControl\u0026gt;  Base types BehaviorBase\nAutomatically scrolls to the bottom when the scrollbar is at the bottom.\nFields ScrollDirectionProperty The scroll direction property.\nScrollOnLoadedProperty The scroll on loaded property.\nScrollTresholdProperty The scroll treshold property.\nProperties ScrollDirection The scoll direction. The default value is Bottom.\nScrollOnLoaded A boolean that determines whether the behavior should automatically scroll as soon as the control is loaded. The default value istrue.\nScrollTreshold The scoll threshold in which the behavior will scroll down even when it is not fully down. The default value is5.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/ioc/automatic-type-registration/",
	"title": "Automatic type registration",
	"tags": [],
	"description": "",
	"content": "\r\rUsing attributes\r\r\rUsing conventions\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/threading/awaitabledisposable/",
	"title": "AwaitableDisposable",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public struct AwaitableDisposable\u0026lt;T\u0026gt; : ValueType where T : IDisposable  Base types ValueType\nAn awaitable wrapper around a task whose result is disposable. The wrapper is not disposable, so this prevents usage errors like \u0026ldquo;using (MyAsync())\u0026rdquo; when the appropriate usage should be \u0026ldquo;using (await MyAsync())\u0026rdquo;.\nType Parameters T The type of the result of the underlying task.\nRemarks This code originally comes from AsyncEx: https://github.com/StephenCleary/AsyncEx\nFields Constructors AwaitableDisposable(Task task) Initializes a new awaitable wrapper around the specified task.\nParameters    Name Description     task The underlying task to wrap.    Methods AsTask() Returns the underlying task.\nConfigureAwait(bool continueOnCapturedContext) Infrastructure. Returns a configured task awaiter for the underlying task.\nParameters    Name Description     continueOnCapturedContext Whether to attempt to marshal the continuation back to the captured context.    GetAwaiter() Infrastructure. Returns the task awaiter for the underlying task.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/batchloglistenerbase/",
	"title": "BatchLogListenerBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class BatchLogListenerBase : IBatchLogListener, LogListenerBase  Base types LogListenerBase\nBase types\nIBatchLogListener\nBase class for log listeners that can write in batches.\nFields Constructors BatchLogListenerBase(int maxBatchCount) Initializes a new instance of the BatchLogListenerBase class.\nParameters    Name Description     maxBatchCount The maximum batch count.    Properties MaximumBatchCount Gets the maximum batch count.\nMethods FlushAsync() Flushes the current queue asynchronous.\nReturns Task so it can be awaited.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/system/componentmodel/beginediteventargs/",
	"title": "BeginEditEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace System.ComponentModel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class BeginEditEventArgs : EditEventArgs  Base types EditEventArgs\nEvent args implementation called when the object is about to call. This way, it is possible to cancel the events.\nConstructors BeginEditEventArgs(IEditableObject editableObject) Initializes a new instance of the BeginEditEventArgs class.\nParameters    Name Description     editableObject The editable object.    Exceptions    Name Description     System.ArgumentNullException The editableObject isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/behaviorbase/",
	"title": "BehaviorBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public abstract class BehaviorBase\u0026lt;T\u0026gt; : IBehavior, Behavior\u0026lt;T\u0026gt; where T : FrameworkElement  Base types Behavior\nBase types\nIBehavior\nBehavior base class that handles a safe unsubscribe and clean up because the default behavior class does not always callOnDetaching. This class also adds some specific features such as ValidateRequiredProperties which is automatically called when the behavior is attached.\nType Parameters T The IView this behavior should attach to.\nFields IsEnabledProperty The IsEnabled property registration.\nProperties IsAssociatedObjectLoaded Gets a value indicating whether the is loaded.\nIsEnabled Gets or sets a value indicating whether this behavior is enabled.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/behavioreventargs/",
	"title": "BehaviorEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class BehaviorEventArgs : EventArgs  Base types EventArgs\nBehavior event args.\nConstructors BehaviorEventArgs(IBehavior behavior) Creates the event args.\nParameters    Name Description     behavior The behavior.    Exceptions    Name Description     ArgumentNullException The behavior isnull.    Properties Behavior Gets the behavior.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/binary/binaryserializationcontextinfo/",
	"title": "BinarySerializationContextInfo",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Binary   Available on .NET Framework 4.5, .NET Framework 4.6    public class BinarySerializationContextInfo : SerializationInfoSerializationContextInfo  Base types SerializationInfoSerializationContextInfo\nClass containing all information about the binary serialization context.\nConstructors BinarySerializationContextInfo(SerializationInfo serializationInfo, List memberValues, BinaryFormatter binaryFormatter) Initializes a new instance of the BinarySerializationContextInfo class.\nParameters    Name Description     serializationInfo The serialization info.   memberValues The member values.   binaryFormatter The binary formatter.    Exceptions    Name Description     ArgumentNullException The serializationInfo isnull.    Properties BinaryFormatter Gets the binary formatter.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/binary/binaryserializationcontextinfofactory/",
	"title": "BinarySerializationContextInfoFactory",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Binary   Available on .NET Framework 4.5, .NET Framework 4.6    public class BinarySerializationContextInfoFactory : ISerializationContextInfoFactory  Base types\nISerializationContextInfoFactory\nBinary serialization context factory.\nMethods GetSerializationContextInfo(ISerializer serializer, object model, object data, ISerializationConfiguration configuration) Gets the serialization context information.\nParameters    Name Description     serializer The serializer.   model The model.   data The data.   configuration The configuration.    Returns ISerializationContextInfo.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/binary/binaryserializer/",
	"title": "BinarySerializer",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Binary   Available on .NET Framework 4.5, .NET Framework 4.6    public class BinarySerializer : IBinarySerializer, SerializerBase\u0026lt;BinarySerializationContextInfo\u0026gt;  Base types SerializerBase\nBase types\nIBinarySerializer\nThe binary serializer.\nFields Constructors BinarySerializer(ISerializationManager serializationManager, ITypeFactory typeFactory, IObjectAdapter objectAdapter) Initializes a new instance of the BinarySerializer class.\nParameters    Name Description     serializationManager The serialization manager.   typeFactory The type factory.   objectAdapter The object adapter.    Exceptions    Name Description     ArgumentNullException The serializationManager isnull.    Methods Deserialize(Type modelType, Stream stream, ISerializationConfiguration configuration) Deserializes the specified model type.\nParameters    Name Description     modelType Type of the model.   stream The stream.   configuration The configuration.    Returns The serialized object.\nRemarks When deserializing a stream, the binary serializer must use the because this will inject the right into a new serializer.\nDeserialize(object model, Stream stream, ISerializationConfiguration configuration) Deserializes the specified model.\nParameters    Name Description     model The model.   stream The stream.   configuration The configuration.    Returns Remarks When deserializing a stream, the binary serializer must use the because this will inject the right into a new serializer.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/binding/",
	"title": "Binding",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on Portable Class Libraries, Xamarin - Android    public class Binding : BindingBase  Base types BindingBase\nBinding class for platforms not supporting bindings.\nFields Constructors Binding(BindingParty source, BindingParty target, BindingMode mode, IValueConverter converter) Initializes a new instance of the Binding class.\nParameters    Name Description     source The source.   target The target.   mode The mode.   converter The converter.    Exceptions    Name Description     ArgumentNullException The source isnull.    Binding(object source, string sourcePropertyName, object target, string targetPropertyName, BindingMode mode, IValueConverter converter) Initializes a new instance of the Binding class.\nParameters    Name Description     source The source.   sourcePropertyName Name of the source property.   target The target.   targetPropertyName Name of the target property.   mode The mode.   converter The converter.    Exceptions    Name Description     ArgumentNullException The source isnull.    Properties Converter Gets or sets the converter.\nConverterParameter Gets or sets the converter parameter.\nMode Gets the binding mode.\nSource Gets the binding source.\nTarget Gets the binding target.\nValue Gets the value of the binding source.\nEvents ValueChanged Occurs when the value of the binding has changed.\nMethods TransferValueFromSourceToTarget() Transfers the value from the source to target. Note that this method will check the BindingMode to see if the transfer is possible.\nTransferValueFromTargetToSource() Transfers the value from the target to source. Note that this method will check the BindingMode to see if the transfer is possible.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/bindingbase/",
	"title": "BindingBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on Portable Class Libraries, Xamarin - Android    public abstract class BindingBase  Base class for all bindings.\nFields Methods ClearBinding() Clears the binding and stops listening to both the source and target instances.\nToString() Converts the current instance to a string.\nReturns The string representation of this object.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/bindingcontext/",
	"title": "BindingContext",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on Portable Class Libraries, Xamarin - Android    public class BindingContext  Binding context that takes care of binding updates.\nFields Constructors BindingContext() Initializes a new instance of the BindingContext class.\nProperties GetBindings Gets the get bindings.\nGetCommandBindings Gets the get command bindings.\nUniqueIdentifier Gets the unique identifier.\nEvents BindingUpdateRequired Occurs when binding updates are required.\nMethods AddBinding(Binding binding) Adds a new binding.\nParameters    Name Description     binding The binding.    Exceptions    Name Description     ArgumentNullException The binding isnull.    AddCommandBinding(CommandBinding commandBinding) Adds a new command binding.\nParameters    Name Description     commandBinding The command binding.    Exceptions    Name Description     ArgumentNullException The commandBinding isnull.    Clear() Clears this binding context and all bindings.\nDetermineIfBindingsAreRequired(IViewModel viewModel) Updates the view model of this binding context. This method can be called as much as required, it will automatically determine if binding updates are required.\nParameters    Name Description     viewModel The view model.    RemoveBinding(Binding binding) Removes the binding.\nParameters    Name Description     binding The binding.    Exceptions    Name Description     ArgumentNullException The binding isnull.    RemoveCommandBinding(CommandBinding commandBinding) Removes the command binding.\nParameters    Name Description     commandBinding The command binding.    Exceptions    Name Description     ArgumentNullException The commandBinding isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/bindingcontextextensions/",
	"title": "BindingContextExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on Portable Class Libraries, Xamarin - Android    public static class BindingContextExtensions  Extension methods for the binding context.\nMethods AddBinding(BindingContext bindingContext, Expression\u0026gt; sourcePropertyExpression, Expression\u0026gt; targetPropertyExpression, BindingMode mode, IValueConverter converter) Adds a new binding to the source object.\nParameters    Name Description     bindingContext The binding context.   sourcePropertyExpression The source property expression.   targetPropertyExpression The target property expression.   mode The mode.   converter The converter, can be set afterwards as well.    Returns The Binding.\nExceptions    Name Description     ArgumentNullException The sourcePropertyExpression isnull.    AddBinding(BindingContext bindingContext, object source, string sourcePropertyName, object target, string targetPropertyName, BindingMode mode, IValueConverter converter) Adds a new binding to the binding context.\nParameters    Name Description     bindingContext The binding context.   source The source.   sourcePropertyName Name of the source property.   target The target.   targetPropertyName Name of the target property.   mode The binding mode.   converter The converter, can be set afterwards as well.    Returns The Binding.\nExceptions    Name Description     ArgumentNullException The source isnull.    AddBindingWithConverter(BindingContext bindingContext, Expression\u0026gt; sourcePropertyExpression, Expression\u0026gt; targetPropertyExpression, BindingMode mode) Adds a new binding to the source object and automatically instantiates the converter.\nType Parameters TConverter The type of the converter.\nParameters    Name Description     bindingContext The binding context.   sourcePropertyExpression The source property expression.   targetPropertyExpression The target property expression.   mode The mode.    Returns The Binding.\nExceptions    Name Description     ArgumentNullException The sourcePropertyExpression isnull.    AddBindingWithConverter(BindingContext bindingContext, object source, string sourcePropertyName, object target, string targetPropertyName, BindingMode mode) Adds a new binding to the source object and automatically instantiates the converter.\nType Parameters TConverter The type of the t converter.\nParameters    Name Description     bindingContext The binding context.   source The source.   sourcePropertyName Name of the source property.   target The target.   targetPropertyName Name of the target property.   mode The mode.    Returns The Binding.\nExceptions    Name Description     ArgumentNullException The source isnull.    AddCommandBinding(BindingContext bindingContext, object element, string eventName, ICatelCommand command, Binding commandParameterBinding) Adds a new command binding to the element.\nParameters    Name Description     bindingContext The binding context.   element The element.   eventName Name of the event.   command The command.   commandParameterBinding The command parameter binding.    Returns Catel.MVVM.CommandBinding.\nExceptions    Name Description     ArgumentNullException The element isnull.   ArgumentException The eventName isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/bindingextensions/",
	"title": "BindingExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on Portable Class Libraries, Xamarin - Android    public static class BindingExtensions  Extension methods to create bindings on platforms that initially don\u0026rsquo;t support bindings.\nMethods AddSourceEvent(Binding binding, string eventName) Adds an additional event subscription to support change notification. This extension method will use the Source to add an event.\nParameters    Name Description     binding The binding.   eventName Name of the event.    Returns Catel.MVVM.Binding.\nExceptions    Name Description     ArgumentNullException The binding isnull.   ArgumentException The eventName isnull or whitespace.    AddSourceEvent(Binding binding, string eventName) Adds an additional event subscription to support change notification. This extension method will use the Source to add an event.\nParameters    Name Description     binding The binding.   eventName Name of the event.    Returns Catel.MVVM.Binding.\nExceptions    Name Description     ArgumentNullException The binding isnull.   ArgumentException The eventName isnull or whitespace.    AddTargetEvent(Binding binding, string eventName) Adds an additional event subscription to support change notification. This extension method will use the Target to add an event.\nParameters    Name Description     binding The binding.   eventName Name of the event.    Returns Catel.MVVM.Binding.\nExceptions    Name Description     ArgumentNullException The binding isnull.   ArgumentException The eventName isnull or whitespace.    AddTargetEvent(Binding binding, string eventName) Adds an additional event subscription to support change notification. This extension method will use the Target to add an event.\nParameters    Name Description     binding The binding.   eventName Name of the event.    Returns Catel.MVVM.Binding.\nExceptions    Name Description     ArgumentNullException The binding isnull.   ArgumentException The eventName isnull or whitespace.    GetBindingValue(Binding binding) Gets the binding value. If the binding isnull, this method will returnnull.\nParameters    Name Description     binding The binding.    Returns The binding value.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/system/reflection/bindingflags/",
	"title": "BindingFlags",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace System.Reflection   Available on Portable Class Libraries    public enum BindingFlags : Enum  Base types Enum\nFields Default FlattenHierarchy Instance NonPublic Public Static "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/bindingflagshelper/",
	"title": "BindingFlagsHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class BindingFlagsHelper  The binding flags helper.\nFields DefaultBindingFlags The default binding flags.\nMethods GetFinalBindingFlags(bool flattenHierarchy, bool allowStaticMembers, Nullable allowNonPublicMembers) Gets final binding flags and respects the DefaultBindingFlags as defined in Catel.\nParameters    Name Description     flattenHierarchy A value representing whether the hierarchy should be flattened. Corresponds with.   allowStaticMembers A value representing whether static members should be included. Corresponds with.   allowNonPublicMembers A value representing whether non-public members should be included. Corresponds with. If this value isnull, the default of the framework will be used. Also see DefaultBindingFlags.    Returns The final binding flags.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/data/bindinghelper/",
	"title": "BindingHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public static class BindingHelper  Binding helper class.\nMethods ClearBinding(DependencyObject dependencyObject, DependencyProperty dependencyProperty) Clears a binding. This method implements the ClearBinding for both WPF and Silverlight.\nParameters    Name Description     dependencyObject The dependency object.   dependencyProperty The dependency property.    GetBindingValue(FrameworkElement frameworkElement, BindingBase binding) Gets the binding value.\nParameters    Name Description     frameworkElement The dependency object.   binding The binding.    Returns The actual binding value.\nExceptions    Name Description     ArgumentNullException The frameworkElement isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/bindingmode/",
	"title": "BindingMode",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on Portable Class Libraries, Xamarin - Android    public enum BindingMode : Enum  Base types Enum\nDescribes the direction of the data flow in a binding.\nFields OneTime 0\nUpdates the binding target when the application starts or when the data context changes. This type of binding is appropriate if you are using data where either a snapshot of the current state is appropriate to use or the data is truly static. This type of binding is also useful if you want to initialize your target property with some value from a source property and the data context is not known in advance. This is essentially a simpler form of OneWay binding that provides better performance in cases where the source value does not change.\nOneWay 1\nUpdates the binding target (target) property when the binding source (source) changes. This type of binding is appropriate if the control being bound is implicitly read-only. For instance, you may bind to a source such as a stock ticker. Or perhaps your target property has no control interface provided for making changes, such as a data-bound background color of a table. If there is no need to monitor the changes of the target property, using the OneWay binding mode avoids the overhead of the TwoWay binding mode.\nOneWayToSource 2\nUpdates the source property when the target property changes.\nTwoWay 3\nCauses changes to either the source property or the target property to automatically update the other. This type of binding is appropriate for editable forms or other fully-interactive UI scenarios.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/bindingparty/",
	"title": "BindingParty",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on Portable Class Libraries, Xamarin - Android    public class BindingParty : IDisposable  Base types IDisposable\nContains information about a specific binding party (either source or target).\nFields Constructors BindingParty(object instance, string propertyName) Initializes a new instance of the BindingParty class.\nParameters    Name Description     instance The instance.   propertyName Name of the property.    Properties Instance Gets the instance of the binding party. Note that this value is stored in a weak reference and can benull if garbage collected.\nPropertyName Gets the name of the property.\nEvents ValueChanged Occurs when the value has changed.\nMethods AddEvent(string eventName) Adds the event so it will be used as source to raise the ValueChanged event.\nParameters    Name Description     eventName Name of the event.    Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\nGetPropertyValue() Gets the property value. Note that the property value will benull if the Instance is garbage collected.\nReturns The property value.\nSetPropertyValue(object newValue) Sets the property value. Note that the property value will not be set if the Instance is garbage collected.\nParameters    Name Description     newValue The new value.    ToString() Converts the current instance to a string.\nReturns The string representation of this object.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/bindingpartyextensions/",
	"title": "BindingPartyExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on Portable Class Libraries, Xamarin - Android    public static class BindingPartyExtensions  Extension methods for binding parties.\nFields Constructors Methods AddEvent(BindingParty bindingParty, string eventName) Adds the event by automatically retrieving the event args type.\nParameters    Name Description     bindingParty The binding party.   eventName Name of the event.    Exceptions    Name Description     ArgumentNullException The bindingParty isnull.   ArgumentException The bindingParty isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/data/bindingwithvalidation/",
	"title": "BindingWithValidation",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Data   Available on .NET Framework 4.5, .NET Framework 4.6    public class BindingWithValidation : Binding  Base types Binding\nBinding that automatically enables and.\nConstructors BindingWithValidation() Initializes a new instance of the BindingWithValidation class.\nBindingWithValidation(string path) Initializes a new instance of the BindingWithValidation class with an initial path.\nParameters    Name Description     path The initial Path for the binding.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/booleantocollapsingvisibilityconverter/",
	"title": "BooleanToCollapsingVisibilityConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - Android, Xamarin - iOS    public class BooleanToCollapsingVisibilityConverter : VisibilityConverterBase  Base types VisibilityConverterBase\nConvert from bool to Visibility and back. The bool value true will be converted to Visibility.Visible. The bool value false will be converted to Visibility.Collapsed.\nConstructors BooleanToCollapsingVisibilityConverter() Initializes a new instance of the BooleanToCollapsingVisibilityConverter class.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/booleantograyscaleconverter/",
	"title": "BooleanToGrayscaleConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class BooleanToGrayscaleConverter : ValueConverterBase  Base types ValueConverterBase\nConverts a boolean to a grayscale saturation value. If the input isfalse, this converter will return0, otherwise1.\nConstructors BooleanToGrayscaleConverter() Initialzies the BooleanToGrayscaleConverter.\nProperties FalseResult The value a input value of false will be converted to. The default value is0.\nTrueResult Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/booleantohidingvisibilityconverter/",
	"title": "BooleanToHidingVisibilityConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6    public class BooleanToHidingVisibilityConverter : BooleanToCollapsingVisibilityConverter  Base types BooleanToCollapsingVisibilityConverter\nConvert from bool to Visibility and back. The bool value true will be converted to Visibility.Visible. The bool value false will be converted to Visibility.Hidden.\nConstructors BooleanToHidingVisibilityConverter() Default constructor.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/booleantooppositebooleanconverter/",
	"title": "BooleanToOppositeBooleanConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class BooleanToOppositeBooleanConverter : ValueConverterBase  Base types ValueConverterBase\nConvert a value to it\u0026rsquo;s inverted value.\nRemarks Currently only values of type bool are accepted.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/booleantotextconverter/",
	"title": "BooleanToTextConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class BooleanToTextConverter : ValueConverterBase  Base types ValueConverterBase\nBooleanToTextConverter.\nFields Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/boxingcache/",
	"title": "BoxingCache",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class BoxingCache\u0026lt;T\u0026gt; where T : struct  Caches boxed objects to minimize the memory footprint for boxed value types.\nFields Methods GetBoxedValue(T value) Gets the boxed value representing the specified value.\nParameters    Name Description     value The value to box.    Returns The boxed value.\nGetUnboxedValue(object boxedValue) Gets the unboxed value representing the specified value.\nParameters    Name Description     boxedValue The value to unbox.    Returns The unboxed value.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/pooling/buffer4096poolable/",
	"title": "Buffer4096Poolable",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Pooling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class Buffer4096Poolable : BufferPoolableBase  Base types BufferPoolableBase\nPoolable buffer of 4096 bytes.\nConstructors Buffer4096Poolable() Initializes a new instance of the Buffer4096Poolable class.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/exceptionhandling/bufferpolicy/",
	"title": "BufferPolicy",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ExceptionHandling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class BufferPolicy : IBufferPolicy, PolicyBase  Base types PolicyBase\nBase types\nIBufferPolicy\nRepresent the buffer policy implementation in exception handling\nFields Constructors BufferPolicy(int numberOfTimes, TimeSpan interval) Initializes a new instance of the BufferPolicy class.\nParameters    Name Description     numberOfTimes The number of times.   interval The interval.    Exceptions    Name Description     ArgumentOutOfRangeException The numberOfTimes is out of range.    Methods ToString() The overrided ToString()\nReturns "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/pooling/bufferpoolablebase/",
	"title": "BufferPoolableBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Pooling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class BufferPoolableBase : PoolableBase  Base types PoolableBase\nBase class for buffer poolables.\nFields Constructors Properties Data Gets the byte array.\nSize Gets the size.\nMethods Reset() Resets the object.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/exceptionhandling/bufferedeventargs/",
	"title": "BufferedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ExceptionHandling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class BufferedEventArgs : EventArgs  Base types EventArgs\nConstructors BufferedEventArgs(Exception bufferedException, DateTime dateTime) Initializes a new instance of the BufferedEventArgs class.\nParameters    Name Description     bufferedException The buffered exception.   dateTime the date time that indicates when the buffering was invoked.    Exceptions    Name Description     System.ArgumentNullException The bufferedException isnull.    Properties BufferedException Gets the buffered exception.\nDateTime Gets the date time that indicates when the buffering was invoked.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/businessrulevalidationresult/",
	"title": "BusinessRuleValidationResult",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class BusinessRuleValidationResult : IBusinessRuleValidationResult, ValidationResult  Base types ValidationResult\nBase types\nIBusinessRuleValidationResult\nBusiness rule validation result.\nConstructors BusinessRuleValidationResult(ValidationResultType validationResultType, string messageFormat, object[] args) Initializes a new instance of the BusinessRuleValidationResult class.\nParameters    Name Description     validationResultType Type of the validation result.   messageFormat The message format.   args The args.    Exceptions    Name Description     ArgumentException The messageFormat isnull or whitespace.    Methods CreateError(string messageFormat, object[] args) Creates a BusinessRuleValidationResult containing an error.\nParameters    Name Description     messageFormat The message format.   args The args.    Returns The BusinessRuleValidationResult.\nExceptions    Name Description     ArgumentException The messageFormat isnull or whitespace.    CreateErrorWithTag(string message, object tag) Creates a BusinessRuleValidationResult containing an error.\nParameters    Name Description     message The message.   tag The tag.    Returns The BusinessRuleValidationResult.\nExceptions    Name Description     ArgumentNullException The message isnull.    CreateWarning(string messageFormat, object[] args) Creates a BusinessRuleValidationResult containing a warning.\nParameters    Name Description     messageFormat The message format.   args The args.    Returns The BusinessRuleValidationResult.\nExceptions    Name Description     ArgumentException The messageFormat isnull or whitespace.    CreateWarningWithTag(string message, object tag) Creates a BusinessRuleValidationResult containing a warning.\nParameters    Name Description     message The message.   tag The tag.    Returns The BusinessRuleValidationResult.\nExceptions    Name Description     ArgumentNullException The message isnull.    ToString() Returns a that represents this instance.\nReturns A that represents this instance.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/bytearrayextensions/",
	"title": "ByteArrayExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ByteArrayExtensions  Extensions for byte arrays.\nMethods GetString(byte[] data, Encoding encoding) Gets the string from the byte array using the specified encoding.\nParameters    Name Description     data The data.   encoding The encoding.    Returns System.String.\nGetUtf8String(byte[] data) Gets the UTF8 string from the byte array.\nParameters    Name Description     data The data.    Returns System.String.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/cacheinvalidatedeventargs/",
	"title": "CacheInvalidatedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CacheInvalidatedEventArgs : EventArgs  Base types EventArgs\nEvent args for when a type cache has been invalidated.\nConstructors CacheInvalidatedEventArgs(Type type) Initializes a new instance of the CacheInvalidatedEventArgs class.\nParameters    Name Description     type The type.    Properties Type Gets the type that was invalidated.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/caching/cachestorage/",
	"title": "CacheStorage",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Caching   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CacheStorage\u0026lt;TKey, TValue\u0026gt; : ICacheStorage\u0026lt;TKey, TValue, TKey, TValue\u0026gt;  Base types\nICacheStorage\nThe cache storage.\nType Parameters TKey The key type.\nTValue The value type.\nFields Constructors CacheStorage(Func defaultExpirationPolicyInitCode, bool storeNullValues, IEqualityComparer equalityComparer) Initializes a new instance of the Missing:  class.\nParameters    Name Description     defaultExpirationPolicyInitCode The default expiration policy initialization code.   storeNullValues Allow store null values on the cache.   equalityComparer The equality comparer.    Properties DisposeValuesOnRemoval Gets or sets whether values should be disposed on removal.\nExpirationTimerInterval Gets or sets the expiration timer interval. The default value isTimeSpan.FromSeconds(1).\nKeys Gets the keys so it is possible to enumerate the cache.\nthis[] Gets the value associated with the specified key.\nParameters    Name Description     key The key.    Returns The value associated with the specified key, or default value for the type of the value if the key do not exists.\nExceptions    Name Description     ArgumentNullException The key isnull.    Events Expired Occurs when the item has expired.\nExpiring Occurs when the item is expiring.\nMethods Add(TKey key, TValue value, ExpirationPolicy expirationPolicy, bool override) Adds a value to the cache associated with to a key.\nParameters    Name Description     key The key.   value The value.   expirationPolicy The expiration policy.   override Indicates if the key exists the value will be overridden.    Exceptions    Name Description     ArgumentNullException The key isnull.    Add(TKey key, TValue value, bool override, TimeSpan expiration) Adds a value to the cache associated with to a key.\nParameters    Name Description     key The key.   value The value.   override Indicates if the key exists the value will be overridden.   expiration The timespan in which the cache item should expire when added.    Exceptions    Name Description     ArgumentNullException The key isnull.    Clear() Clears all the items currently in the cache.\nContains(TKey key) Determines whether the cache contains a value associated with the specified key.\nParameters    Name Description     key The key.    Returns true if the cache contains an element with the specified key; otherwise,false.\nExceptions    Name Description     ArgumentNullException The key isnull.    Get(TKey key) Gets the value associated with the specified key\nParameters    Name Description     key The key of the value to get.    Returns The value associated with the specified key, or default value for the type of the value if the key do not exists.\nExceptions    Name Description     ArgumentNullException The key isnull.    GetFromCacheOrFetch(TKey key, Func code, ExpirationPolicy expirationPolicy, bool override) Adds a value to the cache associated with to a key.\nParameters    Name Description     key The key.   code The deferred initialization code of the value.   expirationPolicy The expiration policy.   override Indicates if the key exists the value will be overridden.    Returns The instance initialized by the code.\nExceptions    Name Description     ArgumentNullException If key isnull.    GetFromCacheOrFetch(TKey key, Func code, bool override, TimeSpan expiration) Adds a value to the cache associated with to a key.\nParameters    Name Description     key The key.   code The deferred initialization code of the value.   override Indicates if the key exists the value will be overridden.   expiration The timespan in which the cache item should expire when added.    Returns The instance initialized by the code.\nExceptions    Name Description     ArgumentNullException If key isnull.    GetFromCacheOrFetchAsync(TKey key, Func\u0026gt; code, ExpirationPolicy expirationPolicy, bool override) Adds a value to the cache associated with to a key asynchronously. Note that this is a wrapper around.\nParameters    Name Description     key The key.   code The deferred initialization code of the value.   expirationPolicy The expiration policy.   override Indicates if the key exists the value will be overridden.    Returns The instance initialized by the code.\nExceptions    Name Description     ArgumentNullException If key isnull.    GetFromCacheOrFetchAsync(TKey key, Func\u0026gt; code, bool override, TimeSpan expiration) Adds a value to the cache associated with to a key asynchronously. Note that this is a wrapper around.\nParameters    Name Description     key The key.   code The deferred initialization code of the value.   override Indicates if the key exists the value will be overridden.   expiration The timespan in which the cache item should expire when added.    Returns The instance initialized by the code.\nExceptions    Name Description     ArgumentNullException If key isnull.    Remove(TKey key, Action action) Removes an item from the cache.\nParameters    Name Description     key The key.   action The action that need to be executed in synchronization with the item cache removal.    Exceptions    Name Description     ArgumentNullException The key isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/cachedpropertyinfo/",
	"title": "CachedPropertyInfo",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CachedPropertyInfo  Cached implementation of the PropertyInfo.\nFields Constructors CachedPropertyInfo(PropertyInfo propertyInfo) Initializes a new instance of the CachedPropertyInfo class.\nParameters    Name Description     propertyInfo The property information.    Properties HasPublicGetter Gets a value indicating whether this instance has a public getter.\nHasPublicSetter Gets a value indicating whether this instance has a public setter.\nPropertyInfo Gets the property information.\nMethods IsDecoratedWithAttribute(Type attributeType) Determines whether the property is decorated with the specified attribute.\nParameters    Name Description     attributeType Type of the attribute.    Returns true if the property is decorated with the specified attribute.; otherwise,false.\nIsDecoratedWithAttribute() Determines whether the property is decorated with the specified attribute.\nReturns true if the property is decorated with the specified attribute.; otherwise,false.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/cameraoperationcompletedeventargs/",
	"title": "CameraOperationCompletedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CameraOperationCompletedEventArgs : EventArgs  Base types EventArgs\nfor camera operations.\nConstructors CameraOperationCompletedEventArgs(Exception ex) Initializes a new instance of the CameraOperationCompletedEventArgs class.\nParameters    Name Description     ex The exception that occurred. If no exception has occurred, passnull.    Properties Exception Gets the exception that occurred if any exception occurred. If no exception occurred, this value isnull.\nSucceeded Gets or sets a value indicating whether the operation is succeeded.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/cameraservice/",
	"title": "CameraService",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CameraService : CameraServiceBase  Base types CameraServiceBase\nCamera service.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/cameraservicebase/",
	"title": "CameraServiceBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class CameraServiceBase : ICameraService, ViewModelServiceBase  Base types ViewModelServiceBase\nBase types\nICameraService\nBase implementation of the ICameraService. This implementation takes care of some protection code to prevent double initialization or forgotten initialization. This class ensures that the service is running when setting or getting cricical properties or calling critical methods. This might look a bit dumb in the first place, but saves the developer of the end-classes lots of redundant checking.\nFields Properties AvailableResolutions Gets the available resolutions.\nCameraType Gets the type of the camera.\nFlashMode Gets or sets the flash mode. Unsupported flash modes silently default to Off.\nIsFocusAtPointSupported Gets a value indicating whether the camera can programmatically auto focus on a specific point in the viewfinder.\nIsFocusSupported Gets a value indicating whether the camera can be auto-focused programmatically.\nOrientation Gets the number of degrees that the viewfind brush needs to be rotated clockwise to align with the camera sensor.\nPreviewResolution Gets the preview resolution of the images.\nResolution Gets or sets the resolution of the actual images.\nEvents AutoFocusCompleted Occurs when the focus operation is completed.\nCaptureCompleted Occurs when the capture sequence is complete.\nCaptureImageAvailable Occurs when an image is available.\nCaptureStarted Occurs when the capture sequence has started.\nCaptureThumbnailAvailable Occurs when a thumbnail image is available.\nInitialized Occurs when the camera has been initialized.\nMethods CancelFocus() Cancels the current camera auto focus operation.\nCaptureImage() Initiates a full-resolution capture of the current image displayed in the viewfinder\nFocus() Starts a camera auto focus operation.\nFocusAtPoint(double x, double y) Starts a camera auto focus operation on a specific point in the viewfinder, for those devices that support it.\nParameters    Name Description     x The horizontal location in the viewfinder; a value between 0 (left) and 1.0 (right).   y The vertical location in the viewfinder; a value between 0 (top) and 1.0 (bottom).    GetPreviewBufferArgb32(int[] pixelData) Copies the current viewfinder ARGB frame into a buffer for further manipulation.\nParameters    Name Description     pixelData The ARGB pixel data.    GetPreviewBufferY(byte[] pixelData) Copies the luminance data for the current viewfinder frame into a buffer for further manipulation.\nParameters    Name Description     pixelData The YCrCb pixel data.    GetPreviewBufferYCbCr(byte[] pixelData) Copies the current viewfinder frame into a buffer for further manipulation.\nParameters    Name Description     pixelData The pixel data.    IsCameraTypeSupported(CameraType type) Determines whether a particular camera type is supported on the device.\nParameters    Name Description     type The type.    Returns true if the specified camera type is supported; otherwise,false.\nIsFlashModeSupported(FlashMode mode) Determines whether a particular flash mode is supported on the device.\nParameters    Name Description     mode The mode.    Returns true if the specified flash mode is supported; otherwise,false.\nStart() Starts the camera service for the primary camera so it\u0026rsquo;s retrieving data.\nStart(CameraType cameraType) Starts the camera service for a specific camera type so it\u0026rsquo;s retrieving data.\nParameters    Name Description     cameraType Type of the camera.    Stop() Stops the camera service so it\u0026rsquo;s no longer retrieving data.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/cameratype/",
	"title": "CameraType",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum CameraType : Enum  Base types Enum\nSpecifies the general location of the camera on the device.\nFields FrontFacing The camera is located on the front of the device.\nPrimary The camera is located on the back of the device.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/system/componentmodel/canceleditcompletedeventargs/",
	"title": "CancelEditCompletedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace System.ComponentModel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CancelEditCompletedEventArgs : EventArgs  Base types EventArgs\nEvent args implementation called when the objects cancel edit operation has completed.\nConstructors CancelEditCompletedEventArgs(bool wasCanceled) Initializes a new instance of the CancelEditCompletedEventArgs class.\nParameters    Name Description     wasCanceled If true, the cancel operation was canceled. If false, the cancel operation ran to completion.    Properties IsCancelOperationCanceled Gets or sets the value indicating if the cancel operation canceled.\nRemarks Iftrue, the cancel operation was canceled and the operation is complete. Iffalse, the cancel operation was allowed to continue and all cancel operations are complete.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/system/componentmodel/cancelediteventargs/",
	"title": "CancelEditEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace System.ComponentModel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CancelEditEventArgs : EditEventArgs  Base types EditEventArgs\nEvent args implementation called when the object is about to call. This way, it is possible to cancel the events.\nConstructors CancelEditEventArgs(IEditableObject editableObject) Initializes a new instance of the CancelEditEventArgs class.\nParameters    Name Description     editableObject The editable object.    Exceptions    Name Description     System.ArgumentNullException The editableObject isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/cancelingeventargs/",
	"title": "CancelingEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CancelingEventArgs : CancellableEventArgs  Base types CancellableEventArgs\nEventArgs for the CancelingAsync event.\nConstructors CancelingEventArgs() Initializes a new instance of the CancelingEventArgs class.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/cancellableeventargs/",
	"title": "CancellableEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class CancellableEventArgs : EventArgs  Base types EventArgs\nEventArgs base which implements the Cancel property.\nConstructors CancellableEventArgs() Initializes a new instance of the CancellableEventArgs class.\nProperties Cancel Gets or sets a value indicating whether the action should be canceled. The default value isfalse.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/cannotgetpropertyvalueexception/",
	"title": "CannotGetPropertyValueException",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CannotGetPropertyValueException : Exception  Base types Exception\nException in case a property value cannot be get.\nConstructors CannotGetPropertyValueException(string propertyName) Initializes a new instance of the CannotGetPropertyValueException class.\nParameters    Name Description     propertyName Name of the property.    Properties PropertyName Gets the name of the property.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/cannotsetpropertyvalueexception/",
	"title": "CannotSetPropertyValueException",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CannotSetPropertyValueException : Exception  Base types Exception\nException in case a property value cannot be set.\nConstructors CannotSetPropertyValueException(string propertyName) Initializes a new instance of the CannotSetPropertyValueException class.\nParameters    Name Description     propertyName Name of the property.    Properties PropertyName Gets the name of the property.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/cateldependencyresolver/",
	"title": "CatelDependencyResolver",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CatelDependencyResolver : IDependencyResolver  Base types\nIDependencyResolver\nImplementation of the IDependencyResolver interface for Catel by wrapping the ServiceLocator.\nFields Constructors CatelDependencyResolver(IServiceLocator serviceLocator) Initializes a new instance of the CatelDependencyResolver class.\nParameters    Name Description     serviceLocator The service locator.    Exceptions    Name Description     ArgumentNullException The serviceLocator isnull.    Methods CanResolve(Type type, object tag) Determines whether the specified type with the specified tag can be resolved.\nParameters    Name Description     type The type.   tag The tag.    Returns true if the specified type with the specified tag can be resolved; otherwise,false.\nCanResolveAll(Type[] types) Determines whether all types specified can be resolved. Though Object) will returnnull at the array index when a type cannot be resolved, this method will actually check whether all the specified types are registered. It is still possible to call Object), even when this method returnsfalse.\nParameters    Name Description     types The types.    Returns true if all types specified can be resolved; otherwise,false.\nResolve(Type type, object tag) Resolves the specified type with the specified tag.\nParameters    Name Description     type The type.   tag The tag.    Returns The resolved object.\nExceptions    Name Description     ArgumentNullException The type isnull.   T:Catel.IoC.TypeNotRegisteredException The type is not found in any container.    ResolveAll(Type[] types, object tag) Resolves the specified types with the specified tag.\nParameters    Name Description     types The types.   tag The tag.    Returns A list of resolved types. If one of the types cannot be resolved, that location in the array will benull.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/catelenvironment/",
	"title": "CatelEnvironment",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class CatelEnvironment  Class containing environment information.\nFields DefaultMultiLingualDependencyPropertyValue The default value for dependency properties that use a Properties.Resources value. Such values should be set in the constructor of the control instead of the dependency property to allow runtime switching of languages.\nProperties BypassDevEnvCheck Gets or sets a value indicating whether the \u0026ldquo;devenv.exe\u0026rdquo; check should be bypassed. By default, the IsInDesignMode also checks whether the current process is \u0026ldquo;devenv.exe\u0026rdquo;. This behavior is not very useful when using Catel in Visual Studio extensions, so it is possible to bypass that specific check.\nDisablePropertyChangeNotifications Gets or sets a value indicating whether property change notifications are currently disabled for all instances.\nIsInDesignMode Gets or sets a value indicating whether the environment is currently in design mode.\nMainWindow Gets the main window of the application.\nMethods GetIsInDesignMode(bool initializeDesignTime) Gets whether the software is currently in design mode. Note that unless the IsInDesignMode, the value is not cached but always determined at runtime.\nParameters    Name Description     initializeDesignTime if set totrue, automatically call InitializeDesignTime if in design mode.    Returns true if the software is in design mode,false otherwise.\nRegisterDefaultViewModelServices() Registers the default view model services in the default ServiceLocator. This call can come in handy when the services should be accessed before any view model is created.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.serialization.json/catel/runtime/serialization/json/cateljsoncontractresolver/",
	"title": "CatelJsonContractResolver",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Serialization.Json   Namespace Catel.Runtime.Serialization.Json   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CatelJsonContractResolver : DefaultContractResolver  Base types DefaultContractResolver\nContract resolver to ensure that Catel models will be serialized by the Catel serializers.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.serialization.json/catel/runtime/serialization/json/cateljsonconverter/",
	"title": "CatelJsonConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Serialization.Json   Namespace Catel.Runtime.Serialization.Json   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CatelJsonConverter : JsonConverter  Base types JsonConverter\nConverts Catel models manually using the Catel serializer.\nFields Constructors CatelJsonConverter(IJsonSerializer jsonSerializer, ISerializationConfiguration configuration) Initializes a new instance of the CatelJsonConverter class.\nParameters    Name Description     jsonSerializer The json serializer.   configuration The configuration.    Methods CanConvert(Type objectType) Determines whether this instance can convert the specified object type.\nParameters    Name Description     objectType Type of the object.    Returns true if this instance can convert the specified object type; otherwise,false.\nReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Reads the json.\nParameters    Name Description     reader The reader.   objectType Type of the object.   existingValue The existing value.   serializer The serializer.    Returns System.Object.\nWriteJson(JsonWriter writer, object value, JsonSerializer serializer) Writes the json.\nParameters    Name Description     writer The writer.   value The value.   serializer The serializer.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/cateltypeinfo/",
	"title": "CatelTypeInfo",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CatelTypeInfo  Class containing all information about a Catel type (such as properties).\nFields Constructors CatelTypeInfo(Type type) Initializes a new instance of the CatelTypeInfo class.\nParameters    Name Description     type The type.    Exceptions    Name Description     ArgumentNullException The type isnull.    Properties IsRegisterPropertiesCalled Gets a value indicating whether the RegisterProperties method has been called at least once.\nType Gets the type.\nMethods GetCatelProperties() Gets the Catel properties.\nReturns Dictionary containing the Catel properties.\nGetNonCatelProperties() Gets the non-Catel properties.\nReturns Dictionary containing the non-Catel properties.\nGetPropertyData(string name) Gets the property data.\nParameters    Name Description     name The name of the property.    Returns The PropertyData of the requested property.\nExceptions    Name Description     ArgumentException The name isnull or whitespace.   T:Catel.Data.PropertyNotRegisteredException Thrown when the property is not registered.    IsPropertyRegistered(string name) Returns whether a specific property is registered.\nParameters    Name Description     name The name of the property.    Returns True if the property is registered, otherwise false.\nExceptions    Name Description     ArgumentException The name isnull or whitespace.    RegisterProperties() Registers all the properties for the specified type. This method can only be called once per type. The PropertyDataManager caches whether it has already registered the properties once.\nExceptions    Name Description     InvalidOperationException The properties are not declared correctly.    RegisterProperty(string name, PropertyData propertyData) Registers a property for a specific type.\nParameters    Name Description     name The name of the property.   propertyData The property data.    Exceptions    Name Description     ArgumentException The name isnull or whitespace.   ArgumentNullException The propertyData isnull.   T:Catel.Data.PropertyAlreadyRegisteredException A property with the same name is already registered.    UnregisterProperty(string name) Unregisters a property for a specific type.\nParameters    Name Description     name The name of the property.    Exceptions    Name Description     ArgumentException The name isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/introduction/platform-support/caveats-in-uwp/",
	"title": "Caveats in UWP",
	"tags": [],
	"description": "",
	"content": "Below are all caveats in UWP.\nKnow caveats? Feel free to add them!\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/changenotificationwrapper/",
	"title": "ChangeNotificationWrapper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ChangeNotificationWrapper  Wrapper for an object that implements the and. This class is thread-safe and uses weak events to prevent memory leaks.\nFields Constructors ChangeNotificationWrapper(object value) Initializes a new instance of the ChangeNotificationWrapper class.\nParameters    Name Description     value The value.    Exceptions    Name Description     ArgumentNullException The value isnull or whitespace.    Properties IsObjectAlive Gets a value indicating whether the object is alive.\nSupportsNotifyCollectionChanged Gets a value indicating whether is supported by the target object.\nSupportsNotifyPropertyChanged Gets a value indicating whether is supported by the target object.\nEvents CollectionChanged Occurs when the CollectionChanged event occurs on the target object.\nCollectionItemPropertyChanged Occurs when the PropertyChanged event occurs in the collection when the target object is a collection.\nPropertyChanged Occurs when the PropertyChanged event occurs on the target object.\nMethods IsUsefulForObject(object obj) Determines whether creating a ChangeNotificationWrapper is useful for the specified object. An object is considered usable when it implements either or.\nParameters    Name Description     obj The object to check.    Returns true if it is useful to create a ChangeNotificationWrapper; otherwise,false.\nOnObjectCollectionChanged(object sender, NotifyCollectionChangedEventArgs e) Called when the target object raises the event.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    Remarks This method is public to allow the usage of the WeakEventListener, do not call this method yourself.\nOnObjectCollectionItemPropertyChanged(object sender, PropertyChangedEventArgs e) Called when the target object raises the event of an object that is located inside the collection being monitored.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    Remarks This method is public to allow the usage of the WeakEventListener, do not call this method yourself.\nOnObjectPropertyChanged(object sender, PropertyChangedEventArgs e) Called when the target object raises the event.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    Remarks This method is public to allow the usage of the WeakEventListener, do not call this method yourself.\nSubscribeNotifyChangedEvents(object value, ICollection parentCollection) Subscribes to the notify changed events.\nParameters    Name Description     value The object to subscribe to.   parentCollection If notnull, this is a collection item which should use Object,PropertyChangedEventArgs).    UnsubscribeFromAllEvents() Unsubscribes from all events.\nUnsubscribeNotifyChangedEvents(object value, ICollection parentCollection) Unsubscribes from the notify changed events.\nParameters    Name Description     value The object to unsubscribe from.   parentCollection The parent collection.    Remarks No need to check for weak events, they are unsubscribed automatically.\nUpdateCollectionSubscriptions(ICollection collection) Updates all the collection subscriptions. This method is internally used when a notifiable collection raises the event.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/childawaremodelbase/",
	"title": "ChildAwareModelBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class ChildAwareModelBase : ValidatableModelBase  Base types ValidatableModelBase\nClass that is aware of changes of child objects by using the ChangeNotificationWrapper.\nFields Constructors Properties DefaultDisableEventSubscriptionsOfChildValuesValue Gets or sets a value indicating whether event subscriptions of child values should be disabled.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/circulardependencyexception/",
	"title": "CircularDependencyException",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CircularDependencyException : Exception  Base types Exception\nException which can be used to easily detect circular dependencies inside the ServiceLocator. This exception is used instead of letting the .NET framework throw aStackOverflowException which is much harder to debug.\nConstructors Properties DuplicateRequestInfo Duplicated type request\nTypePath Gets the type path.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/collapsingvisibilityconverterbase/",
	"title": "CollapsingVisibilityConverterBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - Android, Xamarin - iOS    public abstract class CollapsingVisibilityConverterBase : VisibilityConverterBase  Base types VisibilityConverterBase\nA base class that makes it easier to create values to visibility converters. This converter returns when a non-visible state should be returned.\nConstructors "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/collections/collectionextensions/",
	"title": "CollectionExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Collections   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class CollectionExtensions  Extensions for the and classes.\nFields Methods AddRange(ICollection collection, IEnumerable range) Add an range of items to the specified.\nType Parameters T Type of items within the collection.\nParameters    Name Description     collection The collection.   range An range of items.    Exceptions    Name Description     ArgumentNullException The collection isnull.    CanMoveItemDown(IList list, object item) Determines whether the item can be moved down in the list.\nParameters    Name Description     list The list.   item The item to check.    Returns true if the item can be moved down in the list; otherwise,false.\nExceptions    Name Description     ArgumentNullException The list isnull.    CanMoveItemUp(IList list, object item) Determines whether the item can be moved up in the list.\nParameters    Name Description     list The list.   item The item to check.    Returns true if the item can be moved up in the list; otherwise,false.\nExceptions    Name Description     ArgumentNullException The list isnull.    ForEach(IEnumerable collection, Action action) The for each extension on.\nType Parameters TItem The type of the item.\nParameters    Name Description     collection The collection.   action The action.    IndexOf(IList list, T item, int index) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the Missing:  that extends from the specified index to the last element.\nType Parameters T The item type\nParameters    Name Description     list The list   item The object to locate in the Missing: . The value can be for reference types.   index The zero-based starting index of the search. 0 (zero) is valid in an empty list.    Returns The zero-based index of the first occurrence of item within the range of elements in the Missing:  that extends from index to the last element, if found; otherwise, –1.\nExceptions    Name Description     T:System.ArgumentOutOfRangeException index is outside the range of valid indexes for the Missing: .    MoveItemDown(IList list, object item) Moves the specified item down in the list.\nParameters    Name Description     list The list.   item The item to move down.    Returns true if the item has successfully been moved down; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The list isnull.    MoveItemDownByIndex(IList list, int index) Moves the item at the specified index down in the list.\nParameters    Name Description     list The list.   index The index of the item to move down.    Returns true if the item has successfully been moved down; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The list isnull.   ArgumentOutOfRangeException The index is smaller than 0 or larger than the list count.    MoveItemUp(IList list, object item) Moves the specified item up in the list.\nParameters    Name Description     list The list.   item The item to move up.    Returns true if the item has successfully been moved up; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The list isnull.    MoveItemUpByIndex(IList list, int index) Moves the item at the specified index up in the list.\nParameters    Name Description     list The list.   index The index of the item to move up.    Returns true if the item has successfully been moved up; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The list isnull.   ArgumentOutOfRangeException The index is smaller than 0 or larger than the list count.    RemoveFirst(IList list) Removes the first entry from the list. When there are no items in the list, this method will silently exit.\nParameters    Name Description     list The list.    Exceptions    Name Description     ArgumentNullException The list isnull.    RemoveLast(IList list) Removes the last entry from the list. When there are no items in the list, this method will silently exit.\nParameters    Name Description     list The list.    Exceptions    Name Description     ArgumentNullException The list isnull.    ReplaceRange(ICollection collection, IEnumerable range) Replaces the whole range of the specified collection. This is done by internally calling and finallyAddRange{T}.\nType Parameters T Type of items within the collection.\nParameters    Name Description     collection The collection.   range The range of items to add to the observable collection.    Exceptions    Name Description     ArgumentNullException The collection isnull.    Sort(IList existingSet, Funccomparer) Sorts the specified existing set.\nType Parameters T The type of elements.\nParameters    Name Description     existingSet The existing set.   comparer The comparer.    SynchronizeCollection(IList existingSet, IEnumerable newSet, bool updateExistingSet) Synchronizes the collection by adding / removing items that are in the new set.\nType Parameters T The type of the collection item.\nParameters    Name Description     existingSet The existing set.   newSet The new set.   updateExistingSet if set totrue, the existing set will be updated, otherwise a new collection will be created and the existing set will remain unchanged.    Returns IEnumerable\u0026lt;T\u0026gt;.\nToArray(IEnumerable collection, Type elementType) Converts the collection to an array.\nParameters    Name Description     collection The collection.   elementType Type of the element.    Returns Array.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/collections/collectionhelper/",
	"title": "CollectionHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Collections   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class CollectionHelper  Collection helper class.\nMethods IsEqualTo(IEnumerable listA, IEnumerable listB) Checks whether a collection is the same as another collection.\nParameters    Name Description     listA The list A.   listB The list B.    Returns True if the two collections contain all the same items in the same order.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/collectiontocollapsingvisibilityconverter/",
	"title": "CollectionToCollapsingVisibilityConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - Android, Xamarin - iOS    public class CollectionToCollapsingVisibilityConverter : VisibilityConverterBase  Base types VisibilityConverterBase\nConverts the count of a collection to the visibility.\nConstructors CollectionToCollapsingVisibilityConverter() Initializes a new instance of the CollectionToCollapsingVisibilityConverter class.\nCollectionToCollapsingVisibilityConverter(Visibility visibility) Initializes a new instance of the CollectionToCollapsingVisibilityConverter class.\nParameters    Name Description     visibility The visibility.    Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/collectiontocountconverter/",
	"title": "CollectionToCountConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CollectionToCountConverter : ValueConverterBase  Base types ValueConverterBase\nConverts the items inside a collection to the number of elements contained by the collection.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/collectiontohidingvisibilityconverter/",
	"title": "CollectionToHidingVisibilityConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6    public class CollectionToHidingVisibilityConverter : CollectionToCollapsingVisibilityConverter  Base types CollectionToCollapsingVisibilityConverter\nConvert from bool to Visibility and back. The bool value true will be converted to Visibility.Visible. The bool value false will be converted to Visibility.Hidden.\nConstructors CollectionToHidingVisibilityConverter() Default constructor.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/colortobrushconverter/",
	"title": "ColorToBrushConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class ColorToBrushConverter : ValueConverterBase\u0026lt;Color, Brush\u0026gt;  Base types ValueConverterBase\nColorToBrushConverter\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/messaging/combinedmessage/",
	"title": "CombinedMessage",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Messaging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CombinedMessage : MessageBase\u0026lt;CombinedMessage, bool\u0026gt;  Base types MessageBase\nImplements a message transferring a boolean value and a custom property.\nConstructors CombinedMessage() Initializes a new instance of the CombinedMessage class.\nRemarks Required by the base class.\nProperties Exception Provides access to the additional exception payload data of the message.\nMethods SendWith(bool data, Exception exception, object tag) Send a CombinedMessage with the given payload data.\nParameters    Name Description     data The boolean payload Data to be sent with.   exception The exception payload Data to be sent with.   tag The optional Catel mediator tag to be used.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/command/",
	"title": "Command",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class Command : Command\u0026lt;object, object\u0026gt;  Base types Command\nImplements the Missing:  class with as generic types.\nConstructors Command(Action execute, Func canExecute, object tag) Initializes a new instance of the Missing:  class.\nParameters    Name Description     execute The action to execute.   canExecute The function to call to determine wether the command can be executed.   tag The tag of the command.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/commandbase/",
	"title": "CommandBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class CommandBase  Base class for generic command classes. Contains protected static services for using in derived classes.\nFields Constructors "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/commandbehaviorbase/",
	"title": "CommandBehaviorBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public abstract class CommandBehaviorBase\u0026lt;T\u0026gt; : BehaviorBase\u0026lt;T\u0026gt; where T : FrameworkElement  Base types BehaviorBase\nBehavior base class that handles a safe unsubscribe and clean up because the default behavior class does not always callOnDetaching. This class extends the Missing:  class by adding supports for commands.\nType Parameters T The this behavior should attach to.\nFields CommandParameterProperty The property definition for the CommandParameter dependency property.\nCommandProperty Using a DependencyProperty as the backing store for Command. This enables animation, styling, binding, etc\u0026hellip;\nModifiersProperty Using a DependencyProperty as the backing store for Modifiers. This enables animation, styling, binding, etc\u0026hellip;\nProperties Command Gets or sets the command to execute when the key is pressed.\nCommandParameter Gets or sets the command parameter, which will override the parameter defined in the direct command binding.\nModifiers Gets or sets the modifiers to check for.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/commandbinding/",
	"title": "CommandBinding",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on Portable Class Libraries, Xamarin - Android    public class CommandBinding : BindingBase  Base types BindingBase\nBinding to bind events to commands.\nFields Constructors CommandBinding(object element, string eventName, ICatelCommand command, Binding commandParameterBinding) Initializes a new instance of the CommandBinding class.\nParameters    Name Description     element The element.   eventName Name of the event.   command The command.   commandParameterBinding The command parameter binding.    Exceptions    Name Description     ArgumentNullException The element isnull.   ArgumentException The eventName isnull or whitespace.    Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/commandcanceledeventargs/",
	"title": "CommandCanceledEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CommandCanceledEventArgs : CommandEventArgs  Base types CommandEventArgs\nCommandCanceledEventArgs, just like above but allows the event to be cancelled.\nConstructors CommandCanceledEventArgs(object commandParameter) Initializes a new instance of the CommandCanceledEventArgs class.\nParameters    Name Description     commandParameter The command parameter.    Properties Cancel Gets or sets a value indicating whether this CommandCanceledEventArgs command should be cancelled.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/commandcontainerbase/",
	"title": "CommandContainerBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class CommandContainerBase\u0026lt;TExecuteParameter, TCanExecuteParameter, TPogress\u0026gt; where TPogress : ITaskProgressReport  Container for application-wide commands.\nType Parameters TExecuteParameter The type of the command execute parameter.\nTCanExecuteParameter The type of the command can execute parameter.\nTPogress The type of the pogress.\nFields Constructors Properties CommandName Gets the name of the command.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/commandcreatedeventargs/",
	"title": "CommandCreatedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CommandCreatedEventArgs : EventArgs  Base types EventArgs\nEvent args when a command is created.\nConstructors CommandCreatedEventArgs(ICommand command, string name) Initializes a new instance of the CommandCreatedEventArgs class.\nParameters    Name Description     command The command.   name The name.    Properties Command Gets the command.\nName Gets the name.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/commandeventargs/",
	"title": "CommandEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CommandEventArgs : EventArgs  Base types EventArgs\nCommandEventArgs, simply holds the command parameter.\nConstructors CommandEventArgs(object commandParameter) Initializes a new instance of the CommandEventArgs class.\nParameters    Name Description     commandParameter The command parameter.    Properties CommandParameter Gets the command parameter used for the execution.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/commandeventtriggerbase/",
	"title": "CommandEventTriggerBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6    public abstract class CommandEventTriggerBase\u0026lt;T\u0026gt; : EventTriggerBase\u0026lt;T, T\u0026gt; where T : FrameworkElement  Base types EventTriggerBase\nTrigger base class that handles a safe unsubscribe and clean up because the default Trigger class does not always call OnDetaching. This class extends the Missing:  class by adding supports for commands.\nType Parameters T The this behavior should attach to.\nFields CommandParameterProperty The property definition for the CommandParameter dependency property.\nCommandProperty Using a DependencyProperty as the backing store for Command. This enables animation, styling, binding, etc\u0026hellip;\nModifiersProperty Using a DependencyProperty as the backing store for Modifiers. This enables animation, styling, binding, etc\u0026hellip;\nProperties Command Gets or sets the command to execute when the key is pressed.\nCommandParameter Gets or sets the command parameter, which will override the parameter defined in the direct command binding.\nModifiers Gets or sets the modifiers to check for.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/commandexecutedeventargs/",
	"title": "CommandExecutedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CommandExecutedEventArgs : EventArgs  Base types EventArgs\nimplementation for the event when an ICatelCommand has been executed.\nConstructors CommandExecutedEventArgs(ICatelCommand command, object commandParameter, string commandPropertyName) Initializes a new instance of the CommandExecutedEventArgs class.\nParameters    Name Description     command The command that just has been executed.   commandParameter The command parameter that was used for the execution.   commandPropertyName The property name under which the command is registered.    Exceptions    Name Description     ArgumentNullException The command isnull.    Properties Command Gets the command that just has been executed.\nCommandParameter Gets the command parameter used for the execution.\nCommandPropertyName Gets the property name under which the command is registered\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/commandhelper/",
	"title": "CommandHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class CommandHelper  Helper class for the Command class.\nMethods CreateCommand(Action execute, Expression\u0026gt; validationSummaryPropertyExpression, object tag) Creates a new Command that automatically determines whether it can be executed. It does this by checking the right validation summary, which should be in a property..\nParameters    Name Description     execute The action to execute when the command is being invoked.   validationSummaryPropertyExpression The validation summary property expression.   tag The tag for the command.    Returns The created command.\nExceptions    Name Description     ArgumentNullException The execute isnull.    CreateCommand(Action execute, Expression\u0026gt; validationSummaryPropertyExpression, object tag) Creates a new Missing:  that automatically determines whether it can be executed. It does this by checking the right validation summary, which should be in a property..\nType Parameters TExecuteParameter The type of the execute parameter.\nParameters    Name Description     execute The action to execute when the command is being invoked.   validationSummaryPropertyExpression The validation summary property expression.   tag The tag for the command.    Returns The created command.\nExceptions    Name Description     ArgumentNullException The execute isnull.    CreateTaskCommand(Func execute, Expression\u0026gt; validationSummaryPropertyExpression, object tag) Creates a new TaskCommand that automatically determines whether it can be executed. It does this by checking the right validation summary, which should be in a property..\nParameters    Name Description     execute The action to execute when the command is being invoked.   validationSummaryPropertyExpression The validation summary property expression.   tag The tag for the command.    Returns The created command.\nExceptions    Name Description     ArgumentNullException The execute isnull.    CreateTaskCommand(Funcexecute, Expression\u0026gt; validationSummaryPropertyExpression, object tag) Creates a new Missing:  that automatically determines whether it can be executed. It does this by checking the right validation summary, which should be in a property..\nType Parameters TExecuteParameter The type of the execute parameter.\nParameters    Name Description     execute The action to execute when the command is being invoked.   validationSummaryPropertyExpression The validation summary property expression.   tag The tag for the command.    Returns The created command.\nExceptions    Name Description     ArgumentNullException The execute isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/commandmanager/",
	"title": "CommandManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CommandManager : ICommandManager  Base types\nICommandManager\nManager that takes care of application-wide commands and can dynamically forward them to the right view models.\nFields Constructors CommandManager() Initializes a new instance of the CommandManager class.\nProperties IsKeyboardEventsSuspended Gets or sets a value indicating whether the keyboard events are suspended.\nEvents CommandCreated Occurs when a command has been created.\nMethods CreateCommand(string commandName, InputGesture inputGesture, ICompositeCommand compositeCommand, bool throwExceptionWhenCommandIsAlreadyCreated) Creates the command inside the command manager. If the throwExceptionWhenCommandIsAlreadyCreated isfalse and the command is already created, only the input gesture is updated for the existing command.\nParameters    Name Description     commandName Name of the command.   inputGesture The input gesture.   compositeCommand The composite command. Ifnull, this will default to a new instance of CompositeCommand.   throwExceptionWhenCommandIsAlreadyCreated if set totrue, this method will throw an exception when the command is already created.    Exceptions    Name Description     ArgumentException The commandName isnull or whitespace.   InvalidOperationException The specified command is already created using the Boolean) method.    ExecuteCommand(string commandName) Executes the command.\nParameters    Name Description     commandName Name of the command.    Exceptions    Name Description     ArgumentException The commandName isnull or whitespace.   InvalidOperationException The specified command is not created using the Boolean) method.    GetCommand(string commandName) Gets the command created with the command name.\nParameters    Name Description     commandName Name of the command.    Returns The ornull if the command is not created.\nExceptions    Name Description     ArgumentException The commandName isnull or whitespace.    GetCommands() Gets all the registered commands.\nReturns The names of the commands.\nGetInputGesture(string commandName) Gets the input gesture for the specified command.\nParameters    Name Description     commandName Name of the command.    Returns The input gesture ornull if there is no input gesture for the specified command.\nExceptions    Name Description     InvalidOperationException The specified command is not created using the Boolean) method.    GetOriginalInputGesture(string commandName) Gets the original input gesture with which the command was initially created.\nParameters    Name Description     commandName Name of the command.    Returns The input gesture ornull if there is no input gesture for the specified command.\nExceptions    Name Description     InvalidOperationException The specified command is not created using the Boolean) method.    InvalidateCommands() Invalidates the all the currently registered commands.\nIsCommandCreated(string commandName) Determines whether the specified command name is created.\nParameters    Name Description     commandName Name of the command.    Returns true if the specified command name is created; otherwise,false.\nExceptions    Name Description     ArgumentException The commandName isnull or whitespace.    RegisterAction(string commandName, Action action) Registers the action with the specified command name.\nParameters    Name Description     commandName Name of the command.   action The action.    Exceptions    Name Description     ArgumentException The commandName isnull or whitespace.   ArgumentNullException The action isnull.   InvalidOperationException The specified command is not created using the Boolean) method.    RegisterAction(string commandName, Action action) Registers the action with the specified command name.\nParameters    Name Description     commandName Name of the command.   action The action.    Exceptions    Name Description     ArgumentException The commandName isnull or whitespace.   ArgumentNullException The action isnull.   InvalidOperationException The specified command is not created using the Boolean) method.    RegisterCommand(string commandName, ICommand command, IViewModel viewModel) Registers a command with the specified command name.\nParameters    Name Description     commandName Name of the command.   command The command.   viewModel The view model.    Exceptions    Name Description     ArgumentException The commandName isnull or whitespace.   ArgumentNullException The command isnull.   InvalidOperationException The specified command is not created using the Boolean) method.    ResetInputGestures() Resets the input gestures to the original input gestures with which the commands were registered.\nSubscribeToKeyboardEvents() Subscribes to keyboard events.\nSubscribeToKeyboardEvents(FrameworkElement view) Subscribes to keyboard events.\nParameters    Name Description     view The view.    Exceptions    Name Description     ArgumentNullException The view isnull.    UnregisterAction(string commandName, Action action) Unregisters the action with the specified command name.\nParameters    Name Description     commandName Name of the command.   action The action.    Exceptions    Name Description     ArgumentException The commandName isnull or whitespace.   ArgumentNullException The action isnull.   InvalidOperationException The specified command is not created using the Boolean) method.    UnregisterAction(string commandName, Action action) Unregisters the action with the specified command name.\nParameters    Name Description     commandName Name of the command.   action The action.    Exceptions    Name Description     ArgumentException The commandName isnull or whitespace.   ArgumentNullException The action isnull.   InvalidOperationException The specified command is not created using the Boolean) method.    UnregisterCommand(string commandName, ICommand command) Unregisters a command with the specified command name.\nParameters    Name Description     commandName Name of the command.   command The command.    Exceptions    Name Description     ArgumentException The commandName isnull or whitespace.   ArgumentNullException The command isnull.   InvalidOperationException The specified command is not created using the Boolean) method.    UpdateInputGesture(string commandName, InputGesture inputGesture) Updates the input gesture for the specified command.\nParameters    Name Description     commandName Name of the command.   inputGesture The new input gesture.    Exceptions    Name Description     ArgumentException The commandName isnull or whitespace.   InvalidOperationException The specified command is not created using the Boolean) method.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/markup/commandmanagerbinding/",
	"title": "CommandManagerBinding",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Markup   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class CommandManagerBinding : UpdatableMarkupExtension  Base types UpdatableMarkupExtension\nBinds commands to the command manager.\nFields Constructors CommandManagerBinding() Initializes a new instance of the CommandManagerBinding class.\nCommandManagerBinding(string commandName) Initializes a new instance of the CommandManagerBinding class.\nParameters    Name Description     commandName Name of the command.    Properties CommandName Gets or sets the name of the command.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/commandmanagerwrapper/",
	"title": "CommandManagerWrapper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class CommandManagerWrapper  Wrapper class to support key down events and automatically invoke commands on the ICommandManager.\nFields Constructors CommandManagerWrapper(FrameworkElement view, ICommandManager commandManager) Initializes a new instance of the CommandManagerWrapper class.\nParameters    Name Description     view The view.   commandManager The command manager.    Properties Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/commandprogresschangedeventargs/",
	"title": "CommandProgressChangedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CommandProgressChangedEventArgs\u0026lt;TProgress\u0026gt; : EventArgs  Base types EventArgs\nEvent args for event when TaskCommand progress changes.\nConstructors CommandProgressChangedEventArgs(TProgress progress) Initializes a new instance of the Missing:  class.\nParameters    Name Description     progress     Properties Progress Progress info.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/commandtriggeractionbase/",
	"title": "CommandTriggerActionBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6    public abstract class CommandTriggerActionBase\u0026lt;T\u0026gt; : TriggerActionBase\u0026lt;T, T\u0026gt; where T : FrameworkElement  Base types TriggerActionBase\nTrigger base class that handles a safe unsubscribe and clean up because the default Trigger class does not always call OnDetaching. This class extends the Missing:  class by adding supports for commands.\nType Parameters T The this behavior should attach to.\nFields CommandParameterProperty The property definition for the CommandParameter dependency property.\nCommandProperty Using a DependencyProperty as the backing store for Command. This enables animation, styling, binding, etc\u0026hellip;\nModifiersProperty Using a DependencyProperty as the backing store for Modifiers. This enables animation, styling, binding, etc\u0026hellip;\nProperties Command Gets or sets the command to execute when the key is pressed.\nCommandParameter Gets or sets the command parameter, which will override the parameter defined in the direct command binding.\nModifiers Gets or sets the modifiers to check for.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/commandtriggerbase/",
	"title": "CommandTriggerBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6    public abstract class CommandTriggerBase\u0026lt;T\u0026gt; : TriggerBase\u0026lt;T, T\u0026gt; where T : FrameworkElement  Base types TriggerBase\nTrigger base class that handles a safe unsubscribe and clean up because the default Trigger class does not always call OnDetaching. This class extends the Missing:  class by adding supports for commands.\nType Parameters T The this behavior should attach to.\nFields CommandParameterProperty The property definition for the CommandParameter dependency property.\nCommandProperty Using a DependencyProperty as the backing store for Command. This enables animation, styling, binding, etc\u0026hellip;\nModifiersProperty Using a DependencyProperty as the backing store for Modifiers. This enables animation, styling, binding, etc\u0026hellip;\nProperties Command Gets or sets the command to execute when the key is pressed.\nCommandParameter Gets or sets the command parameter, which will override the parameter defined in the direct command binding.\nModifiers Gets or sets the modifiers to check for.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/comparablemodelbase/",
	"title": "ComparableModelBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class ComparableModelBase : ModelBase  Base types ModelBase\nComparable model base.\nFields Constructors Properties Methods Equals(object obj) Determines whether the specified is equal to this instance.\nParameters    Name Description     obj The to compare with this instance.    Returns true if the specified is equal to this instance; otherwise,false.\nExceptions    Name Description     T:System.NullReferenceException The obj parameter is null.    GetHashCode() Returns a hash code for this instance.\nReturns A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/compositecommand/",
	"title": "CompositeCommand",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CompositeCommand : ICompositeCommand, Command  Base types Command\nBase types\nICompositeCommand\nComposite command which allows several commands inside a single command being exposed to a view.\nFields Constructors CompositeCommand() Initializes a new instance of the Missing:  class.\nProperties AllowPartialExecution Gets or sets a value indicating whether partial execution of commands is allowed. If this value istrue, this composite command will always be executable and only invoke the internal commands that are executable. The default value isfalse.\nAtLeastOneMustBeExecutable Gets or sets a value indicating whether at least one command must be executable. This will prevent the command to be executed without any commands. The default value istrue.\nCheckCanExecuteOfAllCommandsToDetermineCanExecuteForCompositeCommand Gets or sets whether this command should check the can execute of all commands to determine can execute for composite command. The default value istrue which means the composite command can only be executed if all commands can be executed. If there is a requirement to allow partial invocation, set this property to false.\nMethods GetActions() Gets the actions currently registered to this composite command.\nReturns IEnumerable.\nGetActionsWithParameter() Gets the actions with parameters currently registered to this composite command.\nReturns IEnumerable.\nGetCommands() Gets the commands currently registered to this composite command.\nReturns IEnumerable.\nRegisterAction(Action action) Registers the specified action.\nParameters    Name Description     action The action.    Exceptions    Name Description     ArgumentNullException The action isnull.    RegisterAction(Action action) Registers the specified action.\nParameters    Name Description     action The action.    Exceptions    Name Description     ArgumentNullException The action isnull.    RegisterCommand(ICommand command, IViewModel viewModel) Registers the specified command.\nParameters    Name Description     command The command.   viewModel The view model. If specified, the command will automatically be unregistered when the view model is closed.    Exceptions    Name Description     ArgumentNullException The command isnull.    Remarks Note that if the view model is not specified, the command must be unregistered manually in order to prevent memory leaks.\nUnregisterAction(Action action) Unregisters the specified action.\nParameters    Name Description     action The action.    Exceptions    Name Description     ArgumentNullException The action isnull.    UnregisterAction(Action action) Unregisters the specified action.\nParameters    Name Description     action The action.    Exceptions    Name Description     ArgumentNullException The action isnull.    UnregisterCommand(ICommand command) Unregisters the specified command.\nParameters    Name Description     command The command.    Exceptions    Name Description     ArgumentNullException The command isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/caching/policies/compositeexpirationpolicy/",
	"title": "CompositeExpirationPolicy",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Caching.Policies   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CompositeExpirationPolicy : ExpirationPolicy  Base types ExpirationPolicy\nThe composite expiration policy.\nFields Constructors CompositeExpirationPolicy(bool expiresOnlyIfAllPoliciesExpires) Initializes a new instance of the CompositeExpirationPolicy class.\nParameters    Name Description     expiresOnlyIfAllPoliciesExpires Iftrue indicates that the cache will expires only if policies of the composition expires, otherwise the cache will expires if policy does.    Properties CanReset Gets a value indicating whether can reset.\nIsExpired Gets a value indicating whether is expired.\nMethods Add(ExpirationPolicy expirationPolicy) Adds an expiration policy to the composition.\nParameters    Name Description     expirationPolicy The expiration policy.    Returns The CompositeExpirationPolicy.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/compositefilter/",
	"title": "CompositeFilter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CompositeFilter\u0026lt;T\u0026gt; : ICompositeFilter\u0026lt;T, T\u0026gt; where T : class  Base types\nICompositeFilter\nComposite filter.\nType Parameters T Type of the filter.\nConstructors CompositeFilter() Initializes a new instance of the Missing:  class.\nProperties Excludes Gets or sets the excludes.\nIncludes Gets the includes.\nMethods Matches(T target) Checks whether the target matches any of the Includes and does not match any of the Excludes.\nParameters    Name Description     target The target.    Returns true if the match is a successful hit,false otherwise.\nMatchesObject(object target) Object implementation of the Missing: method so it can be used for non-generic predicates.\nParameters    Name Description     target The target.    Returns true if the match is a successful hit,false otherwise.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/compositepredicate/",
	"title": "CompositePredicate",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CompositePredicate\u0026lt;T, T\u0026gt; where T : class  Composite predicate.\nType Parameters T The predicates.\nFields Methods DoesNotMatchAny(T target) Checks whether the specified target does not match any of the registered predicates.\nParameters    Name Description     target The target.    Returns true if the target does not match any of the filters,false otherwise.\nExceptions    Name Description     ArgumentNullException The target isnull.    MatchesAll(T target) Checks whether the specified target matches all of the registered predicates.\nParameters    Name Description     target The target.    Returns true if the target matches all of the filters,false otherwise.\nExceptions    Name Description     ArgumentNullException The target isnull.    MatchesAny(T target) Checks whether the specified target matches any of the registered predicates.\nParameters    Name Description     target The target.    Returns true if the target matches any of the filters,false otherwise.\nExceptions    Name Description     ArgumentNullException The target isnull.    MatchesNone(T target) Checks whether the specified target matches none of the registered predicates.\nParameters    Name Description     target The target.    Returns true if the target matches none of the filters,false otherwise.\nExceptions    Name Description     ArgumentNullException The target isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/compositevalidator/",
	"title": "CompositeValidator",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CompositeValidator : IValidator  Base types\nIValidator\nAllows the combination of several validators into a single validator. This class will combine all instances of the IValidator class found for a type using the IValidatorProvider into this single composite validator.\nFields Methods Add(IValidator validator) Adds the validator to this composite validator.\nParameters    Name Description     validator The validator to add.    Exceptions    Name Description     ArgumentNullException The validator isnull.    AfterValidateBusinessRules(object instance, List validationResults) Called just after the specified instance has validated its business rules.\nParameters    Name Description     instance The instance that has just been validated.   validationResults The validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.    AfterValidateFields(object instance, List validationResults) Called just after the specified instance has validated its fields.\nParameters    Name Description     instance The instance that has just been validated.   validationResults The validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.    AfterValidation(object instance, List fieldValidationResults, List businessRuleValidationResults) Called just after all validation has been executed.\nParameters    Name Description     instance The instance that has just been validated.   fieldValidationResults The current field validation results.   businessRuleValidationResults The current business rule validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.    BeforeValidateBusinessRules(object instance, List previousValidationResults) Called just before the specified instance is about to be validate its business rules.\nParameters    Name Description     instance The instance that is about to be validated.   previousValidationResults The validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.    BeforeValidateFields(object instance, List previousValidationResults) Called just before the specified instance is about to be validate its fields.\nParameters    Name Description     instance The instance that is about to be validated.   previousValidationResults The previous validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.    BeforeValidation(object instance, List previousFieldValidationResults, List previousBusinessRuleValidationResults) Called just before any validation is caused.\nParameters    Name Description     instance The instance that is about to be validated.   previousFieldValidationResults The previous field validation results.   previousBusinessRuleValidationResults The previous business rule validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.    Contains(IValidator validator) Determines whether this composite validator contains the specified validator.\nParameters    Name Description     validator The validator.    Returns true if this composite validator contains the specified validator; otherwise,false.\nExceptions    Name Description     ArgumentNullException The validator isnull.    Remove(IValidator validator) Removes the validator from this composite validator.\nParameters    Name Description     validator The validator to remove.    Exceptions    Name Description     ArgumentNullException The validator isnull.    Validate(object instance, ValidationContext validationContext) Validates the specified instance and allows the manipulation of the whole validation context. This method can be used to manipulate the whole validation context and the implementation of this is enough.\nParameters    Name Description     instance The instance to validate.   validationContext The validation context.    Exceptions    Name Description     ArgumentNullException The instance isnull.    ValidateBusinessRules(object instance, List validationResults) Validates the business rules of the specified instance. The results must be added to the list of validation results.\nParameters    Name Description     instance The instance to validate.   validationResults The validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.    ValidateFields(object instance, List validationResults) Validates the fields of the specified instance. The results must be added to the list of validation results.\nParameters    Name Description     instance The instance to validate.   validationResults The validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/compositevalidatorprovider/",
	"title": "CompositeValidatorProvider",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CompositeValidatorProvider : ValidatorProviderBase  Base types ValidatorProviderBase\nAllows the combination of several validator providers into a single validator provider.\nRemarks This class can be used to unify instances of IValidatorProvider into a single one and provides several sources in order to retrieve IValidator instances.\nFields Methods Add(IValidatorProvider validatorProvider) Add the validator provider to this composite validator provider.\nParameters    Name Description     validatorProvider The validator provider.    Exceptions    Name Description     ArgumentNullException If validatorProvider isnull.    Contains(IValidatorProvider validatorProvider) Determines whether this composite validator provider contains the specified validator provider.\nParameters    Name Description     validatorProvider The validator provider.    Returns true if this composite validator provider contains the specified validator; otherwise,false.\nExceptions    Name Description     ArgumentNullException The validatorProvider isnull.    Remove(IValidatorProvider validatorProvider) Removes the validator provider from this composite validator provider.\nParameters    Name Description     validatorProvider The validator provider.    Exceptions    Name Description     ArgumentNullException If validatorProvider isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/configuration/configurationchangedeventargs/",
	"title": "ConfigurationChangedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Configuration   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ConfigurationChangedEventArgs : EventArgs  Base types EventArgs\nThe configuration changed event args class.\nConstructors ConfigurationChangedEventArgs(ConfigurationContainer container, string key, object newValue) Initializes a new instance of the ConfigurationChangedEventArgs class.\nParameters    Name Description     container The container.   key The key.   newValue The new value.    Properties Container Gets the container.\nKey Gets the key.\nNewValue Gets the new value.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/configuration/configurationcontainer/",
	"title": "ConfigurationContainer",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Configuration   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum ConfigurationContainer : Enum  Base types Enum\nThe configuration containers.\nFields Local 0\nThe local configuration container.\nRoaming 1\nThe roaming configuration container.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/configuration/configurationextensions/",
	"title": "ConfigurationExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Configuration   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ConfigurationExtensions  The configuration extension methods.\nMethods GetSection(Configuration this, string sectionName, string sectionGroupName) Gets the section.\nType Parameters TSection The type of the section\nParameters    Name Description     this The instance   sectionName The section name   sectionGroupName The section group name    Returns The section\nExceptions    Name Description     System.ArgumentNullException The this isnull.   System.ArgumentException The sectionName isnull or empty.    IsConfigurationKey(ConfigurationChangedEventArgs eventArgs, string expectedKey) Determines whether the specified ConfigurationChangedEventArgs represents the expected key. A key is also expected if the key isnull or whitespace because it represents a full scope update in the IConfigurationService.\nParameters    Name Description     eventArgs The ConfigurationChangedEventArgs instance containing the event data.   expectedKey The expected key.    Returns true if the event args represent the expected key; otherwise,false.\nExceptions    Name Description     ArgumentNullException The eventArgs isnull.    IsConfigurationKey(string key, string expectedKey) Determines whether the specified configuration key represents the expected key. A key is also expected if the key isnull or whitespace because it represents a full scope update in the IConfigurationService.\nParameters    Name Description     key The key.   expectedKey The expected key.    Returns true if [is configuration key] [the specified expected key]; otherwise,false.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/configuration/configurationservice/",
	"title": "ConfigurationService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Configuration   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ConfigurationService : IConfigurationService  Base types\nIConfigurationService\nConfiguration service implementation that allows customization how configuration values are being used inside an application. This default implementation writes to the\nFields Constructors ConfigurationService(ISerializationManager serializationManager, IObjectConverterService objectConverterService, ISerializer serializer) Initializes a new instance of the ConfigurationService class.\nParameters    Name Description     serializationManager The serialization manager.   objectConverterService The object converter service.   serializer The serializer.    ConfigurationService(ISerializationManager serializationManager, IObjectConverterService objectConverterService, IXmlSerializer serializer) Initializes a new instance of the ConfigurationService class.\nParameters    Name Description     serializationManager The serialization manager.   objectConverterService The object converter service.   serializer The serializer.    Events ConfigurationChanged Occurs when the configuration has changed.\nMethods GetValue(ConfigurationContainer container, string key, T defaultValue) Gets the configuration value.\nType Parameters T The type of the value to retrieve.\nParameters    Name Description     container The container.   key The key.   defaultValue The default value. Will be returned if the value cannot be found.    Returns The configuration value.\nExceptions    Name Description     ArgumentException The key isnull or whitespace.    InitializeValue(ConfigurationContainer container, string key, object defaultValue) Initializes the value by setting the value to the defaultValue if the value does not yet exist.\nParameters    Name Description     container The container.   key The key.   defaultValue The default value.    Exceptions    Name Description     ArgumentException The key isnull or whitespace.    IsValueAvailable(ConfigurationContainer container, string key) Determines whether the specified value is available.\nParameters    Name Description     container The container.   key The key.    Returns true if the specified value is available; otherwise,false.\nExceptions    Name Description     ArgumentException The key isnull or whitespace.    SetValue(ConfigurationContainer container, string key, object value) Sets the configuration value.\nParameters    Name Description     container The container.   key The key.   value The value.    Exceptions    Name Description     ArgumentException The key isnull or whitespace.    SuspendNotifications() Suspends the notifications of this service until the returned object is disposed.\nReturns IDisposable.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/listeners/consoleapicoplistener/",
	"title": "ConsoleApiCopListener",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ApiCop.Listeners   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ConsoleApiCopListener : TextApiCopListenerBase  Base types TextApiCopListenerBase\nIApiCopListener implementation which writes all results to the console.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/consoleloglistener/",
	"title": "ConsoleLogListener",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ConsoleLogListener : LogListenerBase  Base types LogListenerBase\nLog listener that writes to the console.\nFields Constructors Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/containsitemsconverter/",
	"title": "ContainsItemsConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ContainsItemsConverter : ValueConverterBase  Base types ValueConverterBase\nConverter that converts whether a collection contains items or not.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/controls/contentpage/",
	"title": "ContentPage",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Controls   Available on Portable Class Libraries    public class ContentPage : IView, ContentPage  Base types ContentPage\nBase types\nIView\nThe content page.\nFields Constructors ContentPage() Initializes a new instance of the ContentPage class.\nProperties BindingContext Gets or sets object that contains the properties that will be targeted by the bound properties that belong to this BindableObject.\nExamples var label = new Label(); label.SetBinding(Label.TextProperty, \u0026quot;Name\u0026quot;); label.BindingContext = new {Name = \u0026quot;John Doe\u0026quot;, Company = \u0026quot;Xamarin\u0026quot;}; Debug.WriteLine(label.Text); //prints \u0026quot;John Doe\u0026quot;  Remarks The following example shows how to apply a BindingContext and a Binding to a Label (inherits from BindableObject):\nDataContext Gets or sets the data context.\nTag Gets or sets the tag.\nViewModel Gets the view model.\nEvents BackButtonPressed Occurs when the back button is pressed.\nDataContextChanged Occurs when the data context has changed.\nLoaded Occurs when the view is loaded.\nUnloaded Occurs when the view is unloaded.\nViewModelChanged Occurs when the view model has changed.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/contentreadyeventargs/",
	"title": "ContentReadyEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ContentReadyEventArgs : EventArgs  Base types EventArgs\nimplementation for camera content ready operations.\nConstructors ContentReadyEventArgs(Stream imageStream) Initializes a new instance of the ContentReadyEventArgs class.\nParameters    Name Description     imageStream The image stream.    Exceptions    Name Description     ArgumentNullException The imageStream isnull.    Properties ImageStream Gets the image stream of the image.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/controls/contentview/",
	"title": "ContentView",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Controls   Available on Portable Class Libraries    public class ContentView : IView, ContentView  Base types ContentView\nBase types\nIView\nThe content page.\nFields Constructors Properties BindingContext Gets or sets object that contains the properties that will be targeted by the bound properties that belong to this BindableObject.\nExamples var label = new Label(); label.SetBinding(Label.TextProperty, \u0026quot;Name\u0026quot;); label.BindingContext = new {Name = \u0026quot;John Doe\u0026quot;, Company = \u0026quot;Xamarin\u0026quot;}; Debug.WriteLine(label.Text); //prints \u0026quot;John Doe\u0026quot;  Remarks The following example shows how to apply a BindingContext and a Binding to a Label (inherits from BindableObject):\nDataContext Gets or sets the data context.\nTag Gets or sets the tag.\nViewModel Gets the view model.\nEvents DataContextChanged Occurs when the data context has changed.\nLoaded Occurs when the view is loaded.\nUnloaded Occurs when the view is unloaded.\nViewModelChanged Occurs when the view model has changed.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/android/contexthelper/",
	"title": "ContextHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Android   Available on Xamarin - Android    public static class ContextHelper  The context helper.\nFields Properties CurrentContext Gets or sets the current context. Note that the setter is made public to allow customization. It will be used primarily by Catel though.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/converterhelper/",
	"title": "ConverterHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ConverterHelper  Converter helper class.\nFields UnsetValue The genericUnSet value, compatible with all platforms.\nMethods ShouldInvert(object parameter) Checks whether the converted must be inverted. This checks the parameter input and checks whether it is a boolean.\nParameters    Name Description     parameter The parameter to check. Can benull.    Returns true if the converter should be inverted; otherwisefalse.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/apicop/cops/",
	"title": "Cops",
	"tags": [],
	"description": "",
	"content": " The *IApiCop* is responsible for containing all the rules that are used inside a class. A class should contain only one *IApiCop* and one or more rules.\nRetrieving an IApiCop for a class To retrieve an IApiCop for a class, use the following code:\nprivate static readonly IApiCop = ApiCopManager.GetCurrentClassApiCop();  "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/coremodule/",
	"title": "CoreModule",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CoreModule : IServiceLocatorInitializer  Base types\nIServiceLocatorInitializer\nCore module which allows the registration of default services in the service locator.\nMethods Initialize(IServiceLocator serviceLocator) Initializes the specified service locator.\nParameters    Name Description     serviceLocator The service locator.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/getting-started/wpf/creating-the-models/",
	"title": "Creating the models",
	"tags": [],
	"description": "",
	"content": " In this step we will create models. Since this application is about families and persons inside those families, we need to create the following models: Settings, Family and Person. Creating the model classes The models that will be used in this application will derive from the *ModelBase* or SavableModelBase class of Catel. These classes enable support for change notifications, validations and persistence. The SavableModelBase adds additional methods to save and load from/to streams or files without having to create a serializer first.\nTo create the model classes, create the following classes in the Models folder.\nThe model code snippet is available to create models\n\rSettings class The settings class is the top container that will store all families and other settings (which might be added in the future).\nnamespace WPF.GettingStarted.Models { using Catel.Data; public class Settings : SavableModelBase\u0026lt;Settings\u0026gt; { } }  Family class namespace WPF.GettingStarted.Models { using Catel.Data; public class Family : ModelBase { } }  Person class namespace WPF.GettingStarted.Models { using Catel.Data; public class Person : ModelBase { } }  Adding properties to the models The next step is to add properties to the models. An important concept to understand is that Catel uses specific \u0026ldquo;dependency-a-like\u0026rdquo; properties in order to provide all the functionality in the ModelBase classes. Below are the properties per model that need to be registered.\nAt first sight, these properties might look very overwhelming. Let\u0026rsquo;s take a look at how the property system works. The most important thing is the actual property registration:\npublic static readonly PropertyData PersonsProperty = RegisterProperty(\u0026quot;Persons\u0026quot;, typeof(ObservableCollection\u0026lt;Person\u0026gt;), () =\u0026gt; new ObservableCollection\u0026lt;Person\u0026gt;());  This defines a property on the model with the following data:\n Name =\u0026gt; Persons Type =\u0026gt; ObservableCollection\u0026lt;Person\u0026gt; DefaultValue =\u0026gt; new ObservableCollection\u0026lt;Person\u0026gt;()  This will create a property in the property bag of the model. The next piece of the property is the actual wrapper around the property value which is managed by the property bag. The Catel properties always need a wrapper to be exposed to the \u0026ldquo;outside world\u0026rdquo; of the class.\npublic ObservableCollection\u0026lt;Person\u0026gt; Persons { get { return GetValue\u0026lt;ObservableCollection\u0026lt;Person\u0026gt;\u0026gt;(PersonsProperty); } set { SetValue(PersonsProperty, value); } }  If you want to get the functionality in the ModelBase classes without the \u0026ldquo;dependency-a-like\u0026rdquo; properties you have the option to make use of normal properties and Catel.Fody.\n\rThe modelprop code snippet is available to create models\n\rSettings class public class Settings : SavableModelBase\u0026lt;Settings\u0026gt; { /// \u0026lt;summary\u0026gt; /// Gets or sets all the families. /// \u0026lt;/summary\u0026gt; public ObservableCollection\u0026lt;Family\u0026gt; Families { get { return GetValue\u0026lt;ObservableCollection\u0026lt;Family\u0026gt;\u0026gt;(FamiliesProperty); } set { SetValue(FamiliesProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Families property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData FamiliesProperty = RegisterProperty(\u0026quot;Families\u0026quot;, typeof(ObservableCollection\u0026lt;Family\u0026gt;), () =\u0026gt; new ObservableCollection\u0026lt;Family\u0026gt;()); }  Family class public class Family : ModelBase { /// \u0026lt;summary\u0026gt; /// Gets or sets the family name. /// \u0026lt;/summary\u0026gt; public string FamilyName { get { return GetValue\u0026lt;string\u0026gt;(FamilyNameProperty); } set { SetValue(FamilyNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the FamilyName property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData FamilyNameProperty = RegisterProperty(\u0026quot;FamilyName\u0026quot;, typeof(string), null); /// \u0026lt;summary\u0026gt; /// Gets or sets the list of persons in this family. /// \u0026lt;/summary\u0026gt; public ObservableCollection\u0026lt;Person\u0026gt; Persons { get { return GetValue\u0026lt;ObservableCollection\u0026lt;Person\u0026gt;\u0026gt;(PersonsProperty); } set { SetValue(PersonsProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Persons property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData PersonsProperty = RegisterProperty(\u0026quot;Persons\u0026quot;, typeof(ObservableCollection\u0026lt;Person\u0026gt;), () =\u0026gt; new ObservableCollection\u0026lt;Person\u0026gt;()); public override string ToString() { return FamilyName; } }  Person class public class Person : ModelBase { /// \u0026lt;summary\u0026gt; /// Gets or sets the first name. /// \u0026lt;/summary\u0026gt; public string FirstName { get { return GetValue\u0026lt;string\u0026gt;(FirstNameProperty); } set { SetValue(FirstNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the FirstName property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData FirstNameProperty = RegisterProperty(\u0026quot;FirstName\u0026quot;, typeof(string), null); /// \u0026lt;summary\u0026gt; /// Gets or sets the last name. /// \u0026lt;/summary\u0026gt; public string LastName { get { return GetValue\u0026lt;string\u0026gt;(LastNameProperty); } set { SetValue(LastNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the LastName property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData LastNameProperty = RegisterProperty(\u0026quot;LastName\u0026quot;, typeof(string), null); public override string ToString() { string fullName = string.Empty; if (!string.IsNullOrEmpty(FirstName)) { fullName += FirstName; } if (!string.IsNullOrEmpty(FirstName) \u0026amp;\u0026amp; !string.IsNullOrWhiteSpace(LastName)) { fullName += \u0026quot; \u0026quot;; } if (!string.IsNullOrWhiteSpace(LastName)) { fullName += LastName; } return fullName; } }  Up next Serializing data from/to disk\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/caching/policies/customexpirationpolicy/",
	"title": "CustomExpirationPolicy",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Caching.Policies   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class CustomExpirationPolicy : ExpirationPolicy  Base types ExpirationPolicy\nThe custom expiration policy.\nFields Constructors CustomExpirationPolicy(Func isExpiredFunc, Action resetAction) Initializes a new instance of the CustomExpirationPolicy class.\nParameters    Name Description     isExpiredFunc The function to check if the policy is expired.   resetAction The action that will be executed if the item is read before expiration.    Properties IsExpired Gets a value indicating whether is expired.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/logging/customizing-listeners/",
	"title": "Customizing listeners",
	"tags": [],
	"description": "",
	"content": "Each listener can be customized to only receive the logs that the listener is interested in. This way, the listener does not receive events it is not interested in. For example, to only receive errors, create a new listener and use the following customization:\nvar listener = new MyLogListener(); listener.IsDebugEnabled = false; listener.IsInfoEnabled = false; listener.IsWarningEnabled = false; listener.IsErrorEnabled = true;  By default, all types of logging are enabled on a log listener.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/serialization/customizing-serialization/customizing-serialization-for-specific-models/",
	"title": "Customizing the serialization for specific models",
	"tags": [],
	"description": "",
	"content": " Catel has a default behavior for what gets serialized. It can be tweaked by including / excluding fields and properties by using the IncludeInSerialization and ExcludeFromSerialization attributes. But sometimes one needs more specific customization of the serialization for a specific type. This customization is possible via the ISerializerModifier.\nCreating the modifier To customize the serialization of a specific model type, one needs to implement the ISerializerModifier interface. The example belows shows how to encrypt the Password property on the Person model class.\npublic class PersonSerializerModifier : SerializerModifierBase\u0026lt;Person\u0026gt; { public override void SerializeMember(ISerializationContext context, MemberValue memberValue) { if (string.Equals(memberValue.Name, \u0026quot;Password\u0026quot;)) { memberValue.Value = EncryptionHelper.Encrypt(memberValue.Value); } } public override void DeserializeMember(ISerializationContext context, MemberValue memberValue) { if (string.Equals(memberValue.Name, \u0026quot;Password\u0026quot;)) { memberValue.Value = EncryptionHelper.Decrypt(memberValue.Value); } } }  Registering the modifier To register a modifier for a specific class, define the SerializerModifier attribute:\n[SerializerModifier(typeof(PersonSerializerModifier))] public class Person : ModelBase { // .. class contents }  Note that modifiers are inherited from base classes. When serializing, the modifiers defined on the most derived classes will be called last. When deserializing, the modifies defined on the most derived classes will be called first.\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/datacontextchangedeventargs/",
	"title": "DataContextChangedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class DataContextChangedEventArgs : EventArgs  Base types EventArgs\nContains information about DataContext changed events.\nConstructors DataContextChangedEventArgs(object oldContext, object newContext) Initializes a new instance of the DataContextChangedEventArgs class.\nParameters    Name Description     oldContext The old context.   newContext The new context.    Properties AreEqual Gets a value indicating whether the old and new context are equal.\nNewContext Gets the new context.\nOldContext Gets the old context.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/datacontextchangedhelper/",
	"title": "DataContextChangedHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public static class DataContextChangedHelper  Helper class to subscribe to theDataContextChanged event of UI elements.\nMethods AddDataContextChangedHandler(FrameworkElement element, EventHandler handler) Adds the data context changed handler.\nParameters    Name Description     element Element to which the handler is added.   handler The handler to add.    Exceptions    Name Description     ArgumentNullException The element isnull.    RemoveDataContextChangedHandler(FrameworkElement element, EventHandler handler) Removes the data context changed handler.\nParameters    Name Description     element The element from which the handler has to be removed.   handler The handler to remove.    Exceptions    Name Description     ArgumentNullException The element isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/datacontextsubscriptionmode/",
	"title": "DataContextSubscriptionMode",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum DataContextSubscriptionMode : Enum  Base types Enum\nData context subscription mode.\nFields DirectDataContext 0\nThe direct data context only.\nInheritedDataContext 1\nTee direct data context and the inherited data context.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/datacontextsubscriptionservice/",
	"title": "DataContextSubscriptionService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class DataContextSubscriptionService : IDataContextSubscriptionService  Base types\nIDataContextSubscriptionService\nService that determines how to subscribe to data context.\nConstructors DataContextSubscriptionService() Initializes a new instance of the DataContextSubscriptionService class.\nProperties DefaultDataContextSubscriptionMode Gets or sets the default data context subscription mode.\nMethods GetDataContextSubscriptionMode(Type viewType) Gets the data context subscription mode for the specific view.\nParameters    Name Description     viewType Type of the view.    Returns The data context subscription mode.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/xml/datacontractserializerfactory/",
	"title": "DataContractSerializerFactory",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Xml   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class DataContractSerializerFactory : IDataContractSerializerFactory  Base types\nIDataContractSerializerFactory\nDefault implementation of the IDataContractSerializerFactory interface.\nFields Constructors DataContractSerializerFactory() Initializes a new instance of the DataContractSerializerFactory class.\nProperties DataContractResolver Gets or sets the DataContractResolver passed in constructor to. The default value is.\nDataContractSurrogate Gets or sets the passed in constructor to. The default value is.\nMethods GetDataContractSerializer(Type serializingType, Type typeToSerialize, string xmlName, string rootNamespace, List additionalKnownTypes) Gets the Data Contract serializer for a specific type. This method caches serializers so the performance can be improved when a serializer is used more than once.\nParameters    Name Description     serializingType The type that is currently (de)serializing.   typeToSerialize The type to (de)serialize.   xmlName Name of the property as known in XML.   rootNamespace The root namespace.   additionalKnownTypes A list of additional types to add to the known types.    Returns for the given type.\nExceptions    Name Description     ArgumentNullException The serializingType isnull.   ArgumentException The xmlName isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/datawindow/",
	"title": "DataWindow",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows   Available on .NET Framework 4.5, .NET Framework 4.6    public class DataWindow : IDataWindow, Window  Base types Window\nBase types\nIDataWindow\nWindow class that implements the InfoBarMessageControl and the default buttons, according to the DataWindowMode.\nFields Constructors DataWindow() Initializes a new instance of the FrameworkElement class.\nRemarks This method is required for design time support.\nDataWindow(IViewModel viewModel) Initializes a new instance of the DataWindow class.\nParameters    Name Description     viewModel The view model.    Remarks Explicit constructor with view model injection, required for which does not seem to support default parameter values.\nDataWindow(IViewModel viewModel, DataWindowMode mode, IEnumerable additionalButtons, DataWindowDefaultButton defaultButton, bool setOwnerAndFocus, InfoBarMessageControlGenerationMode infoBarMessageControlGenerationMode, bool focusFirstControl) Initializes a new instance of the DataWindow class.\nParameters    Name Description     viewModel The view model.   mode DataWindowMode.   additionalButtons The additional buttons.   defaultButton The default button.   setOwnerAndFocus if set totrue, set the main window as owner window and focus the window.   infoBarMessageControlGenerationMode The info bar message control generation mode.   focusFirstControl if set totrue, the first control will get the focus.    DataWindow(DataWindowMode mode, IEnumerable additionalButtons, DataWindowDefaultButton defaultButton, bool setOwnerAndFocus, InfoBarMessageControlGenerationMode infoBarMessageControlGenerationMode, bool focusFirstControl) Initializes a new instance of this class with custom commands.\nParameters    Name Description     mode DataWindowMode.   additionalButtons The additional buttons.   defaultButton The default button.   setOwnerAndFocus if set totrue, set the main window as owner window and focus the window.   infoBarMessageControlGenerationMode The info bar message control generation mode.   focusFirstControl if set totrue, the first control will get the focus.    Properties CanCloseUsingEscape Gets or sets a value indicating whether this instance can close using escape.\nPreventViewModelCreation Gets or sets a value indicating whether the view model container should prevent the creation of a view model. This property is very useful when using views in transitions where the view model is no longer required.\nViewModel Gets the view model that is contained by the container.\nViewModelType Gets the type of the view model that this user control uses.\nEvents PropertyChanged Occurs when a property on the container has changed.\nRemarks This event makes it possible to externally subscribe to property changes of a (mostly the container of a view model) because the .NET Framework does not allows us to.\nViewModelChanged Occurs when the ViewModel property has changed.\nViewModelPropertyChanged Occurs when a property on the ViewModel has changed.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/datawindowbutton/",
	"title": "DataWindowButton",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows   Available on .NET Framework 4.5, .NET Framework 4.6    public class DataWindowButton  Information for a button that should be generated.\nConstructors DataWindowButton(string text, ICommand command) Initializes a new instance of the DataWindowButton class.\nParameters    Name Description     text The text.   command The command.    Exceptions    Name Description     ArgumentNullException The command isnull.    DataWindowButton(string text, ICommand command, string contentBindingPath, IValueConverter contentValueConverter, string visibilityBindingPath, IValueConverter visibilityValueConverter) Initializes a new instance of the DataWindowButton class.\nParameters    Name Description     text The text.   command The command.   contentBindingPath The binding path expression of the content to bind to.   contentValueConverter The value converter used with content binding.   visibilityBindingPath The binding path expression of the visibility to bind to.   visibilityValueConverter The value converter used with visibility binding.    Exceptions    Name Description     ArgumentNullException The command isnull.    Remarks Text is ignored when contentBindingPath is set.\nDataWindowButton(string text, string commandBindingPath) Initializes a new instance of the DataWindowButton class.\nParameters    Name Description     text The text.   commandBindingPath The binding path expression of the command to bind to.    Exceptions    Name Description     ArgumentNullException The commandBindingPath isnull.    DataWindowButton(string text, string commandBindingPath, string contentBindingPath, IValueConverter contentValueConverter, string visibilityBindingPath, IValueConverter visibilityValueConverter) Initializes a new instance of the DataWindowButton class.\nParameters    Name Description     text The text.   commandBindingPath The binding path expression of the command to bind to.   contentBindingPath The binding path expression of the content to bind to.   contentValueConverter The value converter used with content binding.   visibilityBindingPath The binding path expression of the visibility to bind to.   visibilityValueConverter The value converter used with visibility binding.    Exceptions    Name Description     ArgumentNullException The commandBindingPath isnull.    Remarks Text is ignored when contentBindingPath is set.\nProperties Command Gets the command associated with this button.\nCommandBindingPath Gets the command binding path.\nContentBindingPath Gets the content binding path.\nContentValueConverter Gets the content value converter used with content binding.\nIsCancel Gets or sets a value indicating whether this button is the cancel button.\nIsDefault Gets or sets a value indicating whether this button is the default button.\nText Gets the text as it is displayed on the button.\nVisibilityBindingPath Gets the visibility binding path.\nVisibilityValueConverter Gets the visibility value converter used with visibility binding.\nMethods FromAsync(string text, Func executeAsync, Func canExecute) Initializes a new instance of the DataWindowButton class.\nParameters    Name Description     text The text.   executeAsync The async execute delegate.   canExecute The can execute delegate.    FromAsync(string text, Func executeAsync, Func canExecute, string contentBindingPath, IValueConverter contentValueConverter, string visibilityBindingPath, IValueConverter visibilityValueConverter) Initializes a new instance of the DataWindowButton class.\nParameters    Name Description     text The text.   executeAsync The async execute delegate.   canExecute The can execute delegate.   contentBindingPath The binding path expression of the content to bind to.   contentValueConverter The value converter used with content binding.   visibilityBindingPath The binding path expression of the visibility to bind to.   visibilityValueConverter The value converter used with visibility binding.    Remarks Text is ignored when contentBindingPath is set.\nFromSync(string text, Action execute, Func canExecute) Initializes a new instance of the DataWindowButton class.\nParameters    Name Description     text The text.   execute The execute delegate.   canExecute The can execute delegate.    FromSync(string text, Action execute, Func canExecute, string contentBindingPath, IValueConverter contentValueConverter, string visibilityBindingPath, IValueConverter visibilityValueConverter) Initializes a new instance of the DataWindowButton class.\nParameters    Name Description     text The text.   execute The execute delegate.   canExecute The can execute delegate.   contentBindingPath The binding path expression of the content to bind to.   contentValueConverter The value converter used with content binding.   visibilityBindingPath The binding path expression of the visibility to bind to.   visibilityValueConverter The value converter used with visibility binding.    Remarks Text is ignored when contentBindingPath is set.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/datawindowdefaultbutton/",
	"title": "DataWindowDefaultButton",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows   Available on .NET Framework 4.5, .NET Framework 4.6    public enum DataWindowDefaultButton : Enum  Base types Enum\nAvailable default buttons on the data window mode.\nFields Apply 1\nApply button.\nClose 2\nClose button.\nNone 3\nNo button.\nOK 0\nOK button.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/datawindowmode/",
	"title": "DataWindowMode",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows   Available on .NET Framework 4.5, .NET Framework 4.6    public enum DataWindowMode : Enum  Base types Enum\nMode of the DataWindow.\nFields Close 2\nWindow contains Close button.\nCustom 3\nWindow contains custom buttons.\nOkCancel 0\nWindow contains OK and Cancel buttons.\nOkCancelApply 1\nWindow contains OK, Cancel and Apply buttons.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/debugconverter/",
	"title": "DebugConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class DebugConverter : ValueConverterBase  Base types ValueConverterBase\nDebug converter that allows to debug bindings easily and writes the output to the log.\nFields Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/debugloglistener/",
	"title": "DebugLogListener",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class DebugLogListener : LogListenerBase  Base types LogListenerBase\nImplementation of the ILogListener that writes code to the debug or output window.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/threading/defaultasyncwaitqueue/",
	"title": "DefaultAsyncWaitQueue",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class DefaultAsyncWaitQueue\u0026lt;T\u0026gt; : IAsyncWaitQueue\u0026lt;T, T\u0026gt;  Base types\nIAsyncWaitQueue\nThe default wait queue implementation, which uses a double-ended queue.\nType Parameters T The type of the results. If this isn\u0026rsquo;t needed, use.\nRemarks This code originally comes from AsyncEx: https://github.com/StephenCleary/AsyncEx\nFields Properties "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/defaultviewmodeltomodelmappingconverter/",
	"title": "DefaultViewModelToModelMappingConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class DefaultViewModelToModelMappingConverter : ViewModelToModelConverterBase  Base types ViewModelToModelConverterBase\nViewModelToModelMapping Copy Converter\nConstructors DefaultViewModelToModelMappingConverter(string[] propertyNames) Creates an instance of converter\nParameters    Name Description     propertyNames All properties to watch    Methods CanConvert(Type[] types, Type outType, Type viewModelType) Determines whether this instance can convert the specified types.\nParameters    Name Description     types The types.   outType Type of the out.   viewModelType Type of the view model.    Returns true if this instance can convert the specified types; otherwise,false.\nCanConvertBack(Type inType, Type[] outTypes, Type viewModelType) Determines whether this instance can convert back the specified in type.\nParameters    Name Description     inType Type of the in.   outTypes The out types.   viewModelType Type of the view model.    Returns true if this instance can convert back the specified in type; otherwise,false.\nConvert(object[] values, IViewModel viewModel) Converts the specified values.\nParameters    Name Description     values The values.   viewModel The view model.    Returns System.Object.\nConvertBack(object value, IViewModel viewModel) Converts the specified values back.\nParameters    Name Description     value Property value   viewModel Owner VM    Returns System.Object[].\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/delaybindingupdate/",
	"title": "DelayBindingUpdate",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class DelayBindingUpdate : BehaviorBase\u0026lt;FrameworkElement\u0026gt;  Base types BehaviorBase\nThis behaviors sets the binding to and manually updates the binding from view to view model after the delay.\nFields Constructors DelayBindingUpdate() Initializes a new instance of the DelayBindingUpdate class.\nProperties DependencyPropertyName Gets or sets the name of the dependency property. This property is used before the PropertyName. By default, this behavior tries to retrieve the dependency property via \u0026ldquo;[PropertyName]Property\u0026rdquo; (which is the default naming convention of dependency properties). In the rare case that this naming convention is not followed, it is possible to use this property.\nRemarks This property does not reflect to any changes, so this property must be set when the is loaded. This property should only be used as backup if the PropertyName property does not work.\nPropertyName Gets or sets the name of the property.\nRemarks This property does not reflect to any changes, so this property must be set when the is loaded.\nUpdateDelay Gets or sets the update delay. This is the value that is used between updates in milliseconds. The binding will be updated after the delay. When a new value becomes available, the timer is reset and starts all over. The default value is100. If the value is smaller than50, the value will be ignored and there will be no delay between the value change and binding update. If the value is higher than5000, it will be set to5000.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/delegateextensions/",
	"title": "DelegateExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class DelegateExtensions  Extension methods for.\nMethods GetMethodInfoEx(Delegate del) Gets the method info of the delegate.\nParameters    Name Description     del The delegate.    Returns The of the delegate.\nExceptions    Name Description     ArgumentNullException The del isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/delegatehelper/",
	"title": "DelegateHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class DelegateHelper  A class to be able to create delegates in both .NET and WinRT.\nMethods CreateDelegate(Type delegateType, MethodInfo methodInfo) Creates a static delegate for the specified method.\nParameters    Name Description     delegateType Type of the delegate.   methodInfo The method info.    Returns The delegate.\nExceptions    Name Description     ArgumentNullException The delegateType isnull.    CreateDelegate(Type delegateType, Type targetType, string methodName) Creates a delegate for the specified method and target.\nParameters    Name Description     delegateType Type of the delegate.   targetType Type of the target.   methodName Name of the method.    Returns The delegate.\nExceptions    Name Description     ArgumentNullException The delegateType isnull.   ArgumentException The methodName isnull or whitespace.    CreateDelegate(Type delegateType, object target, MethodInfo methodInfo) Creates a delegate for the specified method and target.\nParameters    Name Description     delegateType Type of the delegate.   target The target. Ifnull, the method will be assumed static.   methodInfo The method info.    Returns The delegate.\nExceptions    Name Description     ArgumentNullException The delegateType isnull.    CreateDelegate(Type delegateType, object target, string methodName) Creates a delegate for the specified method and target.\nParameters    Name Description     delegateType Type of the delegate.   target The target. Cannot benull for this method.   methodName Name of the method.    Returns The delegate.\nExceptions    Name Description     ArgumentNullException The delegateType isnull.   ArgumentException The methodName isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/dependencyobjectextensions/",
	"title": "DependencyObjectExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public static class DependencyObjectExtensions  Extension methods for the class.\nMethods FindLogicalAncestor(DependencyObject startElement, Predicate condition, int maxDepth) Finds the logical ancestor according to the predicate.\nParameters    Name Description     startElement The start element.   condition The condition.   maxDepth The maximum number of levels to go up when searching for the parent. If smaller than 0, no maximum is used.    Returns object ornull if the ancestor is not found.\nFindLogicalAncestorByType(DependencyObject startElement) Finds the logical ancestor by type.\nType Parameters T\nParameters    Name Description     startElement The start element.    Returns object ornull if the ancestor is not found.\nFindLogicalOrVisualAncestor(DependencyObject startElement, Predicate condition, int maxDepth) Finds the logical or visual ancestor according to the predicate.\nParameters    Name Description     startElement The start element.   condition The condition.   maxDepth The maximum number of levels to go up when searching for the parent. If smaller than 0, no maximum is used.    Returns object ornull if the ancestor is not found.\nFindLogicalOrVisualAncestorByType(DependencyObject startElement) Finds the logical or visual ancestor by type.\nType Parameters T\nParameters    Name Description     startElement The start element.    Returns object ornull if the ancestor is not found.\nFindLogicalRoot(DependencyObject startElement) Finds the logical root.\nParameters    Name Description     startElement The start element.    Returns object ornull if the ancestor is not found.\nFindVisualAncestor(DependencyObject startElement, Predicate condition, int maxDepth) Finds the visual ancestor according to the predicate.\nParameters    Name Description     startElement The start element.   condition The condition.   maxDepth The maximum number of levels to go up when searching for the parent. If smaller than 0, no maximum is used.    Returns object ornull if the ancestor is not found.\nFindVisualAncestorByType(DependencyObject startElement) Finds the visual ancestor by type.\nType Parameters T\nParameters    Name Description     startElement The start element.    Returns object ornull if the ancestor is not found.\nFindVisualDescendant(DependencyObject startElement, Predicate condition) Finds the visual descendant.\nParameters    Name Description     startElement The start element.   condition The condition.    Returns object ornull if the ancestor is not found.\nFindVisualDescendantByName(DependencyObject startElement, string name) Finds the visual descendant by name.\nParameters    Name Description     startElement The start element.   name The name of the element to search for.    Returns object ornull if the descendant is not found.\nFindVisualDescendantByType(DependencyObject startElement) Finds the visual descendant by type.\nType Parameters T\nParameters    Name Description     startElement The start element.    Returns object ornull if the descendant is not found.\nFindVisualRoot(DependencyObject startElement) Finds the visual root.\nParameters    Name Description     startElement The start element.    Returns object ornull if the ancestor is not found.\nGetChildren(DependencyObject parent) Gets the direct children from the visual tree.\nParameters    Name Description     parent The parent.    Returns of all children.\nGetLogicalParent(DependencyObject element) Gets the logical parent of the specified dependency object.\nParameters    Name Description     element The element to retrieve the parent from.    Returns The parent ornull if the parent could not be found.\nExceptions    Name Description     ArgumentNullException The element isnull.    GetVisualParent(DependencyObject element) Gets the logical parent of the specified dependency object.\nParameters    Name Description     element The element to retrieve the parent from.    Returns The parent ornull if the parent could not be found.\nExceptions    Name Description     ArgumentNullException The element isnull.    IsElementWithName(DependencyObject dependencyObject, string name) Determines whether the specified has the specified name.\nParameters    Name Description     dependencyObject The dependency object.   name The name that the name of the should match.    Returns true if the specified has the specified name; otherwise,false.\nExceptions    Name Description     ArgumentNullException The dependencyObject isnull.   ArgumentException The name isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/data/dependencypropertychangedhelper/",
	"title": "DependencyPropertyChangedHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public static class DependencyPropertyChangedHelper  Dependency property changed helper. This helper class allows to subscribe to any dependency property changed of any framework element element.\nFields Methods IsRealDependencyProperty(FrameworkElement frameworkElement, string propertyName) Determines whether the specified dependency property is a real dependency or a wrapper or handler one for internal usage.\nParameters    Name Description     frameworkElement The framework element.   propertyName Name of the property.    Returns true if the property is a real dependency property; otherwise,false.\nExceptions    Name Description     ArgumentNullException The frameworkElement isnull.   ArgumentException The propertyName isnull or whitespace.    SubscribeToAllDependencyProperties(FrameworkElement frameworkElement, EventHandler handler) Subscribes to all dependency properties of the specified.\nParameters    Name Description     frameworkElement The framework element.   handler The handler to subscribe.    Exceptions    Name Description     ArgumentNullException The frameworkElement isnull.    SubscribeToDataContext(FrameworkElement frameworkElement, EventHandler handler, bool inherited) Subscribes to the change events of the inherited DataContext.\nParameters    Name Description     frameworkElement The framework element.   handler The handler to subscribe.   inherited if set totrue, check inherited data context as well.    Exceptions    Name Description     ArgumentNullException The frameworkElement isnull.    SubscribeToDependencyProperty(FrameworkElement frameworkElement, string propertyName, EventHandler handler) Subscribes to the specified dependency property of the specified.\nParameters    Name Description     frameworkElement The framework element.   propertyName The name of the dependency property to subscribe to.   handler The handler to subscribe.    Exceptions    Name Description     ArgumentNullException The frameworkElement isnull.   ArgumentException The propertyName isnull or whitespace.    UnsubscribeFromAllDependencyProperties(FrameworkElement frameworkElement, EventHandler handler) Unsubscribes from all dependency properties of the specified.\nParameters    Name Description     frameworkElement The framework element.   handler The handler to unsubscribe.    Exceptions    Name Description     ArgumentNullException The frameworkElement isnull.    UnsubscribeFromDataContext(FrameworkElement frameworkElement, EventHandler handler, bool inherited) Unsubscribes from the change events of the inherited DataContext.\nParameters    Name Description     frameworkElement The framework element.   handler The handler to subscribe.   inherited if set totrue, check inherited data context as well.    Exceptions    Name Description     ArgumentNullException The frameworkElement isnull.    UnsubscribeFromDependencyProperty(FrameworkElement frameworkElement, string propertyName, EventHandler handler) Subscribes from the specified dependency property of the specified.\nParameters    Name Description     frameworkElement The framework element.   propertyName The name of the dependency property to unsubscribe from.   handler The handler to unsubscribe.    Exceptions    Name Description     ArgumentNullException The frameworkElement isnull.   ArgumentException The propertyName isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/data/dependencypropertyhelper/",
	"title": "DependencyPropertyHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public static class DependencyPropertyHelper  Helper class for dependency properties.\nFields Methods GetDependencyProperties(FrameworkElement frameworkElement) Gets all dependency properties of the specified.\nParameters    Name Description     frameworkElement The framework element.    Returns List containing all dependency properties of the specified.\nExceptions    Name Description     ArgumentNullException The frameworkElement isnull.    GetDependencyProperties(Type viewType) Gets all dependency properties of the specified.\nParameters    Name Description     viewType The view type.    Returns List containing all dependency properties of the specified.\nExceptions    Name Description     ArgumentNullException The viewType isnull.    GetDependencyPropertyByName(FrameworkElement frameworkElement, string propertyName) Gets a the dependency property of a specific by its name.\nParameters    Name Description     frameworkElement The framework element.   propertyName Name of the property.    Returns The ornull if the property cannot be found.\nExceptions    Name Description     ArgumentNullException The frameworkElement isnull.   ArgumentException The propertyName isnull or whitespace.    GetDependencyPropertyCacheKey(Type viewType, string propertyName) Gets the dependency property key for the cache.\nParameters    Name Description     viewType The view type.   propertyName Name of the property.    Returns The key to use in the cache.\nExceptions    Name Description     ArgumentNullException The viewType isnull.   ArgumentException The propertyName isnull or whitespace.    GetDependencyPropertyCacheKeyPrefix(Type viewType) Gets the dependency property cache key prefix.\nParameters    Name Description     viewType The view type.    Returns The dependency property cache key prefix based on the framework element..\nExceptions    Name Description     ArgumentNullException The viewType isnull.    GetDependencyPropertyName(FrameworkElement frameworkElement, DependencyProperty dependencyProperty) Gets the name of the specified dependency property.\nParameters    Name Description     frameworkElement The framework element containing the dependency property.   dependencyProperty The dependency property.    Returns The name of the dependency property ornull if the name could not be found.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/data/dependencypropertyinfo/",
	"title": "DependencyPropertyInfo",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class DependencyPropertyInfo  Information about a dependency property.\nConstructors DependencyPropertyInfo(DependencyProperty dependencyProperty, string propertyName) Initializes a new instance of the DependencyPropertyInfo class.\nParameters    Name Description     dependencyProperty The dependency property.   propertyName Name of the property.    Exceptions    Name Description     ArgumentNullException The dependencyProperty isnull.   ArgumentException The propertyName isnull or whitespace.    Properties DependencyProperty Gets the dependency property.\nPropertyName Gets the name of the property.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/data/dependencypropertyvaluechangedeventargs/",
	"title": "DependencyPropertyValueChangedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class DependencyPropertyValueChangedEventArgs : EventArgs  Base types EventArgs\nProvides data for a DependencyPropertyChangedHelper implementation.\nConstructors DependencyPropertyValueChangedEventArgs(string propertyName, DependencyProperty dependencyProperty, object oldValue, object newValue) Initializes a new instance of the DependencyPropertyValueChangedEventArgs class.\nParameters    Name Description     propertyName Name of the property.   dependencyProperty Dependency property.   oldValue Old value.   newValue New value.    Properties DependencyProperty Gets the dependency property that has changed.\nFxEventArgs Gets the framework event args.\nNewValue Gets the value of the property after the change.\nOldValue Gets the value of the property before the change.\nPropertyName Gets the name of the property.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/dependencyresolverextensions/",
	"title": "DependencyResolverExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class DependencyResolverExtensions  Extensions for the IDependencyResolver.\nMethods CanResolve(IDependencyResolver dependencyResolver, object tag) Determines whether the specified type with the specified tag can be resolved.\nType Parameters T The type to resolve.\nParameters    Name Description     dependencyResolver The dependency resolver.   tag The tag.    Exceptions    Name Description     ArgumentNullException The dependencyResolver isnull.    Resolve(IDependencyResolver dependencyResolver, object tag) Resolves the specified type with the specified tag.\nType Parameters T Tye type to resolve.\nParameters    Name Description     dependencyResolver The dependency resolver.   tag The tag.    Returns The resolved object.\nExceptions    Name Description     ArgumentNullException The dependencyResolver isnull.    TryResolve(IDependencyResolver dependencyResolver, Type serviceType, object tag) Try to resolve the specified type with the specified tag.\nParameters    Name Description     dependencyResolver The dependency resolver.   serviceType Type of the service.   tag The tag.    Returns The resolved object ornull if the type could not be resolved.\nExceptions    Name Description     ArgumentNullException The dependencyResolver isnull.    TryResolve(IDependencyResolver dependencyResolver, object tag) Try to resolve the specified type with the specified tag.\nType Parameters T The type to resolve.\nParameters    Name Description     dependencyResolver The dependency resolver.   tag The tag.    Returns The resolved object ornull if the type could not be resolved.\nExceptions    Name Description     ArgumentNullException The dependencyResolver isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/dependencyresolvermanager/",
	"title": "DependencyResolverManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class DependencyResolverManager : IDependencyResolverManager  Base types\nIDependencyResolverManager\nThe dependency resolver manager.\nFields Constructors DependencyResolverManager() Initializes a new instance of the DependencyResolverManager class.\nProperties Default Gets or the default instance.\nDefaultDependencyResolver Gets or sets the default dependency resolver.\nExceptions    Name Description     ArgumentNullException The value isnull.    Methods GetDependencyResolverForInstance(object instance) Gets the dependency resolver for a specific instance. If there is no dependency resolver registered for the specific instance, this method will use the GetDependencyResolverForType(Type).\nParameters    Name Description     instance The instance to retrieve the dependency resolver for.    Returns The IDependencyResolver for the object.\nExceptions    Name Description     ArgumentNullException The instance isnull.    GetDependencyResolverForType(Type type) Gets the dependency resolver for a specific type. If there is no dependency resolver registered for the specific type, this method will returns the DefaultDependencyResolver.\nParameters    Name Description     type The type.    Returns The IDependencyResolver for the type.\nExceptions    Name Description     ArgumentNullException The type isnull.    RegisterDependencyResolverForInstance(object instance, IDependencyResolver dependencyResolver) Registers the dependency resolver for a specific instance.\nParameters    Name Description     instance The instance.   dependencyResolver The dependency resolver.    Exceptions    Name Description     ArgumentNullException The instance isnull.    RegisterDependencyResolverForType(Type type, IDependencyResolver dependencyResolver) Registers the dependency resolver for a specific type.\nParameters    Name Description     type The type.   dependencyResolver The dependency resolver.    Exceptions    Name Description     ArgumentNullException The type isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/designtimecodeattribute/",
	"title": "DesignTimeCodeAttribute",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class DesignTimeCodeAttribute : Attribute  Base types Attribute\nAttribute to support code at design time.\nFields Constructors DesignTimeCodeAttribute(Type typeToConstruct) Initializes a new instance of the DesignTimeCodeAttribute class.\nParameters    Name Description     typeToConstruct The type to construct.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/designtimehelper/",
	"title": "DesignTimeHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class DesignTimeHelper  Design time helper.\nFields Methods InitializeDesignTime() Initializes the designer options.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/designtimeinitializer/",
	"title": "DesignTimeInitializer",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class DesignTimeInitializer  Initializes design-time code.\nFields Constructors DesignTimeInitializer() Initializes a new instance of the DesignTimeInitializer class.\nProperties CanInitialize Gets a value indicating whether this instance can be initialized.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/providers/determineviewmodelinstanceeventargs/",
	"title": "DetermineViewModelInstanceEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Providers   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class DetermineViewModelInstanceEventArgs : EventArgs  Base types EventArgs\nEventArgs class which allows late-time dynamic view model determination.\nConstructors DetermineViewModelInstanceEventArgs(object dataContext) Initializes a new instance of the DetermineViewModelInstanceEventArgs class.\nParameters    Name Description     dataContext The data context.    Properties DataContext Gets the data context.\nDoNotCreateViewModel Gets or sets a value indicating whether the logic should create a view model by itself when the ViewModel isnull. By default, this value isfalse.\nViewModel Gets or sets the view model.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/providers/determineviewmodeltypeeventargs/",
	"title": "DetermineViewModelTypeEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Providers   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class DetermineViewModelTypeEventArgs : EventArgs  Base types EventArgs\nEventArgs class which allows late-time dynamic view model determination.\nConstructors DetermineViewModelTypeEventArgs(object dataContext) Initializes a new instance of the DetermineViewModelTypeEventArgs class.\nParameters    Name Description     dataContext The data context.    Properties DataContext Gets the data context.\nViewModelType Gets or sets the type of the view model.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/collections/dictionaryextensions/",
	"title": "DictionaryExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Collections   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class DictionaryExtensions  Extensions for the class.\nMethods AddItemIfNotEmpty(Dictionarydictionary, TKey key, string value) Adds the specified value using the key if the value is notnull or whitespace.\nType Parameters TKey The type of the key.\nParameters    Name Description     dictionary The dictionary.   key The key.   value The value to check and to add.    Exceptions    Name Description     ArgumentNullException The dictionary isnull.    AddRange(Dictionarytarget, Dictionarysource, bool overwriteExisting) Adds all items from the source into the target dictionary.\nType Parameters TKey The type of the key.\nTValue The type of the value.\nParameters    Name Description     target The target.   source The source.   overwriteExisting if set totrue, existing items in the target dictionary will be overwritten.    Exceptions    Name Description     ArgumentNullException The target isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/threading/dispatcherextensions/",
	"title": "DispatcherExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public static class DispatcherExtensions  Extension methods for the dispatcher.\nFields Methods BeginInvoke(Dispatcher dispatcher, Action action) Executes the specified action asynchronously with the specified arguments on the thread that the Dispatcher was created on.\nParameters    Name Description     dispatcher The dispatcher.   action The action.    Returns The DispatcherOperation ornull if the action was not dispatched but executed directly.\nExceptions    Name Description     ArgumentNullException The action isnull.    Remarks For target frameworks where the class does not contain theInvoke method, theBeginInvoke method will be used instead.\nBeginInvoke(Dispatcher dispatcher, Action action, bool onlyBeginInvokeWhenNoAccess) Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.\nParameters    Name Description     dispatcher The dispatcher.   action The action.   onlyBeginInvokeWhenNoAccess If set totrue, the action will be executed directly if possible. Otherwise,Dispatcher.BeginInvoke will be used.    Returns The DispatcherOperation ornull if the action was not dispatched but executed directly.\nBeginInvoke(Dispatcher dispatcher, Delegate method, object[] args) Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.\nParameters    Name Description     dispatcher The dispatcher.   method A delegate to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.   args An array of objects to pass as arguments to the given method. Can benull.    Returns The DispatcherOperation ornull if the action was not dispatched but executed directly.\nExceptions    Name Description     ArgumentNullException The method isnull.    BeginInvokeIfRequired(Dispatcher dispatcher, Action action) Executes the specified action asynchronously with the specified arguments on the thread that the Dispatcher was created on if required. To check whether this is necessary, it will check whether the current thread has access to the dispatcher.\nParameters    Name Description     dispatcher The dispatcher.   action The action.    Returns The DispatcherOperation ornull if the action was not dispatched but executed directly.\nExceptions    Name Description     ArgumentNullException The action isnull.    Remarks For target frameworks where the class does not contain theInvoke method, theBeginInvoke method will be used instead.\nBeginInvokeIfRequired(Dispatcher dispatcher, Delegate method, object[] args) Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on if required. To check whether this is necessary, it will check whether the current thread has access to the dispatcher.\nParameters    Name Description     dispatcher The dispatcher.   method A delegate to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.   args An array of objects to pass as arguments to the given method. Can benull.    Returns The DispatcherOperation ornull if the action was not dispatched but executed directly.\nExceptions    Name Description     ArgumentNullException The method isnull.    GetThreadId(Dispatcher dispatcher) Gets the managed thread identifier for the specified dispatcher.\nParameters    Name Description     dispatcher The dispatcher.    Returns The managed thread id.\nExceptions    Name Description     ArgumentNullException The dispatcher isnull.    Invoke(Dispatcher dispatcher, Action action) Executes the specified action with the specified arguments synchronously on the thread the Dispatcher is associated with.\nParameters    Name Description     dispatcher The dispatcher.   action The action.    Exceptions    Name Description     ArgumentNullException The action isnull.    Remarks For target frameworks where the class does not contain theInvoke method, theBeginInvoke method will be used instead.\nInvoke(Dispatcher dispatcher, Action action, bool onlyBeginInvokeWhenNoAccess) Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.\nParameters    Name Description     dispatcher The dispatcher.   action The action.   onlyBeginInvokeWhenNoAccess If set totrue, the action will be executed directly if possible. Otherwise,Dispatcher.BeginInvoke will be used.    Invoke(Dispatcher dispatcher, Delegate method, object[] args) Executes the specified delegate with the specified arguments synchronously on the thread the Dispatcher is associated with.\nParameters    Name Description     dispatcher The dispatcher.   method A delegate to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.   args An array of objects to pass as arguments to the given method. Can benull.    Exceptions    Name Description     ArgumentNullException The method isnull.    Remarks For target frameworks where the class does not contain theInvoke method, theBeginInvoke method will be used instead.\nInvokeAsync(Dispatcher dispatcher, Delegate method, object[] args) Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.\nParameters    Name Description     dispatcher The dispatcher.   method The method.   args The arguments to pass into the method.    Returns The task representing the action.\nInvokeAsync(Dispatcher dispatcher, Func func) Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.\nType Parameters T The type of the result.\nParameters    Name Description     dispatcher The dispatcher.   func The function.    Returns The task representing the action.\nInvokeIfRequired(Dispatcher dispatcher, Action action) Executes the specified action asynchronously with the specified arguments on the thread that the Dispatcher was created on if required. To check whether this is necessary, it will check whether the current thread has access to the dispatcher.\nParameters    Name Description     dispatcher The dispatcher.   action The action.    Exceptions    Name Description     ArgumentNullException The action isnull.    Remarks For target frameworks where the class does not contain theInvoke method, theBeginInvoke method will be used instead.\nInvokeIfRequired(Dispatcher dispatcher, Delegate method, object[] args) Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on if required. To check whether this is necessary, it will check whether the current thread has access to the dispatcher.\nParameters    Name Description     dispatcher The dispatcher.   method A delegate to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.   args An array of objects to pass as arguments to the given method. Can benull.    Exceptions    Name Description     ArgumentNullException The method isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/threading/dispatcherhelper/",
	"title": "DispatcherHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public static class DispatcherHelper  Dispatcher helper class.\nFields Properties CurrentDispatcher Gets the current dispatcher. This property is compatible with WPF, Silverlight, Windows Phone, etc, and also works when there is no application object (for example, during unit tests).\nMethods DoEvents() Processes all UI messages currently in the message queue.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/data-handling/dispatcherobservableobject/",
	"title": "DispatcherObservableObject",
	"tags": [],
	"description": "",
	"content": "Note that the DispatcherObservableObject is located in Catel.MVVM because it uses the IDispatcherService\n\rThe DispatcherObservableObject is a class that derives from the ObservableObject class. The only difference is that the DispatcherObservableObject will dispatch all property change notifications to the UI thread. Below is a class that uses the DispatcherObservableObject and is thread-safe for the change notifications.\npublic class Person : DispatcherObservableObject { private string _firstName; private string _middleName; private string _lastName; public Person(string firstName, string middleName, string lastName) { FirstName = firstName; MiddleName = middleName; LastName = lastName; } public string FirstName { get { return _firstName; } set { RaisePropertyChanging(() =\u0026gt; FirstName); var oldValue = _firstName; _firstName = value; RaisePropertyChanged(() =\u0026gt; FirstName, oldValue, value); } } public string MiddleName { get { return _middleName; } set { RaisePropertyChanging(() =\u0026gt; MiddleName); var oldValue = _middleName; _middleName = value; RaisePropertyChanged(() =\u0026gt; MiddleName, oldValue, value); } } public string LastName { get { return _lastName; } set { RaisePropertyChanging(() =\u0026gt; LastName); var oldValue = _lastName; _lastName = value; RaisePropertyChanged(() =\u0026gt; LastName, oldValue, value); } } }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/dispatcherobservableobject/",
	"title": "DispatcherObservableObject",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class DispatcherObservableObject : ObservableObject  Base types ObservableObject\nImplementation of the ObservableObject class that will dispatch all change notifications to the UI thread using the IDispatcherService.\nFields Constructors Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/dispatcherservice/",
	"title": "DispatcherService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class DispatcherService : IDispatcherService  Base types\nIDispatcherService\nService that allows the retrieval of the UI dispatcher.\nFields Constructors DispatcherService() Initializes a new instance of the DispatcherService class.\nProperties Methods BeginInvoke(Action action, bool onlyBeginInvokeWhenNoAccess) Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.\nParameters    Name Description     action The action.   onlyBeginInvokeWhenNoAccess If set totrue, the action will be executed directly if possible. Otherwise,Dispatcher.BeginInvoke will be used.    Invoke(Action action, bool onlyInvokeWhenNoAccess) Executes the specified action with the specified arguments synchronously on the thread the Dispatcher is associated with.\nParameters    Name Description     action The action.   onlyInvokeWhenNoAccess If set totrue, the action will be executed directly if possible. Otherwise,Dispatcher.BeginInvoke will be used.    Exceptions    Name Description     ArgumentNullException The action isnull.    InvokeAsync(Action action) Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.\nParameters    Name Description     action The action.    Returns The task representing the action.\nInvokeAsync(Delegate method, object[] args) Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.\nParameters    Name Description     method The method.   args The arguments to pass into the method.    Returns The task representing the action.\nInvokeAsync(Func func) Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.\nType Parameters T The type of the result.\nParameters    Name Description     func The function.    Returns The task representing the action.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/componentmodel/displaynameattribute/",
	"title": "DisplayNameAttribute",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ComponentModel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class DisplayNameAttribute : DisplayNameAttribute  Base types DisplayNameAttribute\nA custom implementation of the display name attribute that uses the ILanguageService.\nFields Constructors DisplayNameAttribute(string resourceName) Initializes a new instance of the DisplayNameAttribute class.\nProperties DisplayName Gets the display name.\nLanguageService Gets or sets the language service. By default or when set tonull, this property will resolve the language service from the default IDependencyResolver.\nResourceName Gets the resource name.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/disposable/",
	"title": "Disposable",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class Disposable : IDisposable  Base types IDisposable\nBase class for disposable objects.\nFields Properties Methods Dispose() Disposes this instance.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/disposabletoken/",
	"title": "DisposableToken",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class DisposableToken\u0026lt;T\u0026gt; : IDisposableToken\u0026lt;T, T\u0026gt;  Base types\nIDisposableToken\nA reusable disposable token that accepts initialization and uninitialization code.\nFields Constructors DisposableToken(T instance, Action\u0026gt; initialize, Action\u0026gt; dispose, object tag) Initializes a new instance of the Missing:  class.\nParameters    Name Description     instance The instance.   initialize The initialize action that will be called with (token).   dispose The dispose action that will be called with (instance, tag).   tag The tag.    Properties Instance Gets the instance attached to this token.\nTag Gets the tag.\nMethods Dispose() Disposes this instance.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/doubleclicktocommand/",
	"title": "DoubleClickToCommand",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6    public class DoubleClickToCommand : CommandBehaviorBase\u0026lt;FrameworkElement\u0026gt;  Base types CommandBehaviorBase\nThis behavior allows any element that supports a double click to command for every element that supportsMouseLeftButtonDown.\nFields AutoFixListBoxItemTemplateProperty The property definition for the AutoFixListBoxItemTemplate dependency property.\nConstructors DoubleClickToCommand() Initializes a new instance of the DoubleClickToCommand class.\nDoubleClickToCommand(Action action, int doubleClickMilliseconds) Initializes a new instance of the DoubleClickToCommand class.\nParameters    Name Description     action The action to execute on double click. This is very useful when the behavior is added via code and an action must be invoked instead of a command.   doubleClickMilliseconds The double click acceptance window in milliseconds.    Properties AutoFixListBoxItemTemplate Gets or sets a value indicating whether to automatically fix the ItemTemplate in a ListBox.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/dragdrop/",
	"title": "DragDrop",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6    public class DragDrop : BehaviorBase\u0026lt;ItemsControl\u0026gt;  Base types BehaviorBase\nAn attached behavior that allows you to drag and drop items among various ItemsControls, e.g. ItemsControl, ListBox, TabControl, etc.\nRemarks This code was originally found at http://wpfbehaviorlibrary.codeplex.com/, which is based on http://gallery.expression.microsoft.com/DragDropBehavior/. Original license: Ms-Pl, compatible with the MIT license.\nFields Properties DataTemplate Gets or sets the data template of the items to use while dragging.\nDropIndication Gets or sets the drop indication.\nRemarks The default is vertical.\nItemType Gets or sets the type of the items in the ItemsControl.\nMethods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/caching/policies/durationexpirationpolicy/",
	"title": "DurationExpirationPolicy",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Caching.Policies   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class DurationExpirationPolicy : AbsoluteExpirationPolicy  Base types AbsoluteExpirationPolicy\nThe cache item will expire using the duration to calculate the absolute expiration from now.\nConstructors Properties "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/configuration/dynamicconfiguration/",
	"title": "DynamicConfiguration",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Configuration   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class DynamicConfiguration : ModelBase  Base types ModelBase\nDynamic configuration.\nFields Methods GetConfigurationValue(string name) Gets the configuration value.\nParameters    Name Description     name The name.    Returns System.String.\nIsConfigurationValueSet(string name) Determines whether the specified property is set. If not, a default value should be returned.\nParameters    Name Description     name The name.    Returns true if the property is set; otherwise,false.\nMarkConfigurationValueAsSet(string name) Marks the property as set at least once so it doesn\u0026rsquo;t have a default value.\nParameters    Name Description     name The name.    RegisterConfigurationKey(string name) Registers the configuration key.\nParameters    Name Description     name The name.    SetConfigurationValue(string name, object value) Sets the configuration value.\nParameters    Name Description     name The name.   value The value.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/configuration/dynamicconfigurationextensions/",
	"title": "DynamicConfigurationExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Configuration   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class DynamicConfigurationExtensions  Extension methods for dynamic configuration.\nMethods GetConfigurationValue(DynamicConfiguration dynamicConfiguration, string name, TValue defaultValue) Gets the configuration value.\nType Parameters TValue The type of the value.\nParameters    Name Description     dynamicConfiguration The dynamic configuration.   name The name.   defaultValue The default value if the configuration value is not of type TValue.    Returns System.String.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/configuration/dynamicconfigurationserializermodifier/",
	"title": "DynamicConfigurationSerializerModifier",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Configuration   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class DynamicConfigurationSerializerModifier : SerializerModifierBase  Base types SerializerModifierBase\nDynamic configuration serializer modifier.\nFields Constructors DynamicConfigurationSerializerModifier(ISerializationManager serializationManager) Initializes a new instance of the DynamicConfigurationSerializerModifier class.\nParameters    Name Description     serializationManager The serialization manager.    Methods OnDeserializing(ISerializationContext context, object model) Called when the object is about to be deserialized.\nParameters    Name Description     context The context.   model The model.    OnSerializing(ISerializationContext context, object model) Called when the object is about to be serialized.\nParameters    Name Description     context The context.   model The model.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/system/componentmodel/editeventargs/",
	"title": "EditEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace System.ComponentModel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class EditEventArgs : EventArgs  Base types EventArgs\nEvent args class containing information about events that occur in the IAdvancedEditableObject interface.\nConstructors EditEventArgs(IEditableObject editableObject) Initializes a new instance of the EditEventArgs class.\nParameters    Name Description     editableObject The editable object.    Exceptions    Name Description     System.ArgumentNullException The editableObject isnull.    Properties Cancel Gets or sets a value indicating whether the call to should fail and the object should not enter or leave the edit state.\nEditableObject Gets the editable object.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/editableobjecthelper/",
	"title": "EditableObjectHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class EditableObjectHelper  Class that allows to invoke methods on any object.\nMethods BeginEditObject(object obj) Begins an edit on an object. This method will do nothing when the obj isnull or not a.\nParameters    Name Description     obj The object to call the method on.    CancelEditObject(object obj) Discards changes since the last call. This method will do nothing when the obj isnull or not a.\nParameters    Name Description     obj The object to call the method on.    Remarks This method wi\nEndEditObject(object obj) Pushes changes since the last call. This method will do nothing when the obj isnull or not a.\nParameters    Name Description     obj The object to call the method on.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/emptystringtocollapsingvisibilityconverter/",
	"title": "EmptyStringToCollapsingVisibilityConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - Android, Xamarin - iOS    public class EmptyStringToCollapsingVisibilityConverter : VisibilityConverterBase  Base types VisibilityConverterBase\nConvert from string to. If the string is not null or empty, Visibility.Visible will be returned. If the string is null or empty, Visibility.Collapsed will be returned.\nConstructors EmptyStringToCollapsingVisibilityConverter() Initializes a new instance of the EmptyStringToCollapsingVisibilityConverter class.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/emptystringtohidingvisibilityconverter/",
	"title": "EmptyStringToHidingVisibilityConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6    public class EmptyStringToHidingVisibilityConverter : EmptyStringToCollapsingVisibilityConverter  Base types EmptyStringToCollapsingVisibilityConverter\nConvert from string to. If the string is not null or empty, Visibility.Visible will be returned. If the string is null or empty, Visibility.Hidden will be returned.\nConstructors EmptyStringToHidingVisibilityConverter() Initializes a new instance of the EmptyStringToHidingVisibilityConverter class.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/system/componentmodel/endediteventargs/",
	"title": "EndEditEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace System.ComponentModel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class EndEditEventArgs : EditEventArgs  Base types EditEventArgs\nEvent args implementation called when the object is about to call. This way, it is possible to cancel the events.\nConstructors EndEditEventArgs(IEditableObject editableObject) Initializes a new instance of the EndEditEventArgs class.\nParameters    Name Description     editableObject The editable object.    Exceptions    Name Description     System.ArgumentNullException The editableObject isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/enum/",
	"title": "Enum",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class Enum\u0026lt;TEnum\u0026gt; where TEnum : struct, IComparable, IFormattable  Generic enumeration wrapper.\nType Parameters TEnum Type of the enumeration to wrap.\nMethods ConvertFromOtherEnumValue(object inputEnumValue) Converts a specific enum value from one specific enum type to another enum type by it\u0026rsquo;s name. For example, to convertCatel.Services.CameraType toMicrosoft.Devices.CameraType, use the following code: ConvertEnum\u0026lt;Microsoft.Devices.CameraType\u0026gt;(Catel.Services.CameraType.Primary);\nParameters    Name Description     inputEnumValue The input enum value.    Returns The converted enum value.\nExceptions    Name Description     ArgumentNullException The inputEnumValue isnull.   ArgumentException The inputEnumValue is not of type.    GetName(int value) Gets the name.\nParameters    Name Description     value The value.    Returns The name of the value.\nGetName(long value) Gets the name.\nParameters    Name Description     value The value.    Returns The name of the value.\nGetNames() Gets the names.\nReturns Array of names of an enum.\nGetValues() Gets the values.\nReturns of values.\nParse(string input, bool ignoreCase) Parses the specified input.\nParameters    Name Description     input The input.   ignoreCase if set totrue, the case should be ignored.    Returns The enum value.\nToList() Converts an enumaration to a list.\nReturns containing all the values.\nTryParse(string input, bool ignoreCase, Nullable result) Tries to parse an enum value name.\nParameters    Name Description     input The input.   ignoreCase if set totrue, the case will be ignored.   result The result.    Returns true if successful; otherwisefalse.\nTryParse(string input, bool ignoreCase, TEnum result) Tries to parse an enum value name.\nParameters    Name Description     input The input.   ignoreCase if set totrue, the case will be ignored.   result The result.    Returns true if successful; otherwisefalse.\nTryParse(string input, Nullable result) Tries to parse an enum value name.\nParameters    Name Description     input The input.   result The result.    Returns true if successful; otherwisefalse.\nTryParse(string input, TEnum result) Tries to parse an enum value name.\nParameters    Name Description     input The input.   result The result.    Returns true if successful; otherwisefalse.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/enumtocollapsingvisibilityconverter/",
	"title": "EnumToCollapsingVisibilityConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - Android, Xamarin - iOS    public class EnumToCollapsingVisibilityConverter : VisibilityConverterBase  Base types VisibilityConverterBase\nConvert from an enum value to. The allowed values must be defined inside theConverterParameter property. If theConverterParameter starts with a!, the element will not be visible for the specified enum values.\nFields Constructors EnumToCollapsingVisibilityConverter() Initializes a new instance of the EnumToCollapsingVisibilityConverter class.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/enumtohidingvisibilityconverter/",
	"title": "EnumToHidingVisibilityConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6    public class EnumToHidingVisibilityConverter : EnumToCollapsingVisibilityConverter  Base types EnumToCollapsingVisibilityConverter\nConvert from an enum value to. The allowed values must be defined inside theConverterParameter property. If theConverterParameter starts with a!, the element will not be visible for the specified enum values.\nConstructors EnumToHidingVisibilityConverter() Initializes a new instance of the EnumToHidingVisibilityConverter class.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/environmenthelper/",
	"title": "EnvironmentHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class EnvironmentHelper  Helper class for environment information.\nFields Properties IsProcessHostedByExpressionBlend Determines whether the process is hosted by expression blend.\nReturns true if the process is hosted by expression blend; otherwise,false.\nIsProcessHostedBySharpDevelop Determines whether the process is hosted by sharp develop.\nReturns true if the process is hosted by sharp develop; otherwise,false.\nIsProcessHostedByTool Determines whether the process is hosted by any tool, such as visual studio or blend.\nReturns true if the process is hosted by any tool, such as visual studio or blend; otherwise,false.\nIsProcessHostedByVisualStudio Determines whether the process is hosted by visual studio.\nReturns true if the process is hosted by visual studio; otherwise,false.\nMethods IsProcessCurrentlyHostedByExpressionBlend(bool checkParentProcesses) Determines whether the process is hosted by expression blend. This methods executes the logic every time it is called. To get a cached value, use the IsProcessHostedByExpressionBlend instead.\nParameters    Name Description     checkParentProcesses if set totrue, the parent processes will also be checked.    Returns true if the process is hosted by expression blend; otherwise,false.\nIsProcessCurrentlyHostedBySharpDevelop(bool checkParentProcesses) Determines whether the process is hosted by sharp develop. This methods executes the logic every time it is called. To get a cached value, use the IsProcessHostedByExpressionBlend instead.\nParameters    Name Description     checkParentProcesses if set totrue, the parent processes will also be checked.    Returns true if the process is hosted by sharp develop; otherwise,false.\nIsProcessCurrentlyHostedByTool(bool checkParentProcesses) Determines whether the process is hosted by any tool, such as visual studio or blend. This methods executes the logic every time it is called. To get a cached value, use the IsProcessHostedByTool instead.\nParameters    Name Description     checkParentProcesses if set totrue, the parent processes will also be checked.    Returns true if the current process is hosted by any tool; otherwise,false.\nIsProcessCurrentlyHostedByVisualStudio(bool checkParentProcesses) Determines whether the process is hosted by visual studio. This methods executes the logic every time it is called. To get a cached value, use the IsProcessHostedByVisualStudio instead.\nParameters    Name Description     checkParentProcesses if set totrue, the parent processes will also be checked.    Returns true if the process is hosted by visual studio; otherwise,false.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/etwloglistener/",
	"title": "EtwLogListener",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class EtwLogListener : LogListenerBase  Base types LogListenerBase\nLog listener for ETW (Event tracing for Windows).\nFields Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/eventchangetype/",
	"title": "EventChangeType",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum EventChangeType : Enum  Base types Enum\nAvailable event change types.\nFields Collection 1\nCollection change.\nProperty 0\nProperty change.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/eventhandlerextensions/",
	"title": "EventHandlerExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class EventHandlerExtensions  Extensions for event handlers.\nMethods SafeInvoke(EventHandler handler, object sender) Invokes the specified handler in a thread-safe manner with as parameter for the event args. Where normally one has to write the following code:``` var handler = MyEvent; if (handler != null) { handler(this, EventArgs.Empty); }\nOne can now write: MyEvent.SafeInvoke(this);\n #### Parameters Name|Description ---|--- **handler**|The handler. **sender**|The sender. #### Returns `true` if the event handler was not`null`; otherwise`false`. ### SafeInvoke(EventHandler handler, object sender, EventArgs e) Invokes the specified handler in a thread-safe manner with as parameter for the event args. Where normally one has to write the following code:``` var handler = MyEvent; if (handler != null) { handler(this, EventArgs.Empty); } ``` One can now write:``` MyEvent.SafeInvoke(this);  Parameters    Name Description     handler The handler.   sender The sender.   e The event args.    Returns true if the event handler was notnull; otherwisefalse.\nSafeInvoke(EventHandler handler, object sender) Invokes the specified handler in a thread-safe manner with as parameter for the event args. Where normally one has to write the following code:``` var handler = MyEvent; if (handler != null) { handler(this, EventArgs.Empty); }\nOne can now write: MyEvent.SafeInvoke(this);\n #### Parameters Name|Description ---|--- **handler**|The handler. **sender**|The sender. #### Returns `true` if the event handler was not`null`; otherwise`false`. ### SafeInvoke(NotifyCollectionChangedEventHandler handler, object sender, Func\u0026lt;NotifyCollectionChangedEventArgs\u0026gt; fE) Invokes the specified handler in a thread-safe manner. Where normally one has to write the following code:``` var handler = CollectionChanged; if (handler != null) { handler(this, e, new NotifyCollectionChangedEventArgs(...)); } ``` One can now write:``` CollectionChanged.SafeInvoke(this, e, new NotifyCollectionChangedEventArgs(...));  Parameters    Name Description     handler The handler.   sender The sender.   fE The event args.    Returns true if the event handler was notnull; otherwisefalse.\nSafeInvoke(NotifyCollectionChangedEventHandler handler, object sender, NotifyCollectionChangedEventArgs e) Invokes the specified handler in a thread-safe manner. Where normally one has to write the following code:``` var handler = CollectionChanged; if (handler != null) { handler(this, e, new NotifyCollectionChangedEventArgs(\u0026hellip;)); }\nOne can now write: CollectionChanged.SafeInvoke(this, e, new NotifyCollectionChangedEventArgs(\u0026hellip;));\n #### Parameters Name|Description ---|--- **handler**|The handler. **sender**|The sender. **e**|The event args. #### Returns `true` if the event handler was not`null`; otherwise`false`. ### SafeInvoke(PropertyChangedEventHandler handler, object sender, Func\u0026lt;PropertyChangedEventArgs\u0026gt; fE) Invokes the specified handler in a thread-safe manner. Where normally one has to write the following code:``` var handler = PropertyChanged; if (handler != null) { handler(this, e, new PropertyChangedEventArgs(\u0026quot;propertyName\u0026quot;)); } ``` One can now write:``` PropertyChanged.SafeInvoke(this, e, new PropertyChangedEventArgs(\u0026quot;propertyName\u0026quot;));  Parameters    Name Description     handler The handler.   sender The sender.   fE The event args.    Returns true if the event handler was notnull; otherwisefalse.\nSafeInvoke(PropertyChangedEventHandler handler, object sender, PropertyChangedEventArgs e) Invokes the specified handler in a thread-safe manner. Where normally one has to write the following code:``` var handler = PropertyChanged; if (handler != null) { handler(this, e, new PropertyChangedEventArgs(\u0026ldquo;propertyName\u0026rdquo;)); }\nOne can now write: PropertyChanged.SafeInvoke(this, e, new PropertyChangedEventArgs(\u0026ldquo;propertyName\u0026rdquo;));\n #### Parameters Name|Description ---|--- **handler**|The handler. **sender**|The sender. **e**|The event args. #### Returns `true` if the event handler was not`null`; otherwise`false`. ### SafeInvoke\u0026lt;TEventArgs\u0026gt;(EventHandler\u0026lt;TEventArgs\u0026gt; handler, object sender, Func\u0026lt;TEventArgs\u0026gt; fE) Invokes the specified handler in a thread-safe manner. Where normally one has to write the following code:``` var handler = MyEvent; if (handler != null) { handler(this, e); } ``` One can now write:``` MyEvent.SafeInvoke(this, e);  Type Parameters TEventArgs The type of the class.\nParameters    Name Description     handler The handler.   sender The sender.   fE The event args.    Returns true if the event handler was notnull; otherwisefalse.\nSafeInvoke(EventHandler handler, object sender, TEventArgs e) Invokes the specified handler in a thread-safe manner. Where normally one has to write the following code:``` var handler = MyEvent; if (handler != null) { handler(this, e); }\nOne can now write: MyEvent.SafeInvoke(this, e);\n```\nType Parameters TEventArgs The type of the class.\nParameters    Name Description     handler The handler.   sender The sender.   e The event args.    Returns true if the event handler was notnull; otherwisefalse.\nUnsubscribeAllHandlers(EventHandler handler) Unsubscribes all the handlers from the specified event.\nType Parameters TEventArgs The type of the event arguments.\nParameters    Name Description     handler The handler.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/eventloglistener/",
	"title": "EventLogListener",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6    public class EventLogListener : BatchLogListenerBase  Base types BatchLogListenerBase\nLog listener which writes all data to the system event log.\nConstructors EventLogListener() Initializes a new instance of the EventLogListener class.\nProperties LogName Gets the name of the event log to which the source writes entries.\nMachineName Gets the name of the computer on which to write events.\nSource Gets or sets the source name to register and use when writing to the event log.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/eventtocommand/",
	"title": "EventToCommand",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6    public class EventToCommand : CommandTriggerActionBase\u0026lt;FrameworkElement\u0026gt;  Base types CommandTriggerActionBase\nClass to convert a routed event to a command.\nFields DisableAssociatedObjectOnCannotExecuteProperty DependencyProperty definition as the backing store for DisableAssociatedObjectOnCannotExecute.\nConstructors EventToCommand() Initializes a new instance of the EventToCommand class.\nProperties DisableAssociatedObjectOnCannotExecute Gets or sets a value indicating whether the associated object should be disabled when the command cannot be executed.\nRemarks Wrapper for the DisableAssociatedObjectOnCannotExecute dependency property.\nPassEventArgsToCommand Gets or sets a value indicating whether the passed to the event handler should be passed to the command as well.\nPreventInvocationIfAssociatedObjectIsDisabled Gets or sets a value indicating whether the invocation of the command should be prevented when the is disabled. By default, this value istrue. This property is introduced to disable the default behavior. For example, when showing a window which will disable the underlying object, the command will no longer be invoked. While this is the recommended behavior in most cases, sometimes you just need to bypass the default functionality.\nMethods Invoke() Invokes the action without any parameter.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/eventtriggerbase/",
	"title": "EventTriggerBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6    public abstract class EventTriggerBase\u0026lt;T, T\u0026gt; : ITrigger, EventTriggerBase\u0026lt;T\u0026gt; where T : FrameworkElement  Base types EventTriggerBase\nBase types\nITrigger\nTrigger base class that handles a safe unsubscribe and clean up because the default Trigger class does not always call OnDetaching. This class also adds some specific features such as ValidateRequiredProperties which is automatically called when the trigger is attached.\nType Parameters T The this trigger should attach to.\nFields IsEnabledProperty The IsEnabled property registration.\nProperties IsAssociatedObjectLoaded Gets a value indicating whether theAssociatedObject is loaded.\nIsEnabled Gets or sets a value indicating whether this trigger is enabled.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/exceptionextensions/",
	"title": "ExceptionExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ExceptionExtensions  Extension methods for the class.\nMethods Find(Exception exception) Finds the specified exception in all inner exceptions.\nType Parameters TException The type of the exception.\nParameters    Name Description     exception The exception.   param isnull.    Returns The found exception.\nExceptions    Name Description     ArgumentNullException The    Flatten(Exception exception, string message, bool includeStackTrace) Flattens the specified exception and inner exception data.\nParameters    Name Description     exception The exception.   message The message.   includeStackTrace if set totrue include stack trace.   param isnull.    Returns The flatten message.\nExceptions    Name Description     ArgumentNullException The    GetAllInnerExceptions(Exception exception) Gets all inner exceptions.\nParameters    Name Description     exception The exception.   param isnull.    Returns The inner exceptions collection.\nExceptions    Name Description     ArgumentNullException The    GetLowestInnerException(Exception exception) Gets the lowest inner exception of specified exception.\nParameters    Name Description     exception The exception.   param     Returns Lowest inner exception.\nExceptions    Name Description     ArgumentNullException The isnull.    IsCritical(Exception ex) Determines whether the specified exception is critical (meaning the application should shut down).\nParameters    Name Description     ex The exception.    Returns true if the specified exception is critical; otherwise,false.\nToXml(Exception exception) Returns the Exception message as XML document.\nParameters    Name Description     exception The exception.   param isnull.    Returns An XDocument of the Exception object.\nExceptions    Name Description     ArgumentNullException The    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/exceptionfactory/",
	"title": "ExceptionFactory",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ExceptionFactory  Exception factory.\nMethods CreateException(Type exceptionType, object[] args) Creates the exception with the specified arguments.\nParameters    Name Description     exceptionType Type of the exception.   args The arguments.    Returns The created exception ornull if there was no valid constructor available.\nCreateException(Type exceptionType, string message, Exception innerException) Creates the exception with the message and inner exception. If the exception does not support creation with inner exceptions, it will use the message only.\nParameters    Name Description     exceptionType Type of the exception.   message The message.   innerException The inner exception.    Returns The created exception ornull if there was no valid constructor available.\nCreateException(object[] args) Creates the exception with the specified arguments.\nType Parameters TException The type of the exception.\nParameters    Name Description     args The arguments.    Returns The created exception ornull if there was no valid constructor available.\nCreateException(string message, Exception innerException) Creates the exception with the message and inner exception. If the exception does not support creation with inner exceptions, it will use the message only.\nType Parameters TException The type of the exception.\nParameters    Name Description     message The message.   innerException The inner exception.    Returns The created exception ornull if there was no valid constructor available.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/exceptionhandling/exceptionhandler/",
	"title": "ExceptionHandler",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ExceptionHandling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class ExceptionHandler\u0026lt;TException\u0026gt; : IExceptionHandler\u0026lt;TException, TException\u0026gt; where TException : Exception  Base types\nIExceptionHandler\nThis implements the exception treatment mechanics.\nType Parameters TException The exception type.\nFields Constructors Properties BufferPolicy Gets or sets the buffer policy.\nExceptionType Gets the type of the handled exception.\nFilter Gets the exception filter.\nRetryPolicy Gets or sets the retry policy.\nMethods GetFilter() Get the exception filter.\nReturns Handle(Exception exception) Handles the exception using the action that was defined.\nParameters    Name Description     exception The exception.    Exceptions    Name Description     ArgumentNullException The exception isnull.    OnException(TException exception) The action to do on an exception of defined type occurs.\nExceptions    Name Description     ArgumentNullException The exception isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/exceptionhandling/exceptionhandlerextensions/",
	"title": "ExceptionHandlerExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ExceptionHandling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ExceptionHandlerExtensions  The exception handler extensions.\nMethods OnErrorRetry(IExceptionHandler exceptionHandler, int numberOfTimes, TimeSpan interval) Should retry the action on error using the provided policy.\nParameters    Name Description     exceptionHandler The exception handler.   numberOfTimes The number of times to attempts.   interval The interval between two attempts.    Exceptions    Name Description     System.ArgumentNullException The exceptionHandler isnull.   System.ArgumentOutOfRangeException The numberOfTimes is larger than1.    OnErrorRetryImmediately(IExceptionHandler exceptionHandler, int numberOfTimes) Should retry action on error immediately.\nParameters    Name Description     exceptionHandler The exception handler.   numberOfTimes The number of times.    Exceptions    Name Description     System.ArgumentNullException The exceptionHandler isnull.   System.ArgumentOutOfRangeException The numberOfTimes is larger than1.    UsingTolerance(IExceptionHandler exceptionHandler, int numberOfTimes, TimeSpan interval) Should buffer the exceptions using the specified policy tolerance.\nParameters    Name Description     exceptionHandler The exception handler.   numberOfTimes The number of times before handling the exception.   interval The interval.    Exceptions    Name Description     ArgumentNullException The exceptionHandler isnull.   ArgumentOutOfRangeException The numberOfTimes is out of range.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/exceptionhandling/exceptionpredicate/",
	"title": "ExceptionPredicate",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ExceptionHandling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public delegate ExceptionPredicate : MulticastDelegate  Base types MulticastDelegate\nThe exception filter.\nParameters    Name Description     exception     Returns "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/exceptionhandling/exceptionservice/",
	"title": "ExceptionService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ExceptionHandling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ExceptionService : IExceptionService  Base types\nIExceptionService\nThe exception service allows the usage of the Try/Catch mechanics. This means that this service provides possibilities to handle all exception types previously registered.\nFields Properties Default Gets the default instance of the exception service.\nExceptionHandlers Gets the exception handlers.\nEvents ExceptionBuffered Occurs when an exception is buffered.\nRetryingAction Occurs when an action is retrying.\nMethods GetHandler(Type exceptionType) Gets the exception handler for the specified exception type.\nParameters    Name Description     exceptionType Type of the exception.    Returns The exception handler.\nExceptions    Name Description     ArgumentNullException The isnull.   ArgumentException The exceptionType is not of type.    GetHandler() Gets the exception handler for the specified exception type.\nType Parameters TException The type of the exception.\nReturns The exception handler.\nHandleException(Exception exception) Handles the specified exception if possible.\nParameters    Name Description     exception The exception to handle.    Returns true if the exception is handled; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The exception isnull.    IsExceptionRegistered(Type exceptionType) Determines whether the specified exception type is registered.\nParameters    Name Description     exceptionType Type of the exception.    Returns true if the specified exception type is registered; otherwise,false.\nExceptions    Name Description     ArgumentNullException The isnull.   ArgumentException The exceptionType is not of type.    IsExceptionRegistered() Determines whether the specified exception type is registered.\nType Parameters TException The type of the exception.\nReturns true if the exception type is registered; otherwise,false.\nProcess(Action action) Processes the specified action. If the exception could not be handled safely by this service, it will throw the exception.\nParameters    Name Description     action The action.    Exceptions    Name Description     ArgumentNullException The action isnull.    Process(Func action) Processes the specified action. If the exception could not be handled safely by this service, it will throw the exception.\nType Parameters TResult The result type.\nParameters    Name Description     action The action.    Returns Exceptions    Name Description     ArgumentNullException The action isnull.    ProcessAsync(Func action) Processes the specified action.\nParameters    Name Description     action The action.    Returns Exceptions    Name Description     ArgumentNullException The action isnull.    ProcessAsync(Task action) Processes the specified action.\nParameters    Name Description     action The action.    Returns Exceptions    Name Description     ArgumentNullException The action isnull.    ProcessAsync(Func\u0026gt; action) Processes the specified action.\nType Parameters TResult The result type.\nParameters    Name Description     action The action.    Returns Exceptions    Name Description     ArgumentNullException The action isnull.    ProcessAsync(Func action, CancellationToken cancellationToken) Processes the specified action. The action will be executed asynchronously.\nType Parameters TResult The result type.\nParameters    Name Description     action The action.   cancellationToken The cancellation token.    Returns Exceptions    Name Description     ArgumentNullException The action isnull.    ProcessWithRetry(Func action) Processes the specified action with possibility to retry on error.\nType Parameters TResult The type of the result.\nParameters    Name Description     action The action.    Returns Exceptions    Name Description     ArgumentNullException The action isnull.    ProcessWithRetryAsync(Func\u0026gt; action) Processes asynchronously the specified action with possibility to retry on error.\nType Parameters TResult The result type.\nParameters    Name Description     action The action.    Returns Exceptions    Name Description     ArgumentNullException The action isnull.    Register(IExceptionHandler handler) Registers an handler for a specific exception type.\nParameters    Name Description     handler The handler to use when the exception occurs.    Returns The handler to use.\nExceptions    Name Description     ArgumentNullException The handler isnull.    Register(Action handler, FuncexceptionPredicate) Registers a specific exception including the handler.\nType Parameters TException The type of the exception.\nParameters    Name Description     exceptionPredicate The exception filter.   handler The action to execute when the exception occurs.    Returns The handler to use.\nExceptions    Name Description     ArgumentNullException The handler isnull.   Exception A delegate callback throws an exception.    Unregister() Unregisters a specific exception for handling.\nType Parameters TException The type of the exception.\nReturns true if the exception is unsubscripted; otherwisefalse.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/exceptionhandling/exceptionserviceextensions/",
	"title": "ExceptionServiceExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ExceptionHandling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ExceptionServiceExtensions  The exception service extensions.\nMethods HandleExceptionAsync(IExceptionService exceptionService, Exception exception, CancellationToken cancellationToken) Handles asynchronously the specified exception if possible.\nParameters    Name Description     exceptionService The exception service.   exception The exception to handle.   cancellationToken The cancellation token.    Returns true if the exception is handled; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The exceptionService isnull.    ProcessWithRetry(IExceptionService exceptionService, Action action) Processes the specified action with possibilty to retry on error.\nParameters    Name Description     exceptionService The exception service.   action The action.    Exceptions    Name Description     ArgumentNullException The action isnull.   Exception A delegate callback throws an exception.    ProcessWithRetryAsync(IExceptionService exceptionService, Action action, CancellationToken cancellationToken) Processes asynchronously the specified action with possibility to retry on error.\nParameters    Name Description     exceptionService The exception service.   action The action.   cancellationToken The cancellation token.    Exceptions    Name Description     ArgumentNullException The action isnull.    ProcessWithRetryAsync(IExceptionService exceptionService, Func action) Processes asynchrounously the specified action with possibilty to retry on error.\nParameters    Name Description     exceptionService The exception service.   action The action.    Returns Exceptions    Name Description     ArgumentNullException The action isnull.   Exception A delegate callback throws an exception.    ProcessWithRetryAsync(IExceptionService exceptionService, Task action) Processes asynchronously the specified action with possibility to retry on error.\nParameters    Name Description     exceptionService The exception service.   action The action.    Exceptions    Name Description     ArgumentNullException The exceptionService isnull.    ProcessWithRetryAsync(IExceptionService exceptionService, Func action, CancellationToken cancellationToken) Processes asynchronously the specified action with possibility to retry on error.\nType Parameters TResult The result type.\nParameters    Name Description     exceptionService The exception service.   action The action.   cancellationToken The cancellation token.    Returns Exceptions    Name Description     ArgumentNullException The action isnull.    Register(IExceptionService exceptionService) Registers an handler for a specific exception.\nType Parameters TExceptionHandler The type of the exception handler.\nParameters    Name Description     exceptionService The exception service.    Returns The handler to use.\nExceptions    Name Description     ArgumentNullException The exceptionService isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/test/exceptiontester/",
	"title": "ExceptionTester",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Test   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ExceptionTester  Class that helps test methods for expected exceptions.\nMethods CallMethodAndExpectException(Action action, FuncexceptionValidator) Calls the method and checks for the exception. If no exception is thrown by the method, this method will throw an exception. If the wrong exception is thrown by the delegate, this method will thrown an exception as well.\nType Parameters TException The type of the exception.\nParameters    Name Description     action The action to execute.   exceptionValidator The exception validator. Ifnull, the exception will not be validated custom.    Returns The exception so it can be further analyzed if required.\nExceptions    Name Description     ArgumentNullException The action isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/excludefromserializationattribute/",
	"title": "ExcludeFromSerializationAttribute",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ExcludeFromSerializationAttribute : Attribute  Base types Attribute\nAttribute to define that a specific member must be excluded from the serialization by the serialization engine.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/excludefromvalidationattribute/",
	"title": "ExcludeFromValidationAttribute",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ExcludeFromValidationAttribute : Attribute  Base types Attribute\nAttribute that can be used to exclude properties from validation.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/caching/policies/expirationpolicy/",
	"title": "ExpirationPolicy",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Caching.Policies   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class ExpirationPolicy  The expiration policy.\nFields Constructors Properties CanReset Gets a value indicating whether the value with this policy can be reset.\nIsExpired Gets a value indicating whether the value with this policy attached is expired.\nMethods Absolute(DateTime absoluteExpirationDateTime, bool force) Creates a AbsoluteExpirationPolicy instance.\nParameters    Name Description     absoluteExpirationDateTime The absolute expiration.   force Indicates whether the policy will be created even if the policy will be created expired.    Returns The AbsoluteExpirationPolicy ornull if absoluteExpirationDateTime is in the pass.\nRemarks The cache item will expire on the absolute expiration date time.\nCustom(Func isExpiredFunc, Action resetAction, bool force) Creates a CustomExpirationPolicy instance.\nParameters    Name Description     isExpiredFunc The function to check if the policy is expired.   resetAction The action that will be executed if the item is read before expiration.   force Indicates whether the policy will be created even if the policy will be created expired.    Returns The CustomExpirationPolicy.\nExceptions    Name Description     System.ArgumentNullException The isExpiredFunc isnull.    Duration(TimeSpan durationTimeSpan, bool force) Creates a DurationExpirationPolicy instance.\nParameters    Name Description     durationTimeSpan The duration.   force Indicates whether the policy will be created even if the policy will be created expired.    Returns The DurationExpirationPolicy ornull if durationTimeSpan is less than 0 ticks.\nRemarks The cache item will expire using the duration to calculate the absolute expiration from now.\nReset() Resets the expiration policy.\nExceptions    Name Description     InvalidOperationException If the policy do not support this operation.    Sliding(TimeSpan durationTimeSpan, bool force) Creates a SlidingExpirationPolicy instance.\nParameters    Name Description     durationTimeSpan The duration.   force Indicates whether the policy will be created even if the policy will be created expired.    Returns The SlidingExpirationPolicy ornull if durationTimeSpan is less than 0 ticks.\nRemarks The cache item will expire using the duration property as the sliding expiration.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/caching/expiredeventargs/",
	"title": "ExpiredEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Caching   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ExpiredEventArgs\u0026lt;TKey, TValue\u0026gt; : EventArgs  Base types EventArgs\nThe expired event args.\nType Parameters TKey The key type.\nTValue The value type.\nConstructors ExpiredEventArgs(TKey key, TValue value, bool dispose) Initializes a new instance of the Missing:  class.\nParameters    Name Description     key The key.   value The value.   dispose The value indicating whether the expired value should be disposed after removal from cache.    Properties Dispose Gets or sets a value indicating whether the expired value should be disposed after removal from cache.\nRemarks Default value of this property is equal to DisposeValuesOnRemoval value.\nKey Gets the key.\nValue Gets the value.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/caching/expiringeventargs/",
	"title": "ExpiringEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Caching   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ExpiringEventArgs\u0026lt;TKey, TValue\u0026gt; : EventArgs  Base types EventArgs\nThe expiring event args.\nType Parameters TKey The key type.\nTValue The value type.\nConstructors ExpiringEventArgs(TKey key, TValue value, ExpirationPolicy expirationPolicy) Initializes a new instance of the Missing:  class.\nParameters    Name Description     key The key.   value The value.   expirationPolicy The expiration policy.    Properties Cancel Gets or sets a value indicating whether the expiration of value should be canceled and the value should stay in cache.\nExpirationPolicy Gets or sets the expiration policy.\nKey Gets the key.\nValue Gets the value.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/exportmode/",
	"title": "ExportMode",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum ExportMode : Enum  Base types Enum\nThe export mode.\nFields Clipboard 1\nThe clipboard export mode.\nFile 2\nThe file export mode\nPrint 0\nThe print export mode.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/expressionhelper/",
	"title": "ExpressionHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ExpressionHelper  Expression helper class that allows easy parsing of expressions.\nFields Methods GetOwner(Expression\u0026gt; propertyExpression) Gets the owner of the expression. For example if the expression() =\u0026gt; MyProperty, the owner of the property will be returned.\nParameters    Name Description     propertyExpression The property expression.    Returns The owner of the expression ornull if the owner cannot be found.\nExceptions    Name Description     ArgumentNullException The propertyExpression isnull.    GetPropertyName(Expression\u0026gt; propertyExpression) Gets the name of the property from the expression.\nType Parameters TProperty The type of the property.\nParameters    Name Description     propertyExpression The property expression.    Returns The name of the property parsed from the expression ornull if the property cannot be found.\nExceptions    Name Description     ArgumentNullException The propertyExpression isnull.    GetPropertyName(Expression\u0026gt; propertyExpression) Gets the name of the property from the expression.\nType Parameters TSource The type of the t source.\nTProperty The type of the property.\nParameters    Name Description     propertyExpression The property expression.    Returns The name of the property parsed from the expression ornull if the property cannot be found.\nExceptions    Name Description     ArgumentNullException The propertyExpression isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/collections/extendedsuspensioncontext/",
	"title": "ExtendedSuspensionContext",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Collections   Available on Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ExtendedSuspensionContext\u0026lt;T\u0026gt;  Context class the hold all relevant data while notifications are suspended.\nType Parameters T Type of the elements contained by the suspending collection.\nFields Constructors ExtendedSuspensionContext(SuspensionMode mode) Initializes a new instance of the Missing:  class.\nParameters    Name Description     mode The suspension mode.    Properties Count Gets or sets the suspension count.\nMixedActions Gets the actions while change notifications were suspended in Mixed mode.\nMixedItemIndices Gets the indices of the added and removed items while change notifications were suspended in Mixed mode.\nMixedItems Gets the added and removed items while change notifications were suspended in Mixed mode.\nMode Gets the suspension mode.\nNewItemIndices Gets the indices of the added items while change notifications were suspended in Adding mode.\nNewItems Gets the added items while change notifications were suspended in Adding mode.\nOldItemIndices Gets the indices of the removed items while change notifications were suspended in Removing mode.\nOldItems Gets the removed items while change notifications were suspended in Removing mode.\nMethods TryRemoveItemFromNewItems(int index, T item) Tries to remove the item from new items\nParameters    Name Description     index The item index.   item The item.    Returns true if removed, otherwisefalse.\nRemarks This code is only need byFastBindingList{T}.\nTryRemoveItemFromOldItems(int index, T item) Tries to remove the item from old items\nParameters    Name Description     index The item index.   item The item.    Returns true if removed, otherwisefalse.\nRemarks This code is only need byFastBindingList{T}.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/externalcontainernotsupportedexception/",
	"title": "ExternalContainerNotSupportedException",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ExternalContainerNotSupportedException : Exception  Base types Exception\nException class in case an external container is not supported by the IServiceLocator implementation.\nConstructors ExternalContainerNotSupportedException(string[] supportedContainers) Initializes a new instance of the ExternalContainerNotSupportedException class.\nParameters    Name Description     supportedContainers The supported containers.    Properties SupportedContainers Gets the names of the supported containers.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/faq/",
	"title": "FAQ",
	"tags": [],
	"description": "",
	"content": "\r\rGeneral\r\r\rMVVM\r\r\rProblem solving\r\r\rPerformance considerations\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/collections/fastbindinglist/",
	"title": "FastBindingList",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Collections   Available on .NET Framework 4.5, .NET Framework 4.6    public class FastBindingList\u0026lt;T\u0026gt; : ISuspendChangeNotificationsCollection, BindingList\u0026lt;T\u0026gt;  Base types BindingList\nBase types\nISuspendChangeNotificationsCollection\nFast implementation of where the change notifications can be suspended.\nType Parameters T Type of the elements contained by this collection.\nFields Constructors FastBindingList() Initializes a new instance of the Missing:  class.\nFastBindingList(IEnumerable collection) Initializes a new instance of the Missing:  class.\nParameters    Name Description     collection The collection.    FastBindingList(IEnumerable collection) Initializes a new instance of the Missing:  class.\nParameters    Name Description     collection The collection.    Properties AutomaticallyDispatchChangeNotifications Gets or sets a value indicating whether events should automatically be dispatched to the UI thread.\nIsDirty Gets or sets a value indicating whether change to the collection is made when its notifications are suspended.\nNotificationsSuspended Gets a value indicating whether change notifications are suspended.\nMethods AddItems(IEnumerable collection) Adds the specified items to the collection without causing a change notification for all items. This method will raise a change notification at the end.\nParameters    Name Description     collection The collection.    Exceptions    Name Description     ArgumentNullException The collection isnull.    AddItems(IEnumerable collection) Adds the specified items to the collection without causing a change notification for all items. This method will raise a change notification at the end.\nParameters    Name Description     collection The collection.    Exceptions    Name Description     ArgumentNullException The collection isnull.    InsertItems(IEnumerable collection, int index) Inserts the elements of the specified collection at the specified index.\nParameters    Name Description     collection The collection.   index The start index.    Exceptions    Name Description     ArgumentNullException The collection isnull.    InsertItems(IEnumerable collection, int index) Inserts the elements of the specified collection at the specified index.\nParameters    Name Description     collection The collection.   index The start index.    Exceptions    Name Description     ArgumentNullException The collection isnull.    RemoveItems(IEnumerable collection) Removes the specified items from the collection without causing a change notification for all items. This method will raise a change notification at the end.\nParameters    Name Description     collection The collection.    Exceptions    Name Description     ArgumentNullException The collection isnull.    RemoveItems(IEnumerable collection) Removes the specified items from the collection without causing a change notification for all items. This method will raise a change notification at the end.\nParameters    Name Description     collection The collection.    Exceptions    Name Description     ArgumentNullException The collection isnull.    Reset() Raises CollectionChanged with Reset changed action.\nSuspendChangeNotifications() Suspends the change notifications until the returned is disposed.\nReturns IDisposable.\nExamples var fastCollection = new FastBindingList\u0026lt;int\u0026gt;(); using (fastCollection.SuspendChangeNotificaftions()) { // Adding or removing events inside here will not raise events fastCollection.Add(1); fastCollection.Add(2); fastCollection.Add(3); fastCollection.Remove(3); fastCollection.Remove(2); fastCollection.Remove(1); }  SuspendChangeNotifications(SuspensionMode mode) Suspends the change notifications until the returned is disposed.\nParameters    Name Description     mode The suspension Mode.    Returns IDisposable.\nExamples var fastCollection = new FastBindingList\u0026lt;int\u0026gt;(); using (fastCollection.SuspendChangeNotificaftions()) { // Adding or removing events inside here will not raise events fastCollection.Add(1); fastCollection.Add(2); fastCollection.Add(3); fastCollection.Remove(3); fastCollection.Remove(2); fastCollection.Remove(1); }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/fastdatetime/",
	"title": "FastDateTime",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class FastDateTime  Fast implementation of the date/time retrieval.\nFields Constructors Properties Now Gets the current date/time.\nUtcNow Gets the current date/time in UTC.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/collections/fastobservablecollection/",
	"title": "FastObservableCollection",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Collections   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class FastObservableCollection\u0026lt;T\u0026gt; : ISuspendChangeNotificationsCollection, ObservableCollection\u0026lt;T\u0026gt;  Base types ObservableCollection\nBase types\nISuspendChangeNotificationsCollection\nFast implementation of where the change notifications can be suspended.\nType Parameters T Type of the elements contained by this collection.\nFields Constructors FastObservableCollection() Initializes a new instance of the Missing:  class.\nFastObservableCollection(IEnumerable collection) Initializes a new instance of the Missing:  class.\nParameters    Name Description     collection The collection.    FastObservableCollection(IEnumerable collection) Initializes a new instance of the Missing:  class.\nParameters    Name Description     collection The collection.    Properties AutomaticallyDispatchChangeNotifications Gets or sets a value indicating whether events should automatically be dispatched to the UI thread.\nIsDirty Gets or sets a value indicating whether change to the collection is made when its notifications are suspended.\nNotificationsSuspended Gets a value indicating whether change notifications are suspended.\nMethods AddItems(IEnumerable collection) Adds the specified items to the collection without causing a change notification for all items. This method will raise a change notification at the end.\nParameters    Name Description     collection The collection.    Exceptions    Name Description     ArgumentNullException The collection isnull.    AddItems(IEnumerable collection, SuspensionMode mode) Adds the specified items to the collection without causing a change notification for all items. This method will raise a change notification at the end.\nParameters    Name Description     collection The collection.   mode The suspension mode.    Exceptions    Name Description     ArgumentNullException The collection isnull.    AddItems(IEnumerable collection) Adds the specified items to the collection without causing a change notification for all items. This method will raise a change notification at the end.\nParameters    Name Description     collection The collection.    Exceptions    Name Description     ArgumentNullException The collection isnull.    AddItems(IEnumerable collection, SuspensionMode mode) Adds the specified items to the collection without causing a change notification for all items. This method will raise a change notification at the end.\nParameters    Name Description     collection The collection.   mode The suspension mode.    Exceptions    Name Description     ArgumentNullException The collection isnull.    InsertItems(IEnumerable collection, int index) Inserts the elements of the specified collection at the specified index. This method will raise a change notification at the end.\nParameters    Name Description     collection The collection.   index The start index.    Exceptions    Name Description     ArgumentNullException The collection isnull.    InsertItems(IEnumerable collection, int index, SuspensionMode mode) Inserts the elements of the specified collection at the specified index. This method will raise a change notification at the end.\nParameters    Name Description     collection The collection.   index The start index.   mode The suspension mode.    Exceptions    Name Description     ArgumentNullException The collection isnull.    InsertItems(IEnumerable collection, int index) Inserts the elements of the specified collection at the specified index. This method will raise a change notification at the end.\nParameters    Name Description     collection The collection.   index The start index.    Exceptions    Name Description     ArgumentNullException The collection isnull.    InsertItems(IEnumerable collection, int index, SuspensionMode mode) Inserts the elements of the specified collection at the specified index. This method will raise a change notification at the end.\nParameters    Name Description     collection The collection.   index The start index.   mode The suspension mode.    Exceptions    Name Description     ArgumentNullException The collection isnull.    RemoveItems(IEnumerable collection) Removes the specified items from the collection without causing a change notification for all items. This method will raise a change notification at the end.\nParameters    Name Description     collection The collection.    Exceptions    Name Description     ArgumentNullException The collection isnull.    RemoveItems(IEnumerable collection, SuspensionMode mode) Removes the specified items from the collection without causing a change notification for all items. This method will raise a change notification at the end.\nParameters    Name Description     collection The collection.   mode The suspension mode.    Exceptions    Name Description     ArgumentNullException The collection isnull.    RemoveItems(IEnumerable collection) Removes the specified items from the collection without causing a change notification for all items. This method will raise a change notification at the end.\nParameters    Name Description     collection The collection.    Exceptions    Name Description     ArgumentNullException The collection isnull.    RemoveItems(IEnumerable collection, SuspensionMode mode) Removes the specified items from the collection without causing a change notification for all items. This method will raise a change notification at the end.\nParameters    Name Description     collection The collection.   mode The suspension mode.    Exceptions    Name Description     ArgumentNullException The collection isnull.    Reset() Raises with changed action.\nSuspendChangeNotifications() Suspends the change notifications until the returned is disposed.\nReturns IDisposable.\nExamples var fastCollection = new FastObservableCollection\u0026lt;int\u0026gt;(); using (fastCollection.SuspendChangeNotificaftions()) { // Adding or removing events inside here will not raise events fastCollection.Add(1); fastCollection.Add(2); fastCollection.Add(3); fastCollection.Remove(3); fastCollection.Remove(2); fastCollection.Remove(1); }  SuspendChangeNotifications(SuspensionMode mode) Suspends the change notifications until the returned is disposed.\nParameters    Name Description     mode The suspension Mode.    Returns IDisposable.\nExamples var fastCollection = new FastObservableCollection\u0026lt;int\u0026gt;(); using (fastCollection.SuspendChangeNotificaftions()) { // Adding or removing events inside here will not raise events fastCollection.Add(1); fastCollection.Add(2); fastCollection.Add(3); fastCollection.Remove(3); fastCollection.Remove(2); fastCollection.Remove(1); }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/fastviewpropertyselector/",
	"title": "FastViewPropertySelector",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class FastViewPropertySelector : ViewPropertySelector  Base types ViewPropertySelector\nVery fast view property selector because it does not select any view properties. Use this one for best performance but loose the automatic view property change notifications.\nMethods MustSubscribeToAllViewProperties(Type targetViewType) Determines whether all view properties must be subscribed for this type.\nParameters    Name Description     targetViewType Type of the target view.    Returns true if all view properties must be subscribed to,false otherwise.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/fieldvalidationresult/",
	"title": "FieldValidationResult",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class FieldValidationResult : IFieldValidationResult, ValidationResult  Base types ValidationResult\nBase types\nIFieldValidationResult\nField validation result.\nConstructors FieldValidationResult(PropertyData property, ValidationResultType validationResultType, string messageFormat, object[] args) Initializes a new instance of the FieldValidationResult class.\nParameters    Name Description     property The property data.   validationResultType Type of the validation result.   messageFormat The message format.   args The args.    Exceptions    Name Description     ArgumentNullException The property isnull.   ArgumentException The messageFormat isnull or whitespace.    FieldValidationResult(string propertyName, ValidationResultType validationResultType, string messageFormat, object[] args) Initializes a new instance of the FieldValidationResult class.\nParameters    Name Description     propertyName Name of the property.   validationResultType Type of the validation result.   messageFormat The message format.   args The args.    Exceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    Properties PropertyName Gets the name of the property.\nMethods CreateError(PropertyData propertyData, string messageFormat, object[] args) Creates a FieldValidationResult containing an error.\nParameters    Name Description     propertyData The property data.   messageFormat The message format.   args The args.    Returns The FieldValidationResult.\nExceptions    Name Description     ArgumentNullException The propertyData isnull.   ArgumentException The messageFormat isnull or whitespace.    CreateError(string propertyName, string messageFormat, object[] args) Creates a FieldValidationResult containing an error.\nParameters    Name Description     propertyName Name of the property.   messageFormat The message format.   args The args.    Returns The FieldValidationResult.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    CreateError(Expression\u0026gt; propertyExpression, string messageFormat, object[] args) Creates a FieldValidationResult containing an error.\nType Parameters TProperty The type of the property.\nParameters    Name Description     propertyExpression The property expression.   messageFormat The message format.   args The args.    Returns The FieldValidationResult.\nExceptions    Name Description     ArgumentException The propertyExpression isnull.    CreateErrorWithTag(PropertyData propertyData, string message, object tag) Creates a FieldValidationResult containing an error.\nParameters    Name Description     propertyData The property data.   message The message.   tag The tag.    Returns The FieldValidationResult.\nExceptions    Name Description     ArgumentNullException The propertyData isnull.    CreateErrorWithTag(string propertyName, string message, object tag) Creates a FieldValidationResult containing an error.\nParameters    Name Description     propertyName Name of the property.   message The message.   tag The tag.    Returns The FieldValidationResult.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.   ArgumentNullException The message isnull.    CreateErrorWithTag(Expression\u0026gt; propertyExpression, string message, object tag) Creates a FieldValidationResult containing an error.\nType Parameters TProperty The type of the property.\nParameters    Name Description     propertyExpression The property expression.   message The message.   tag The tag.    Returns The FieldValidationResult.\nExceptions    Name Description     ArgumentException The propertyExpression isnull.   ArgumentNullException The message isnull.    CreateWarning(PropertyData propertyData, string messageFormat, object[] args) Creates a FieldValidationResult containing a warning.\nParameters    Name Description     propertyData The property data.   messageFormat The message format.   args The args.    Returns The FieldValidationResult.\nExceptions    Name Description     ArgumentNullException The propertyData isnull.   ArgumentException The messageFormat isnull or whitespace.    CreateWarning(string propertyName, string messageFormat, object[] args) Creates a FieldValidationResult containing a warning.\nParameters    Name Description     propertyName Name of the property.   messageFormat The message format.   args The args.    Returns The FieldValidationResult.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    CreateWarning(Expression\u0026gt; propertyExpression, string messageFormat, object[] args) Creates a FieldValidationResult containing a warning.\nType Parameters TProperty The type of themodel.\nParameters    Name Description     propertyExpression The property expression.   messageFormat The message format.   args The args.    Returns The FieldValidationResult.\nExceptions    Name Description     ArgumentException The propertyExpression isnull.    CreateWarningWithTag(PropertyData propertyData, string message, object tag) Creates a FieldValidationResult containing a warning.\nParameters    Name Description     propertyData The property data.   message The message.   tag The tag.    Returns The FieldValidationResult.\nExceptions    Name Description     ArgumentNullException The propertyData isnull.    CreateWarningWithTag(string propertyName, string message, object tag) Creates a FieldValidationResult containing a warning.\nParameters    Name Description     propertyName Name of the property.   message The message.   tag The tag.    Returns The FieldValidationResult.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.   ArgumentNullException The message isnull.    CreateWarningWithTag(Expression\u0026gt; propertyExpression, string message, object tag) Creates a FieldValidationResult containing a warning.\nType Parameters TProperty The type of the property.\nParameters    Name Description     propertyExpression The property expression.   message The message.   tag The tag.    Returns The FieldValidationResult.\nExceptions    Name Description     ArgumentException The propertyExpression isnull.   ArgumentNullException The message isnull.    ToString() Returns a that represents this instance.\nReturns A that represents this instance.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/fileloglistener/",
	"title": "FileLogListener",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6    public class FileLogListener : BatchLogListenerBase  Base types BatchLogListenerBase\nLog listener which writes all data to a file.\nFields Constructors FileLogListener(Assembly assembly) Initializes a new instance of the FileLogListener class.\nParameters    Name Description     assembly The assembly to load the product info from. Ifnull, the entry assembly will be used.    FileLogListener(string filePath, int maxSizeInKiloBytes, Assembly assembly) Initializes a new instance of the FileLogListener class.\nParameters    Name Description     filePath The file path.   maxSizeInKiloBytes The max size in kilo bytes.   assembly The assembly to load the product info from. Ifnull, the entry assembly will be used.    Exceptions    Name Description     ArgumentException The filePath isnull or whitespace.    Properties FilePath Gets or sets the file path.\nMaxSizeInKiloBytes Gets or sets the maximum size information kilo bytes.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/fileservicebase/",
	"title": "FileServiceBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class FileServiceBase : IFileSupport, ViewModelServiceBase  Base types ViewModelServiceBase\nBase types\nIFileSupport\nBase class for file services.\nConstructors Properties AddExtension Gets or sets a value indicating whether a file dialog automatically adds an extension to a file name if the user omits an extension.\nCheckFileExists Gets or sets a value indicating whether a file dialog displays a warning if the user specifies a file name that does not exist.\nCheckPathExists Gets or sets a value that specifies whether warnings are displayed if the user types invalid paths and file names.\nFileName Gets or sets the name of the file.\nFilter Gets or sets the filter to use when opening or saving the file.\nFilterIndex Gets or sets the index of the filter currently selected in a file dialog.\nInitialDirectory Gets or sets the initial directory.\nTitle Gets or sets the title which will be used for display.\nValidateNames Gets or sets a value indicating whether the dialog accepts only valid Win32 file names.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/firstinterfaceregistrationconvention/",
	"title": "FirstInterfaceRegistrationConvention",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class FirstInterfaceRegistrationConvention : RegistrationConventionBase  Base types RegistrationConventionBase\nThe first interface convention based on RegistrationConventionBase.\nFields Constructors FirstInterfaceRegistrationConvention(IServiceLocator serviceLocator, RegistrationType registrationType) Initializes a new instance of the FirstInterfaceRegistrationConvention class.\nParameters    Name Description     serviceLocator The service locator.   registrationType Type of the registration.    Methods Process(IEnumerable typesToRegister) Processes the specified types to register.\nParameters    Name Description     typesToRegister The types to register.    Exceptions    Name Description     System.ArgumentNullException The typesToRegister isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/flashmode/",
	"title": "FlashMode",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum FlashMode : Enum  Base types Enum\nDefines the operating mode of the camera flash.\nFields Auto The camera flash is in auto mode.\nOff The camera flash is disabled.\nOn The camera flash is enabled.\nRedEyeReduction The camera flash is in red-eye reduction mode.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/focus/",
	"title": "Focus",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class Focus : FocusBehaviorBase  Base types FocusBehaviorBase\nBehavior to set focus to a. This behavior sets the focus only once on the first time the is loaded.\nFields EventNameProperty Using a DependencyProperty as the backing store for EventName. This enables animation, styling, binding, etc\u0026hellip;\nFocusMomentProperty Using a DependencyProperty as the backing store for FocusMoment. This enables animation, styling, binding, etc\u0026hellip;\nPropertyNameProperty Using a DependencyProperty as the backing store for PropertyName. This enables animation, styling, binding, etc\u0026hellip;\nSourceProperty Using a DependencyProperty as the backing store for Source. This enables animation, styling, binding, etc\u0026hellip;\nConstructors Focus() Initializes a new instance of the Focus class.\nProperties EventName Gets or sets the name of the event. This value is required when the FocusMoment property is Event.\nFocusMoment Gets or sets the focus moment. When this value is Loaded, no other properties need to be set. When this value is PropertyChanged, both the Source and PropertyName must be set. When this value is Event, both the Source and EventName must be set.\nPropertyName Gets or sets the name of the property. This value is required when the FocusMoment property is PropertyChanged.\nSource Gets or sets the source. This value is required when the FocusMoment property is either PropertyChanged or Event.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/focusbehaviorbase/",
	"title": "FocusBehaviorBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class FocusBehaviorBase : BehaviorBase\u0026lt;FrameworkElement\u0026gt;  Base types BehaviorBase\nBase class for focus behaviors.\nFields FocusDelayProperty Using a DependencyProperty as the backing store for FocusDelay. This enables animation, styling, binding, etc\u0026hellip;\nConstructors FocusBehaviorBase() Initializes a new instance of the FocusBehaviorBase class.\nProperties FocusDelay Gets or sets the focus delay. If smaller than 25, no delay will be used. If larger than 5000, it will be set to 5000. The default value in WPF is0.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/focusfirstcontrol/",
	"title": "FocusFirstControl",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6    public class FocusFirstControl : BehaviorBase\u0026lt;FrameworkElement\u0026gt;  Base types BehaviorBase\nBehavior to focus the first control in a window.\nFields FocusParentsFirstProperty Dependency property for the FocusParentsFirst property.\nProperties FocusParentsFirst Gets or sets a value indicating whether the parent should be focused first. The default value istrue.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/focusmoment/",
	"title": "FocusMoment",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public enum FocusMoment : Enum  Base types Enum\nAvailable moments on which the focus can be set.\nFields Event 2\nFocus when a specific event occurs.\nLoaded 0\nFocus when the control is loaded.\nPropertyChanged 1\nFocus when a property has changed.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/focusonkeypress/",
	"title": "FocusOnKeyPress",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class FocusOnKeyPress : FocusBehaviorBase  Base types FocusBehaviorBase\nBehavior to set the focus on a key press.\nFields KeyProperty Using a DependencyProperty as the backing store for Key. This enables animation, styling, binding, etc\u0026hellip;\nModifiersProperty Using a DependencyProperty as the backing store for Modifiers. This enables animation, styling, binding, etc\u0026hellip;\nConstructors FocusOnKeyPress() Initializes a new instance of the FocusOnKeyPress class.\nProperties Key Gets or sets the key to which the behavior should respond.\nModifiers Gets or sets the modifiers to check for.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/formattingconverter/",
	"title": "FormattingConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class FormattingConverter : ValueConverterBase  Base types ValueConverterBase\nConverter for formatting values.\nFields Constructors FormattingConverter() Initializes a new instance of the FormattingConverter class.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/android/app/fragment/",
	"title": "Fragment",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Android.App   Available on Xamarin - Android    public class Fragment : IUserControl, Fragment  Base types Fragment\nBase types\nIUserControl\nFragment implementation that automatically takes care of view models.\nFields Constructors Fragment() Initializes a new instance of the Fragment class.\nExceptions    Name Description     System.NotSupportedException     Fragment(IntPtr javaReference, JniHandleOwnership transfer) Initializes a new instance of the Fragment class.\nParameters    Name Description     javaReference The java reference.   transfer The transfer.    Properties CloseViewModelOnUnloaded Gets or sets a value indicating whether the user control should close any existing view model when the control is unloaded from the visual tree. Set this property tofalse if a view model should be kept alive and re-used for unloading/loading instead of creating a new one. By default, this value istrue.\nDataContext Gets or sets the data context.\nDisableWhenNoViewModel Gets or sets a value indicating whether the user control should automatically be disabled when there is no active view model.\nIsEnabled Gets or sets a value indicating whether the view is enabled.\nParent Gets the parent of the view.\nPreventViewModelCreation Gets or sets a value indicating whether the view model container should prevent the creation of a view model. This property is very useful when using views in transitions where the view model is no longer required.\nSupportParentViewModelContainers Gets or sets a value indicating whether parent view model containers are supported. If supported, the user control will search for a IView that implements the IViewModelContainer interface. During this search, the user control will use both the visual and logical tree. If a user control does not have any parent control implementing the IViewModelContainer interface, searching for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from happening, set this property tofalse. The default value istrue.\nViewModel Gets the view model that is contained by the container.\nViewModelType Gets the type of the view model that this user control uses.\nEvents DataContextChanged Occurs when the data context has changed.\nLoaded Occurs when the view is loaded.\nPropertyChanged Occurs when a property on the container has changed.\nRemarks This event makes it possible to externally subscribe to property changes of a view (mostly the container of a view model) because the .NET Framework does not allows us to.\nUnloaded Occurs when the view is unloaded.\nViewModelChanged Occurs when the ViewModel property has changed.\nViewModelPropertyChanged Occurs when a property on the ViewModel has changed.\nMethods OnPause() Called when the fragment is paused.\nOnResume() Called when the fragment is resumed.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/frameworkelementextensions/",
	"title": "FrameworkElementExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public static class FrameworkElementExtensions  Extensions for.\nMethods FixBlurriness(FrameworkElement element) Fixes the blurriness in WPF by setting bothSnapsToDevicePixels andUseLayoutRounding totrue.\nParameters    Name Description     element The UI element.    HideValidationAdorner(FrameworkElement frameworkElement) Hides the validation adorner.\nParameters    Name Description     frameworkElement The framework element.    IsVisible(FrameworkElement element) Determines whether the specified element is visible.\nParameters    Name Description     element The element.    Returns true if the specified element is visible; otherwise,false.\nIsVisibleToUser(FrameworkElement element) Determines whether the framework element is currently visible to the user.\nReturns true if the framework element is currently visible to the user; otherwise,false.\nIsVisibleToUser(FrameworkElement element, FrameworkElement container) Determines whether the specified element is currently visible to the user.\nParameters    Name Description     element The element.   container The container.    Returns true if if the specified element is currently visible to the user; otherwise,false.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/getfirstvalidationerrorconverter/",
	"title": "GetFirstValidationErrorConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6    public class GetFirstValidationErrorConverter : ValueConverterBase  Base types ValueConverterBase\nConverts a collection containing objects to return the first error or an empty string in case there are no errors.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/getting-started/wpf/",
	"title": "Getting started with WPF",
	"tags": [],
	"description": "",
	"content": "Welcome to the Getting started guide for Catel and WPF. In this guide, a very simple application will be created with the most commonly used aspects of Catel and WPF.\nThe application will manage family members and will display the families in separate views.\nNote that this guide assumes that the reader has a basic understanding of XAML and WPF since this guide will not cover these basics\n\rThe source code for this example can be found at https://github.com/Catel/Catel.GettingStarted.WPF\n\rNote that this guide will recommend code snippets that can be found here. They are not required, just recommended to speed up creating Catel classes and properties.\n\r\rCreating the WPF project\r\r\rCreating the models\r\r\rSerializing data from/to disk\r\r\rCreating the view models\r\r\rCreating the views (user controls)\r\r\rCreating the views (windows)\r\r\rHooking up everything together\r\r\rFinalizing the application\r\r\rDownload the final result: WPF.GettingStarted.zip\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/hashhelper/",
	"title": "HashHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class HashHelper  Hash helper class to generate hashCodes for objects.\nMethods CombineHash(int[] hashCodes) Combine multiple hashcodes in to one.\nParameters    Name Description     hashCodes An array of hashcodes.    Returns An \u0026lsquo;unique\u0026rsquo; hashcode.\nRemarks Based on System.Web.UI.HashCodeCombiner (use Reflector).\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/hideuntilviewmodelloaded/",
	"title": "HideUntilViewModelLoaded",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class HideUntilViewModelLoaded : BehaviorBase\u0026lt;FrameworkElement\u0026gt;  Base types BehaviorBase\nHides the view until the view model is loaded.\nFields Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/hidingvisibilityconverterbase/",
	"title": "HidingVisibilityConverterBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6    public abstract class HidingVisibilityConverterBase : VisibilityConverterBase  Base types VisibilityConverterBase\nA base class that makes it easier to create values to visibility converters. This converter returns when a non-visible state should be returned.\nConstructors "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/iaccelerometerservice/",
	"title": "IAccelerometerService",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IAccelerometerService : ISensorService\u0026lt;IAccelerometerValue, AccelerometerValueChangedEventArgs\u0026gt;  Base types\nISensorService\nInterface for accelerometer sensors.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/iaccelerometervalue/",
	"title": "IAccelerometerValue",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IAccelerometerValue  Value information about the accelerometer.\nProperties Timestamp Gets the timestamp.\nX Gets the X coordinate.\nY Gets the Y coordinate.\nZ Gets the Z coordinate.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/system/componentmodel/iadvancededitableobject/",
	"title": "IAdvancedEditableObject",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace System.ComponentModel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IAdvancedEditableObject  Interface extending the interface with events which allows preventing the object from being edited.\nEvents BeginEditing Occurs when the object is about to be edited. This event gives an opportunity to cancel the call to.\nCancelEditing Occurs when the editing of the object has just been canceled.\nCancelEditingCompleted Occurs when the edit cancel has been completed or canceled.\nEndEditing Occurs when the editing of the object has just been ended.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/iadvancednotifypropertychanged/",
	"title": "IAdvancedNotifyPropertyChanged",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IAdvancedNotifyPropertyChanged  Interface defining advanced additional functionality for the interface. This interface still supports the \u0026ldquo;old\u0026rdquo; way, so this can perfectly be used by any other class.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/iapicop/",
	"title": "IApiCop",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ApiCop   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IApiCop  Interface to specify writers for the ApiCop functionality.\nProperties TargetType Gets the target type of the ApiCop. This is the type where the ApiCop is created for.\nMethods GetResults() Gets the results of this specific ApiCop.\nReturns The results of this ApiCop.\nRegisterRule(TRule rule) Registers the rule with this ApiCop.\nType Parameters TRule The type of the rule.\nParameters    Name Description     rule The rule.    Returns The rule.\nExceptions    Name Description     ArgumentNullException The rule isnull.    UpdateRule(string name, Action action) Updates the rule with the specified name. If the rule is found and the ApiCop functionality is enabled, the specified action will be invoked on the registered rule.\nType Parameters TRule The type of the rule.\nParameters    Name Description     name The name.   action The action.    Returns The rule ornull if the rule is not registered first.\nExceptions    Name Description     ArgumentException The name isnull or whitespace.   ArgumentNullException The action isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/iapicoplistener/",
	"title": "IApiCopListener",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ApiCop   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IApiCopListener  Interface defining ApiCop listeners.\nProperties Grouping Gets or sets the grouping for this listener.\nMethods WriteResults(IEnumerable results) Writes the results of the ApiCop feature. Note that this will only contain invalid results. Valid results are not written to the listeners.\nParameters    Name Description     results The results.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/iapicopresult/",
	"title": "IApiCopResult",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ApiCop   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IApiCopResult  Interface defining ApiCop results.\nProperties Cop Gets the cop.\nRule Gets the rule.\nTag Gets the tag.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/iapicoprule/",
	"title": "IApiCopRule",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ApiCop   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IApiCopRule  Interface defining ApiCop rules.\nProperties Description Gets the description.\nLevel Gets the level of impact this rule has.\nName Gets the name.\nUrl Gets the URL.\nMethods GetResultAsText(string tag) Gets the result as text.\nParameters    Name Description     tag The tag.    Returns The result as text.\nGetTags() Gets all the tags used by this rule.\nReturns The list of tags.\nIsValid(IApiCop apiCop, string tag) Determines whether the specified ApiCop rule is valid.\nParameters    Name Description     apiCop The ApiCop.   tag The tag.    Returns true if the specified ApiCop is valid; otherwise,false.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/xamarin/forms/iargumentsproxy/",
	"title": "IArgumentsProxy",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Xamarin.Forms   Available on Portable Class Libraries    public interface IArgumentsProxy  The arguments proxy interface.\nProperties InternalType The internal type.\nObject The object.\nResult The result.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/threading/iasyncwaitqueue/",
	"title": "IAsyncWaitQueue",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IAsyncWaitQueue\u0026lt;T, T\u0026gt;  A collection of cancelable instances. Implementations must be threadsafe must work correctly if the caller is holding a lock.\nType Parameters T The type of the results. If this isn\u0026rsquo;t needed, use.\nRemarks This code originally comes from AsyncEx: https://github.com/StephenCleary/AsyncEx\nProperties IsEmpty Gets whether the queue is empty.\nMethods CancelAll() Removes all entries from the wait queue. Returns a disposable that cancels all entries.\nDequeue(T result) Removes a single entry in the wait queue. Returns a disposable that completes that entry.\nParameters    Name Description     result The result used to complete the wait queue entry. If this isn\u0026rsquo;t needed, usedefault(T).    DequeueAll(T result) Removes all entries in the wait queue. Returns a disposable that completes all entries.\nParameters    Name Description     result The result used to complete the wait queue entries. If this isn\u0026rsquo;t needed, usedefault(T).    EnqueueAsync() Creates a new entry and queues it to this wait queue. The returned task must support both synchronous and asynchronous waits.\nReturns The queued task.\nTryCancel(Task task) Attempts to remove an entry from the wait queue. Returns a disposable that cancels the entry.\nParameters    Name Description     task The task to cancel.    Returns A value indicating whether the entry was found and canceled.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/auditing/iauditor/",
	"title": "IAuditor",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Auditing   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IAuditor  Interface for auditors that can register itself with the AuditingManager.\nProperties PropertiesToIgnore Gets a list of properties that should be ignored.\nMethods OnCommandExecuted(IViewModel viewModel, string commandName, ICatelCommand command, object commandParameter) Called when a command of a view model has just been executed.\nParameters    Name Description     viewModel The view model.   commandName Name of the command, which is the name of the command property.   command The command that has been executed.   commandParameter The command parameter.    OnPropertyChanged(IViewModel viewModel, string propertyName, object newValue) Called when the property of a view model has just changed.\nParameters    Name Description     viewModel The view model.   propertyName Name of the property.   newValue The new property value.    OnViewModelCanceled(IViewModel viewModel) Called when a view model has just been canceled.\nParameters    Name Description     viewModel The view model.    OnViewModelCanceling(IViewModel viewModel) Called when a view model is about to be canceled.\nParameters    Name Description     viewModel The view model.    OnViewModelClosed(IViewModel viewModel) Called when a view model has just been closed.\nParameters    Name Description     viewModel The view model.    OnViewModelClosing(IViewModel viewModel) Called when a view model is about to be closed.\nParameters    Name Description     viewModel The view model.    OnViewModelCreated(IViewModel viewModel) Called when a specific view model type is created.\nParameters    Name Description     viewModel The view model.    OnViewModelCreating(Type viewModelType) Called when a specific view model type is being created.\nParameters    Name Description     viewModelType Type of the view model.    OnViewModelSaved(IViewModel viewModel) Called when a view model has just been saved.\nParameters    Name Description     viewModel The view model.    OnViewModelSaving(IViewModel viewModel) Called when a view model is about to be saved.\nParameters    Name Description     viewModel The view model.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/iauthenticationprovider/",
	"title": "IAuthenticationProvider",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IAuthenticationProvider  Interface to allow an authentication mechanism to control the CanExecute state of a command.\nMethods CanCommandBeExecuted(ICatelCommand command, object commandParameter) Determines whether the specified command can be executed. The class implementing this interface can use any required method to check the command. It is recommended to use the Tag property to identify a command.\nParameters    Name Description     command The command that is requested.   commandParameter The command parameter.    Returns true if the specified command can be excecuted; otherwise,false.\nRemarks TheCanExecute state of a command is queried a lot. The command itself does not cache any results because it is not aware of role or identity changes. If caching is required, this must be implemented in the class implementing the IAuthenticationProvider interface.a\nHasAccessToUIElement(FrameworkElement element, object tag, object authenticationTag) Determines whether the user has access to the specified element. This method is invoked by theAuthentication behavior, and can be used to disable or hide UI elements based on a role or any other authentication mechanism. This method will only be called for UI elements with theAuthentication behavior.\nParameters    Name Description     element The element.   tag The tag, retrieved fromFrameworkElement.Tag.   authenticationTag The authentication tag specified by the calling object.    Returns true if the user has access to the specified UI element; otherwise,false.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/iautocompletionservice/",
	"title": "IAutoCompletionService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IAutoCompletionService  Service to implement auto completion features.\nMethods GetAutoCompleteValues(string property, string filter, IEnumerable source) Gets the auto complete values.\nParameters    Name Description     property The property.   filter The filter.   source The source.    Returns System.String[].\nExceptions    Name Description     ArgumentNullException The source isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/ibatchloglistener/",
	"title": "IBatchLogListener",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IBatchLogListener  Log listener base which allows to write log files in batches.\nMethods FlushAsync() Flushes the current queue asynchronous.\nReturns Task so it can be awaited.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/ibatchloglistenerextensions/",
	"title": "IBatchLogListenerExtensions",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class IBatchLogListenerExtensions  IBatchLogListener extensions.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/ibehavior/",
	"title": "IBehavior",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public interface IBehavior  Behavior interface.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/binary/ibinaryserializer/",
	"title": "IBinarySerializer",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Binary   Available on .NET Framework 4.5, .NET Framework 4.6    public interface IBinarySerializer : ISerializer  Base types\nISerializer\nInterface for the binary serializer.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ibindableenum/",
	"title": "IBindableEnum",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IBindableEnum\u0026lt;TEnum\u0026gt; where TEnum : struct, IComparable, IFormattable  Bindable enumeration.\nType Parameters TEnum The type of the enum.\nProperties Name Gets the name.\nValue Gets the value.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/exceptionhandling/ibufferpolicy/",
	"title": "IBufferPolicy",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.ExceptionHandling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IBufferPolicy : IPolicy  Base types\nIPolicy\nRepresent the buffer policy interface in exception handling\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/ibusinessrulevalidationresult/",
	"title": "IBusinessRuleValidationResult",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IBusinessRuleValidationResult : IValidationResult  Base types\nIValidationResult\nBusiness rule validation result with information about business rule validations.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/caching/icachestorage/",
	"title": "ICacheStorage",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Caching   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ICacheStorage\u0026lt;TKey, TValue, TKey, TValue\u0026gt;  The cache storage interface.\nType Parameters TKey The key type.\nTValue The value type.\nProperties DisposeValuesOnRemoval Gets or sets whether values should be disposed on removal.\nExpirationTimerInterval Gets or sets the expiration timer interval. The default value isTimeSpan.FromSeconds(1).\nKeys Gets the keys so it is possible to enumerate the cache.\nthis[] Gets the value associated with the specified key.\nParameters    Name Description     key The key.    Returns The value associated with the specified key, or default value for the type of the value if the key do not exists.\nExceptions    Name Description     ArgumentNullException The key isnull.    Events Expired Occurs when the item has expired.\nExpiring Occurs when the item is expiring.\nMethods Add(TKey key, TValue value, ExpirationPolicy expirationPolicy, bool override) Adds a value to the cache associated with to a key.\nParameters    Name Description     key The key.   value The value.   expirationPolicy The expiration policy   override Indicates if the key exists the value will be overridden.    Exceptions    Name Description     ArgumentNullException The key isnull.    Add(TKey key, TValue value, bool override, TimeSpan expiration) Adds a value to the cache associated with to a key.\nParameters    Name Description     key The key.   value The value.   override Indicates if the key exists the value will be overridden.   expiration The timespan in which the cache item should expire when added.    Exceptions    Name Description     ArgumentNullException The key isnull.    Clear() Clears all the items currently in the cache.\nContains(TKey key) Determines whether the cache contains a value associated with the specified key.\nParameters    Name Description     key The key.    Returns true if the cache contains an element with the specified key; otherwise,false.\nExceptions    Name Description     ArgumentNullException The key isnull.    Get(TKey key) Gets the value associated with the specified key\nParameters    Name Description     key The key of the value to get.    Returns The value associated with the specified key, or default value for the type of the value if the key do not exists.\nExceptions    Name Description     ArgumentNullException The key isnull.    GetFromCacheOrFetch(TKey key, Func code, ExpirationPolicy expirationPolicy, bool override) Adds a value to the cache associated with to a key.\nParameters    Name Description     key The key.   code The deferred initialization code of the value.   expirationPolicy The expiration policy   override Indicates if the key exists the value will be overridden    Returns The instance initialized by the code.\nExceptions    Name Description     ArgumentNullException If key isnull.    GetFromCacheOrFetch(TKey key, Func code, bool override, TimeSpan expiration) Adds a value to the cache associated with to a key.\nParameters    Name Description     key The key.   code The deferred initialization code of the value.   override Indicates if the key exists the value will be overridden.   expiration The timespan in which the cache item should expire when added.    Returns The instance initialized by the code.\nExceptions    Name Description     ArgumentNullException If key isnull.    GetFromCacheOrFetchAsync(TKey key, Func\u0026gt; code, ExpirationPolicy expirationPolicy, bool override) Adds a value to the cache associated with to a key asynchronously. Note that this is a wrapper around.\nParameters    Name Description     key The key.   code The deferred initialization code of the value.   expirationPolicy The expiration policy.   override Indicates if the key exists the value will be overridden.    Returns The instance initialized by the code.\nExceptions    Name Description     ArgumentNullException If key isnull.    GetFromCacheOrFetchAsync(TKey key, Func\u0026gt; code, bool override, TimeSpan expiration) Adds a value to the cache associated with to a key asynchronously. Note that this is a wrapper around.\nParameters    Name Description     key The key.   code The deferred initialization code of the value.   override Indicates if the key exists the value will be overridden.   expiration The timespan in which the cache item should expire when added.    Returns The instance initialized by the code.\nExceptions    Name Description     ArgumentNullException If key isnull.    Remove(TKey key, Action action) Removes an item from the cache.\nParameters    Name Description     key The key.   action The action that need to be executed in synchronization with the item cache removal.    Exceptions    Name Description     ArgumentNullException The key isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/icameraservice/",
	"title": "ICameraService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ICameraService  Interface for retrieving the camera information.\nProperties AvailableResolutions Gets the available resolutions.\nCameraType Gets the type of the camera.\nFlashMode Gets or sets the flash mode. Unsupported flash modes silently default to Off.\nIsFocusAtPointSupported Gets a value indicating whether the camera can programmatically auto focus on a specific point in the viewfinder.\nIsFocusSupported Gets a value indicating whether the camera can be auto-focused programmatically.\nOrientation Gets the number of degrees that the viewfind brush needs to be rotated clockwise to align with the camera sensor.\nPreviewResolution Gets the preview resolution of the images.\nResolution Gets or sets the resolution of the actual images.\nEvents AutoFocusCompleted Occurs when the focus operation is completed.\nCaptureCompleted Occurs when the capture sequence is complete.\nCaptureImageAvailable Occurs when an image is available.\nCaptureStarted Occurs when the capture sequence has started.\nCaptureThumbnailAvailable Occurs when a thumbnail image is available.\nInitialized Occurs when the camera has been initialized.\nMethods CancelFocus() Cancels the current camera auto focus operation.\nCaptureImage() Initiates a full-resolution capture of the current image displayed in the viewfinder\nFocus() Starts a camera auto focus operation.\nFocusAtPoint(double x, double y) Starts a camera auto focus operation on a specific point in the viewfinder, for those devices that support it.\nParameters    Name Description     x The horizontal location in the viewfinder; a value between 0 (left) and 1.0 (right).   y The vertical location in the viewfinder; a value between 0 (top) and 1.0 (bottom).    GetPreviewBufferArgb32(int[] pixelData) Copies the current viewfinder ARGB frame into a buffer for further manipulation.\nParameters    Name Description     pixelData The ARGB pixel data.    GetPreviewBufferY(byte[] pixelData) Copies the luminance data for the current viewfinder frame into a buffer for further manipulation.\nParameters    Name Description     pixelData The YCrCb pixel data.    GetPreviewBufferYCbCr(byte[] pixelData) Copies the current viewfinder frame into a buffer for further manipulation.\nParameters    Name Description     pixelData The pixel data.    IsCameraTypeSupported(CameraType type) Determines whether a particular camera type is supported on the device.\nParameters    Name Description     type The type.    Returns true if the specified camera type is supported; otherwise,false.\nIsFlashModeSupported(FlashMode mode) Determines whether a particular flash mode is supported on the device.\nParameters    Name Description     mode The mode.    Returns true if the specified flash mode is supported; otherwise,false.\nStart() Starts the camera service so it\u0026rsquo;s retrieving data.\nStart(CameraType cameraType) Starts the camera service for a specific camera type so it\u0026rsquo;s retrieving data.\nParameters    Name Description     cameraType Type of the camera.    Stop() Stops the camera service so it\u0026rsquo;s no longer retrieving data.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/icatelcommand/",
	"title": "ICatelCommand",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ICatelCommand  Advanced interface definition to provide advanced functionality.\nProperties Tag Gets the tag for this command. A tag is a way to link any object to a command so you can use your own methods to recognize the commands, for example by ID or string. By default, the value isnull.\nEvents Executed Occurs when the command has just been executed successfully.\nExecutedAsync Occurs when the command has just been executed successfully.\nMethods CanExecute() Invokes the withnull as parameter.\nReturns true if this instance can execute; otherwise,false.\nExecute() Invokes the withnull as parameter.\nReturns true if this instance can execute; otherwise,false.\nRaiseCanExecuteChanged() Raises the event.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/icateltaskcommand/",
	"title": "ICatelTaskCommand",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ICatelTaskCommand\u0026lt;TProgress\u0026gt; : ICatelCommand where TProgress : ITaskProgressReport  Base types\nICatelCommand\nAdvanced interface definition to provide advanced functionality. Supports async/await/Task methods for commands with progress reporting and cancellation token.\nType Parameters TProgress The type of the progress.\nProperties CancelCommand Gets the cancel command.\nIsCancellationRequested Gets or sets a value indicating whether this instance is cancellation requested.\nIsExecuting Gets or sets a value indicating whether this instance is executing.\nEvents Canceled Occurs when the command is canceled.\nExecuting Occurs when the command is about to execute.\nProgressChanged Raised for each reported progress value.\nMethods Cancel() Requests cancellation of the command.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/icommandmanager/",
	"title": "ICommandManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ICommandManager  Manager that takes care of application-wide commands and can dynamically forward them to the right view models.\nProperties IsKeyboardEventsSuspended Gets or sets a value indicating whether the keyboard events are suspended.\nEvents CommandCreated Occurs when a command has been created.\nMethods CreateCommand(string commandName, InputGesture inputGesture, ICompositeCommand compositeCommand, bool throwExceptionWhenCommandIsAlreadyCreated) Creates the command inside the command manager. If the throwExceptionWhenCommandIsAlreadyCreated isfalse and the command is already created, only the input gesture is updated for the existing command.\nParameters    Name Description     commandName Name of the command.   inputGesture The input gesture.   compositeCommand The composite command. Ifnull, this will default to a new instance of CompositeCommand.   throwExceptionWhenCommandIsAlreadyCreated if set totrue, this method will throw an exception when the command is already created.    Exceptions    Name Description     ArgumentException The commandName isnull or whitespace.   InvalidOperationException The specified command is already created using the Boolean) method.    ExecuteCommand(string commandName) Executes the command.\nParameters    Name Description     commandName Name of the command.    Exceptions    Name Description     ArgumentException The commandName isnull or whitespace.   InvalidOperationException The specified command is not created using the Boolean) method.    GetCommand(string commandName) Gets the command created with the command name.\nParameters    Name Description     commandName Name of the command.    Returns The ornull if the command is not created.\nExceptions    Name Description     ArgumentException The commandName isnull or whitespace.    GetCommands() Gets all the registered commands.\nReturns The names of the commands.\nGetInputGesture(string commandName) Gets the input gesture for the specified command.\nParameters    Name Description     commandName Name of the command.    Returns The input gesture ornull if there is no input gesture for the specified command.\nExceptions    Name Description     InvalidOperationException The specified command is not created using the Boolean) method.    GetOriginalInputGesture(string commandName) Gets the original input gesture with which the command was initially created.\nParameters    Name Description     commandName Name of the command.    Returns The input gesture ornull if there is no input gesture for the specified command.\nExceptions    Name Description     InvalidOperationException The specified command is not created using the Boolean) method.    InvalidateCommands() Invalidates the all the currently registered commands.\nIsCommandCreated(string commandName) Determines whether the specified command name is created.\nParameters    Name Description     commandName Name of the command.    Returns true if the specified command name is created; otherwise,false.\nExceptions    Name Description     ArgumentException The commandName isnull or whitespace.    RegisterAction(string commandName, Action action) Registers the action with the specified command name.\nParameters    Name Description     commandName Name of the command.   action The action.    Exceptions    Name Description     ArgumentException The commandName isnull or whitespace.   ArgumentNullException The action isnull.   InvalidOperationException The specified command is not created using the Boolean) method.    RegisterAction(string commandName, Action action) Registers the action with the specified command name.\nParameters    Name Description     commandName Name of the command.   action The action.    Exceptions    Name Description     ArgumentException The commandName isnull or whitespace.   ArgumentNullException The action isnull.   InvalidOperationException The specified command is not created using the Boolean) method.    RegisterCommand(string commandName, ICommand command, IViewModel viewModel) Registers a command with the specified command name.\nParameters    Name Description     commandName Name of the command.   command The command.   viewModel The view model.    Exceptions    Name Description     ArgumentException The commandName isnull or whitespace.   ArgumentNullException The command isnull.   InvalidOperationException The specified command is not created using the Boolean) method.    ResetInputGestures() Resets the input gestures to the original input gestures with which the commands were registered.\nSubscribeToKeyboardEvents() Subscribes to keyboard events.\nSubscribeToKeyboardEvents(FrameworkElement view) Subscribes to keyboard events.\nParameters    Name Description     view The view.    Exceptions    Name Description     ArgumentNullException The view isnull.    UnregisterAction(string commandName, Action action) Unregisters the action with the specified command name.\nParameters    Name Description     commandName Name of the command.   action The action.    Exceptions    Name Description     ArgumentException The commandName isnull or whitespace.   ArgumentNullException The action isnull.   InvalidOperationException The specified command is not created using the Boolean) method.    UnregisterAction(string commandName, Action action) Unregisters the action with the specified command name.\nParameters    Name Description     commandName Name of the command.   action The action.    Exceptions    Name Description     ArgumentException The commandName isnull or whitespace.   ArgumentNullException The action isnull.   InvalidOperationException The specified command is not created using the Boolean) method.    UnregisterCommand(string commandName, ICommand command) Unregisters a command with the specified command name.\nParameters    Name Description     commandName Name of the command.   command The command.    Exceptions    Name Description     ArgumentException The commandName isnull or whitespace.   ArgumentNullException The command isnull.   InvalidOperationException The specified command is not created using the Boolean) method.    UpdateInputGesture(string commandName, InputGesture inputGesture) Updates the input gesture for the specified command.\nParameters    Name Description     commandName Name of the command.   inputGesture The new input gesture.    Exceptions    Name Description     ArgumentException The commandName isnull or whitespace.   InvalidOperationException The specified command is not created using the Boolean) method.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/icommandmanagerextensions/",
	"title": "ICommandManagerExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public static class ICommandManagerExtensions  Extension methods for the ICommandManager.\nFields Methods CreateCommandWithGesture(ICommandManager commandManager, Type containerType, string commandNameFieldName) Creates a command using a naming convention with the specified gesture.\nParameters    Name Description     commandManager The command manager.   containerType Type of the container.   commandNameFieldName Name of the command name field.    Exceptions    Name Description     ArgumentNullException The commandManager isnull.    FindCommandsByGesture(ICommandManager commandManager, InputGesture inputGesture) Finds the commands inside the ICommandManager by gesture.\nParameters    Name Description     commandManager The command manager.   inputGesture The input gesture.    Returns Dictionary\u0026lt;System.String, ICommand\u0026gt;.\nExceptions    Name Description     ArgumentNullException The commandManager isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/icompositecommand/",
	"title": "ICompositeCommand",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ICompositeCommand : ICatelCommand  Base types\nICatelCommand\nComposite command which allows several commands inside a single command being exposed to a view.\nProperties AllowPartialExecution Gets or sets a value indicating whether partial execution of commands is allowed. If this value istrue, this composite command will always be executable and only invoke the internal commands that are executable. The default value isfalse.\nAtLeastOneMustBeExecutable Gets or sets a value indicating whether at least one command must be executable. This will prevent the command to be executed without any commands. The default value istrue.\nMethods GetActions() Gets the actions currently registered to this composite command.\nReturns IEnumerable.\nGetActionsWithParameter() Gets the actions with parameters currently registered to this composite command.\nReturns IEnumerable.\nGetCommands() Gets the commands currently registered to this composite command.\nReturns IEnumerable.\nRegisterAction(Action action) Registers the specified action.\nParameters    Name Description     action The action.    Exceptions    Name Description     ArgumentNullException The action isnull.    RegisterAction(Action action) Registers the specified action.\nParameters    Name Description     action The action.    Exceptions    Name Description     ArgumentNullException The action isnull.    RegisterCommand(ICommand command, IViewModel viewModel) Registers the specified command.\nParameters    Name Description     command The command.   viewModel The view model. If specified, the command will automatically be unregistered when the view model is closed.    Exceptions    Name Description     ArgumentNullException The command isnull.    Remarks Note that if the view model is not specified, the command must be unregistered manually in order to prevent memory leaks.\nUnregisterAction(Action action) Unregisters the specified action.\nParameters    Name Description     action The action.    Exceptions    Name Description     ArgumentNullException The action isnull.    UnregisterAction(Action action) Unregisters the specified action.\nParameters    Name Description     action The action.    Exceptions    Name Description     ArgumentNullException The action isnull.    UnregisterCommand(ICommand command) Unregisters the specified command.\nParameters    Name Description     command The command.    Exceptions    Name Description     ArgumentNullException The command isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/icompositefilter/",
	"title": "ICompositeFilter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ICompositeFilter\u0026lt;T, T\u0026gt; where T : class  Composite filter.\nType Parameters T Type of the filter.\nProperties Excludes Gets or sets the excludes.\nIncludes Gets the includes.\nMethods Matches(T target) Checks whether the target matches any of the Includes and does not match any of the Excludes.\nParameters    Name Description     target The target.    Returns true if the match is a successful hit,false otherwise.\nMatchesObject(object target) Object implementation of the Missing: method so it can be used for non-generic predicates.\nParameters    Name Description     target The target.    Returns true if the match is a successful hit,false otherwise.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/configuration/iconfigurationservice/",
	"title": "IConfigurationService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Configuration   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IConfigurationService  Configuration service implementation that allows customization how configuration values are being used inside an application.\nEvents ConfigurationChanged Occurs when the configuration has changed.\nMethods GetValue(ConfigurationContainer container, string key, T defaultValue) Gets the configuration value.\nType Parameters T The type of the value to retrieve.\nParameters    Name Description     container The container.   key The key.   defaultValue The default value. Will be returned if the value cannot be found.    Returns The configuration value.\nExceptions    Name Description     ArgumentException The key isnull or whitespace.    InitializeValue(ConfigurationContainer container, string key, object defaultValue) Initializes the value by setting the value to the defaultValue if the value does not yet exist.\nParameters    Name Description     container The container.   key The key.   defaultValue The default value.    Exceptions    Name Description     ArgumentException The key isnull or whitespace.    IsValueAvailable(ConfigurationContainer container, string key) Determines whether the specified value is available.\nParameters    Name Description     container The container.   key The key.    Returns true if the specified value is available; otherwise,false.\nExceptions    Name Description     ArgumentException The key isnull or whitespace.    SetValue(ConfigurationContainer container, string key, object value) Sets the configuration value.\nParameters    Name Description     container The container.   key The key.   value The value.    Exceptions    Name Description     ArgumentException The key isnull or whitespace.    SuspendNotifications() Suspends the notifications of this service until the returned object is disposed.\nReturns IDisposable.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/configuration/iconfigurationserviceextensions/",
	"title": "IConfigurationServiceExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Configuration   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class IConfigurationServiceExtensions  Extensions for the IConfigurationService.\nMethods GetLocalValue(IConfigurationService configurationService, string key, T defaultValue) Gets the configuration value using Local.\nType Parameters T The type of the value to retrieve.\nParameters    Name Description     configurationService The configuration service.   key The key.   defaultValue The default value. Will be returned if the value cannot be found.    Returns The configuration value.\nExceptions    Name Description     ArgumentNullException The configurationService isnull.   ArgumentException The key isnull or whitespace.    GetRoamingValue(IConfigurationService configurationService, string key, T defaultValue) Gets the configuration value using Roaming.\nType Parameters T The type of the value to retrieve.\nParameters    Name Description     configurationService The configuration service.   key The key.   defaultValue The default value. Will be returned if the value cannot be found.    Returns The configuration value.\nExceptions    Name Description     ArgumentNullException The configurationService isnull.   ArgumentException The key isnull or whitespace.    InitializeLocalValue(IConfigurationService configurationService, string key, object defaultValue) Initializes the value by setting the value to the defaultValue if the value does not yet exist using Local.\nParameters    Name Description     configurationService The configuration service.   key The key.   defaultValue The default value.    Exceptions    Name Description     ArgumentNullException The configurationService isnull.   ArgumentException The key isnull or whitespace.    InitializeRoamingValue(IConfigurationService configurationService, string key, object defaultValue) Initializes the value by setting the value to the defaultValue if the value does not yet exist using Roaming.\nParameters    Name Description     configurationService The configuration service.   key The key.   defaultValue The default value.    Exceptions    Name Description     ArgumentNullException The configurationService isnull.   ArgumentException The key isnull or whitespace.    IsLocalValueAvailable(IConfigurationService configurationService, string key) Determines whether the specified value is available using Local.\nParameters    Name Description     configurationService The configuration service.   key The key.    Returns The configuration value.\nExceptions    Name Description     ArgumentNullException The configurationService isnull.   ArgumentException The key isnull or whitespace.    IsRoamingValueAvailable(IConfigurationService configurationService, string key) Determines whether the specified value is available using Roaming.\nParameters    Name Description     configurationService The configuration service.   key The key.    Returns The configuration value.\nExceptions    Name Description     ArgumentNullException The configurationService isnull.   ArgumentException The key isnull or whitespace.    SetLocalValue(IConfigurationService configurationService, string key, object value) Sets the configuration value using Local.\nParameters    Name Description     configurationService The configuration service.   key The key.   value The value.    Returns The configuration value.\nExceptions    Name Description     ArgumentNullException The configurationService isnull.   ArgumentException The key isnull or whitespace.    SetRoamingValue(IConfigurationService configurationService, string key, object value) Sets the configuration value using Roaming.\nParameters    Name Description     configurationService The configuration service.   key The key.   value The value.    Exceptions    Name Description     ArgumentNullException The configurationService isnull.   ArgumentException The key isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.serialization.json/catel/runtime/serialization/json/icustomjsonserializable/",
	"title": "ICustomJsonSerializable",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Serialization.Json   Namespace Catel.Runtime.Serialization.Json   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ICustomJsonSerializable  Allows a type to implement their own (de)serialization mechanism.\nMethods Deserialize(JsonReader jsonReader) Serializes the object from the specified json reader. Note that the object is always constructed by the serialization engine, the object itself must read the values from the jsonReader.\nParameters    Name Description     jsonReader The json reader.    Serialize(JsonWriter jsonWriter) Serializes the object to the specified json writer.\nParameters    Name Description     jsonWriter The json writer.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/xml/icustomxmlserializable/",
	"title": "ICustomXmlSerializable",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Xml   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ICustomXmlSerializable  Allows a type to implement their own (de)serialization mechanism.\nMethods Deserialize(XElement xmlElement) Serializes the object from the specified xml element. Note that the object is always constructed by the serialization engine, the object itself must read the values from the xmlElement.\nParameters    Name Description     xmlElement The XML element.    Serialize(XElement xmlElement) Serializes the object to the specified xml element.\nParameters    Name Description     xmlElement The XML element.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/idatacontextsubscriptionservice/",
	"title": "IDataContextSubscriptionService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IDataContextSubscriptionService  Service that determines how to subscribe to a data context.\nProperties DefaultDataContextSubscriptionMode Gets or sets the default data context subscription mode.\nMethods GetDataContextSubscriptionMode(Type viewType) Gets the data context subscription mode for the specific view.\nParameters    Name Description     viewType Type of the view.    Returns The data context subscription mode.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/xml/idatacontractserializerfactory/",
	"title": "IDataContractSerializerFactory",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Xml   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IDataContractSerializerFactory  Interface defining a factory to create objects for specific types.\nProperties DataContractResolver Gets or sets the DataContractResolver passed in constructor to. The default value is.\nDataContractSurrogate Gets or sets the passed in constructor to. The default value is.\nMethods GetDataContractSerializer(Type serializingType, Type typeToSerialize, string xmlName, string rootNamespace, List additionalKnownTypes) Gets the Data Contract serializer for a specific type. This method caches serializers so the performance can be improved when a serializer is used more than once.\nParameters    Name Description     serializingType The type that is currently (de)serializing.   typeToSerialize The type to (de)serialize.   xmlName Name of the property as known in XML.   rootNamespace The root namespace.   additionalKnownTypes A list of additional types to add to the known types.    Returns for the given type.\nExceptions    Name Description     ArgumentNullException The serializingType isnull.   ArgumentException The xmlName isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/system/componentmodel/idataerrorinfo/",
	"title": "IDataErrorInfo",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace System.ComponentModel   Available on Portable Class Libraries    public interface IDataErrorInfo  WinRT implementation of theIDataErrorInfo interface.\nProperties Error Gets the error.\nthis[] Gets the error message for the property with the given name.\nParameters    Name Description     columnName The name of the property whose error message to get.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/system/componentmodel/idatawarninginfo/",
	"title": "IDataWarningInfo",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace System.ComponentModel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IDataWarningInfo  Interface that is based on the interface, but supports warnings instead of errors.\nProperties this[] Gets the warning message for the property with the given name.\nParameters    Name Description     columnName The name of the property whose warning message to get.    Warning Gets the warning.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/idatawindow/",
	"title": "IDataWindow",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IDataWindow : IView  Base types\nIView\nInterface defining functionality for a window.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/idependencyresolver/",
	"title": "IDependencyResolver",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IDependencyResolver  Provides a simplified way to resolve dependencies and allows customization of the way dependencies are resolved.\nMethods CanResolve(Type type, object tag) Determines whether the specified type with the specified tag can be resolved.\nParameters    Name Description     type The type.   tag The tag.    Returns true if the specified type with the specified tag can be resolved; otherwise,false.\nExceptions    Name Description     ArgumentNullException The type isnull.    CanResolveAll(Type[] types) Determines whether all types specified can be resolved. Though Object) will returnnull at the array index when a type cannot be resolved, this method will actually check whether all the specified types are registered. It is still possible to call Object), even when this method returnsfalse.\nParameters    Name Description     types The types.    Returns true if all types specified can be resolved; otherwise,false.\nExceptions    Name Description     ArgumentException The types isnull or empty.    Resolve(Type type, object tag) Resolves the specified type with the specified tag.\nParameters    Name Description     type The type.   tag The tag.    Returns The resolved object ornull if the type could not be resolved.\nExceptions    Name Description     ArgumentNullException The type isnull.    ResolveAll(Type[] types, object tag) Resolves the specified types with the specified tag.\nParameters    Name Description     types The types.   tag The tag.    Returns A lost of resolved types. If one of the types cannot be resolved, that location in the array will benull.\nExceptions    Name Description     ArgumentException The types isnull or empty.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/idependencyresolvermanager/",
	"title": "IDependencyResolverManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IDependencyResolverManager  Allows the registration and retrieval of dependency resolvers for specific types or instances.\nProperties DefaultDependencyResolver Gets or sets the default dependency resolver.\nExceptions    Name Description     ArgumentNullException The value isnull.    Methods GetDependencyResolverForInstance(object instance) Gets the dependency resolver for a specific instance. If there is no dependency resolver registered for the specific instance, this method will use the GetDependencyResolverForType(Type).\nParameters    Name Description     instance The instance to retrieve the dependency resolver for.    Returns The IDependencyResolver for the object.\nExceptions    Name Description     ArgumentNullException The instance isnull.    GetDependencyResolverForType(Type type) Gets the dependency resolver for a specific type. If there is no dependency resolver registered for the specific type, this method will returns the DefaultDependencyResolver.\nParameters    Name Description     type The type.    Returns The IDependencyResolver for the type.\nExceptions    Name Description     ArgumentNullException The type isnull.    RegisterDependencyResolverForInstance(object instance, IDependencyResolver dependencyResolver) Registers the dependency resolver for a specific instance.\nParameters    Name Description     instance The instance.   dependencyResolver The dependency resolver.    Exceptions    Name Description     ArgumentNullException The instance isnull.    RegisterDependencyResolverForType(Type type, IDependencyResolver dependencyResolver) Registers the dependency resolver for a specific type.\nParameters    Name Description     type The type.   dependencyResolver The dependency resolver.    Exceptions    Name Description     ArgumentNullException The type isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/idispatcherservice/",
	"title": "IDispatcherService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IDispatcherService  Service that allows the retrieval of the UI dispatcher.\nMethods BeginInvoke(Action action, bool onlyBeginInvokeWhenNoAccess) Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.\nParameters    Name Description     action The action.   onlyBeginInvokeWhenNoAccess If set totrue, the action will be executed directly if possible. Otherwise,Dispatcher.BeginInvoke will be used.    Invoke(Action action, bool onlyInvokeWhenNoAccess) Executes the specified action with the specified arguments synchronously on the thread the Dispatcher is associated with.\nParameters    Name Description     action The action.   onlyInvokeWhenNoAccess If set totrue, the action will be executed directly if possible. Otherwise,Dispatcher.BeginInvoke will be used.    Exceptions    Name Description     ArgumentNullException The action isnull.    InvokeAsync(Action action) Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.\nParameters    Name Description     action The action.    Returns The task representing the action.\nInvokeAsync(Delegate method, object[] args) Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.\nParameters    Name Description     method The method.   args The arguments to pass into the method.    Returns The task representing the action.\nInvokeAsync(Func func) Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.\nType Parameters T The type of the result.\nParameters    Name Description     func The function.    Returns The task representing the action.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/idispatcherserviceextensions/",
	"title": "IDispatcherServiceExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class IDispatcherServiceExtensions  Extension methods for the IDispatcherService.\nMethods BeginInvoke(IDispatcherService dispatcherService, Action action) Executes the specified action asynchronously with the specified arguments on the thread that the Dispatcher was created on.\nParameters    Name Description     dispatcherService The dispatcher service.   action The action.    Exceptions    Name Description     ArgumentNullException The action isnull.    BeginInvoke(IDispatcherService dispatcherService, Delegate method, object[] args) Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.\nParameters    Name Description     dispatcherService The dispatcher service.   method A delegate to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.   args An array of objects to pass as arguments to the given method. Can benull.    Exceptions    Name Description     ArgumentNullException The method isnull.    BeginInvokeIfRequired(IDispatcherService dispatcherService, Action action) Executes the specified action asynchronously with the specified arguments on the thread that the Dispatcher was created on if required. To check whether this is necessary, it will check whether the current thread has access to the dispatcher.\nParameters    Name Description     dispatcherService The dispatcher service.   action The action.    Exceptions    Name Description     ArgumentNullException The action isnull.    BeginInvokeIfRequired(IDispatcherService dispatcherService, Delegate method, object[] args) Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on if required. To check whether this is necessary, it will check whether the current thread has access to the dispatcher.\nParameters    Name Description     dispatcherService The dispatcher service.   method A delegate to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.   args An array of objects to pass as arguments to the given method. Can benull.    Exceptions    Name Description     ArgumentNullException The method isnull.    Invoke(IDispatcherService dispatcherService, Delegate method, object[] args) Executes the specified delegate with the specified arguments synchronously on the thread the Dispatcher is associated with.\nParameters    Name Description     dispatcherService The dispatcher service.   method A delegate to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.   args An array of objects to pass as arguments to the given method. Can benull.    Exceptions    Name Description     ArgumentNullException The method isnull.    InvokeIfRequired(IDispatcherService dispatcherService, Action action) Executes the specified action asynchronously with the specified arguments on the thread that the Dispatcher was created on if required. To check whether this is necessary, it will check whether the current thread has access to the dispatcher.\nParameters    Name Description     dispatcherService The dispatcher service.   action The action.    Exceptions    Name Description     ArgumentNullException The action isnull.    InvokeIfRequired(IDispatcherService dispatcherService, Delegate method, object[] args) Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on if required. To check whether this is necessary, it will check whether the current thread has access to the dispatcher.\nParameters    Name Description     dispatcherService The dispatcher service.   method A delegate to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.   args An array of objects to pass as arguments to the given method. Can benull.    Exceptions    Name Description     ArgumentNullException The method isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/idisposabletoken/",
	"title": "IDisposableToken",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IDisposableToken\u0026lt;T, T\u0026gt;  A reusable disposable token that accepts initialization and uninitialization code.\nProperties Instance Gets the instance.\nTag Gets the tag.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/ientryassemblyresolver/",
	"title": "IEntryAssemblyResolver",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IEntryAssemblyResolver  Allows custom logic to be injected into GetEntryAssembly.\nMethods Resolve() Resolves the entry assembly.\nReturns Assembly.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/exceptionhandling/iexceptionhandler/",
	"title": "IExceptionHandler",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ExceptionHandling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IExceptionHandler\u0026lt;TException, TException\u0026gt; : IExceptionHandler where TException : Exception  Base types\nIExceptionHandler\nInterface that describes a single generic Exception handler.\nMethods GetFilter() Get the exception filter.\nReturns OnException(TException exception) The action to do on an exception of defined type occurs.\nExceptions    Name Description     ArgumentNullException The exception isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/exceptionhandling/iexceptionservice/",
	"title": "IExceptionService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ExceptionHandling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IExceptionService  This interface describes a simple Exception service.\nProperties ExceptionHandlers Gets the exception handlers.\nEvents ExceptionBuffered Occurs when an exception is buffered.\nRetryingAction Occurs when an action is retrying.\nMethods GetHandler(Type exceptionType) Gets the exception handler for the specified exception type.\nParameters    Name Description     exceptionType Type of the exception.    Returns The exception handler.\nExceptions    Name Description     ArgumentNullException The isnull.   ArgumentException The exceptionType is not of type.    GetHandler() Gets the exception handler for the specified exception type.\nType Parameters TException The type of the exception.\nReturns The exception handler.\nHandleException(Exception exception) Handles the specified exception if possible.\nParameters    Name Description     exception The exception to handle.    Returns true if the exception is handled; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The exception isnull.    IsExceptionRegistered(Type exceptionType) Determines whether the specified exception type is registered.\nParameters    Name Description     exceptionType Type of the exception.    Returns true if the specified exception type is registered; otherwise,false.\nExceptions    Name Description     ArgumentNullException The isnull.   ArgumentException The exceptionType is not of type.    IsExceptionRegistered() Determines whether the specified exception type is registered.\nType Parameters TException The type of the exception.\nReturns true if the exception type is registered; otherwise,false.\nProcess(Action action) Processes the specified action.\nParameters    Name Description     action The action.    Exceptions    Name Description     ArgumentNullException The action isnull.    Process(Func action) Processes the specified action.\nType Parameters TResult The result type.\nParameters    Name Description     action The action.    Returns Exceptions    Name Description     ArgumentNullException The action isnull.    ProcessAsync(Func action) Processes the specified action.\nParameters    Name Description     action The action.    Returns Exceptions    Name Description     ArgumentNullException The action isnull.    ProcessAsync(Task action) Processes the specified action.\nParameters    Name Description     action The action.    Returns Exceptions    Name Description     ArgumentNullException The action isnull.    ProcessAsync(Func\u0026gt; action) Processes the specified action.\nType Parameters TResult The result type.\nParameters    Name Description     action The action.    Returns Exceptions    Name Description     ArgumentNullException The action isnull.    ProcessAsync(Func action, CancellationToken cancellationToken) Processes the specified action. The action will be executed asynchronously.\nType Parameters TResult The result type.\nParameters    Name Description     action The action.   cancellationToken The cancellation token.    Returns Exceptions    Name Description     ArgumentNullException The action isnull.    ProcessWithRetry(Func action) Processes the specified action with possibility to retry on error.\nType Parameters TResult The result type.\nParameters    Name Description     action The action.    Returns Exceptions    Name Description     ArgumentNullException The action isnull.    ProcessWithRetryAsync(Func\u0026gt; action) Processes asynchronously the specified action with possibility to retry on error.\nType Parameters TResult The result type.\nParameters    Name Description     action The action.    Returns Exceptions    Name Description     ArgumentNullException The action isnull.    Register(IExceptionHandler handler) Registers an handler for a specific exception.\nParameters    Name Description     handler The handler to use when the exception occurs.    Returns The handler to use.\nExceptions    Name Description     ArgumentNullException The handler isnull.    Register(Action handler, FuncexceptionPredicate) Registers a specific exception including the handler.\nType Parameters TException The type of the exception.\nParameters    Name Description     handler The action to execute when the exception occurs.   exceptionPredicate The exception filter.    Returns The handler to use.\nExceptions    Name Description     ArgumentNullException The handler isnull.   Exception A delegate callback throws an exception.    Unregister() Unregisters a specific exception for handling.\nType Parameters TException The type of the exception.\nReturns true if the exception is unsubscripted; otherwisefalse.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/iexecute/",
	"title": "IExecute",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IExecute\u0026lt;TResult\u0026gt;  Interface defining a method to execute the object. This allows several classes to be executed without the know-how of the types itself, as long as they implement this interface.\nMethods Execute(TResult result) Executes the object without any parameters.\nReturns true if the action is executed successfully; otherwisefalse.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/iexecutewithobject/",
	"title": "IExecuteWithObject",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IExecuteWithObject\u0026lt;TResult\u0026gt;  Interface defining a method accepting an object parameter. This allows the execution of generic objects in a non-generic way.\nMethods ExecuteWithObject(object parameter, TResult result) Executes the object with the object parameter. The class implementing this interface is responsible for casting the parameter to the right type and to determine whethernull is allowed as parameter.\nParameters    Name Description     parameter The parameter.   result The result    Returns true if the action is executed successfully; otherwisefalse.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/ifieldserializable/",
	"title": "IFieldSerializable",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IFieldSerializable  Fast serialization interaction. By default the serialization engine uses reflection to get and set values. To improve performance, once can implement this interface.\nMethods GetFieldValue(string fieldName, object value) Gets the field value.\nParameters    Name Description     fieldName Name of the field.   value The value.    Returns true if the value is retrieved successfully; otherwise,false.\nSetFieldValue(string fieldName, object value) Sets the field value.\nParameters    Name Description     fieldName Name of the field.   value The value.    Returns true if the value is set successfully; otherwise,false.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/ifieldvalidationresult/",
	"title": "IFieldValidationResult",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IFieldValidationResult : IValidationResult  Base types\nIValidationResult\nField validation result with information about field validations.\nProperties PropertyName Gets the name of the property.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/ifilesupport/",
	"title": "IFileSupport",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IFileSupport  Interface that supports file handling.\nProperties AddExtension Gets or sets a value indicating whether a file dialog automatically adds an extension to a file name if the user omits an extension.\nCheckFileExists Gets or sets a value indicating whether a file dialog displays a warning if the user specifies a file name that does not exist.\nCheckPathExists Gets or sets a value that specifies whether warnings are displayed if the user types invalid paths and file names.\nFileName Gets or sets the name of the file.\nFilter Gets or sets the filter to use when opening or saving the file.\nFilterIndex Gets or sets the index of the filter currently selected in a file dialog.\nInitialDirectory Gets or sets the initial directory.\nTitle Gets or sets the title which will be used for display.\nValidateNames Gets or sets a value indicating whether the dialog accepts only valid Win32 file names.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ifluent/",
	"title": "IFluent",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IFluent  Interface that is used to build fluent interfaces and hides methods declared by from IntelliSense.\nRemarks Code that consumes implementations of this interface should expect one of two things: See http://bit.ly/ifluentinterface for more information.\nMethods Equals(object obj) Redeclaration that hides the method from IntelliSense.\nParameters    Name Description     obj The to compare with this instance.    Returns true if the specified is equal to this instance; otherwise,false.\nGetHashCode() Redeclaration that hides the method from IntelliSense.\nReturns The.\nGetType() Redeclaration that hides the method from IntelliSense.\nReturns The.\nToString() Redeclaration that hides the method from IntelliSense.\nReturns The.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/ijsonlogformatter/",
	"title": "IJsonLogFormatter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6    public interface IJsonLogFormatter  The formatter which formats all log info to Json.\nMethods FormatLogEvent(ILog log, string message, LogEvent logEvent, DateTime time) Formats the log infos.\nParameters    Name Description     log    message    logEvent    time     Returns Exceptions    Name Description     ArgumentNullException The log isnull.   ArgumentException The message isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.serialization.json/catel/runtime/serialization/json/ijsonserializer/",
	"title": "IJsonSerializer",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Serialization.Json   Namespace Catel.Runtime.Serialization.Json   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IJsonSerializer : ISerializer  Base types\nISerializer\nInterface for the binary serializer.\nProperties PreserveReferences Gets or sets a value indicating whether references should be preserved. This will add additional$graphid and$graphrefid properties to each json object.\nWriteTypeInfo Gets or sets a value indicating whether type information should be written to the json output.\nMethods Deserialize(Type modelType, JsonReader jsonReader, ISerializationConfiguration configuration) Deserializes the specified model from the json reader.\nParameters    Name Description     modelType Type of the model.   jsonReader The json reader.   configuration The configuration.    Returns ModelBase.\nSerialize(object model, JsonWriter jsonWriter, ISerializationConfiguration configuration) Serializes the specified model to the json writer.\nParameters    Name Description     model The model.   jsonWriter The json writer.   configuration The configuration.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/ilanguageservice/",
	"title": "ILanguageService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ILanguageService  Service to implement the retrieval of language services.\nProperties CacheResults Gets or sets a value indicating whether the results should be cached. The default value istrue.\nFallbackCulture Gets or sets the fallback culture.\nPreferredCulture Gets or sets the preferred culture.\nEvents LanguageUpdated Occurs when the FallbackCulture or PreferredCulture are updated.\nMethods ClearLanguageResources() Clears the language resources.\nGetString(ILanguageSource languageSource, string resourceName, CultureInfo cultureInfo) Gets the string with the specified language source and culture.\nParameters    Name Description     languageSource The language source.   resourceName Name of the resource.   cultureInfo The culture information.    Returns The string ornull if the resource cannot be found.\nExceptions    Name Description     ArgumentNullException The languageSource isnull.   ArgumentException The resourceName isnull.    GetString(string resourceName) Gets the string with the PreferredCulture. If the preferred language cannot be found, this method will use the FallbackCulture to retrieve the string.\nParameters    Name Description     resourceName Name of the resource.    Returns The string ornull if the resource cannot be found.\nExceptions    Name Description     ArgumentException The resourceName isnull.    GetString(string resourceName, CultureInfo cultureInfo) Gets the string with the specified culture.\nParameters    Name Description     resourceName Name of the resource.   cultureInfo The culture information.    Returns The string ornull if the resource cannot be found.\nExceptions    Name Description     ArgumentException The resourceName isnull.   ArgumentNullException The cultureInfo isnull.    PreloadLanguageSources() Preloads the language sources to provide optimal performance.\nRegisterLanguageSource(ILanguageSource languageSource) Registers the language source.\nParameters    Name Description     languageSource The language source.    Exceptions    Name Description     ArgumentNullException The languageSource isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/ilanguagesource/",
	"title": "ILanguageSource",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ILanguageSource  Interface defining a language source.\nMethods GetSource() Gets the source for the current language source.\nReturns The source string.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/ilocation/",
	"title": "ILocation",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ILocation  Interface that represents a location.\nProperties Altitude Gets the altitude. The altitude is the height of the location.\nLatitude Gets the latitude. The latitute is the angular distance of that location south or north of the equator.\nLongitude Gets the longitude. The longitude specifies the east-west position of a point on the Earth\u0026rsquo;s surface.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/ilocationservice/",
	"title": "ILocationService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ILocationService  Interface that supports retrieving the current location.\nProperties CurrentLocation Gets the current location represented as ILocation. If no location is available,null will be returned.\nRemarks This is convenience property that internally calls GetCurrentLocation. Note that the services inside Catel do not support, thus you cannot subscribe to changes of this property. Instead, subscribe to the LocationChanged event.\nEvents LocationChanged Occurs when the current location has changed.\nMethods GetCurrentLocation() Gets the current location.\nReturns The current location represented as ILocation. If no location is available,null will be returned.\nStart() Starts the location service so it\u0026rsquo;s retrieving data.\nReturns true if the service started successfully; otherwisefalse.\nStop() Stops the location service so it\u0026rsquo;s no longer retrieving data.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/ilocator/",
	"title": "ILocator",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ILocator  Interface defining shared information about locators. This way, any locator can be casted to this interface and be used to locate something by naming convention.\nProperties NamingConventions Gets or sets the naming conventions to use to locate types. By adding or removing conventions to this property, the service can use custom resolving of types. Each implementation should add its own default naming convention.\nRemarks Keep in mind that all results are cached. The cache itself is not automatically cleared when the NamingConventions are changed. If the NamingConventions are changed, the cache must be cleared manually.\nMethods ClearCache() Clears the cache of the resolved naming conventions.\nRemarks Note that clearing the cache will also clear all manually registered types registered via theRegister method.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/ilog/",
	"title": "ILog",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ILog  Log interface.\nProperties IndentLevel Gets or sets the indent level.\nExceptions    Name Description     ArgumentOutOfRangeException Thevalue is negative.    IndentSize Gets or sets the size of the indent. The default value is2.\nExceptions    Name Description     ArgumentOutOfRangeException The value is negative.    IsCatelLogging Gets a value indicating whether this logger is a Catel logger. This value can be useful to exclude Catel logging for external listeners.\nName Gets the name of the logger.\nTag Gets or sets the tag.\nTargetType Gets the target type of the log. This is the type where the log is created for.\nEvents LogMessage Occurs when a message is written to the log.\nMethods Indent() Increases the IndentLevel by1.\nUnindent() Decreases the IndentLevel by1.\nWriteWithData(string message, LogData logData, LogEvent logEvent) Writes the specified message as specified log event with extra data.\nParameters    Name Description     message The message.   logData The log data.   logEvent The log event.    Exceptions    Name Description     ArgumentNullException The message isnull.    WriteWithData(string message, object extraData, LogEvent logEvent) Writes the specified message as specified log event with extra data.\nParameters    Name Description     message The message.   extraData The extra data.   logEvent The log event.    Exceptions    Name Description     ArgumentNullException The message isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/iloglistener/",
	"title": "ILogListener",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ILogListener  Interface allowing external subscribers for the logging.\nProperties IgnoreCatelLogging Gets or sets a value indicating whether to ignore Catel logging.\nIsDebugEnabled Gets or sets a value indicating whether this listener is interested in debug messages. This default value istrue.\nIsErrorEnabled Gets or sets a value indicating whether this listener is interested in error messages. This default value istrue.\nIsInfoEnabled Gets or sets a value indicating whether this listener is interested in info messages. This default value istrue.\nIsStatusEnabled Gets or sets a value indicating whether this listener is interested in status messages. This default value istrue.\nIsWarningEnabled Gets or sets a value indicating whether this listener is interested in warning messages. This default value istrue.\nTimeDisplay Gets or sets a value indicating what format of time to use. This default value isTime.\nEvents LogMessage Occurs when a log message is written to one of the logs.\nMethods Debug(ILog log, string message, object extraData, LogData logData, DateTime time) Called when a Debug message is written to the log.\nParameters    Name Description     log The log.   message The message.   extraData The additional data.   logData The log data.   time The time.    Error(ILog log, string message, object extraData, LogData logData, DateTime time) Called when a Error message is written to the log.\nParameters    Name Description     log The log.   message The message.   extraData The additional data.   logData The log data.   time The time.    Info(ILog log, string message, object extraData, LogData logData, DateTime time) Called when a Info message is written to the log.\nParameters    Name Description     log The log.   message The message.   extraData The additional data.   logData The log data.   time The time.    Status(ILog log, string message, object extraData, LogData logData, DateTime time) Called when a Status message is written to the log.\nParameters    Name Description     log The log.   message The message.   extraData The additional data.   logData The log data.   time The time.    Warning(ILog log, string message, object extraData, LogData logData, DateTime time) Called when a Warning message is written to the log.\nParameters    Name Description     log The log.   message The message.   extraData The additional data.   logData The log data.   time The time.    Write(ILog log, string message, LogEvent logEvent, object extraData, LogData logData, DateTime time) Called when any message is written to the log.\nParameters    Name Description     log The log.   message The message.   logEvent The log event.   extraData The additional data.   logData The log data.   time The time.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/messaging/imessagemediator/",
	"title": "IMessageMediator",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Messaging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IMessageMediator  The interface definition for our Message mediator. This allows loose-event coupling between components in an application by sending messages to registered elements. This class implements the mediator pattern.\nMethods CleanUp() Cleans up the list of registered handlers. All handlers that are no longer alive are removed from the list. This method is automatically invoked after each call to Object), but can also be invoked manually.\nIsMessageRegistered(Type messageType, object tag) Determines whether the specified message type is registered.\nParameters    Name Description     messageType The type of the message.   tag The tag.    Returns true if the message type is registered; otherwise,false.\nExceptions    Name Description     ArgumentNullException The messageType isnull.    IsMessageRegistered(object tag) Determines whether the specified message type is registered.\nType Parameters TMessage The type of the message.\nParameters    Name Description     tag The tag.    Returns true if the message type is registered; otherwise,false.\nRegister(object recipient, Action handler, object tag) Registers a specific recipient for a specific message.\nType Parameters TMessage The type of the message.\nParameters    Name Description     recipient The recipient to register.   handler The handler method.   tag The message tag.    Returns true if the handler is registered successfully; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The handler isnull.    Remarks A handler cannot be registered twice. If the same handler is already registered, this method will returnfalse.\nSendMessage(TMessage message, object tag) Broadcasts a message to all message targets for a given message tag and passes a parameter.\nType Parameters TMessage The type of the message.\nParameters    Name Description     message The message parameter.   tag The message tag.    Returns true if any handlers were invoked; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The message isnull.    Unregister(object recipient, Action handler, object tag) Unregisters a specific recipient for a specific message with the specified tag.\nType Parameters TMessage The type of the message.\nParameters    Name Description     recipient The recipient to unregister.   handler The handler method.   tag The message tag.    Returns true if the handler is unregistered successfully; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The handler isnull.    Remarks A handler cannot be unregistered when it is not registered first. If a handler is unregistered while it is not registered, this method will returnfalse.\nUnregisterRecipient(object recipient, object tag) Unregisters a specific recipient for all the (non-static) message the recipient is subscribed to.\nParameters    Name Description     recipient The recipient to unregister.   tag The message tag.    Returns true if the handler is unregistered successfully; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The recipient isnull.    Remarks A handler cannot be unregistered when it is not registered first. If a handler is unregistered while it is not registered, this method will returnfalse.\nUnregisterRecipientAndIgnoreTags(object recipient) Unregisters a specific recipient for all the (non-static) message the recipient is subscribed to. This method ignores any tags. If a message recipient matches the specified recipient, it is unsubscribed.\nParameters    Name Description     recipient The recipient to unregister.    Returns true if the handler is unregistered successfully; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The recipient isnull.    Remarks A handler cannot be unregistered when it is not registered first. If a handler is unregistered while it is not registered, this method will returnfalse.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/imessageservice/",
	"title": "IMessageService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IMessageService  Interface for the message service.\nMethods ShowAsync(string message, string caption, MessageButton button, MessageImage icon) Shows the specified message and returns the result.\nParameters    Name Description     message The message.   caption The caption.   button The button.   icon The icon.    Returns The MessageResult.\nExceptions    Name Description     ArgumentException The message isnull or whitespace.    ShowErrorAsync(Exception exception) Shows an error message to the user and allows a callback operation when the message is completed.\nParameters    Name Description     exception The exception.    Exceptions    Name Description     ArgumentNullException The exception isnull.    ShowErrorAsync(string message, string caption) Shows an error message to the user and allows a callback operation when the message is completed.\nParameters    Name Description     message The message.   caption The caption.    Exceptions    Name Description     ArgumentException The message isnull or whitespace.    ShowInformationAsync(string message, string caption) Shows an information message to the user and allows a callback operation when the message is completed.\nParameters    Name Description     message The message.   caption The caption.    Exceptions    Name Description     ArgumentException The message isnull or whitespace.    ShowWarningAsync(string message, string caption) Shows a warning message to the user and allows a callback operation when the message is completed.\nParameters    Name Description     message The message.   caption The caption.    Exceptions    Name Description     ArgumentException The message isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/imodel/",
	"title": "IModel",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IModel : IModelEditor, IModelSerialization, IAdvancedEditableObject  Base types\nIModelEditor,IModelSerialization,IAdvancedEditableObject\nIModelBase that the ModelBase must implement to easily pass objects to methods as non-generic.\nRemarks This interface defines all the non-generic interfaces that the ModelBase class implements.\nProperties IsDirty Gets a value indicating whether this object is dirty.\nIsInEditSession Gets a value indicating whether the object is currently in an edit session, started by the method.\nKeyName Gets the name of the object. By default, this is the name of the inherited class.\nMethods GetDefaultValue(string name) Returns the default value of a specific property.\nParameters    Name Description     name Name of the property.    Returns Default value of the property.\nExceptions    Name Description     T:Catel.Data.PropertyNotRegisteredException Thrown when the property is not registered.    GetDefaultValue(string name) Returns the typed default value of a specific property.\nType Parameters TValue The type of the value.\nParameters    Name Description     name Name of the property.    Returns Default value of the property.\nExceptions    Name Description     T:Catel.Data.PropertyNotRegisteredException Thrown when the property is not registered.    GetPropertyType(string name) Returns the type of a specific property.\nParameters    Name Description     name Name of the property.    Returns Type of the property.\nExceptions    Name Description     T:Catel.Data.PropertyNotRegisteredException Thrown when the property is not registered.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/imodeleditor/",
	"title": "IModelEditor",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IModelEditor  An interface that allows public editing of ModelBase instances using theGetValue andSetValue methods.\nMethods GetValue(string propertyName) Gets the value of the specified property.\nParameters    Name Description     propertyName Name of the property.    Returns The value of the property.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.   T:Catel.Data.PropertyNotRegisteredException The property is not registered.    GetValue(string propertyName) Gets the value of the specified property.\nParameters    Name Description     propertyName Name of the property.    Returns The value of the property.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.   T:Catel.Data.PropertyNotRegisteredException The property is not registered.    GetValueFastButUnsecure(string propertyName) Gets the value in the fastest way possible without doing sanity checks.\nParameters    Name Description     propertyName Name of the property.    Returns The value.\nRemarks Note that this method does not do any sanity checks. Use at your own risk!\nSetValue(string propertyName, object value) Sets the value of the specified property.\nParameters    Name Description     propertyName Name of the property.   value The value.    Exceptions    Name Description     ArgumentException The propertyName isnull or whitespace.   T:Catel.Data.PropertyNotRegisteredException The property is not registered.    SetValueFastButUnsecure(string propertyName, object value) Sets the value in the fastest way possible without doing sanity checks.\nParameters    Name Description     propertyName Name of the property.   value The value.    Returns The value.\nRemarks Note that this method does not do any sanity checks. Use at your own risk!\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/imodelequalitycomparer/",
	"title": "IModelEqualityComparer",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IModelEqualityComparer  Implementation of the for the ModelBase.\nProperties CompareCollections Gets or sets a value indicating whether collections should be compared.\nCompareProperties Gets or sets a value indicating whether properties should be compared.\nCompareValues Gets or sets a value indicating whether values should be compared.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/imodelextensions/",
	"title": "IModelExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class IModelExtensions  IModel extensions.\nMethods ClearIsDirtyOnAllChilds(IModel model) Clears the IsDirty on all childs.\nParameters    Name Description     model The model.    ToByteArray(IModel model, ISerializer serializer, ISerializationConfiguration configuration) Serializes the object to a byte array.\nParameters    Name Description     model The model.   serializer The serializer.   configuration The configuration.    Returns Byte array containing the serialized data.\nToXml(IModel model, ISerializer serializer, ISerializationConfiguration configuration) Serializes the object to and xml object.\nParameters    Name Description     model The model.   serializer The serializer.   configuration The configuration.    Returns containing the serialized data.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/imodelserialization/",
	"title": "IModelSerialization",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IModelSerialization : ISerializable  Base types\nISerializable\nDefines all serialization members for the models.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/inavigationrootservice/",
	"title": "INavigationRootService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface INavigationRootService  Service to retrieve the navigation root in the application.\nMethods GetNavigationRoot() Gets the navigation root.\nReturns System.Object.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/inavigationservice/",
	"title": "INavigationService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface INavigationService  Service to navigate inside applications.\nProperties CanGoBack Gets a value indicating whether it is possible to navigate back.\nCanGoForward Gets a value indicating whether it is possible to navigate forward.\nEvents ApplicationClosed Occurs when nothing has canceled the application closing and the application is really about to be closed.\nApplicationClosing Occurs when the application is about to be closed.\nMethods CloseApplication() Closes the current application. The actual implementation depends on the final target framework.\nReturns true if the application is closed; otherwisefalse.\nGetBackStackCount() Returns the number of total back entries (which is the navigation history).\nGoBack() Navigates back to the previous page.\nGoForward() Navigates forward to the next page.\nNavigate(Type viewModelType, Dictionaryparameters) Navigates the specified location registered using the view model type.\nParameters    Name Description     viewModelType The view model type.   parameters Dictionary of parameters, where the key is the name of the parameter, and the value is the value of the parameter.    Exceptions    Name Description     ArgumentNullException The viewModelType isnull.    Navigate(Uri uri) Navigates to a specific location.\nParameters    Name Description     uri The URI.    Exceptions    Name Description     ArgumentNullException The uri isnull.    Navigate(string uri, Dictionaryparameters) Navigates to a specific location.\nParameters    Name Description     uri The URI.   parameters Dictionary of parameters, where the key is the name of the parameter, and the value is the value of the parameter.    Exceptions    Name Description     ArgumentException The uri isnull or whitespace.    Navigate(Dictionaryparameters) Navigates the specified location registered using the view model type.\nType Parameters TViewModelType The view model type.\nParameters    Name Description     parameters Dictionary of parameters, where the key is the name of the parameter, and the value is the value of the parameter.    Register(Type viewModelType, Uri uri) Registers the specified view model and the uri. Use this method to override the uri detection mechanism in Catel.\nParameters    Name Description     viewModelType Type of the view model.   uri The URI to register.    Exceptions    Name Description     ArgumentException The viewModelType does not implement IViewModel.   ArgumentNullException The uri isnull.    Register(string name, Uri uri) Registers the specified view model and the uri. Use this method to override the uri detection mechanism in Catel.\nParameters    Name Description     name The name of the registered page.   uri The URI to register.    Exceptions    Name Description     ArgumentException The name isnull or whitespace.   ArgumentNullException The uri isnull.   InvalidOperationException The name is already registered.    RemoveAllBackEntries() Removes all the back entries from the navigation history.\nRemoveBackEntry() Removes the last back entry from the navigation history.\nUnregister(Type viewModelType) This unregisters the specified view model.\nParameters    Name Description     viewModelType Type of the view model to unregister.    Returns true if the view model is unregistered; otherwisefalse.\nUnregister(string name) This unregisters the specified view model.\nParameters    Name Description     name Name of the registered page.    Returns true if the view model is unregistered; otherwisefalse.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/inavigationview/",
	"title": "INavigationView",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface INavigationView : IView  Base types\nIView\nInterface defining functionality for a view with navigation.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/ineedcustominitialization/",
	"title": "INeedCustomInitialization",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface INeedCustomInitialization  Interface that defines that a type needs initialization after it has been created by the TypeFactory. As soon as a type is created, the TypeFactory will check whether it implements the INeedCustomInitialization interface. If so, it will call the Initialize method. It is best to explicitly implement this interface to prevent misuse.\nMethods Initialize() Initializes this instance.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/system/componentmodel/inotifydatawarninginfo/",
	"title": "INotifyDataWarningInfo",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace System.ComponentModel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface INotifyDataWarningInfo  Interface that is based on the interface, but supports warnings instead of errors.\nProperties HasWarnings Gets a value indicating whether this object contains any field or business warnings.\nEvents WarningsChanged Occurs when the warnings have changed.\nMethods GetWarnings(string propertyName) Gets the warnings for the specific property name.\nParameters    Name Description     propertyName Name of the property.    Returns of warnings.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/inotifypropertychangedextensions/",
	"title": "INotifyPropertyChangedExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class INotifyPropertyChangedExtensions  Extension methods for the interface.\nMethods SubscribeToPropertyChanged(INotifyPropertyChanged notifyPropertyChanged, string propertyName, EventHandler handler) Subscribes to the specified property.\nParameters    Name Description     notifyPropertyChanged The notify property changed.   propertyName Name of the property.   handler The handler.    Exceptions    Name Description     ArgumentNullException The notifyPropertyChanged isnull.   ArgumentException The propertyName isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/iobjectadapter/",
	"title": "IObjectAdapter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IObjectAdapter  Adapter to interact with objects.\nMethods GetMemberValue(object model, string memberName, SerializationModelInfo modelInfo) Gets the member value.\nParameters    Name Description     model The model.   memberName Name of the member.   modelInfo The model information.    Returns MemberValue.\nSetMemberValue(object model, MemberValue member, SerializationModelInfo modelInfo) Sets the member value.\nParameters    Name Description     model The model.   member The member.   modelInfo The model information.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/iobjectconverterservice/",
	"title": "IObjectConverterService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IObjectConverterService  Service to convert objects to strings and vice versa.\nProperties DefaultCulture Gets or sets the default culture to use for parsing.\nMethods ConvertFromObjectToObject(object value, Type targetType) Converts the specified object to an object.\nParameters    Name Description     value The value.   targetType Type of the target.    Returns The object value.\nConvertFromObjectToString(object value) Converts the specified object to a string.\nParameters    Name Description     value The value.    Returns The string value.\nConvertFromObjectToString(object value, CultureInfo culture) Converts the specified object to a string.\nParameters    Name Description     value The value.   culture The culture.    Returns The string value.\nConvertFromStringToObject(string value, Type targetType) Converts the specified string value to an object.\nParameters    Name Description     value The value.   targetType The target type.    Returns The object value.\nConvertFromStringToObject(string value, Type targetType, CultureInfo culture) Converts the specified string value to an object.\nParameters    Name Description     value The value.   targetType The target type.   culture The culture.    Returns The object value.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/iobjectconverterserviceextensions/",
	"title": "IObjectConverterServiceExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class IObjectConverterServiceExtensions  Extension methods for IObjectConverterService.\nMethods ConvertFromObjectToObject(IObjectConverterService service, object value) Converts the specified object to an object.\nType Parameters T The type to convert to.\nParameters    Name Description     service The service.   value The value.    Returns The object value.\nConvertFromStringToObject(IObjectConverterService service, string value) Converts the specified string value to an object.\nType Parameters T The type to convert to.\nParameters    Name Description     service The service.   value The value.    Returns The object value.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/iopenfileservice/",
	"title": "IOpenFileService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IOpenFileService : IFileSupport  Base types\nIFileSupport\nInterface for the Open File service.\nProperties FileNames Gets the file names in case IsMultiSelect istrue.\nIsMultiSelect Gets or sets a value indicating whether this instance is multi select.\nMethods DetermineFileAsync() Determines the filename of the file what will be used.\nReturns true if a file is selected; otherwisefalse.\nRemarks If this method returnstrue, the FileNames property will be filled with the filenames. Otherwise, no changes will occur to the data of this object.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/ipage/",
	"title": "IPage",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IPage : INavigationView  Base types\nINavigationView\nInterface defining functionality for a page.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/ipleasewaitservice/",
	"title": "IPleaseWaitService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IPleaseWaitService  Interface for the Please Wait service.\nProperties ShowCounter Gets the show counter. This property can be used to get the current show counter if the please wait window should be hidden for a moment.\nMethods Hide() Hides this please wait window.\nPop() Decreases the number of clients that show the please wait window. The implementing class is responsible for holding a counter internally which a call to this method will decrease. As long as the internal counter is not zero (0), the please wait window will stay visible. To increase the counter, make a call to Pop. A call to String) or one of its overloads will not increase the internal counter. A call to Hide will reset the internal counter to zero (0) and thus hide the window.\nPush(string status) Increases the number of clients that show the please wait window. The implementing class is responsible for holding a counter internally which a call to this method will increase. As long as the internal counter is not zero (0), the please wait window will stay visible. To decrease the counter, make a call to Pop. A call to String) or one of its overloads will not increase the internal counter. A call to Hide will reset the internal counter to zero (0) and thus hide the window.\nParameters    Name Description     status The status to change the text to.    Show(PleaseWaitWorkDelegate workDelegate, string status) Shows the please wait window with the specified status text and executes the work delegate (in a background thread). When the work is finished, the please wait window will be automatically closed.\nParameters    Name Description     workDelegate The work delegate.   status The status. When the string isnull or empty, the default please wait text will be used.    Show(string status) Shows the please wait window with the specified status text.\nParameters    Name Description     status The status. When the string isnull or empty, the default please wait text will be used.    Remarks When this method is used, the Hide method must be called to hide the window again.\nUpdateStatus(int currentItem, int totalItems, string statusFormat) Updates the status and shows a progress bar with the specified status text. The percentage will be automatically calculated. The busy indicator will automatically hide when the totalItems is larger than currentItem. When providing the statusFormat, it is possible to use{0} (represents current item) and{1} (represents total items).\nParameters    Name Description     currentItem The current item.   totalItems The total items.   statusFormat The status format. Can be empty, but notnull.    Exceptions    Name Description     ArgumentOutOfRangeException The currentItem is smaller than zero.   ArgumentNullException The statusFormat isnull.    UpdateStatus(string status) Updates the status text.\nParameters    Name Description     status The status. When the string isnull or empty, the default please wait text will be used.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/ipleasewaitserviceextensions/",
	"title": "IPleaseWaitServiceExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class IPleaseWaitServiceExtensions  IPleaseWaitService extensions.\nMethods HideTemporarily(IPleaseWaitService pleaseWaitService) Hides the please wait service temporarily by storing the show counter and restoring it afterwards.\nReturns IDisposable.\nPushInScope(IPleaseWaitService pleaseWaitService, string status) Calls String) and returns a disposable token. As soon as the token is disposed, it will call Pop. This is a great way to safely show a busy indicator and ensure that the indicator hides, even when an exception occurs.\nParameters    Name Description     pleaseWaitService The please wait service.   status The status to change the text to.    Returns IDisposable.\nExamples "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/exceptionhandling/ipolicy/",
	"title": "IPolicy",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ExceptionHandling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IPolicy  Represent the base policy interface in exception handling\nProperties Interval Gets or sets the interval.\nNumberOfTimes Gets the number of times.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/pooling/ipoolmanager/",
	"title": "IPoolManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Pooling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IPoolManager\u0026lt;TPoolable\u0026gt; : IPoolManager where TPoolable : new(), class, IPoolable  Base types\nIPoolManager\nPool manager allowing objects to be pooled.\nType Parameters TPoolable Type of the object to be pooled.\nProperties CurrentSize Gets the current size.\nMethods GetObject() Gets the poolable object from the pool.\nReturns A free poolable object.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/pooling/ipoolable/",
	"title": "IPoolable",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Pooling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IPoolable  Interface defining pollable objects by the IPoolManager.\nProperties Size The size of the object.\nMethods Reset() Resets the object to an initial state.\nSetPoolManager(IPoolManager poolManager) Sets the pool manager of the polable object.\nParameters    Name Description     poolManager The pool manager.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/iprocessservice/",
	"title": "IProcessService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IProcessService  Interface for the Process service.\nMethods StartProcess(string fileName, string arguments, ProcessCompletedDelegate processCompletedCallback) Starts a process resource by specifying the name of an application and a set of command-line arguments.\nParameters    Name Description     fileName The name of an application file to run in the process.   arguments Command-line arguments to pass when starting the process.   processCompletedCallback The process completed callback, invoked only when the process is started successfully and completed.    Exceptions    Name Description     ArgumentException The fileName isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/iprogressnotifyableviewmodel/",
	"title": "IProgressNotifyableViewModel",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IProgressNotifyableViewModel : IViewModel  Base types\nIViewModel\nThe ProgressNotifyableViewModel interface.\nProperties DetailedMessage Gets the message.\nPercentage Gets the percent.\nTask Gets the task.\nTaskIsIndeterminate Gets or sets the task percentage.\nTaskMessage Gets or sets the task message.\nTaskName Gets or sets the task name.\nTaskPercentage Gets or sets the task percentage.\nMethods UpdateStatus(int currentItem, int totalItems, ITask task) Update the progress status.\nParameters    Name Description     currentItem The current item.   totalItems The total items.   task The task    Exceptions    Name Description     System.ArgumentNullException The task isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/ipropertyserializable/",
	"title": "IPropertySerializable",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IPropertySerializable  Fast serialization interaction. By default the serialization engine uses reflection to get and set values. To improve performance, once can implement this interface.\nMethods GetPropertyValue(string propertyName, object value) Gets the property value.\nParameters    Name Description     propertyName Name of the property.   value The value.    Returns true if the value is retrieved successfully; otherwise,false.\nSetPropertyValue(string propertyName, object value) Sets the property value.\nParameters    Name Description     propertyName Name of the property.   value The value.    Returns true if the value is set successfully; otherwise,false.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/iregistrationconvention/",
	"title": "IRegistrationConvention",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IRegistrationConvention  The registration convention interface.\nProperties RegistrationType Gets the type of the registration.\nMethods Process(IEnumerable typesToRegister) Processes the specified types to register.\nParameters    Name Description     typesToRegister The types to register.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/iregistrationconventionhandler/",
	"title": "IRegistrationConventionHandler",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IRegistrationConventionHandler  The registration convention handler.\nProperties AssemblyFilter Gets the assembly filter.\nRegistrationConventions Gets the registration conventions.\nTypeFilter Gets the type filter.\nMethods AddAssemblyToScan(Assembly assembly) Adds the assembly to scan.\nParameters    Name Description     assembly The assembly.    Exceptions    Name Description     System.ArgumentNullException The assembly isnull.    ApplyConventions() Applies the registered conventions.\nRegisterConvention(RegistrationType registrationType) Registers the convention.\nType Parameters TRegistrationConvention The type of the registration convention.\nParameters    Name Description     registrationType Type of the registration.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/irelationalviewmodel/",
	"title": "IRelationalViewModel",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IRelationalViewModel : IViewModel  Base types\nIViewModel\nInterface that allows a view model to be used in a nested user controls scenario.\nProperties ParentViewModel Gets the parent view model.\nMethods RegisterChildViewModel(IViewModel childViewModel) Registers a child view model to this view model. When a view model is registered as a child view model, it will receive all notifications from this view model and be notified of any validation changes.\nParameters    Name Description     childViewModel The child view model.    Exceptions    Name Description     ArgumentNullException The childViewModel isnull.    SetParentViewModel(IViewModel parentViewModel) Sets the new parent view model of this view model.\nParameters    Name Description     parentViewModel The parent view model.    UnregisterChildViewModel(IViewModel childViewModel) Unregisters the child view model. This means that the child view model will no longer receive any notifications from this view model as parent view model, nor will it be included in any validation calls in this view model.\nParameters    Name Description     childViewModel The child.    Exceptions    Name Description     ArgumentNullException The childViewModel isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/exceptionhandling/iretrypolicy/",
	"title": "IRetryPolicy",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.ExceptionHandling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IRetryPolicy : IPolicy  Base types\nIPolicy\nRepresents the retry policy.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/irollinginmemorylogservice/",
	"title": "IRollingInMemoryLogService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IRollingInMemoryLogService  Rolling in memory log service.\nProperties LogListener Gets the log listener.\nMaximumNumberOfErrorLogEntries Gets or sets the maximum number of error log entries to keep. The default value is 50.\nMaximumNumberOfLogEntries Gets or sets the maximum number of log entries to keep. The default value is 250.\nMaximumNumberOfWarningLogEntries Gets or sets the maximum number of warning log entries to keep. The default value is 50.\nEvents LogMessage Occurs when a log message is written.\nMethods GetErrorLogEntries() Gets the error log entries.\nReturns IEnumerable\u0026lt;LogEntry\u0026gt;.\nGetLogEntries() Gets the log entries.\nReturns IEnumerable\u0026lt;LogEntry\u0026gt;.\nGetWarningLogEntries() Gets the warning log entries.\nReturns IEnumerable\u0026lt;LogEntry\u0026gt;.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/isavablemodel/",
	"title": "ISavableModel",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ISavableModel : IModel  Base types\nIModel\nISavableDataObjectBase that defines the additional methods to save a IModel object.\nMethods Save(Stream stream, ISerializer serializer, ISerializationConfiguration configuration) Saves the object to a stream using a specific formatting.\nParameters    Name Description     stream Stream that will contain the serialized data of this object.   serializer The serializer to use.   configuration The configuration.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/isavablemodelextensions/",
	"title": "ISavableModelExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ISavableModelExtensions  ISaveable model extensions.\nMethods Save(ISavableModel model, string fileName, ISerializer serializer, ISerializationConfiguration configuration) Saves the object to a file using a specific formatting.\nParameters    Name Description     model The model to save.   fileName Filename of the file that will contain the serialized data of this object.   serializer The serializer to use.   configuration The configuration.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/isavefileservice/",
	"title": "ISaveFileService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ISaveFileService : IFileSupport  Base types\nIFileSupport\nInterface for the Save File service.\nMethods DetermineFileAsync() Determines the filename of the file what will be used.\nReturns true if a file is selected; otherwisefalse.\nRemarks If this method returnstrue, the FileName property will be filled with the filenames. Otherwise, no changes will occur to the data of this object.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/ischedulerservice/",
	"title": "ISchedulerService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ISchedulerService  Service that allows scheduling of actions in the future.\nMethods Schedule(Action action, DateTime dateTime) Schedules the specified action in an absolute.\nParameters    Name Description     action The action.   dateTime The date time.    Exceptions    Name Description     ArgumentNullException The action isnull.   ArgumentOutOfRangeException The dateTime is in the past.    Schedule(Action action, TimeSpan timeSpan) Schedules the specified action in a relative.\nParameters    Name Description     action The action.   timeSpan The time span.    Exceptions    Name Description     ArgumentNullException The action isnull.   ArgumentOutOfRangeException The timeSpan is in the past.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/iselectdirectoryservice/",
	"title": "ISelectDirectoryService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ISelectDirectoryService  Interface for the Select Directory service.\nProperties DirectoryName Gets the directory name.\nFileName Gets or sets the name of the file.\nFilter Gets or sets the filter to use when opening or saving the file.\nInitialDirectory Gets or sets the initial directory.\nShowNewFolderButton Gets or sets a value indicating whether to show the new folder button to be able to create new folders while browsing.\nTitle Gets or sets the title which will be used for display.\nMethods DetermineDirectoryAsync() Determines the name of the directory what will be used.\nReturns true if a directory is selected; otherwisefalse.\nRemarks If this method returnstrue, the DirectoryName property will be filled with the directory name. Otherwise, no changes will occur to the data of this object.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/isensorservice/",
	"title": "ISensorService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ISensorService\u0026lt;TValueInterface, TEventArgs\u0026gt; where TEventArgs : EventArgs  Interface that serves as a base interface for interfaces supported sensors (especially on Windows Phone 7).\nType Parameters TValueInterface The type of the value interface.\nTEventArgs The type of the event args.\nProperties CurrentValue Gets the current sensor value. If no value is available,null will be returned.\nRemarks This is convenience property that internally calls GetCurrentValue. Note that the services inside Catel do not support, thus you cannot subscribe to changes of this property. Instead, subscribe to the CurrentValueChanged event.\nIsSupported Gets a value indicating whether the device supports the current sensor and thus supports getting values.\nTimeBetweenUpdates Gets or sets the preferred time between updates.\nEvents CurrentValueChanged Occurs when the current sensor value has changed.\nMethods GetCurrentValue() Gets the current sensor value.\nReturns The current sensor value. If no value is available,null will be returned.\nStart() Starts the sensor service so it\u0026rsquo;s retrieving data.\nStop() Stops the sensor service so it\u0026rsquo;s no longer retrieving data.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/iserializable/",
	"title": "ISerializable",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ISerializable  Additional features for serializable objects.\nMethods FinishDeserialization() Finishes the deserialization.\nFinishSerialization() Finishes the serialization.\nStartDeserialization() Starts the deserialization.\nStartSerialization() Starts the serialization.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/iserializationconfiguration/",
	"title": "ISerializationConfiguration",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ISerializationConfiguration  Serialization configuration.\nProperties Culture Gets or sets the culture used for serialization.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/iserializationcontext/",
	"title": "ISerializationContext",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ISerializationContext\u0026lt;TSerializationContext\u0026gt; : ISerializationContext where TSerializationContext : class  Base types\nISerializationContext\nInterface for the serialization context used to serialize and deserialize models.\nType Parameters TSerializationContext The type of the serialization context.\nProperties Context Gets the context.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/iserializationcontextextensions/",
	"title": "ISerializationContextExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ISerializationContextExtensions  Extension methods for the serialization context.\nMethods FindParentType(ISerializationContext serializationContext, Funcpredicate, int maxLevels) Tries to find the parent type in the object graph.\nParameters    Name Description     serializationContext The serialization context.   predicate The predicate.   maxLevels The maximum number of levels to check. If-1, will check all up to the root.    Returns The type ornull of the type is not found.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/iserializationcontextinfo/",
	"title": "ISerializationContextInfo",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ISerializationContextInfo  Serialization context info.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/iserializationcontextinfofactory/",
	"title": "ISerializationContextInfoFactory",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ISerializationContextInfoFactory  Factory responsible for the serialization context info.\nMethods GetSerializationContextInfo(ISerializer serializer, object model, object data, ISerializationConfiguration configuration) Gets the serialization context based on the specific info.\nParameters    Name Description     serializer The serializer.   model The model.   data The data.   configuration The configuration.    Returns ISerializationContext.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/iserializationmanager/",
	"title": "ISerializationManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ISerializationManager  Manager which is responsible for discovering what fields and properties of an object should be serialized.\nEvents CacheInvalidated Occurs when the cache for a specific type has been invalidated.\nMethods AddSerializerModifier(Type type, Type serializerModifierType) Adds the serializer modifier for a specific type.\nParameters    Name Description     type The type.   serializerModifierType Type of the serializer modifier.    Exceptions    Name Description     ArgumentNullException The type isnull.    Clear(Type type) Clears the specified type from cache so it will be evaluated.\nParameters    Name Description     type The type.    Exceptions    Name Description     ArgumentNullException The type isnull.    GetCatelProperties(Type type, bool includeModelBaseProperties) Gets the catel properties.\nParameters    Name Description     type Type of the model.   includeModelBaseProperties if set totrue, also include model base properties.    Returns A hash set containing the Catel properties.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetCatelPropertiesToSerialize(Type type) Gets the Catel properties to serialize for the specified object.\nParameters    Name Description     type The type.    Returns The list of properties to serialize.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetCatelPropertyNames(Type type, bool includeModelBaseProperties) Gets the catel property names.\nParameters    Name Description     type Type of the model.   includeModelBaseProperties if set totrue, also include model base properties.    Returns A hash set containing the Catel property names.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetFieldNames(Type type) Gets the field names.\nParameters    Name Description     type Type of the model.    Returns A hash set containing the field names.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetFields(Type type) Gets the fields.\nParameters    Name Description     type Type of the model.    Returns A hash set containing the fields.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetFieldsToSerialize(Type type) Gets the fields to serialize for the specified object.\nParameters    Name Description     type The type.    Returns The list of fields to serialize.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetRegularProperties(Type type) Gets the regular properties.\nParameters    Name Description     type Type of the model.    Returns A hash set containing the regular properties.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetRegularPropertiesToSerialize(Type type) Gets the regular properties to serialize for the specified object.\nParameters    Name Description     type The type.    Returns The list of properties to serialize.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetRegularPropertyNames(Type type) Gets the regular property names.\nParameters    Name Description     type Type of the model.    Returns A hash set containing the regular property names.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetSerializerModifiers(Type type) Gets the serializer modifiers for the specified type. Note that the order is important because the modifiers will be called in the returned order during serialization and in reversed order during deserialization.\nParameters    Name Description     type The type.    Returns An array containing the modifiers. Nevernull, but can be an empty array.\nExceptions    Name Description     ArgumentNullException The type isnull.    RemoveSerializerModifier(Type type, Type serializerModifierType) Removes the serializer modifier for a specific type.\nParameters    Name Description     type The type.   serializerModifierType Type of the serializer modifier.    Exceptions    Name Description     ArgumentNullException The type isnull.    Warmup(Type type) Warmups the specified type by calling all the methods for the specified type.\nParameters    Name Description     type The type.    Exceptions    Name Description     ArgumentNullException The type isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/iserializationmanagerextensions/",
	"title": "ISerializationManagerExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ISerializationManagerExtensions  Extension methods for the ISerializationManager.\nMethods AddSerializerModifier(ISerializationManager serializationManager) Adds the serializer modifier for a specific type.\nType Parameters TType The type of the to be (de)serialized type.\nTSerializerModifier The type of the serializer modifier.\nExceptions    Name Description     ArgumentNullException The serializationManager isnull.    GetSerializerModifiers(ISerializationManager serializationManager) Gets the serializer modifier for a specific type.\nType Parameters TType The type of the to be (de)serialized type.\nExceptions    Name Description     ArgumentNullException The serializationManager isnull.    RemoveSerializerModifier(ISerializationManager serializationManager) Removes the serializer modifier for a specific type.\nType Parameters TType The type of the to be (de)serialized type.\nTSerializerModifier The type of the serializer modifier.\nExceptions    Name Description     ArgumentNullException The serializationManager isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/iserializer/",
	"title": "ISerializer",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ISerializer  Interface definition to serialize the IModel.\nEvents Deserialized Occurs when an object has just been deserialized.\nDeserializedMember Occurs when an object has just deserialized a specific member.\nDeserializing Occurs when an object is about to be deserialized.\nDeserializingMember Occurs when an object is about to deserialize a specific member.\nSerialized Occurs when an object has just been serialized.\nSerializedMember Occurs when an object has just serialized a specific member.\nSerializing Occurs when an object is about to be serialized.\nSerializingMember Occurs when an object is about to serialize a specific member.\nMethods Deserialize(Type modelType, ISerializationContextInfo serializationContext, ISerializationConfiguration configuration) Deserializes the specified model type.\nParameters    Name Description     modelType Type of the model.   serializationContext The serialization context.   configuration The configuration.    Returns The deserialized model.\nExceptions    Name Description     ArgumentNullException The modelType isnull.    Deserialize(Type modelType, Stream stream, ISerializationConfiguration configuration) Deserializes the specified model type.\nParameters    Name Description     modelType Type of the model.   stream The stream.   configuration The configuration.    Returns The deserialized model.\nExceptions    Name Description     ArgumentNullException The modelType isnull.    Deserialize(object model, ISerializationContextInfo serializationContext, ISerializationConfiguration configuration) Deserializes the specified model. The deserialized values will be set in the specified model.\nParameters    Name Description     model The model.   serializationContext The context.   configuration The configuration.    Returns The deserialized model.\nExceptions    Name Description     ArgumentNullException The model isnull.    Deserialize(object model, Stream stream, ISerializationConfiguration configuration) Deserializes the specified model. The deserialized values will be set in the specified model.\nParameters    Name Description     model The model.   stream The stream.   configuration The configuration.    Returns The deserialized model.\nExceptions    Name Description     ArgumentNullException The model isnull.    DeserializeMembers(Type modelType, ISerializationContextInfo serializationContext, ISerializationConfiguration configuration) Deserializes the members of the specified model.\nParameters    Name Description     modelType Type of the model.   serializationContext The serialization context.   configuration The configuration.    Returns The list of members that have been deserialized.\nExceptions    Name Description     ArgumentNullException The modelType isnull.    DeserializeMembers(Type modelType, Stream stream, ISerializationConfiguration configuration) Deserializes the members of the specified model.\nParameters    Name Description     modelType Type of the model.   stream The stream.   configuration The configuration.    Returns The list of members that have been deserialized.\nExceptions    Name Description     ArgumentNullException The modelType isnull.    Serialize(object model, ISerializationContextInfo serializationContext, ISerializationConfiguration configuration) Serializes the specified model.\nParameters    Name Description     model The model.   serializationContext The serialization context.   configuration The configuration.    Exceptions    Name Description     ArgumentNullException The model isnull.    Serialize(object model, Stream stream, ISerializationConfiguration configuration) Serializes the specified model.\nParameters    Name Description     model The model.   stream The stream.   configuration The configuration.    Exceptions    Name Description     ArgumentNullException The model isnull.    SerializeMembers(object model, Stream stream, ISerializationConfiguration configuration, string[] membersToIgnore) Serializes the members.\nParameters    Name Description     model The model.   stream The stream.   configuration The configuration.   membersToIgnore The members to ignore.    Exceptions    Name Description     ArgumentNullException The model isnull.    Warmup(IEnumerable types, int typesPerThread) Warms up the specified types. If the types isnull, all types known in the TypeCache deriving from the ModelBase class will be initialized. Note that it is not required to call this, but it can help to prevent an additional performance impact the first time a type is serialized.\nParameters    Name Description     types The types to warmp up. Ifnull, all types will be initialized.   typesPerThread The types per thread. If-1, all types will be initialized on the same thread.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/iserializerextensions/",
	"title": "ISerializerExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ISerializerExtensions  ISerializer extensions.\nMethods Deserialize(ISerializer serializer, Stream stream, ISerializationConfiguration configuration) Deserializes the specified stream into the model.\nType Parameters TModel The type of the t model.\nParameters    Name Description     serializer The serializer.   stream The stream.   configuration The configuration.    Returns The deserialized model.\nExceptions    Name Description     ArgumentNullException The serializer isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/iserializermodifier/",
	"title": "ISerializerModifier",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ISerializerModifier  Allows modifications for a specific model for every supported serializer.\nMethods DeserializeMember(ISerializationContext context, MemberValue memberValue) Allows the customization of the provided MemberValue.\nParameters    Name Description     context The context.   memberValue The member value.    OnDeserialized(ISerializationContext context, object model) Called when the object is deserialized.\nParameters    Name Description     context The context.   model The model.    OnDeserializing(ISerializationContext context, object model) Called when the object is about to be deserialized.\nParameters    Name Description     context The context.   model The model.    OnSerialized(ISerializationContext context, object model) Called when the object is serialized.\nParameters    Name Description     context The context.   model The model.    OnSerializing(ISerializationContext context, object model) Called when the object is about to be serialized.\nParameters    Name Description     context The context.   model The model.    SerializeMember(ISerializationContext context, MemberValue memberValue) Allows the customization of the provided MemberValue.\nParameters    Name Description     context The context.   memberValue The member value.    ShouldIgnoreMember(ISerializationContext context, object model, MemberValue memberValue) Determines whether the specified member should be ignored.\nParameters    Name Description     context The context.   model The model.   memberValue The member value.    Returns true if the property should be ignored,false otherwise.\nShouldSerializeAsCollection() Returns whether the serializer should serialize this model as a collection.\nReturns true if the model should be serialized as a collection,false if not. Returnnull if the serializer should decide automatically.\nShouldSerializeAsDictionary() Returns whether the serializer should serialize this model as a dictionary.\nReturns true if the model should be serialized as a dictionary,false if not. Returnnull if the serializer should decide automatically.\nShouldSerializeEnumMemberUsingToString(MemberValue memberValue) Returns whether the serializer should serialize the enum member usingToString().\nParameters    Name Description     memberValue     Returns ShouldSerializeMemberUsingParse(MemberValue memberValue) Returns whether the serializer should serialize the member usingToString(IFormatProvider) andParse(string, IFormatProvider).\nReturns true if the member should be serialized using parse,false if not. Returnnull if the serializer should decide automatically.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/iservice/",
	"title": "IService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IService  Interface to define a service.\nProperties Name Gets the name of the service.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/iservicelocator/",
	"title": "IServiceLocator",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IServiceLocator  The service locator which is used to retrieve the right instances of services. The cool thing about this service locator is that it can use external containers (from example from Unity) to resolve types if the types are not registered in the container itself. To do this, use the following code:``` var serviceLocator = ServiceLocator.Default; serviceLocator.RegisterExternalContainer(myUnityContainer);\n``` The service locator will use the external containers in case the current container does not contain the type. If the external containers also don\u0026rsquo;t contain the type, there is one last way to resolve the type using the MissingType event. The event passes MissingTypeEventArgs that contains the type the service locator is looking for. By setting the ImplementingInstance or ImplementingType in the handler, the service locator will resolve the type.\nProperties AutoRegisterTypesViaAttributes Gets or sets a value indicating whether this service locators will automatically register types via attributes.\nRemarks By default, this value istrue.\nCanResolveNonAbstractTypesWithoutRegistration Gets or sets a value indicating whether the service locator can resolve non abstract types without registration.\nIgnoreRuntimeIncorrectUsageOfRegisterAttribute Gets or sets a value indicating whether this service locators will ignore incorrect usage of ServiceLocatorRegistrationAttribute and do not throw.\nRemarks By default, this value istrue.\nEvents MissingType Occurs when a type cannot be resolved the by service locator. It first tries to raise this event. If there are no handlers or no handler can fill up the missing type, an exception will be thrown by the service locator.\nTypeInstantiated Occurs when a type is instantiated in the service locator.\nTypeRegistered Occurs when a type is registered in the service locator.\nMethods AreAllTypesRegistered(Type[] types) Determines whether all the specified types are registered with the service locator.\nParameters    Name Description     types The types that should be registered.    Returns true if all the specified types are registered with this instance of the IServiceLocator; otherwisefalse.\nExceptions    Name Description     ArgumentException The types isnull or an empty array.    Remarks Note that this method is written for optimalization by the TypeFactory. This means that the TypeFactory does not need to call the ServiceLocator several times to construct a single type using dependency injection. Only use this method if you know what you are doing, otherwise use the Object) instead.\nGetRegistrationInfo(Type serviceType, object tag) Gets the registration info about the specified type.\nParameters    Name Description     serviceType Type of the service.   tag The tag the service is registered with. The default value isnull.    Returns The RegistrationInfo ornull if the type is not registered.\nExceptions    Name Description     ArgumentNullException The serviceType isnull.    IsTypeRegistered(Type serviceType, object tag) Determines whether the specified service type is registered.\nParameters    Name Description     serviceType The type of the service.   tag The tag to register the service with. The default value isnull.    Returns true if the specified service type is registered; otherwise,false.\nExceptions    Name Description     ArgumentNullException The serviceType isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nIsTypeRegisteredAsSingleton(Type serviceType, object tag) Determines whether the specified service type is registered as singleton.\nParameters    Name Description     serviceType The service type.   tag The tag to register the service with. The default value isnull.    Returns true if the serviceType type is registered as singleton, otherwisefalse.\nRegisterInstance(Type serviceType, object instance, object tag) Registers a specific instance of a service.\nParameters    Name Description     serviceType Type of the service.   instance The instance.   tag The tag to register the service with. The default value isnull.    Exceptions    Name Description     ArgumentNullException The serviceType isnull.   ArgumentException The instance is not of the right type.    RegisterType(Type serviceType, FunccreateServiceFunc, object tag, RegistrationType registrationType, bool registerIfAlreadyRegistered) Registers an implementation of a service using a create type callback, but only if the type is not yet registered.\nParameters    Name Description     serviceType The type of the service.   createServiceFunc The create service function.   tag The tag to register the service with. The default value isnull.   registrationType The registration type. The default value is Singleton.   registerIfAlreadyRegistered If set totrue, an older type registration is overwritten by this new one.    Exceptions    Name Description     ArgumentNullException If serviceType isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nRegisterType(Type serviceType, Type serviceImplementationType, object tag, RegistrationType registrationType, bool registerIfAlreadyRegistered) Registers an implementation of a service, but only if the type is not yet registered.\nParameters    Name Description     serviceType The type of the service.   serviceImplementationType The type of the implementation.   tag The tag to register the service with. The default value isnull.   registrationType The registration type. The default value is Singleton.   registerIfAlreadyRegistered If set totrue, an older type registration is overwritten by this new one.    Exceptions    Name Description     ArgumentNullException If serviceType isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nRemoveAllTypes(Type serviceType) Removes all registered types of a certain service type.\nParameters    Name Description     serviceType The type of the service.    Exceptions    Name Description     System.ArgumentNullException The serviceType isnull.    RemoveType(Type serviceType, object tag) Removes the registered type with the specific tag.\nParameters    Name Description     serviceType The type of the service.   tag The tag of the registered the service. The default value isnull.    Exceptions    Name Description     System.ArgumentNullException The serviceType isnull.    ResolveAllTypes(Type[] types) Resolves all the specified types.\nParameters    Name Description     types The collection of types that should be resolved.    Returns The resolved types in the same order as the types.\nExceptions    Name Description     ArgumentException The types isnull or an empty array.    Remarks Note that this method is written for optimalization by the TypeFactory. This means that the TypeFactory does not need to call the ServiceLocator several times to construct a single type using dependency injection. Only use this method if you know what you are doing, otherwise use the Object) instead.\nResolveType(Type serviceType, object tag) Resolves an instance of the type registered on the service.\nParameters    Name Description     serviceType The type of the service.   tag The tag to register the service with. The default value isnull.    Returns An instance of the type registered on the service.\nExceptions    Name Description     ArgumentNullException The serviceType isnull.   T:Catel.IoC.TypeNotRegisteredException The type is not found in any container.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nResolveTypes(Type serviceType) Resolves all instances of the type registered on the service.\nParameters    Name Description     serviceType The type of the service.    Returns All instance of the type registered on the service.\nExceptions    Name Description     System.ArgumentNullException The serviceType isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/iservicelocatorinitializer/",
	"title": "IServiceLocatorInitializer",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IServiceLocatorInitializer  If a class implements this interface, it will automatically be called when a new IServiceLocator is created.\nMethods Initialize(IServiceLocator serviceLocator) Initializes the specified service locator.\nParameters    Name Description     serviceLocator The service locator.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/istartupinfoprovider/",
	"title": "IStartUpInfoProvider",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IStartUpInfoProvider  The IStartUpInfoProvider interface.\nProperties Arguments Gets the application command line argument.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/istartupinfoproviderextensions/",
	"title": "IStartUpInfoProviderExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6    public static class IStartUpInfoProviderExtensions  Extension methods for the startup info provider.\nFields Methods GetCommandLine(IStartUpInfoProvider startUpInfoProvider) Gets the command line as a string and quotes the values with a space.\nParameters    Name Description     startUpInfoProvider The start up information provider.    Returns The command line as string.\nExceptions    Name Description     ArgumentNullException The startUpInfoProvider isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/istate/",
	"title": "IState",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IState  State definition.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/istateservice/",
	"title": "IStateService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IStateService  The state service which can store and restore states.\nMethods LoadState(string key) Loads the state.\nParameters    Name Description     key The key.    Returns StoreState(string key, IState state) Stores the state.\nParameters    Name Description     key The key.   state The state.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/istateserviceextensions/",
	"title": "IStateServiceExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class IStateServiceExtensions  Extensions for the state service.\nMethods LoadState(IStateService stateService, string key) Loads the state.\nType Parameters TState The type of the state.\nParameters    Name Description     stateService The state service.   key The key.    Returns The state ornull if no state is found.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/collections/isuspendchangenotificationscollection/",
	"title": "ISuspendChangeNotificationsCollection",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Collections   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ISuspendChangeNotificationsCollection  Interface to specify that collection supports suspending change notifications.\nProperties IsDirty Gets or sets a value indicating whether change to the collection is made when its notifications are suspended.\nNotificationsSuspended Gets a value indicating whether change notifications are suspended.\nMethods Reset() Raises change notifications of type \u0026lsquo;Reset\u0026rsquo;.\nSuspendChangeNotifications() Suspends the change notifications until the returned is disposed.\nReturns IDisposable.\nSuspendChangeNotifications(SuspensionMode mode) Suspends the change notifications until the returned is disposed.\nParameters    Name Description     mode The suspension Mode.    Returns IDisposable.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/tasks/itask/",
	"title": "ITask",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Tasks   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ITask  The TaskBase interface.\nProperties AutomaticallyDispatch Gets or sets whether this task should automatically be dispatched to the UI thread.\nIsIndeterminate Indicates whether the task progress is indeterminate.\nMessage Gets the message\nName Gets the name.\nPercentage Gets the percentage\nEvents PropertyChanged Occurs when a property of this object has changed.\nMethods Execute() The execute.\nRollback() The rollback.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/itaskprogressreport/",
	"title": "ITaskProgressReport",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ITaskProgressReport  Interface for task progress report.\nProperties Status Status of the task progress.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/tasks/itaskprogresstracker/",
	"title": "ITaskProgressTracker",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Tasks   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ITaskProgressTracker  The progress log\nMethods UpdateStatus(string message) Update the task status.\nParameters    Name Description     message The message.    UpdateStatus(string message, bool indeterminate) Update the task status.\nParameters    Name Description     message The message.   indeterminate The indeterminate state.    UpdateStatus(string message, int percentage) Update the task status.\nParameters    Name Description     message The message.   percentage The percentage.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/itrigger/",
	"title": "ITrigger",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public interface ITrigger  Trigger interface.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/itypefactory/",
	"title": "ITypeFactory",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ITypeFactory  Type factory which will cache constructors to ensure the best performance available.\nMethods ClearCache() Clears the cache of all constructors. This call is normally not necessary since the type factory should keep an eye on the TypeRegistered event to invalidate the cache.\nCreateInstance(Type typeToConstruct) Creates an instance of the specified type using dependency injection.\nParameters    Name Description     typeToConstruct The type to construct.    Returns The instantiated type using dependency injection.\nExceptions    Name Description     ArgumentNullException The typeToConstruct isnull.    CreateInstanceWithParameters(Type typeToConstruct, object[] parameters) Creates an instance of the specified type using the specified parameters as injection values.\nParameters    Name Description     typeToConstruct The type to construct.   parameters The parameters to inject.    Returns The instantiated type using dependency injection.\nExceptions    Name Description     ArgumentNullException The typeToConstruct isnull.    CreateInstanceWithParametersAndAutoCompletion(Type typeToConstruct, object[] parameters) Creates an instance of the specified type using the specified parameters as injection values. This method will also auto-complete any additional dependencies that can be resolved from the IServiceLocator.\nParameters    Name Description     typeToConstruct The type to construct.   parameters The parameters to inject.    Returns The instantiated type using dependency injection.\nExceptions    Name Description     ArgumentNullException The typeToConstruct isnull.    CreateInstanceWithParametersAndAutoCompletionWithTag(Type typeToConstruct, object tag, object[] parameters) Creates an instance of the specified type using the specified parameters as injection values. This method will also auto-complete any additional dependencies that can be resolved from the IServiceLocator.\nParameters    Name Description     typeToConstruct The type to construct.   tag The preferred tag when resolving dependencies.   parameters The parameters to inject.    Returns The instantiated type using dependency injection.\nExceptions    Name Description     ArgumentNullException The typeToConstruct isnull.    CreateInstanceWithParametersWithTag(Type typeToConstruct, object tag, object[] parameters) Creates an instance of the specified type using the specified parameters as injection values.\nParameters    Name Description     typeToConstruct The type to construct.   tag The preferred tag when resolving dependencies.   parameters The parameters to inject.    Returns The instantiated type using dependency injection.\nExceptions    Name Description     ArgumentNullException The typeToConstruct isnull.    CreateInstanceWithTag(Type typeToConstruct, object tag) Creates an instance of the specified type using dependency injection.\nParameters    Name Description     typeToConstruct The type to construct.   tag The preferred tag when resolving dependencies.    Returns The instantiated type using dependency injection.\nExceptions    Name Description     ArgumentNullException The typeToConstruct isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/ityperequestpath/",
	"title": "ITypeRequestPath",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface ITypeRequestPath  Interface defining the public members of TypeRequestPath to be used inside exceptions.\nProperties AllTypes Gets all types in the right order.\nFirstType Gets the first type in the type path.\nLastType Gets the last type in the type path.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/iuivisualizerservice/",
	"title": "IUIVisualizerService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IUIVisualizerService  This interface defines a UI controller which can be used to display dialogs in either modal or modaless form from a ViewModel.\nMethods IsRegistered(string name) Determines whether the specified name is registered.\nParameters    Name Description     name The name.    Returns true if the specified name is registered; otherwise,false.\nExceptions    Name Description     ArgumentException The name isnull or whitespace.    Register(string name, Type windowType, bool throwExceptionIfExists) Registers the specified view model and the window type. This way, Catel knowns what window to show when a specific view model window is requested.\nParameters    Name Description     name Name of the registered window.   windowType Type of the window.   throwExceptionIfExists if set totrue, this method will throw an exception when already registered.    Exceptions    Name Description     ArgumentException The name isnull or whitespace.    ShowAsync(IViewModel viewModel, EventHandler completedProc) Shows a window that is registered with the specified view model in a non-modal state.\nParameters    Name Description     viewModel The view model.   completedProc The callback procedure that will be invoked as soon as the window is closed. This value can benull.    Returns true if the popup window is successfully opened; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The viewModel isnull.   T:Catel.Services.WindowNotRegisteredException The viewModel is not registered by the method first.    ShowAsync(string name, object data, EventHandler completedProc) Shows a window that is registered with the specified view model in a non-modal state.\nParameters    Name Description     name The name that the window is registered with.   data The data to set as data context. Ifnull, the data context will be untouched.   completedProc The callback procedure that will be invoked as soon as the window is closed. This value can benull.    Returns true if the popup window is successfully opened; otherwisefalse.\nExceptions    Name Description     ArgumentException The name isnull or whitespace.   T:Catel.Services.WindowNotRegisteredException The name is not registered by the method first.    ShowDialogAsync(IViewModel viewModel, EventHandler completedProc) Shows a window that is registered with the specified view model in a modal state.\nParameters    Name Description     viewModel The view model.   completedProc The callback procedure that will be invoked as soon as the window is closed. This value can benull.    Returns Nullable boolean representing the dialog result.\nExceptions    Name Description     ArgumentNullException The viewModel isnull.   T:Catel.Services.WindowNotRegisteredException The viewModel is not registered by the method first.    ShowDialogAsync(string name, object data, EventHandler completedProc) Shows a window that is registered with the specified view model in a modal state.\nParameters    Name Description     name The name that the window is registered with.   data The data to set as data context. Ifnull, the data context will be untouched.   completedProc The callback procedure that will be invoked as soon as the window is closed. This value can benull.    Returns Nullable boolean representing the dialog result.\nExceptions    Name Description     ArgumentException The name isnull or whitespace.   T:Catel.Services.WindowNotRegisteredException The name is not registered by the method first.    Unregister(string name) This unregisters the specified view model.\nParameters    Name Description     name Name of the registered window.    Returns true if the view model is unregistered; otherwisefalse.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/iuivisualizerserviceextensions/",
	"title": "IUIVisualizerServiceExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public static class IUIVisualizerServiceExtensions  Extension methods for the IUIVisualizerService.\nFields Methods ActivateWindow(Window window) Activates the window.\nParameters    Name Description     window The window.    Returns true if the window is activated with success; otherwisefalse ornull.\nIsRegistered(IUIVisualizerService uiVisualizerService, Type viewModelType) Determines whether the specified view model type is registered.\nParameters    Name Description     uiVisualizerService The UI visualizer service.   viewModelType Type of the view model.    Returns true if the specified view model type is registered; otherwise,false.\nExceptions    Name Description     ArgumentNullException The viewModelType isnull.    IsRegistered(IUIVisualizerService uiVisualizerService) Determines whether the specified view model type is registered.\nType Parameters TViewModel The type of the view model.\nParameters    Name Description     uiVisualizerService The UI visualizer service.    Returns true if the specified view model type is registered; otherwise,false.\nRegister(IUIVisualizerService uiVisualizerService, Type viewModelType, Type windowType, bool throwExceptionIfExists) Registers the specified view model and the window type. This way, Catel knowns what window to show when a specific view model window is requested.\nParameters    Name Description     uiVisualizerService The UI visualizer service.   viewModelType Type of the view model.   windowType Type of the window.   throwExceptionIfExists if set totrue, this method will throw an exception when already registered.    Exceptions    Name Description     System.ArgumentException viewModelType   ArgumentException viewModelType    Register(IUIVisualizerService uiVisualizerService, bool throwExceptionIfExists) Registers the specified view model and the window type. This way, Catel knowns what window to show when a specific view model window is requested.\nType Parameters TViewModel The type of the view model.\nTView The type of the view.\nParameters    Name Description     uiVisualizerService The UI visualizer service.   throwExceptionIfExists if set totrue, this method will throw an exception when already registered.    Exceptions    Name Description     System.ArgumentException viewModelType   ArgumentException viewModelType    ShowAsync(IUIVisualizerService uiVisualizerService, object model, EventHandler completedProc) Shows the window in non-modal state and creates the view model automatically using the specified model.\nType Parameters TViewModel The type of the view model.\nParameters    Name Description     uiVisualizerService The UI visualizer service.   model The model to be injected into the view model, can benull.   completedProc The completed proc.    Returns true if shown successfully,false otherwise.\nExceptions    Name Description     ArgumentNullException The uiVisualizerService isnull.    ShowDialogAsync(IUIVisualizerService uiVisualizerService, object model, EventHandler completedProc) Shows the window in modal state and creates the view model automatically using the specified model.\nType Parameters TViewModel The type of the view model.\nParameters    Name Description     uiVisualizerService The UI visualizer service.   model The model to be injected into the view model, can benull.   completedProc The completed proc.    Returns The dialog result.\nExceptions    Name Description     ArgumentNullException The uiVisualizerService isnull.    ShowOrActivateAsync(IUIVisualizerService uiVisualizerService, object dataContext, object scope) Creates a window in non-modal state. If a window with the specified viewModelType exists, the window is activated instead of being created.\nType Parameters TViewModel The view model type.\nParameters    Name Description     uiVisualizerService The uiVisualizerService   dataContext The data context.   scope The scope.    Returns A task.\nShowOrActivateAsync(IUIVisualizerService uiVisualizerService, object model, object scope, EventHandler completedProc) Creates a window in non-modal state. If a window with the specified viewModelType exists, the window is activated instead of being created.\nType Parameters TViewModel The type of the view model.\nParameters    Name Description     uiVisualizerService The UI visualizer service.   model The model to be injected into the view model, can benull.   scope The service locator scope.   completedProc The completed proc. Not applicable if window already exists.    Returns true if shown or activated successfully,false otherwise.\nExceptions    Name Description     ArgumentNullException The uiVisualizerService isnull.    Unregister(IUIVisualizerService uiVisualizerService, Type viewModelType) This unregisters the specified view model.\nParameters    Name Description     uiVisualizerService The UI visualizer service.   viewModelType Type of the view model to unregister.    Returns true if the view model is unregistered; otherwisefalse.\nUnregister(IUIVisualizerService uiVisualizerService) This unregisters the specified view model.\nType Parameters TViewModel The type of the view model.\nParameters    Name Description     uiVisualizerService The UI visualizer service.    Returns true if the view model is unregistered; otherwisefalse.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/iuniqueidentifyable/",
	"title": "IUniqueIdentifyable",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IUniqueIdentifyable  Interface to specify that an object is uniquely identifyable.\nProperties UniqueIdentifier Gets the unique identifier.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/iurllocator/",
	"title": "IUrlLocator",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IUrlLocator : ILocator  Base types\nILocator\nResolver that will resolve view types based on the view model type. For example, if a view model with the type nameMyAssembly.ViewModels.PersonViewModel is inserted, this could result in the view typeMyAssembly.Views.PersonView.\nMethods Register(Type viewModelType, string url) Registers the specified url in the local cache. This cache will also be used by the Boolean) method.\nParameters    Name Description     viewModelType The view model to resolve the url for.   url The resolved url.    Exceptions    Name Description     ArgumentNullException The viewModelType isnull.   ArgumentException The url isnull or whitespace.    ResolveUrl(Type viewModelType, bool ensurePageExists) Resolves an url by the view model and the registered NamingConventions.\nParameters    Name Description     viewModelType Type of the view model to resolve the url for.   ensurePageExists if set totrue, the method checks whether the page resource actually exists.    Returns The resolved viurlew ornull if the view could not be resolved.\nExceptions    Name Description     ArgumentNullException The viewModelType isnull.    Remarks Keep in mind that all results are cached. The cache itself is not automatically cleared when the NamingConventions are changed. If the NamingConventions are changed, the cache must be cleared manually.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/iusercontrol/",
	"title": "IUserControl",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IUserControl : IView  Base types\nIView\nInterface defining functionality for user controls.\nProperties CloseViewModelOnUnloaded Gets or sets a value indicating whether the user control should close any existing view model when the control is unloaded from the visual tree. Set this property tofalse if a view model should be kept alive and re-used for unloading/loading instead of creating a new one. By default, this value istrue.\nDisableWhenNoViewModel Gets or sets a value indicating whether the user control should automatically be disabled when there is no active view model.\nParent Gets the parent of the view.\nSkipSearchingForInfoBarMessageControl Gets or sets a value indicating whether to skip the search for an info bar message control. If not skipped, the user control will search for a the first InfoBarMessageControl that can be found. During this search, the user control will use both the visual and logical tree. If a user control does not have any InfoBarMessageControl, searching for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from happening, set this property totrue. The default value isfalse.\nSupportParentViewModelContainers Gets or sets a value indicating whether parent view model containers are supported. If supported, the user control will search for aDependencyObject that implements the IViewModelContainer interface. During this search, the user control will use both the visual and logical tree. If a user control does not have any parent control implementing the IViewModelContainer interface, searching for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from happening, set this property tofalse. The default value istrue.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/ivalidatable/",
	"title": "IValidatable",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IValidatable : IDataWarningInfo, INotifyDataWarningInfo  Base types\nIDataWarningInfo,INotifyDataWarningInfo\nInterface defining a validatable object.\nProperties IsHidingValidationResults Gets a value indicating whether the object is currently hiding its validation results. If the object hides its validation results, it is still possible to retrieve the validation results using the ValidationContext.\nIsValidated Gets or sets a value indicating whether this object is validated or not.\nValidationContext Gets the validation context which contains all information about the validation.\nValidator Gets or sets the validator to use. By default, this value retrieves the default validator from them IValidatorProvider if it is registered in the ServiceLocator.\nEvents Validated Occurs when the object is validated.\nValidating Occurs when the object is validating.\nMethods Validate(bool force) Validates the current object for field and business rule errors.\nParameters    Name Description     force if set totrue, a validation is forced. When the validation is not forced, it means that when the object is already validated, and no properties have been changed, no validation actually occurs since there is no reason for any values to have changed.    Remarks To check wether this object contains any errors, use the ValidationContext property.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/ivalidatableextensions/",
	"title": "IValidatableExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class IValidatableExtensions  Extensions for IValidatable.\nMethods AddBusinessRuleValidationResult(IValidatable validatable, IBusinessRuleValidationResult businessRuleValidationResult, bool validate) Adds the business rule validation result.\nParameters    Name Description     validatable The validatable model.   businessRuleValidationResult The business rule validation result.   validate if set totrue [validate].    AddFieldValidationResult(IValidatable validatable, IFieldValidationResult fieldValidationResult, bool validate) Adds the field validation result.\nParameters    Name Description     validatable The validatable model.   fieldValidationResult The field validation result.   validate if set totrue [validate].    GetBusinessRuleErrors(IValidatable validatable) Gets the current errors errors.\nReturns The errors or if no error is available.\nGetBusinessRuleWarnings(IValidatable validatable) Gets the current business warnings.\nReturns The warnings or if no warning is available.\nGetErrorMessage(IValidatable validatable, string userFriendlyObjectName) Returns a message that contains all the current errors.\nParameters    Name Description     validatable The model base.   userFriendlyObjectName Name of the user friendly object.    Returns Error string or empty in case of no errors.\nExceptions    Name Description     ArgumentNullException The validatable isnull.    GetFieldErrors(IValidatable validatable, string columnName) Gets the errors for a specific column.\nParameters    Name Description     validatable The model.   columnName Column name.    Returns The errors or if no error is available.\nGetFieldWarnings(IValidatable validatable, string columnName) Gets the warnings for a specific column.\nParameters    Name Description     validatable The model.   columnName Column name.    Returns The warnings or if no warning is available.\nGetValidationContext(IValidatable validatable) Gets the validation context of the specified model.\nParameters    Name Description     validatable The model.    Returns The validation context.\nGetWarningMessage(IValidatable validatable, string userFriendlyObjectName) Returns a message that contains all the current warnings.\nParameters    Name Description     validatable The model base.   userFriendlyObjectName Name of the user friendly object.    Returns Warning string or empty in case of no warnings.\nExceptions    Name Description     ArgumentNullException The validatable isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/ivalidatablemodel/",
	"title": "IValidatableModel",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IValidatableModel : IModel, IValidatable  Base types\nIModel,IValidatable\nDefines all validation members for the models.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/ivalidatablemodelextensions/",
	"title": "IValidatableModelExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class IValidatableModelExtensions  Validatable model extensions.\nMethods GetValidationContextForObjectGraph(IValidatableModel model) Gets the validation context for a complete object graph by also checking the properties and recursive\nParameters    Name Description     model The model.    Returns The validation context for the whole object graph.\nExceptions    Name Description     ArgumentNullException The model isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/ivalidationcontext/",
	"title": "IValidationContext",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IValidationContext  Interface describing the validation\nProperties HasErrors Gets a value indicating whether this instance contains errors.\nHasWarnings Gets a value indicating whether this instance contains warnings.\nLastModified Gets the last modified date/time. Note that this is just an informational value and should not be used for comparisons. The is not accurate enough. Use theLastModifiedTicks instead.\nLastModifiedTicks Gets the last modified ticks which is much more precise that the LastModified. Use this value to compare last modification ticks on other validation contexts. Because only full .NET provides a stopwatch, this property is only available in full .NET. All other target frameworks will return the which isnot reliable.\nMethods Add(IBusinessRuleValidationResult businessRuleValidationResult) Adds the business rule validation result.\nParameters    Name Description     businessRuleValidationResult The business rule validation result.    Exceptions    Name Description     ArgumentNullException The businessRuleValidationResult isnull.    Add(IFieldValidationResult fieldValidationResult) Adds the field validation result.\nParameters    Name Description     fieldValidationResult The field validation result.    Exceptions    Name Description     ArgumentNullException The fieldValidationResult isnull.    AddBusinessRuleValidationResult(IBusinessRuleValidationResult businessRuleValidationResult) Adds the business rule validation result.\nParameters    Name Description     businessRuleValidationResult The business rule validation result.    Exceptions    Name Description     ArgumentNullException The businessRuleValidationResult isnull.    AddFieldValidationResult(IFieldValidationResult fieldValidationResult) Adds the field validation result.\nParameters    Name Description     fieldValidationResult The field validation result.    Exceptions    Name Description     ArgumentNullException The fieldValidationResult isnull.    GetBusinessRuleErrorCount() Gets the business rule error count.\nReturns The number of business rule errors available.\nGetBusinessRuleErrorCount(object tag) Gets the business rule error count with the specified tag.\nParameters    Name Description     tag The tag.    Returns The number of business rule errors available.\nGetBusinessRuleErrors() Gets all the business rule errors.\nReturns List of IBusinessRuleValidationResult items.\nGetBusinessRuleErrors(object tag) Gets all the business rule errors with the specified tag.\nParameters    Name Description     tag The tag.    Returns List of IBusinessRuleValidationResult items.\nGetBusinessRuleValidationCount() Gets the business rule validation count.\nReturns The number of business rule validations available.\nGetBusinessRuleValidationCount(object tag) Gets the business rule validation count with the specified tag.\nParameters    Name Description     tag The tag.    Returns The number of business rule validations available.\nGetBusinessRuleValidations() Gets all the business rule validations.\nReturns List of IBusinessRuleValidationResult items.\nGetBusinessRuleValidations(object tag) Gets all the business rule validations with the specified tag.\nParameters    Name Description     tag The tag.    Returns List of IBusinessRuleValidationResult items.\nGetBusinessRuleWarningCount() Gets the business rule warning count.\nReturns The number of business rule warnings available.\nGetBusinessRuleWarningCount(object tag) Gets the business rule warning count with the specified tag.\nParameters    Name Description     tag The tag.    Returns The number of business rule warnings available.\nGetBusinessRuleWarnings() Gets all the business rule warnings.\nReturns List of IBusinessRuleValidationResult items.\nGetBusinessRuleWarnings(object tag) Gets all the business rule warnings with the specified tag.\nParameters    Name Description     tag The tag.    Returns List of IBusinessRuleValidationResult items.\nGetErrorCount() Gets the number of field and business rule errors inside this context.\nReturns The number of errors available.\nGetErrorCount(object tag) Gets the number of field and business rule errors with the specified tag inside this context.\nReturns The number of errors available.\nGetErrors() Gets all field and business rule errors.\nReturns List of IValidationResult items.\nGetErrors(object tag) Gets all field and business rule errors with the specified tag.\nReturns List of IValidationResult items.\nGetFieldErrorCount() Gets the field error count of all fields.\nReturns The number of field errors available.\nGetFieldErrorCount(object tag) Gets the field error count of all fields with the specified tag.\nParameters    Name Description     tag The tag.    Returns The number of field errors available.\nGetFieldErrors() Gets all the field errors.\nReturns List of IFieldValidationResult items.\nGetFieldErrors(object tag) Gets all the field errors with the specified tag.\nParameters    Name Description     tag The tag.    Returns List of IFieldValidationResult items.\nGetFieldErrors(string propertyName) Gets all the field errors for the specified property name.\nParameters    Name Description     propertyName Name of the property.    Returns List of IFieldValidationResult items.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    GetFieldErrors(string propertyName, object tag) Gets all the field errors for the specified property name with the specified tag.\nParameters    Name Description     propertyName Name of the property.   tag The tag.    Returns List of IFieldValidationResult items.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    GetFieldValidationCount() Gets the field validation count of all fields.\nReturns The number of field validations available.\nGetFieldValidationCount(object tag) Gets the field validation count of all fields with the specified tag.\nParameters    Name Description     tag The tag.    Returns The number of field validations available.\nGetFieldValidations() Gets all the field validations.\nReturns List of IFieldValidationResult items.\nGetFieldValidations(object tag) Gets all the field validations with the specified tag.\nParameters    Name Description     tag The tag.    Returns List of IFieldValidationResult items.\nGetFieldValidations(string propertyName) Gets all the field validations for the specified property name.\nParameters    Name Description     propertyName Name of the property.    Returns List of IFieldValidationResult items.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    GetFieldValidations(string propertyName, object tag) Gets all the field validations for the specified property name with the specified tag.\nParameters    Name Description     propertyName Name of the property.   tag The tag.    Returns List of IFieldValidationResult items.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    GetFieldWarningCount() Gets the field warning count of all fields.\nReturns The number of field warnings available.\nGetFieldWarningCount(object tag) Gets the field warning count of all fields with the specified tag.\nParameters    Name Description     tag The tag.    Returns The number of field warnings available.\nGetFieldWarnings() Gets all the field warnings.\nReturns List of IFieldValidationResult items.\nGetFieldWarnings(object tag) Gets all the field warnings with the specified tag.\nParameters    Name Description     tag The tag.    Returns List of IFieldValidationResult items.\nGetFieldWarnings(string propertyName) Gets all the field warnings for the specified property name.\nParameters    Name Description     propertyName Name of the property.    Returns List of IFieldValidationResult items.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    GetFieldWarnings(string propertyName, object tag) Gets all the field warnings for the specified property name with the specified tag.\nParameters    Name Description     propertyName Name of the property.   tag The tag.    Returns List of IFieldValidationResult items.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    GetValidationCount() Gets the total validation count of all fields and business rules.\nReturns The number of validations available.\nGetValidationCount(object tag) Gets the total validation count of all fields and business rules with the specified tag.\nParameters    Name Description     tag The tag.    Returns The number of validations available.\nGetValidations() Gets all the field and business rule validations.\nReturns List of IValidationResult items.\nGetValidations(object tag) Gets all the field and business rule validations with the specified tag.\nParameters    Name Description     tag The tag.    Returns List of IValidationResult items.\nGetWarningCount() Gets the number of field and business rule warnings inside this context.\nReturns The number of warnings available.\nGetWarningCount(object tag) Gets the number of field and business rule warnings with the specified tag inside this context.\nReturns The number of warnings available.\nGetWarnings() Gets all field and business rule warnings.\nReturns List of IValidationResult items.\nGetWarnings(object tag) Gets all field and business rule warnings with the specified tag.\nReturns List of IValidationResult items.\nRemove(IBusinessRuleValidationResult businessRuleValidationResult) Removes the business rule validation result.\nParameters    Name Description     businessRuleValidationResult The business rule validation result.    Exceptions    Name Description     ArgumentNullException The businessRuleValidationResult isnull.    Remove(IFieldValidationResult fieldValidationResult) Removes the field validation result.\nParameters    Name Description     fieldValidationResult The field validation result.    Exceptions    Name Description     ArgumentNullException The fieldValidationResult isnull.    RemoveBusinessRuleValidationResult(IBusinessRuleValidationResult businessRuleValidationResult) Removes the business rule validation result.\nParameters    Name Description     businessRuleValidationResult The business rule validation result.    Exceptions    Name Description     ArgumentNullException The businessRuleValidationResult isnull.    RemoveFieldValidationResult(IFieldValidationResult fieldValidationResult) Removes the field validation result.\nParameters    Name Description     fieldValidationResult The field validation result.    Exceptions    Name Description     ArgumentNullException The fieldValidationResult isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/ivalidationcontextextensions/",
	"title": "IValidationContextExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class IValidationContextExtensions  Extension methods for the validation context.\nMethods GetValidationsAsStringList(IValidationContext validationContext, ValidationResultType validationResult) Gets the list messages.\nParameters    Name Description     validationContext The validation context.   validationResult The validation result.    Returns String representing the output of all items in the fields an business object.\nExceptions    Name Description     ArgumentNullException The validationContext isnull.    Remarks This method is used to create a message string for field warnings or errors and business warnings or errors. Just pass the right dictionary and list to this method.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/ivalidationresult/",
	"title": "IValidationResult",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IValidationResult  Validation result with information about validations.\nProperties Message Gets the validation result message.\nRemarks This value has a public setter so it is possible to customize the message in derived classes. One should be careful and know what they are doing when overwriting an error message.\nTag Gets or sets the tag that allows grouping of validations.\nValidationResultType Gets the type of the validation result.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/ivalidationsummary/",
	"title": "IValidationSummary",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IValidationSummary  The validation summary interface.\nProperties BusinessRuleErrors Gets a collection of business rule errors.\nBusinessRuleWarnings Gets a collection of business rule warnings.\nFieldErrors Gets a collection of field errors.\nFieldWarnings Gets a collection of field warnings.\nHasBusinessRuleErrors Gets a value indicating whether the summary contains business rule errors.\nHasBusinessRuleWarnings Gets a value indicating whether the summary contains business rule warnings.\nHasErrors Gets a value indicating whether the summary contains errors.\nHasFieldErrors Gets a value indicating whether the summary contains field errors.\nHasFieldWarnings Gets a value indicating whether the summary contains field warnings.\nHasWarnings Gets a value indicating whether the summary contains warnings.\nLastModified Gets the last modified date/time. Note that this is just an informational value and should not be used for comparisons. The is not accurate enough. Use theLastModifiedTicks instead.\nLastModifiedTicks Gets the last modified ticks which is much more precise that the LastModified. Use this value to compare last modification ticks on other validation contexts. Because only full .NET provides a stopwatch, this property is only available in full .NET. All other target frameworks will return the which isnot reliable.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/ivalidator/",
	"title": "IValidator",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IValidator  Validator that can handle the validation of an object.\nMethods AfterValidateBusinessRules(object instance, List validationResults) Called just after the specified instance has validated its business rules.\nParameters    Name Description     instance The instance that has just been validated.   validationResults The validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.    AfterValidateFields(object instance, List validationResults) Called just after the specified instance has validated its fields.\nParameters    Name Description     instance The instance that has just been validated.   validationResults The validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.    AfterValidation(object instance, List fieldValidationResults, List businessRuleValidationResults) Called just after all validation has been executed.\nParameters    Name Description     instance The instance that has just been validated.   fieldValidationResults The current field validation results.   businessRuleValidationResults The current business rule validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.    BeforeValidateBusinessRules(object instance, List previousValidationResults) Called just before the specified instance is about to be validate its business rules.\nParameters    Name Description     instance The instance that is about to be validated.   previousValidationResults The validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.    BeforeValidateFields(object instance, List previousValidationResults) Called just before the specified instance is about to be validate its fields.\nParameters    Name Description     instance The instance that is about to be validated.   previousValidationResults The previous validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.    BeforeValidation(object instance, List previousFieldValidationResults, List previousBusinessRuleValidationResults) Called just before any validation is caused.\nParameters    Name Description     instance The instance that is about to be validated.   previousFieldValidationResults The previous field validation results.   previousBusinessRuleValidationResults The previous business rule validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.    Validate(object instance, ValidationContext validationContext) Validates the specified instance and allows the manipulation of the whole validation context. This method can be used to manipulate the whole validation context and the implementation of this is enough.\nParameters    Name Description     instance The instance to validate.   validationContext The validation context.    Exceptions    Name Description     ArgumentNullException The instance isnull.    ValidateBusinessRules(object instance, List validationResults) Validates the business rules of the specified instance. The results must be added to the list of validation results.\nParameters    Name Description     instance The instance to validate.   validationResults The validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.    ValidateFields(object instance, List validationResults) Validates the fields of the specified instance. The results must be added to the list of validation results.\nParameters    Name Description     instance The instance to validate.   validationResults The validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/ivalidatorprovider/",
	"title": "IValidatorProvider",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IValidatorProvider  Provider of IValidator classes. This provider can be used to retrieve specific validators for specific types.\nMethods GetValidator(Type targetType) Gets a validator for the specified target type.\nParameters    Name Description     targetType The target type.    Returns The IValidator for the specified type ornull if no validator is available for the specified type.\nExceptions    Name Description     ArgumentNullException The targetType isnull.    GetValidator() Gets a validator for the specified target type.\nType Parameters TTargetType The target type.\nReturns The IValidator for the specified type ornull if no validator is available for the specified type.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/ivalueconverter/",
	"title": "IValueConverter",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IValueConverter  Interface for all value converters.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/ivaluevalidator/",
	"title": "IValueValidator",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IValueValidator\u0026lt;TValue\u0026gt;  The value validator interface\nType Parameters TValue The type of the value\nMethods IsValid(TValue value) Determines whether the specified value is valid.\nParameters    Name Description     value The value.    Returns true if is valid, otherwisefalse.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/ivibrateservice/",
	"title": "IVibrateService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IVibrateService  Interface defining the functionality of the vibrate service.\nMethods Start(TimeSpan duration) Starts vibration on the device.\nParameters    Name Description     duration A TimeSpan object specifying the amount of time, in seconds, for which the phone vibrates. Valid times are between 0 and 5 seconds. Values greater than 5 or less than 0 will generate an exception.    Exceptions    Name Description     ArgumentOutOfRangeException Duration is greater than the 5 seconds or duration is negative.    Stop() Stops the vibration on the device.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/iview/",
	"title": "IView",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IView : IViewModelContainer  Base types\nIViewModelContainer\nInterface defining the base functionality of a view required to interact with Catel.\nProperties DataContext Gets or sets the data context.\nIsEnabled Gets or sets a value indicating whether the view is enabled.\nTag Gets or sets the tag.\nEvents DataContextChanged Occurs when the data context has changed.\nLoaded Occurs when the view is loaded.\nUnloaded Occurs when the view is unloaded.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/iviewexportservice/",
	"title": "IViewExportService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IViewExportService  The ViewExportService interface.\nMethods Export(IViewModel viewModel, ExportMode exportMode, double dpiX, double dpiY) Exports the view model view to the clipboard or to a print.\nParameters    Name Description     viewModel The view model.   exportMode The export mode.   dpiX The dpi X.   dpiY The dpi Y.    Exceptions    Name Description     System.ArgumentNullException The viewModel isnull.    Remarks If exportMode is Print then the dpiX and dpiY argument will be ignored.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/iviewloadmanager/",
	"title": "IViewLoadManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IViewLoadManager  Manager that handles top =\u0026gt; bottom loaded events for all views inside an application. The reason this class is built is that in non-WPF technologies, the visual tree is loaded from bottom =\u0026gt; top. However, Catel heavily relies on the order to be top =\u0026gt; bottom.\nEvents ViewLoaded Occurs when any of the subscribed framework elements are loaded.\nViewLoading Occurs when any of the subscribed framework elements are about to be loaded.\nViewUnloaded Occurs when any of the subscribed framework elements are unloaded.\nViewUnloading Occurs when any of the subscribed framework elements are about to be unloaded.\nMethods AddView(IViewLoadState viewLoadState) Adds the view load state.\nParameters    Name Description     viewLoadState The view load state.    Exceptions    Name Description     ArgumentNullException The viewLoadState isnull.    CleanUp() Cleans up the dead links.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/iviewloadstate/",
	"title": "IViewLoadState",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IViewLoadState  Interface containing the load state of a view. This interface can be implemented by a view, but also by other helper classes wrapping a view.\nProperties View Gets the view object.\nEvents Loaded Occurs when the view is loaded.\nUnloaded Occurs when the view is unloaded.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/iviewlocator/",
	"title": "IViewLocator",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IViewLocator : ILocator  Base types\nILocator\nResolver that will resolve view types based on the view model type. For example, if a view model with the type nameMyAssembly.ViewModels.PersonViewModel is inserted, this could result in the view typeMyAssembly.Views.PersonView.\nMethods IsCompatible(Type viewModelType, Type viewType) Determines whether the specified view type is compatible with the view model. A view is compatible if it\u0026rsquo;s either resolved via naming conventions or registered manually.\nParameters    Name Description     viewModelType Type of the view model.   viewType Type of the view.    Returns true if the view is compatible with the view model; otherwise,false.\nRegister(Type viewModelType, Type viewType) Registers the specified view in the local cache. This cache will also be used by the ResolveView(Type) method.\nParameters    Name Description     viewModelType Type of the view model.   viewType Type of the view.    Exceptions    Name Description     ArgumentNullException The viewModelType isnull.    ResolveView(Type viewModelType) Resolves a view type by the view model and the registered NamingConventions.\nParameters    Name Description     viewModelType Type of the view model to resolve the view for.    Returns The resolved view ornull if the view could not be resolved.\nExceptions    Name Description     ArgumentNullException The viewModelType isnull.    Remarks Keep in mind that all results are cached. The cache itself is not automatically cleared when the NamingConventions are changed. If the NamingConventions are changed, the cache must be cleared manually.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/iviewmanager/",
	"title": "IViewManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IViewManager  Manager that can search for views belonging to a view model.\nProperties ActiveViews Gets the active views presently registered.\nMethods GetFirstOrDefaultInstance(Type viewType) Gets the first or default instance of the specified view type.\nParameters    Name Description     viewType Type of the view.    Returns The IViewModel ornull if the view model is not registered.\nExceptions    Name Description     System.ArgumentException The viewType is not of type IView.    GetViewsOfViewModel(IViewModel viewModel) Gets the views of view model.\nParameters    Name Description     viewModel The view model.    Returns An array containing all the views that are linked to the view.\nExceptions    Name Description     ArgumentNullException The viewModel isnull.    RegisterView(IView view) Registers a view so it can be linked to a view model instance.\nParameters    Name Description     view The view to register.    Exceptions    Name Description     ArgumentNullException The view isnull.    UnregisterView(IView view) Unregisters a view so it can no longer be linked to a view model instance.\nParameters    Name Description     view The view to unregister.    Exceptions    Name Description     ArgumentNullException The view isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/iviewmanagerextensions/",
	"title": "IViewManagerExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class IViewManagerExtensions  Extension methods for the IViewManager.\nMethods GetFirstOrDefaultInstance(IViewModelManager viewManager) Gets the first or default instance of the specified view type.\nType Parameters TView The type of the view.\nParameters    Name Description     viewManager The view manager.    Returns The view ornull if the view is not registered.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/iviewmodel/",
	"title": "IViewModel",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IViewModel : IValidatable  Base types\nIValidatable\nView model interface.\nProperties IsClosed Gets a value indicating whether this instance is closed. If a view model is closed, calling CancelViewModelAsync, SaveViewModelAsync or Boolean}) will have no effect.\nTitle Gets the title of the view model.\nUniqueIdentifier Gets the unique identifier of the view model.\nEvents CanceledAsync Occurrs when the view model is canceled.\nCancelingAsync Occurs when the view model is about to be canceled.\nClosedAsync Occurs when the view model has been closed.\nClosingAsync Occurs when the view model is being closed.\nCommandExecutedAsync Occurs when a command on the view model has been executed.\nInitializedAsync Occurs when the view model has been initialized.\nSavedAsync Occurs when the view model is saved successfully.\nSavingAsync Occurs when the view model is about to be saved.\nMethods CancelViewModelAsync() Cancels the editing of the data.\nReturns true if successful; otherwisefalse.\nCloseViewModelAsync(Nullable result) Closes this instance. Always called after the CancelViewModelAsync of SaveViewModelAsync method.\nParameters    Name Description     result The result to pass to the view. This will, for example, be used asDialogResult.    InitializeViewModelAsync() Initializes the view model. Normally the initialization is done in the constructor, but sometimes this must be delayed to a state where the associated UI element (user control, window, \u0026hellip;) is actually loaded. This method is called as soon as the associated UI element is loaded.\nRemarks It\u0026rsquo;s not recommended to implement the initialization of properties in this method. The initialization of properties should be done in the constructor. This method should be used to start the retrieval of data from a web service or something similar. During unit tests, it is recommended to manually call this method because there is no external container calling this method.\nSaveViewModelAsync() Saves the data.\nReturns true if successful; otherwisefalse.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/iviewmodelcommandmanager/",
	"title": "IViewModelCommandManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IViewModelCommandManager  Command manager for view models.\nMethods AddHandler(Funchandler) Adds a new handler when a command is executed on the specified view model.\nParameters    Name Description     handler The handler to execute when a command is executed.    Exceptions    Name Description     ArgumentNullException The handler isnull.    InvalidateCommands(bool force) Invalidates all the commands that implement the ICatelCommand.\nParameters    Name Description     force Iftrue, the commands are re-initialized. The default value isfalse.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/iviewmodelcontainer/",
	"title": "IViewModelContainer",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IViewModelContainer  Defines a control as a IViewModel container.\nProperties ViewModel Gets the view model that is contained by the container.\nEvents ViewModelChanged Occurs when the ViewModel property has changed.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/iviewmodelextensions/",
	"title": "IViewModelExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class IViewModelExtensions  Extension methods for IViewModel.\nMethods CancelAndCloseViewModelAsync(IViewModel viewModel) Cancels the editing of the data, but also closes the view model in the same call.\nReturns true if successful; otherwisefalse.\nSaveAndCloseViewModelAsync(IViewModel viewModel) Saves the data, but also closes the view model in the same call if the save succeeds.\nReturns true if successful; otherwisefalse.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/iviewmodelfactory/",
	"title": "IViewModelFactory",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IViewModelFactory  Interface which allows custom instantation of view models. This way, if a view model contains a complex constructor or needs caching, this factory can be used.\nMethods CanReuseViewModel(Type viewType, Type expectedViewModelType, Type actualViewModelType, IViewModel viewModelAsDataContext) Determines whether the specified view model as data context can be reused and allow the view to set itself as owner of the inherited view model. By default a view model is allowed to be inherited when it is of the same type as the expected view model type.\nParameters    Name Description     viewType Type of the view.   expectedViewModelType The expected view model type according to the view.   actualViewModelType The actual view model type which is the type of the viewModelAsDataContext.   viewModelAsDataContext The view model as data context which must be checked.    Returns true if the specified view model instance ben be reused by the view; otherwise,false.\nCreateViewModel(Type viewModelType, object dataContext, object tag) Creates a new view model.\nParameters    Name Description     viewModelType Type of the view model that needs to be created.   dataContext The data context of the view model.   tag The preferred scope to use when resolving dependencies.    Returns The newly created IViewModel ornull if no view model could be created.\nExceptions    Name Description     ArgumentNullException The viewModelType isnull.   ArgumentException The viewModelType does not implement the IViewModel interface.    IsViewModelWithModelInjection(Type viewModelType) Determines whether the specified view model is a view model with model inject. A view model is considered a model injection if the first parameter of one of the constructors is not registered inside the dependency resolver.\nParameters    Name Description     viewModelType Type of the view model.    Returns true if the view model is a view model with model injection; otherwise,false.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/iviewmodelfactoryextensions/",
	"title": "IViewModelFactoryExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class IViewModelFactoryExtensions  Extensions for the IViewModelFactory.\nMethods CreateViewModel(IViewModelFactory viewModelFactory, object dataContext, object tag) Creates a new view model. This is a convenience wrapper around the Object) method. This method cannot be overriden.\nType Parameters TViewModel The type of the view model.\nParameters    Name Description     viewModelFactory The view model factory.   dataContext The data context.   tag The preferred tag to use when resolving dependencies.    Returns The newly created IViewModel ornull if no view model could be created.\nExceptions    Name Description     ArgumentNullException The viewModelFactory isnull.   ArgumentException TheTViewModel does not implement the IViewModel interface.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/iviewmodellocator/",
	"title": "IViewModelLocator",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IViewModelLocator : ILocator  Base types\nILocator\nResolver that will resolve view model types based on the view type. For example, if a view with the type nameMyAssembly.Views.PersonView is inserted, this could result in the view model typeMyAssembly.ViewModels.PersonViewModel.\nMethods IsCompatible(Type viewType, Type viewModelType) Determines whether the specified view model type is compatible with the view. A view model is compatible if it\u0026rsquo;s either resolved via naming conventions or registered manually.\nParameters    Name Description     viewType Type of the view.   viewModelType Type of the view model.    Returns true if the view model is compatible with the view; otherwise,false.\nRegister(Type viewType, Type viewModelType) Registers the specified view model in the local cache. This cache will also be used by the ResolveViewModel(Type) method.\nParameters    Name Description     viewType Type of the view.   viewModelType Type of the view model.    Exceptions    Name Description     ArgumentNullException The viewType isnull.    ResolveViewModel(Type viewType) Resolves a view model type by the view and the registered NamingConventions.\nParameters    Name Description     viewType Type of the view to resolve the view model for.    Returns The resolved view model ornull if the view model could not be resolved.\nExceptions    Name Description     ArgumentNullException The viewType isnull.    Remarks Keep in mind that all results are cached. The cache itself is not automatically cleared when the NamingConventions are changed. If the NamingConventions are changed, the cache must be cleared manually.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/iviewmodellocatorextensions/",
	"title": "IViewModelLocatorExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class IViewModelLocatorExtensions  Extension methods for the IViewModelLocator.\nMethods Register(IViewModelLocator viewModelLocator) Registers the specified view model in the local cache. This cache will also be used by the IViewModelLocator) method.\nType Parameters TView The type of the view.\nTViewModel The type of the view model.\nParameters    Name Description     viewModelLocator The view model locator.    Exceptions    Name Description     ArgumentNullException The viewModelLocator isnull.    ResolveViewModel(IViewModelLocator viewModelLocator) Resolves a view model type by the view and the registered NamingConventions.\nType Parameters TView The type of the view.\nParameters    Name Description     viewModelLocator The view model locator.    Returns The resolved view model ornull if the view model could not be resolved.\nExceptions    Name Description     ArgumentNullException The viewModelLocator isnull.    Remarks Keep in mind that all results are cached. The cache itself is not automatically cleared when the NamingConventions are changed. If the NamingConventions are changed, the cache must be cleared manually.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/iviewmodelmanager/",
	"title": "IViewModelManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IViewModelManager  Interface for the view model manager which allows the retrieval of currently alive view models.\nProperties ActiveViewModels Gets the active view models presently registered.\nMethods GetChildViewModels(IViewModel parentViewModel) Gets the child view models of the specified view model.\nParameters    Name Description     parentViewModel The parent view model.    Returns The child view models.\nExceptions    Name Description     ArgumentNullException The parentViewModel isnull.    GetChildViewModels(int parentUniqueIdentifier) Gets the child view models of the specified view model unique identifier.\nParameters    Name Description     parentUniqueIdentifier The parent unique identifier.    Returns The child view models.\nGetFirstOrDefaultInstance(Type viewModelType) Gets the first or default instance of the specified view model.\nParameters    Name Description     viewModelType Type of the view model.    Returns The IViewModel ornull if the view model is not registered.\nExceptions    Name Description     System.ArgumentException The viewModelType is not of type IViewModel.    GetFirstOrDefaultInstance() Gets the first or default instance of the specified view model.\nType Parameters TViewModel The type of the view model.\nReturns The IViewModel ornull if the view model is not registered.\nGetViewModel(int uniqueIdentifier) Gets the view model by its unique identifier.\nParameters    Name Description     uniqueIdentifier The unique identifier.    Returns The IViewModel ornull if the view model is not registered.\nGetViewModelsOfModel(object model) Gets the view models of a model.\nParameters    Name Description     model The model to find the linked view models for.    Returns An array containing all the view models.\nExceptions    Name Description     ArgumentNullException The model isnull.    RegisterModel(IViewModel viewModel, object model) Registers the model of a view model.\nParameters    Name Description     viewModel The view model.   model The model.    Exceptions    Name Description     ArgumentNullException The viewModel isnull.    RegisterViewModelInstance(IViewModel viewModel) Registers a view model instance with the manager. All view models must register themselves to the manager.\nParameters    Name Description     viewModel The view model to register.    Exceptions    Name Description     ArgumentNullException The viewModel isnull.    UnregisterAllModels(IViewModel viewModel) Unregisters all models of a view model.\nParameters    Name Description     viewModel The view model.    Exceptions    Name Description     ArgumentNullException The viewModel isnull.    UnregisterModel(IViewModel viewModel, object model) Unregisters the model of a view model.\nParameters    Name Description     viewModel The view model.   model The model.    Exceptions    Name Description     ArgumentNullException The viewModel isnull.    UnregisterViewModelInstance(IViewModel viewModel) Unregisters a view model instance from the manager. All view models must unregister themselves from the manager.\nParameters    Name Description     viewModel The view model to unregister.    Exceptions    Name Description     ArgumentNullException The viewModel isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/iviewmodelservice/",
	"title": "IViewModelService",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IViewModelService : IService  Base types\nIService\nInterface to declare services in a view model.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/iviewmodeltomodelconverter/",
	"title": "IViewModelToModelConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IViewModelToModelConverter  Defines view model to model converter.\nMethods CanConvert(Type[] types, Type outType, Type viewModelType) Determines whether this instance can convert the specified types.\nParameters    Name Description     types The types.   outType Type of the out.   viewModelType Owner VM type    Returns true if this instance can convert the specified types; otherwise,false.\nCanConvertBack(Type inType, Type[] outTypes, Type viewModelType) Determines whether this instance can convert back the specified in type.\nParameters    Name Description     inType Type of the in.   outTypes The out types.   viewModelType Type of the view model.    Returns true if this instance can convert back the specified in type; otherwise,false.\nConvert(object[] values, IViewModel viewModel) Converts the specified values.\nParameters    Name Description     values The values.   viewModel Owner VM    Returns System.Object.\nConvertBack(object value, IViewModel viewModel) Converts the specified values back.\nParameters    Name Description     value Property value   viewModel Owner VM    Returns System.Object[].\nShouldConvert(string propertyName) Determines whether the property name should be converted.\nParameters    Name Description     propertyName The name of changed property    Returns true if the property name should be converted,false otherwise.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/iviewmodelwrapper/",
	"title": "IViewModelWrapper",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IViewModelWrapper  Interface defining a view model wrapper as a container layer for a view model.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/iviewmodelwrapperservice/",
	"title": "IViewModelWrapperService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IViewModelWrapperService  The view model wrapper service which is responsible of ensuring the view model container layer.\nMethods IsWrapped(IView view) Determines whether the specified view is already wrapped.\nParameters    Name Description     view The view.    Returns true if the specified view is already wrapped; otherwise,false.\nExceptions    Name Description     ArgumentNullException The view isnull.    Wrap(IView view, object viewModelSource, WrapOptions wrapOptions) Wraps the specified view.\nParameters    Name Description     view The view.   viewModelSource The view model source containing theViewModel property.   wrapOptions The wrap options.    Returns The IViewModelWrapper.\nExceptions    Name Description     ArgumentNullException The view isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/iviewpropertyselector/",
	"title": "IViewPropertySelector",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IViewPropertySelector  Selector class to keep the view property selections to a minimum. Catel uses a special wrapping technology to wrap bindings to view properties to be able to add change notifications for all target platforms. Though this technology works great, it might have impact on performance and this is not always necessary. By customizing the IViewPropertySelector, developers can tweak the interesting view properties per type.\nMethods AddPropertyToSubscribe(string propertyName, Type targetViewType) Adds the property to subscribe to.\nParameters    Name Description     propertyName Name of the property.   targetViewType Type of the target view. Ifnull, all target views will subscribe to this property.    GetViewPropertiesToSubscribeTo(Type targetViewType) Gets the view properties to subscribe to for the specified target view type. If the MustSubscribeToAllViewProperties(Type) returnstrue for the specified target view type, this method will not be called and can return an empty list.\nParameters    Name Description     targetViewType Type of the target view.    Returns The list of view properties to subscribe to.\nMustSubscribeToAllViewProperties(Type targetViewType) Determines whether all view properties must be subscribed for this type.\nParameters    Name Description     targetViewType Type of the target view.    Returns true if all view properties must be subscribed to,false otherwise.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/iweakaction/",
	"title": "IWeakAction",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IWeakAction\u0026lt;TParameter\u0026gt; : IExecuteWithObject, IWeakReference  Base types\nIExecuteWithObject,IWeakReference\nA generic weak action which allows the invocation of a command in a weak manner. This way, actions will not cause memory leaks.\nType Parameters TParameter The type of the parameter.\nProperties Action Gets the actual delegate to invoke.\nRemarks This property is only introduced to allow action comparison on WinRT. Do not try to use this method by yourself.\nMethodName Gets the name of the method that should be executed.\nMethods Execute(TParameter parameter) Executes the action. This only happens if the action\u0026rsquo;s target is still alive.\nParameters    Name Description     parameter The parameter.    Returns true if the action is executed successfully; otherwisefalse.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/iweakeventlistener/",
	"title": "IWeakEventListener",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IWeakEventListener  Interface defining a weak event listener.\nProperties EventArgsType Gets the type of the event args.\nIsSourceAlive Gets a value indicating whether the event source has not yet been garbage collected.\nRemarks In case of static events, this property always returnsfalse.\nIsStaticEvent Gets a value indicating whether this instance represents a static event.\nIsStaticEventHandler Gets a value indicating whether this instance represents a static event handler.\nIsTargetAlive Gets a value indicating whether the event target has not yet been garbage collected.\nRemarks In case of static event handlers, this property always returnsfalse.\nSource Gets the actual source object. This property returnsnull if the event is static or the source is no longer alive.\nSourceType Gets the type of the source.\nSourceWeakReference Gets the source weak reference.\nTarget Gets the actual target object. This property returnsnull if the handler is static or the target is no longer alive.\nTargetType Gets the type of the target.\nTargetWeakReference Gets the target weak reference.\nMethods Detach() Detaches from the subscribed event.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/iweakfunc/",
	"title": "IWeakFunc",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IWeakFunc\u0026lt;TParameter, TResult\u0026gt; : IExecuteWithObject\u0026lt;TResult\u0026gt;, IWeakReference  Base types\nIExecuteWithObject,IWeakReference\nA weak func which allows the invocation of a command in a weak manner. This way, actions will not cause memory leaks.\nProperties Action Gets the actual delegate to invoke.\nRemarks This property is only introduced to allow action comparison on WinRT. Do not try to use this method by yourself.\nMethodName Gets the name of the method that should be executed.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/iweakreference/",
	"title": "IWeakReference",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IWeakReference  Weak reference interface.\nProperties IsTargetAlive Gets a value indicating whether the target has not yet been garbage collected.\nRemarks In case of static event handlers, this property always returnsfalse.\nTarget Gets the target of the weak reference. Will benull when the target is no longer alive.\nRemarks In case of static event handlers, this property always returnsnull.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/iwrapcontrolservice/",
	"title": "IWrapControlService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6    public interface IWrapControlService  The wrap control service interface.\nMethods CanBeWrapped(FrameworkElement frameworkElement) Determines whether the specified can be safely wrapped.\nParameters    Name Description     frameworkElement The framework element.    Returns true if the specified can be safely wrapped; otherwise,false.\nGetWrappedElement(Grid wrappedGrid, WrapControlServiceWrapOptions wrapOption) Gets a wrapped element mapped by the wrapOption.\nParameters    Name Description     wrappedGrid The wrapped grid.   wrapOption The wrap option that is used, which will be mapped to the control. The value All is not allowed and will throw an exception.    Returns ornull if the element is not found.\nExceptions    Name Description     ArgumentNullException The wrappedGrid isnull.   ArgumentOutOfRangeException The wrapOption is All.    GetWrappedElement(Grid wrappedGrid, string controlName) Gets a wrapped element by name.\nParameters    Name Description     wrappedGrid The wrapped grid.   controlName Name of the control.    Returns ornull if the element is not found.\nExceptions    Name Description     ArgumentNullException The wrappedGrid isnull.   ArgumentOutOfRangeException The controlName is not a valid control name.    GetWrappedElement(Grid wrappedGrid, WrapControlServiceWrapOptions wrapOption) Gets a wrapped element mapped by the wrapOption.\nType Parameters T Type of the control to return.\nParameters    Name Description     wrappedGrid The wrapped grid.   wrapOption The wrap option that is used, which will be mapped to the control. The value All is not allowed and will throw an exception.    Returns ornull if the element is not found.\nExceptions    Name Description     ArgumentNullException The wrappedGrid isnull.   ArgumentOutOfRangeException The wrapOption is All.    GetWrappedElement(Grid wrappedGrid, string controlName) Gets a wrapped element by name.\nType Parameters T Type of the control to return.\nParameters    Name Description     wrappedGrid The wrapped grid.   controlName Name of the control.    Returns ornull if the element is not found.\nExceptions    Name Description     ArgumentNullException The wrappedGrid isnull.   ArgumentOutOfRangeException The controlName is not a valid control name.    Wrap(FrameworkElement frameworkElement, WrapControlServiceWrapOptions wrapOptions, DataWindowButton[] buttons, ContentControl parentContentControl) Wraps the specified framework element.\nParameters    Name Description     frameworkElement The framework element.   wrapOptions The wrap options.   buttons The buttons to add.   parentContentControl The parent content control.    Returns that contains the wrapped content.\nRemarks The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a framework element can be wrapped by using the CanBeWrapped(FrameworkElement) method. This method will automatically handle the disconnecting of the framework element from the parent is the parentContentControl is passed.\nWrap(FrameworkElement frameworkElement, WrapControlServiceWrapOptions wrapOptions, ContentControl parentContentControl) Wraps the specified framework element without any buttons.\nParameters    Name Description     frameworkElement The framework element.   wrapOptions The wrap options.   parentContentControl The parent content control.    Returns that contains the wrapped content.\nRemarks The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a framework element can be wrapped by using the CanBeWrapped(FrameworkElement) method. This method will automatically handle the disconnecting of the framework element from the parent is the parentContentControl is passed.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/xml/ixmlnamespacemanager/",
	"title": "IXmlNamespaceManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Xml   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IXmlNamespaceManager  Manages the xml namespaces for a specific type.\nMethods GetNamespace(Type type, string preferredPrefix) Gets the namespace for the specified type.\nParameters    Name Description     type The type.   preferredPrefix The preferred prefix.    Returns The xml namespace.\nExceptions    Name Description     ArgumentNullException The type isnull.   ArgumentException The preferredPrefix isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/xml/ixmlserializer/",
	"title": "IXmlSerializer",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Xml   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IXmlSerializer : ISerializer  Base types\nISerializer\nInterface for the xml serializer.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/includeinserializationattribute/",
	"title": "IncludeInSerializationAttribute",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class IncludeInSerializationAttribute : Attribute  Base types Attribute\nAttribute to define that a specific member must be included in the serialization by the serialization engine.\nConstructors IncludeInSerializationAttribute() Initializes a new instance of the IncludeInSerializationAttribute class.\nIncludeInSerializationAttribute(string name) Initializes a new instance of the IncludeInSerializationAttribute class.\nParameters    Name Description     name Name of the member.    Properties Name Gets or sets the name of the mapped.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/controls/infobarmessagecontrol/",
	"title": "InfoBarMessageControl",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Controls   Available on .NET Framework 4.5, .NET Framework 4.6    public class InfoBarMessageControl : ContentControl  Base types ContentControl\nControl for displaying messages to the user.\nRemarks A long, long, long time ago, the messages were hold in a dependency property (DP). However, even though DP values are not static, several instances that were open at the same time were still clearing eachother values (thus it seemed the DP behaves like it\u0026rsquo;s a static member). Therefore, the messages are now hold in a field, and all problems are now gone. And the control lived happily ever after.\nFields InfoMessageProperty DependencyProperty definition as the backing store for InfoMessage.\nMessageCountProperty Definition of the dependency property is private.\nModeProperty DependencyProperty definition as the backing store for Mode.\nTextProperty DependencyProperty definition as the backing store for Text.\nConstructors InfoBarMessageControl() Initializes a new instance of the InfoBarMessageControl class.\nProperties DefaultTextPropertyValue Gets or sets the default property value for the Text property.\nErrorMessageCollection Gets the error message collection.\nRemarks This property is not defined as dependency property, since it seems to cause some issues when several windows/controls with this control are open at the same time (dependency properties seem to behave static, but they shouldn\u0026rsquo;t).\nInfoMessage Info message for the info bar.\nMessageCount Gets or sets MessageCount.\nRemarks Wrapper for the MessageCount dependency property.\nMode Gets or sets the mode in which the control is displayed.\nText Gets or sets the text to display when there are warnings and/or messages.\nWarningMessageCollection Gets the warning message collection.\nRemarks This property is not defined as dependency property, since it seems to cause some issues when several windows/controls with this control are open at the same time (dependency properties seem to behave static, but they shouldn\u0026rsquo;t).\nMethods OnApplyTemplate() When overridden in a derived class, is invoked whenever application code or internal processes callSystem.Windows.FrameworkElement.ApplyTemplate.\nSubscribeWarningAndErrorValidator(WarningAndErrorValidator validator) Subscribes an instance of the WarningAndErrorValidator class.\nParameters    Name Description     validator The validator.    Exceptions    Name Description     ArgumentNullException The validator isnull.    Remarks Keep in mind that this method is normally handled by Catel. Only use this method if you really know what you are doing.\nUnsubscribeWarningAndErrorValidator(WarningAndErrorValidator validator) Unsubscribes the warning and error validator.\nParameters    Name Description     validator The validator.    Exceptions    Name Description     ArgumentNullException The validator isnull.    Remarks Keep in mind that this method is normally handled by Catel. Only use this method if you really know what you are doing.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/infobarmessagecontrolgenerationmode/",
	"title": "InfoBarMessageControlGenerationMode",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows   Available on .NET Framework 4.5, .NET Framework 4.6    public enum InfoBarMessageControlGenerationMode : Enum  Base types Enum\nDefines the way the InfoBarMessageControl is included in the DataWindow.\nFields Inline 1\nGenerate the InfoBarMessageControl as inline.\nNone 0\nNo InfoBarMessageControl is generated.\nOverlay 2\nGenerate the InfoBarMessageControl as overlay.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/controls/infobarmessagecontrolmode/",
	"title": "InfoBarMessageControlMode",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Controls   Available on .NET Framework 4.5, .NET Framework 4.6    public enum InfoBarMessageControlMode : Enum  Base types Enum\nThe display mode for the InfoBarMessageControl.\nFields Inline 0\nDisplays the control inline, which means all controls below are moved down a bit when the control becomes visible.\nOverlay 1\nDisplays the control as an overlay, which might lead to overlapping of existing controls.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/controls/infobarmessagecontrolvisibilityconverter/",
	"title": "InfoBarMessageControlVisibilityConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Controls   Available on .NET Framework 4.5, .NET Framework 4.6    public class InfoBarMessageControlVisibilityConverter : IValueConverter  Base types\nIValueConverter\nConverter for the InfoBarMessageControl to determine whether the control should be visible for the current mode and\nMethods Convert(object value, Type targetType, object parameter, CultureInfo culture) Converts a value.\nParameters    Name Description     value The value produced by the binding source.   targetType The type of the binding target property.   parameter The converter parameter to use.   culture The culture to use in the converter.    Returns A converted value. If the method returns null, the valid null value is used.\nExceptions    Name Description     ArgumentNullException If value isnull.   ArgumentException If value is not of type InfoBarMessageControlMode.    ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Converts a value.\nParameters    Name Description     value The value that is produced by the binding target.   targetType The type to convert to.   parameter The converter parameter to use.   culture The culture to use in the converter.    Returns A converted value. If the method returns null, the valid null value is used.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/rules/initializationapicoprule/",
	"title": "InitializationApiCopRule",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ApiCop.Rules   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class InitializationApiCopRule : ApiCopRule  Base types ApiCopRule\nRule to show that classes should be initialized at startup.\nConstructors InitializationApiCopRule(string name, string description, ApiCopRuleLevel level, InitializationMode recommendedInitializationMode, string url) Initializes a new instance of the InitializationApiCopRule class.\nParameters    Name Description     name The name.   description The description.   level The level.   recommendedInitializationMode The recommended initialization mode.   url The URL.    Properties RecommendedInitializationMode Gets the recommended initialization mode.\nMethods GetResultAsText(string tag) Gets the result as text.\nParameters    Name Description     tag The tag.    Returns The result as text.\nExceptions    Name Description     System.NotImplementedException     IsValid(IApiCop apiCop, string tag) Determines whether the specified ApiCop rule is valid.\nParameters    Name Description     apiCop The ApiCop.   tag The tag.    Returns true if the specified ApiCop is valid; otherwise,false.\nExceptions    Name Description     System.NotImplementedException     SetInitializationMode(InitializationMode initializationMode, string tag) Sets the initialization model. If the value is already set, it won\u0026rsquo;t be updated so it can be used without checking for previous states.\nParameters    Name Description     initializationMode The initialization mode.   tag The tag.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/rules/initializationmode/",
	"title": "InitializationMode",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ApiCop.Rules   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum InitializationMode : Enum  Base types Enum\nThe initialization mode.\nFields Eager 1\nThe eager.\nLazy 0\nThe lazy.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/injectattribute/",
	"title": "InjectAttribute",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class InjectAttribute : Attribute  Base types Attribute\nAttribute to specify that a specific property must be injected.\nConstructors InjectAttribute(Type type, object tag) Initializes a new instance of the InjectAttribute class.\nProperties Tag Gets the tag.\nType Gets or sets the type. Ifnull, the type must be determined dynamically.\nRemarks This property is settable so it can be filled when the type isnull.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/injectionconstructorattribute/",
	"title": "InjectionConstructorAttribute",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class InjectionConstructorAttribute : Attribute  Base types Attribute\nAttribute to specify the constructor to use for dependency injection.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/input/inputgesture/",
	"title": "InputGesture",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Input   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class InputGesture : ModelBase  Base types ModelBase\nInput gesture class.\nFields KeyProperty Register the Key property so it is known in the class.\nModifiersProperty Register the Modifiers property so it is known in the class.\nConstructors InputGesture() Initializes a new instance of the InputGesture class.\nInputGesture(Key key) Initializes a new instance of the InputGesture class.\nParameters    Name Description     key The key.    InputGesture(Key key, ModifierKeys modifiers) Initializes a new instance of the InputGesture class.\nParameters    Name Description     key The key.   modifiers The modifiers.    Properties Key Gets the key.\nModifiers Gets the modifiers.\nMethods Equals(object obj) Determines whether the specified is equal to this instance.\nParameters    Name Description     obj The to compare with this instance.    Returns true if the specified is equal to this instance; otherwise,false.\nGetHashCode() Returns a hash code for this instance.\nReturns A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.\nExceptions    Name Description     System.NotImplementedException     Matches(KeyEventArgs eventArgs) Checks whether this input gesture matches the specified event args.\nParameters    Name Description     eventArgs The instance containing the event data.    Returns true if this gesture matches the event args,false otherwise.\nToString() Returns a that represents this instance.\nReturns A that represents this instance.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/input/inputgestureextensions/",
	"title": "InputGestureExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Input   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public static class InputGestureExtensions  Extension methods for the InputGesture.\nMethods IsEmpty(InputGesture inputGesture) Determines whether the specified input gesture is empty.\nParameters    Name Description     inputGesture The input gesture.    Returns true if the specified input gesture is empty; otherwise,false.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/inttostringconverter/",
	"title": "IntToStringConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class IntToStringConverter : ValueConverterBase  Base types ValueConverterBase\nConverts integer to string and back.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/ioc/introduction-to-components/",
	"title": "Introduction to components",
	"tags": [],
	"description": "",
	"content": "\r\rServiceLocator\r\r\rTypeFactory\r\r\rDependencyResolver and DependencyResolverManager\r\r\rEnsuring integrity of the ServiceLocator\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/serialization/customizing-serialization/",
	"title": "Introduction to customizing serialization",
	"tags": [],
	"description": "",
	"content": " The serialization engine explained All classes deriving from ModelBase use the serialization engine of Catel to serialize itself in a whole or as a subset of properties. Below is a schema which sheds some light on the architecture.\nThe SerializerBase now contains all the serialization and deserialization logic. The advantage is that this logic is no longer contained by the ModelBase itself which makes the class much simpler to understand and maintain. Now the SerializerBase contains all the heavy lifting, the deriving classes (XmlSerializer and BinarySerializer) only have to implement a few methods.\nThe serialization process works as shown in the diagram below:\nWorkflow 1 represents the serialization. Workflow 2 represents the deserialization.\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/invalidpropertyexception/",
	"title": "InvalidPropertyException",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class InvalidPropertyException : Exception  Base types Exception\nException is When an invalid property is added to the ModelBase class.\nConstructors InvalidPropertyException(string propertyName) Initializes a new instance of the InvalidPropertyException class.\nParameters    Name Description     propertyName Name of the property that caused the exception.    Properties PropertyName Gets or sets the property name.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/invalidpropertyvalueexception/",
	"title": "InvalidPropertyValueException",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class InvalidPropertyValueException : Exception  Base types Exception\nException when an the new value of a property of the ModelBase class is invalid.\nConstructors InvalidPropertyValueException(string propertyName, Type expectedType, Type actualType) Initializes a new instance of the InvalidPropertyValueException class.\nParameters    Name Description     propertyName Name of the property that caused the exception.   expectedType Expected type for the property.   actualType Actual object value type.    Properties ActualType Gets or sets the actual type.\nExpectedType Gets or sets the expected type.\nPropertyName Gets or sets the property name.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/invalidviewmodelexception/",
	"title": "InvalidViewModelException",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class InvalidViewModelException : Exception  Base types Exception\nException in case there is an invalid view model.\nConstructors InvalidViewModelException(string message) Initializes a new instance of the InvalidViewModelException class.\nParameters    Name Description     message The message.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/iocconfiguration/",
	"title": "IoCConfiguration",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class IoCConfiguration  Contains configurations for the IoC implementation in Catel.\nFields Properties DefaultDependencyResolver Gets or sets the default dependency resolver.\nDefaultServiceLocator Gets or sets the default service locator.\nDefaultTypeFactory Gets or sets the default type factory.\nMethods UpdateDefaultComponents() Updates the default components. This method should be called when any of the factory methods has been changed.\nExceptions    Name Description     System.Exception The method fails to create the IServiceLocator using the factory.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/iocconfigurationsection/",
	"title": "IoCConfigurationSection",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6    public class IoCConfigurationSection : ConfigurationSection  Base types ConfigurationSection\nIoC configuration section.\nExamples sectionGroup name = \u0026quot;catel\u0026quot; \u0026gt; \u0026lt; section name=\u0026quot;ioc\u0026quot; type=\u0026quot;Catel.IoC.IoCConfigurationSection, Catel.Core\u0026quot; /\u0026gt; \u0026lt;/sectionGroup\u0026gt; \u0026lt;/configSections\u0026gt; \u0026lt;catel\u0026gt; \u0026lt;ioc\u0026gt; \u0026lt;serviceLocatorConfigurations\u0026gt; \u0026lt;serviceLocatorConfiguration[name = \u0026quot;default\u0026quot;]\u0026gt; \u0026lt;register interfaceType = \u0026quot;Catel.Services.IUIVisualizerService\u0026quot; implementationType=\u0026quot;Catel.Services.UIVisualizerService\u0026quot; /\u0026gt; \u0026lt;register interfaceType = \u0026quot;Catel.Services.IProcessService\u0026quot; implementationType=\u0026quot;Catel.Services.ProcessService\u0026quot; /\u0026gt; \u0026lt;!-- Add more registrations here if is requiered --\u0026gt; \u0026lt;/serviceLocatorConfiguration\u0026gt; \u0026lt;serviceLocatorConfiguration name = \u0026quot;test\u0026quot; \u0026gt; \u0026lt; register interfaceType=\u0026quot;Catel.Services.IUIVisualizerService\u0026quot; implementationType=\u0026quot;Catel.Services.Test.UIVisualizerService\u0026quot; type=\u0026quot;Transient\u0026quot;/\u0026gt; \u0026lt;register interfaceType = \u0026quot;Catel.Services.IProcessService\u0026quot; implementationType=\u0026quot;Catel.Services.Test.ProcessService\u0026quot; /\u0026gt; \u0026lt;!-- Add more registrations here if is requiered --\u0026gt; \u0026lt;/serviceLocatorConfiguration\u0026gt; \u0026lt;/serviceLocatorConfigurations\u0026gt; \u0026lt;/ioc\u0026gt; \u0026lt;/catel\u0026gt; \u0026lt;/configuration\u0026gt;  Fields Properties DefaultServiceLocatorConfiguration Gets the Default service locator configuration.\nServiceLocatorConfigurationCollection Gets the IoC configuration collection.\nMethods GetServiceLocatorConfiguration(string name) Gets the service locator configuration from a given name.\nParameters    Name Description     name The name of the service locator configuration.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/iocfactory/",
	"title": "IoCFactory",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class IoCFactory  Factory responsible for creating IoC components.\nFields Constructors Properties CreateDependencyResolverFunc Gets or sets the create dependency resolverfunction.\nCreateServiceLocatorFunc Gets or sets the create service locator function.\nCreateTypeFactoryFunc Gets or sets the create default service locator function.\nMethods CreateServiceLocator(bool initializeServiceLocator) Creates a service locator with all the customized components.\nParameters    Name Description     initializeServiceLocator if set totrue, the IServiceLocator will be initialized using the IServiceLocatorInitializer interface.    Returns The newly created IServiceLocator.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/isselectedconverter/",
	"title": "IsSelectedConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class IsSelectedConverter : ValueConverterBase  Base types ValueConverterBase\nConverts a selected value to either true of false.\nRemarks This converter is very usefull when a mutual exclusive selection must be made Original code found at http://geekswithblogs.net/claraoscura/archive/2008/10/17/125901.aspx\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/isselectedvalueconverter/",
	"title": "IsSelectedValueConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class IsSelectedValueConverter : ValueConverterBase  Base types ValueConverterBase\nConverts a selected value to either true of false.\nRemarks This converter is very usefull when a mutual exclusive selection must be made Original code found at http://geekswithblogs.net/claraoscura/archive/2008/10/17/125901.aspx\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/jsonextensions/",
	"title": "JsonExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class JsonExtensions  Json extensions.\nFields Methods CreateReader(JToken token, ISerializationConfiguration configuration) Creates a json reader with the right configuration.\nParameters    Name Description     token The token.   configuration The configuration.    Returns The json reader.\nToJson(ModelBase model, ISerializationConfiguration configuration) Converters the specified model to a json string.\nParameters    Name Description     model The model.   configuration The configuration.    Returns System.String.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/jsonlogformatter/",
	"title": "JsonLogFormatter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6    public class JsonLogFormatter : IJsonLogFormatter  Base types\nIJsonLogFormatter\nThe formatter which formats all log info to Json.\nFields Constructors Methods FormatLogEvent(ILog log, string message, LogEvent logEvent, DateTime time) Formats the log infos.\nParameters    Name Description     log    message    logEvent    time     Returns Exceptions    Name Description     ArgumentNullException The log isnull.   ArgumentException The message isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.serialization.json/catel/runtime/serialization/json/jsonserializationconfiguration/",
	"title": "JsonSerializationConfiguration",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Serialization.Json   Namespace Catel.Runtime.Serialization.Json   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class JsonSerializationConfiguration : SerializationConfiguration  Base types SerializationConfiguration\nSerialization configuration with additional json configuration.\nProperties DateParseHandling Gets or sets the date parse handling.\nDateTimeKind Gets or sets the kind of the date time.\nDateTimeZoneHandling Gets or sets the date time zone handling.\nFormatting Gets or sets the json formatting.\nUseBson Gets or sets a value indicating whether the use bson instead of json.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.serialization.json/catel/runtime/serialization/json/jsonserializationcontextinfo/",
	"title": "JsonSerializationContextInfo",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Serialization.Json   Namespace Catel.Runtime.Serialization.Json   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class JsonSerializationContextInfo : ISerializationContextInfo  Base types\nISerializationContextInfo\nClass containing all information about the Json serialization context.\nConstructors JsonSerializationContextInfo(JsonSerializer jsonSerializer, JsonReader jsonReader, JsonWriter jsonWriter) Initializes a new instance of the JsonSerializationContextInfo class.\nParameters    Name Description     jsonSerializer The json serializer.   jsonReader The json reader.   jsonWriter The json writer.    Exceptions    Name Description     ArgumentNullException The jsonSerializer isnull.    Properties JsonArray Gets or sets the json array.\nJsonProperties Gets or sets the json properties used during deserialization.\nJsonReader Gets the json reader.\nJsonSerializer Gets the serialization info.\nJsonWriter Gets the json writer.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.serialization.json/catel/runtime/serialization/json/jsonserializationcontextinfofactory/",
	"title": "JsonSerializationContextInfoFactory",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Serialization.Json   Namespace Catel.Runtime.Serialization.Json   Available on .NET Framework 4.5, .NET Framework 4.6    public class JsonSerializationContextInfoFactory : ISerializationContextInfoFactory  Base types\nISerializationContextInfoFactory\nJson serialization context factory.\nMethods GetSerializationContextInfo(ISerializer serializer, object model, object data, ISerializationConfiguration configuration) Gets the serialization context information.\nParameters    Name Description     serializer The serializer.   model The model.   data The data.   configuration The configuration.    Returns ISerializationContextInfo.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.serialization.json/catel/runtime/serialization/json/jsonserializer/",
	"title": "JsonSerializer",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Serialization.Json   Namespace Catel.Runtime.Serialization.Json   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class JsonSerializer : IJsonSerializer, SerializerBase\u0026lt;JsonSerializationContextInfo\u0026gt;  Base types SerializerBase\nBase types\nIJsonSerializer\nThe binary serializer.\nFields GraphId The graph identifier.\nGraphRefId The graph reference identifier.\nTypeName The type name.\nConstructors JsonSerializer(ISerializationManager serializationManager, ITypeFactory typeFactory, IObjectAdapter objectAdapter) Initializes a new instance of the JsonSerializer class.\nParameters    Name Description     serializationManager The serialization manager.   typeFactory The type factory.   objectAdapter The object adapter.    Exceptions    Name Description     ArgumentNullException The serializationManager isnull.    Properties PreserveReferences Gets or sets a value indicating whether references should be preserved. This will add additional$graphid and$graphrefid properties to each json object.\nWriteTypeInfo Gets or sets a value indicating whether type information should be written to the json output.\nMethods Deserialize(Type modelType, JsonReader jsonReader, ISerializationConfiguration configuration) Deserializes the specified model from the json reader.\nParameters    Name Description     modelType Type of the model.   jsonReader The json reader.   configuration The configuration.    Returns The model.\nSerialize(object model, JsonWriter jsonWriter, ISerializationConfiguration configuration) Serializes the specified model to the json writer.\nParameters    Name Description     model The model.   jsonWriter The json writer.   configuration The configuration.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/keypresstocommand/",
	"title": "KeyPressToCommand",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class KeyPressToCommand : CommandBehaviorBase\u0026lt;FrameworkElement\u0026gt;  Base types CommandBehaviorBase\nBehavior that converts a key press on a specific UI element to a command.\nFields KeyProperty Using a DependencyProperty as the backing store for Key. This enables animation, styling, binding, etc\u0026hellip;\nProperties Key Gets or sets the key to which the behavior should respond.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/keyvaluepairserializermodifier/",
	"title": "KeyValuePairSerializerModifier",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class KeyValuePairSerializerModifier : SerializerModifierBase  Base types SerializerModifierBase\nSerializer modifier that supports key value pairs automatically.\nFields Methods DeserializeMember(ISerializationContext context, MemberValue memberValue) Deserializes the member.\nParameters    Name Description     context The context.   memberValue The member value.    SerializeMember(ISerializationContext context, MemberValue memberValue) Serializes the member.\nParameters    Name Description     context The context.   memberValue The member value.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/input/keyboardhelper/",
	"title": "KeyboardHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Input   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public static class KeyboardHelper  Helper class for the keyboard.\nMethods AreKeyboardModifiersPressed(ModifierKeys modifier, bool checkForExactModifiers) Determines whether the specified keyboard modifiers are currently pressed.\nParameters    Name Description     modifier One or more keyboard modifiers.   checkForExactModifiers if set totrue, this check requires the exact modifiers to be pressed.    Returns true if all the specified keyboard modifiers are being pressed; otherwise,false.\nGetCurrentlyPressedModifiers() Gets the currently pressed modifiers.\nReturns List of currently pressed modifiers.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/knownplatforms/",
	"title": "KnownPlatforms",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum KnownPlatforms : Enum  Base types Enum\nKnown platform groups.\nFields NET 1\nAny .NET platform.\nNET45 2\n.NET framework 4.5.\nNET46 3\n.NET framework 4.6.\nNET47 4\n.NET framework 4.7.\nNET50 5\n.NET framework 5.0.\nNetStandard 6\nAny .NET Standard platform.\nNetStandard20 7\n.NET Standard 2.0.\nPCL 13\nPortable Class Library platform.\nUnknown 0\nThe current platform is unknown.\nWindowsUniversal 8\nAny Windows Universal platform.\nXamarin 9\nAny Xamarin platform.\nXamarinAndroid 10\nThe Xamarin Android platform.\nXamarinForms 12\nThe xamarin forms platform.\nXamariniOS 11\nThe Xamarin iOS platform.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/markup/languagebinding/",
	"title": "LanguageBinding",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Markup   Available on .NET Framework 4.5, .NET Framework 4.6    public class LanguageBinding : UpdatableMarkupExtension  Base types UpdatableMarkupExtension\nBinding that uses the ILanguageService to retrieve the binding values.\nFields Constructors LanguageBinding() Initializes a new instance of the LanguageBinding class.\nLanguageBinding(string resourceName) Initializes a new instance of the LanguageBinding class.\nParameters    Name Description     resourceName Name of the resource.    Properties Culture Gets or sets the culture. If set tonull, it will be determined automatically.\nHideDesignTimeMessages Gets or sets a value indicating whether to hide design time messages or not.\nResourceName Gets or sets the resource name.\nMethods OnLanguageUpdated(object sender, EventArgs e) The language updated event.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    Remarks Must be public because this uses weak events.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/languageconverter/",
	"title": "LanguageConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class LanguageConverter : ValueConverterBase\u0026lt;string\u0026gt;  Base types ValueConverterBase\nConverts the value (the resource name) to a language string.\nFields Constructors LanguageConverter() Initializes a new instance of the LanguageConverter class.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/languagehelper/",
	"title": "LanguageHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class LanguageHelper  Static wrapper around the service locator to easily retrieve language values.\nFields Constructors Methods GetString(string resourceName, CultureInfo culture) Gets the string value using the specified culture.\nParameters    Name Description     resourceName Name of the resource.   culture The culture.    Returns System.String.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/languageresourcekey/",
	"title": "LanguageResourceKey",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class LanguageResourceKey : IEquatable\u0026lt;LanguageResourceKey\u0026gt;  Base types IEquatable\nLanguage resource key.\nConstructors LanguageResourceKey(string resourceName, CultureInfo cultureInfo) Initializes a new instance of the LanguageResourceKey class.\nParameters    Name Description     resourceName Name of the resource.   cultureInfo The culture information.    Properties CultureInfo Gets the culture information.\nResourceName Gets the name of the resource.\nMethods Equals(LanguageResourceKey other) Indicates whether the current object is equal to another object of the same type.\nParameters    Name Description     other An object to compare with this object.    Returns true if the current object is equal to the other parameter; otherwise, false.\nEquals(object obj) Determines whether the specified is equal to this instance.\nParameters    Name Description     obj The object to compare with the current object.    Returns true if the specified is equal to this instance; otherwise,false.\nGetHashCode() Returns a hash code for this instance.\nReturns A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/languageresourcesource/",
	"title": "LanguageResourceSource",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class LanguageResourceSource : ILanguageSource  Base types\nILanguageSource\nILanguageSource implementation for resource files.\nConstructors LanguageResourceSource(string assemblyName, string namespaceName, string resourceFileName) Initializes a new instance of the LanguageResourceSource class.\nParameters    Name Description     assemblyName Name of the assembly.   namespaceName Name of the namespace.   resourceFileName Name of the resource file.    Properties AssemblyName Gets the name of the assembly.\nNamespaceName Gets the name of the namespace.\nResourceFileName Gets the name of the resource file.\nMethods GetSource() Gets the source for the current language source.\nReturns The source string.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/languageservice/",
	"title": "LanguageService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class LanguageService : ILanguageService, LanguageServiceBase  Base types LanguageServiceBase\nBase types\nILanguageService\nService to implement the retrieval of language services.\nFields Constructors LanguageService() Initializes a new instance of the LanguageService class.\nProperties CacheResults Gets or sets a value indicating whether the results should be cached. The default value istrue.\nFallbackCulture Gets or sets the fallback culture.\nPreferredCulture Gets or sets the preferred culture.\nEvents LanguageUpdated Occurs when the FallbackCulture or PreferredCulture are updated.\nMethods ClearLanguageResources() Clears the language resources.\nGetString(ILanguageSource languageSource, string resourceName, CultureInfo cultureInfo) Gets the string from the specified resource file with the current culture.\nParameters    Name Description     languageSource The language source.   resourceName Name of the resource.   cultureInfo The culture information.    Returns The string ornull if the string cannot be found.\nExceptions    Name Description     ArgumentNullException The languageSource isnull.   ArgumentException The resourceName isnull.    GetString(string resourceName) Gets the string with the PreferredCulture. If the preferred language cannot be found, this method will use the FallbackCulture to retrieve the string.\nParameters    Name Description     resourceName Name of the resource.    Returns The string ornull if the resource cannot be found.\nExceptions    Name Description     ArgumentException The resourceName isnull.    GetString(string resourceName, CultureInfo cultureInfo) Gets the string with the specified culture.\nParameters    Name Description     resourceName Name of the resource.   cultureInfo The culture information.    Returns The string ornull if the resource cannot be found.\nExceptions    Name Description     ArgumentException The resourceName isnull.   ArgumentNullException The cultureInfo isnull.    PreloadLanguageSources() Preloads the language sources to provide optimal performance.\nRegisterLanguageSource(ILanguageSource languageSource) Registers the language source.\nParameters    Name Description     languageSource The language source.    Exceptions    Name Description     ArgumentNullException The languageSource isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/languageservicebase/",
	"title": "LanguageServiceBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class LanguageServiceBase  Abstract class to allow partial abstract methods.\nMethods GetString(ILanguageSource languageSource, string resourceName, CultureInfo cultureInfo) Gets the string from the specified resource file with the current culture.\nParameters    Name Description     languageSource The language source.   resourceName Name of the resource.   cultureInfo The culture information.    Returns The string ornull if the string cannot be found.\nExceptions    Name Description     ArgumentNullException The languageSource isnull.   ArgumentException The resourceName isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/lateboundimplementation/",
	"title": "LateBoundImplementation",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class LateBoundImplementation  Class representing a late-bound implementation. This means that a type registered in the ServiceLocator is registered with an unknown callback and the implementation type could not be determined at registration time.\nConstructors "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/collections/listdictionary/",
	"title": "ListDictionary",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Collections   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ListDictionary\u0026lt;TKey, TValue\u0026gt; : IDictionary\u0026lt;TKey, TValue\u0026gt;  Base types IDictionary\nImplements using a singly linked list. Recommended for collections that typically include fewer than 10 items.\nType Parameters TKey The type of keys in the dictionary.\nTValue The type of values in the dictionary.\nFields Constructors ListDictionary() Initializes a new instance of the Missing:  class.\nProperties Count Gets the count.\nIsReadOnly Gets a value indicating whether this instance is read only.\nKeys Gets an containing the keys of the Missing: .\nthis[] Gets or sets the element with the specified key.\nParameters    Name Description     key The key of the element to get or set.    Returns The element with the specified key.\nExceptions    Name Description     System.Collections.Generic.KeyNotFoundException The property is retrieved and key is not found.    Values Gets an containing the values in the Missing: .\nMethods Add(KeyValuePairitem) Adds an item.\nParameters    Name Description     item The object to add.    Add(TKey key, TValue value) Adds the specified key and value.\nParameters    Name Description     key The key.   value The value.    Clear() Removes all items.\nContains(KeyValuePairitem) Determines whether the Missing:  contains a specific value.\nParameters    Name Description     item The object to locate.    Returns true if item is found; otherwise, false.\nContainsKey(TKey key) Determines whether the dictionary contains key.\nParameters    Name Description     key The key.    Returns CopyTo(KeyValuePair[] array, int arrayIndex) Copies the elements to an, starting at a particular System.Array index.\nParameters    Name Description     array The one-dimensional that is the destination of the elements. The must have zero-based indexing.   arrayIndex The zero-based index in array at which copying begins.    GetEnumerator() Returns an enumerator that iterates through the collection.\nReturns A that can be used to iterate through the collection.\nRemove(KeyValuePairitem) Removes the first occurrence of a specific object from the Missing: .\nParameters    Name Description     item The item.    Returns Remove(TKey key) Removes the element with the specified key from the Missing: .\nParameters    Name Description     key The key of the element to remove.    Returns TryGetValue(TKey key, TValue value) Gets the value associated with the specified key.\nParameters    Name Description     key The key whose value to get.   value When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.    Returns true if the object contains an element with the specified key; otherwise, false.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/location/",
	"title": "Location",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class Location : ILocation  Base types\nILocation\nClass that represents a location.\nConstructors Location(double latitude, double longitude) Initializes a new instance of the Location class.\nParameters    Name Description     latitude The latitude.   longitude The longitude.    Location(double latitude, double longitude, double altitude) Initializes a new instance of the Location class.\nParameters    Name Description     latitude The latitude.   longitude The longitude.   altitude The altitude.    Properties Altitude Gets the altitude. The altitude is the height of the location.\nLatitude Gets the latitude. The latitute is the angular distance of that location south or north of the equator.\nLongitude Gets the longitude. The longitude specifies the east-west position of a point on the Earth\u0026rsquo;s surface.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/locationchangedeventargs/",
	"title": "LocationChangedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class LocationChangedEventArgs : EventArgs  Base types EventArgs\nimplementation which contains a location.\nConstructors LocationChangedEventArgs(ILocation newLocation) Initializes a new instance of the LocationChangedEventArgs class.\nParameters    Name Description     newLocation The new location.    Exceptions    Name Description     ArgumentNullException The newLocation isnull.    Properties Location Gets the new location.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/locationlistener/",
	"title": "LocationListener",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on Xamarin - Android    public class LocationListener : Thread  Base types Thread\nA location listener.\nFields Events LocationChanged Occurs when the location has changed.\nStatusChanged Occurs when the status has changed.\nMethods OnLocationChanged(Location location) Called when the location has changed.\nParameters    Name Description     location The new location, as a Location object.    OnProviderDisabled(string provider) Called when the provider is disabled by the user.\nParameters    Name Description     provider The name of the location provider associated with this update.    OnProviderEnabled(string provider) Called when the provider is enabled by the user.\nParameters    Name Description     provider The name of the location provider associated with this update.    OnStatusChanged(string provider, Availability status, Bundle extras) Called when the provider status changes.\nParameters    Name Description     provider The name of the location provider associated with this update.   status The status.   extras The extras.    Run() Calls therun() method of the Runnable object the receiver holds.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/locationservice/",
	"title": "LocationService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class LocationService : LocationServiceBase  Base types LocationServiceBase\nImplementation of the ILocationService\nFields Constructors LocationService(IDispatcherService dispatcherService) Initializes a new instance of the LocationService class.\nParameters    Name Description     dispatcherService The dispatcher service.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/locationservicebase/",
	"title": "LocationServiceBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class LocationServiceBase : ILocationService  Base types\nILocationService\nClass to allow partial abstract methods.\nFields Constructors Properties CurrentLocation Gets the current location represented as ILocation. If no location is available,null will be returned.\nRemarks This is convenience property that internally calls GetCurrentLocation. Note that the services inside Catel do not support, thus you cannot subscribe to changes of this property. Instead, subscribe to the LocationChanged event.\nEvents LocationChanged Occurs when the current location has changed.\nMethods GetCurrentLocation() Gets the current location.\nReturns The current location represented as ILocation. If no location is available,null will be returned.\nStart() Starts the location service so it\u0026rsquo;s retrieving data.\nReturns true if the service started successfully; otherwisefalse.\nStop() Stops the location service so it\u0026rsquo;s no longer retrieving data.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/locatorbase/",
	"title": "LocatorBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class LocatorBase : ILocator  Base types\nILocator\nBase class for all locators. This class implements the shared logic so only custom logic has to be implemented by new locator classes.\nFields Constructors Properties NamingConventions Gets or sets the naming conventions to use to locate types. By adding or removing conventions to this property, the service can use custom resolving of types. Each implementation should add its own default naming convention.\nMethods ClearCache() Clears the cache of the resolved naming conventions.\nRemarks Note that clearing the cache will also clear all manually registered values registered via the String) method.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/log/",
	"title": "Log",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class Log : ILog  Base types\nILog\nDefault logging class that writes to the console or output window.\nFields Constructors Log(Type targetType) Initializes a new instance of the Log class.\nParameters    Name Description     targetType The type for which this logger is intended.    Exceptions    Name Description     ArgumentException If targetType isnull.    Log(string name) Initializes a new instance of the Log class.\nParameters    Name Description     name The name of this logger.    Exceptions    Name Description     ArgumentException If name is null or a whitespace.    Log(string name, Type targetType) Initializes a new instance of the Log class.\nParameters    Name Description     name The name of this logger.   targetType The type for which this logger is intended.    Exceptions    Name Description     ArgumentException If name is null or a whitespace.    Properties IndentLevel Gets or sets the indent level. The default value is0.\nExceptions    Name Description     ArgumentOutOfRangeException Thevalue is negative.    IndentSize Gets or sets the size of the indent. The default value is2.\nExceptions    Name Description     ArgumentOutOfRangeException The value is negative.    IsCatelLogging Gets a value indicating whether this logger is a Catel logger. This value can be useful to exclude Catel logging for external listeners.\nName Gets the name of the logger.\nTag Gets or sets the tag.\nTargetType Gets the target type of the log. This is the type where the log is created for.\nEvents LogMessage Occurs when a message is written to the log.\nMethods Indent() Increases the IndentLevel by1.\nUnindent() Decreases the IndentLevel by1.\nWriteWithData(string message, LogData logData, LogEvent logEvent) Writes the specified message as error message with log data.\nParameters    Name Description     message The message.   logData The log data.   logEvent The log event.    WriteWithData(string message, object extraData, LogEvent logEvent) Writes the specified message as specified log event with extra data.\nParameters    Name Description     message The message.   extraData The extra data.   logEvent The log event.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/logbatchentry/",
	"title": "LogBatchEntry",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class LogBatchEntry : LogEntry  Base types LogEntry\nRepresents a log entry inside a batch.\nConstructors LogBatchEntry(ILog log, string message, LogEvent logEvent, object extraData, LogData logData, DateTime time) Initializes a new instance of the LogBatchEntry class.\nParameters    Name Description     log The log.   message The message.   logEvent The log event.   extraData The extra data.   logData The log data.   time The time.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/logdata/",
	"title": "LogData",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class LogData : Dictionary\u0026lt;string, object\u0026gt;  Base types Dictionary\nClass containing log data.\nConstructors LogData() Initializes a new instance of the LogData class.\nLogData(IDictionaryvalues) Initializes a new instance of the LogData class.\nParameters    Name Description     values The values.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/logentry/",
	"title": "LogEntry",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class LogEntry  Log entry class.\nFields Constructors LogEntry(ILog log, string message, LogEvent logEvent, object extraData, LogData logData, DateTime time) Initializes a new instance of the LogEntry class.\nParameters    Name Description     log The log.   message The message.   logEvent The log event.   extraData The extra data.   logData The log data.   time The time.    LogEntry(LogMessageEventArgs eventArgs) Initializes a new instance of the LogEntry class.\nParameters    Name Description     eventArgs The event args.    Properties Data Gets the log data attached to this log entry.\nExtraData Gets the extra data.\nLog Gets the log.\nLogEvent Gets the log event.\nMessage Gets the message.\nTime Gets the time.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/logevent/",
	"title": "LogEvent",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum LogEvent : Enum  Base types Enum\nDifferent types of logging events.\nFields Debug Debug message.\nError Error message.\nInfo Info message.\nStatus Status message.\nWarning Warning message.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/logextensions/",
	"title": "LogExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class LogExtensions  Extensions to the ILog interface.\nFields Methods Debug(ILog log) Writes an empty line as debug message.\nParameters    Name Description     log The log.    Debug(ILog log, LogEvent logEvent, string messageFormat, object s1) Writes the specified message as debug message.\nParameters    Name Description     log The log.   logEvent The log event.   messageFormat The message format.   s1 The format argument 1    Debug(ILog log, Exception exception) Writes the specified message as debug message.\nParameters    Name Description     log The log.   exception The exception.    Exceptions    Name Description     ArgumentNullException The exception isnull.    Debug(ILog log, Exception exception, string messageFormat, object[] args) Writes the specified message as debug message.\nParameters    Name Description     log The log.   exception The exception.   messageFormat The message format.   args The formatting arguments.    Exceptions    Name Description     ArgumentNullException The exception isnull.    Debug(ILog log, string messageFormat, object s1, object s2) Writes the specified message as debug message.\nParameters    Name Description     log The log.   messageFormat The message format.   s1 The format argument 1   s2 The format argument 2    Debug(ILog log, string messageFormat, object s1, object s2, object s3) Writes the specified message as debug message.\nParameters    Name Description     log The log.   messageFormat The message format.   s1 The format argument 1   s2 The format argument 2   s3 The format argument 3    Debug(ILog log, string messageFormat, object s1, object s2, object s3, object s4) Writes the specified message as debug message.\nParameters    Name Description     log The log.   messageFormat The message format.   s1 The format argument 1   s2 The format argument 2   s3 The format argument 3   s4 The format argument 4    Debug(ILog log, string messageFormat, object s1, object s2, object s3, object s4, object s5, object[] others) Writes the specified message as debug message.\nParameters    Name Description     log The log.   messageFormat The message format.   s1 The format argument 1   s2 The format argument 2   s3 The format argument 3   s4 The format argument 4   s5 The format argument 5   others The othersm format arguments    Debug(ILog log, string messageFormat, object[] args) Writes the specified message as debug message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The formatting arguments.    DebugAndStatus(ILog log) Writes an empty line as debug and status message.\nParameters    Name Description     log The log.    DebugAndStatus(ILog log, string messageFormat, object[] args) Writes the specified message as debug and status message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The formatting arguments.    DebugWithData(ILog log, Exception exception, string message, object extraData) Writes the specified message as debug message with extra data.\nParameters    Name Description     log The log.   exception The exception.   message The message.   extraData The extra data.    Exceptions    Name Description     ArgumentNullException The exception isnull.    DebugWithData(ILog log, string message, LogData logData) Writes the specified message as debug message with log data.\nParameters    Name Description     log The log.   message The message.   logData The log data.    DebugWithData(ILog log, string message, object extraData) Writes the specified message as debug message with extra data.\nParameters    Name Description     log The log.   message The message.   extraData The extra data.    Error(ILog log) Writes an empty line as error message.\nParameters    Name Description     log The log.    Error(ILog log, Exception exception) Writes the specified message as error message.\nParameters    Name Description     log The log.   exception The exception.    Exceptions    Name Description     ArgumentNullException The exception isnull.    Error(ILog log, Exception exception, string messageFormat, object[] args) Writes the specified message as error message.\nParameters    Name Description     log The log.   exception The exception.   messageFormat The message format.   args The formatting arguments.    Exceptions    Name Description     ArgumentNullException The exception isnull.    Error(ILog log, string messageFormat, object s1) Writes the specified message as error message.\nParameters    Name Description     log The log.   messageFormat The message format.   s1 The formatting arguments.    Error(ILog log, string messageFormat, object s1, object s2) Writes the specified message as error message.\nParameters    Name Description     log The log.   messageFormat The message format.   s1 The .   s2     Error(ILog log, string messageFormat, object s1, object s2, object s3) Writes the specified message as error message.\nParameters    Name Description     log The log.   messageFormat The message format.   s1 The formatting argument 1.   s2 The formatting argument 2.   s3 The formatting argument 3.    Error(ILog log, string messageFormat, object s1, object s2, object s3, object s4) Writes the specified message as error message.\nParameters    Name Description     log The log.   messageFormat The message format.   s1 The formatting argument 1.   s2 The formatting argument 2.   s3 The formatting argument 3.   s4 The formatting argument 4.    Error(ILog log, string messageFormat, object s1, object s2, object s3, object s4, object s5, object[] others) Writes the specified message as error message.\nParameters    Name Description     log The log.   messageFormat The message format.   s1 The formatting argument 1.   s2 The formatting argument 2.   s3 The formatting argument 3.   s4 The formatting argument 4.   s5 The formatting argument 5.   others The formatting arguments.    Error(ILog log, string messageFormat, object[] args) Writes the specified message as error message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The formatting arguments.    ErrorAndCreateException(ILog log, Exception innerException, FunccreateExceptionCallback, string messageFormat, object[] args) Writes the specified message as error message and then throws the specified exception. The specified exception must have a constructor that accepts a single string as message.\nType Parameters TException The type of the exception.\nParameters    Name Description     log The log.   innerException The inner exception.   createExceptionCallback The create exception callback.   messageFormat The message format.   args The args.    Returns Exception.\nExceptions    Name Description     System.NotSupportedException    ArgumentNullException    NotSupportedException The log isnull.    Examples This example logs an error and immediately throws the exception: throw Log.ErrorAndCreateException\u0026lt;NotSupportedException\u0026gt;(\u0026quot;This action is not supported\u0026quot;);  ErrorAndCreateException(ILog log, Exception innerException, string messageFormat, object[] args) Writes the specified message as error message and then throws the specified exception. The specified exception must have a constructor that accepts a single string as message.\nType Parameters TException The type of the exception.\nParameters    Name Description     log The log.   innerException The inner exception.   messageFormat The message format.   args The args.    Returns Exception.\nExceptions    Name Description     System.NotSupportedException    ArgumentNullException The log isnull.   NotSupportedException The TException does not have a constructor accepting a string.    Examples This example logs an error and immediately throws the exception: throw Log.ErrorAndCreateException\u0026lt;NotSupportedException\u0026gt;(\u0026quot;This action is not supported\u0026quot;);  ErrorAndCreateException(ILog log, FunccreateExceptionCallback, string messageFormat, object[] args) Writes the specified message as error message and then throws the specified exception. The specified exception must have a constructor that accepts a single string as message.\nType Parameters TException The type of the exception.\nParameters    Name Description     log The log.   createExceptionCallback The create exception callback.   messageFormat The message format.   args The args.    Returns Exception.\nExceptions    Name Description     ArgumentNullException The log isnull.   NotSupportedException The TException does not have a constructor accepting a string.    Examples This example logs an error and immediately throws the exception: throw Log.ErrorAndCreateException\u0026lt;NotSupportedException\u0026gt;(\u0026quot;This action is not supported\u0026quot;);  ErrorAndCreateException(ILog log, string messageFormat, object[] args) Writes the specified message as error message and then throws the specified exception. The specified exception must have a constructor that accepts a single string as message.\nType Parameters TException The type of the exception.\nParameters    Name Description     log The log.   messageFormat The message format.   args The args.    Exceptions    Name Description     ArgumentNullException The log isnull.   NotSupportedException The TException does not have a constructor accepting a string.    Examples This example logs an error and immediately throws the exception: throw Log.ErrorAndCreateException\u0026lt;NotSupportedException\u0026gt;(\u0026quot;This action is not supported\u0026quot;);  ErrorAndStatus(ILog log) Writes an empty line as error and status message.\nParameters    Name Description     log The log.    ErrorAndStatus(ILog log, string messageFormat, object[] args) Writes the specified message as error and status message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The formatting arguments.    ErrorWithData(ILog log, Exception exception, string message, object extraData) Writes the specified message as error message with extra data.\nParameters    Name Description     log The log.   exception The exception.   message The message.   extraData The extra data.    Exceptions    Name Description     ArgumentNullException The exception isnull.    ErrorWithData(ILog log, string message, LogData logData) Writes the specified message as error message with log data.\nParameters    Name Description     log The log.   message The message.   logData The log data.    ErrorWithData(ILog log, string message, object extraData) Writes the specified message as error message with extra data.\nParameters    Name Description     log The log.   message The message.   extraData The extra data.    Info(ILog log) Writes an empty line as info message.\nParameters    Name Description     log The log.    Info(ILog log, Exception exception) Writes the specified message as info message.\nParameters    Name Description     log The log.   exception The exception.    Exceptions    Name Description     ArgumentNullException The exception isnull.    Info(ILog log, Exception exception, string messageFormat, object[] args) Writes the specified message as info message.\nParameters    Name Description     log The log.   exception The exception.   messageFormat The message format.   args The formatting arguments.    Exceptions    Name Description     ArgumentNullException The exception isnull.    Info(ILog log, string messageFormat, object[] args) Writes the specified message as info message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The formatting arguments.    InfoAndStatus(ILog log) Writes an empty line as info and status message.\nParameters    Name Description     log The log.    InfoAndStatus(ILog log, string messageFormat, object[] args) Writes the specified message as info and status message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The formatting arguments.    InfoWithData(ILog log, Exception exception, string message, object extraData) Writes the specified message as info message with extra data.\nParameters    Name Description     log The log.   exception The exception.   message The message.   extraData The extra data.    Exceptions    Name Description     ArgumentNullException The exception isnull.    InfoWithData(ILog log, string message, LogData logData) Writes the specified message as info message with log data.\nParameters    Name Description     log The log.   message The message.   logData The log data.    InfoWithData(ILog log, string message, object extraData) Writes the specified message as info message with extra data.\nParameters    Name Description     log The log.   message The message.   extraData The extra data.    LogDebugHeading(ILog log, string headingContent, string messageFormat, object[] args) Logs a heading as a debug message.\nParameters    Name Description     log The log.   headingContent Content of the heading.   messageFormat The message format.   args The arguments.    LogDebugHeading1(ILog log, string messageFormat, object[] args) Logs a heading as a debug message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The arguments.    LogDebugHeading2(ILog log, string messageFormat, object[] args) Logs a heading as a debug message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The arguments.    LogDebugHeading3(ILog log, string messageFormat, object[] args) Logs a heading as a debug message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The arguments.    LogDeviceInfo(ILog log) Logs the device info.\nParameters    Name Description     log The log.    LogErrorHeading(ILog log, string headingContent, string messageFormat, object[] args) Logs a heading as a error message.\nParameters    Name Description     log The log.   headingContent Content of the heading.   messageFormat The message format.   args The arguments.    LogErrorHeading1(ILog log, string messageFormat, object[] args) Logs a heading as a error message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The arguments.    LogErrorHeading2(ILog log, string messageFormat, object[] args) Logs a heading as a error message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The arguments.    LogErrorHeading3(ILog log, string messageFormat, object[] args) Logs a heading as a error message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The arguments.    LogHeading(ILog log, LogEvent logEvent, string headingContent, string messageFormat, object[] args) Logs a heading.\nParameters    Name Description     log The log.   logEvent The log event.   headingContent Content of the heading.   messageFormat The message format.   args The arguments.    LogInfoHeading(ILog log, string headingContent, string messageFormat, object[] args) Logs a heading as a info message.\nParameters    Name Description     log The log.   headingContent Content of the heading.   messageFormat The message format.   args The arguments.    LogInfoHeading1(ILog log, string messageFormat, object[] args) Logs a heading as a info message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The arguments.    LogInfoHeading2(ILog log, string messageFormat, object[] args) Logs a heading as a info message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The arguments.    LogInfoHeading3(ILog log, string messageFormat, object[] args) Logs a heading as a info message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The arguments.    LogProductInfo(ILog log) Logs the product info with version information.\nParameters    Name Description     log The log.    LogWarningHeading(ILog log, string headingContent, string messageFormat, object[] args) Logs a heading as a warning message.\nParameters    Name Description     log The log.   headingContent Content of the heading.   messageFormat The message format.   args The arguments.    LogWarningHeading1(ILog log, string messageFormat, object[] args) Logs a heading as a warning message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The arguments.    LogWarningHeading2(ILog log, string messageFormat, object[] args) Logs a heading as a warning message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The arguments.    LogWarningHeading3(ILog log, string messageFormat, object[] args) Logs a heading as a warning message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The arguments.    Status(ILog log) Writes an empty line as status message.\nParameters    Name Description     log The log.    Status(ILog log, string messageFormat, object s1) Writes the specified message as status message.\nParameters    Name Description     log The log.   messageFormat The message format.   s1 The formatting arguments.    Status(ILog log, string messageFormat, object s1, object s2) Writes the specified message as status message.\nParameters    Name Description     log The log.   messageFormat The message format.   s1 The formatting argument 1.   s2 The formatting argument 2.    Status(ILog log, string messageFormat, object s1, object s2, object s3) Writes the specified message as status message.\nParameters    Name Description     log The log.   messageFormat The message format.   s1 The formatting argument 1.   s2 The formatting argument 2.   s3 The formatting argument 3.    Status(ILog log, string messageFormat, object s1, object s2, object s3, object s4) Writes the specified message as status message.\nParameters    Name Description     log The log.   messageFormat The message format.   s1 The formatting argument 1.   s2 The formatting argument 2.   s3 The formatting argument 3.   s4 The formatting argument 4.    Status(ILog log, string messageFormat, object s1, object s2, object s3, object s4, object s5, object[] others) Writes the specified message as status message.\nParameters    Name Description     log The log.   messageFormat The message format.   s1 The formatting argument 1.   s2 The formatting argument 2.   s3 The formatting argument 3.   s4 The formatting argument 4.   s5 The formatting argument 5.   others The formatting arguments.    Status(ILog log, string messageFormat, object[] args) Writes the specified message as status message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The formatting arguments.    Warning(ILog log) Writes an empty line as warning message.\nParameters    Name Description     log The log.    Warning(ILog log, Exception exception) Writes the specified message as warning message.\nParameters    Name Description     log The log.   exception The exception.    Exceptions    Name Description     ArgumentNullException The exception isnull.    Warning(ILog log, Exception exception, string messageFormat, object[] args) Writes the specified message as warning message.\nParameters    Name Description     log The log.   exception The exception.   messageFormat The message format.   args The formatting arguments.    Exceptions    Name Description     ArgumentNullException The exception isnull.    Warning(ILog log, string messageFormat, object s1) Writes the specified message as warning message.\nParameters    Name Description     log The log.   messageFormat The message format.   s1 The formatting arguments.    Warning(ILog log, string messageFormat, object s1, object s2) Writes the specified message as warning message.\nParameters    Name Description     log The log.   messageFormat The message format.   s1 The formatting argument 1.   s2 The formatting argument 2.    Warning(ILog log, string messageFormat, object s1, object s2, object s3) Writes the specified message as warning message.\nParameters    Name Description     log The log.   messageFormat The message format.   s1 The formatting argument 1.   s2 The formatting argument 2.   s3 The formatting argument 3.    Warning(ILog log, string messageFormat, object s1, object s2, object s3, object s4) Writes the specified message as warning message.\nParameters    Name Description     log The log.   messageFormat The message format.   s1 The formatting argument 1.   s2 The formatting argument 2.   s3 The formatting argument 3.   s4 The formatting argument 4.    Warning(ILog log, string messageFormat, object s1, object s2, object s3, object s4, object s5, object[] others) Writes the specified message as warning message.\nParameters    Name Description     log The log.   messageFormat The message format.   s1 The formatting argument 1.   s2 The formatting argument 2.   s3 The formatting argument 3.   s4 The formatting argument 4.   s5 The formatting argument 5.   others The formatting arguments.    Warning(ILog log, string messageFormat, object[] args) Writes the specified message as warning message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The formatting arguments.    WarningAndStatus(ILog log) Writes an empty line as warning and status message.\nParameters    Name Description     log The log.    WarningAndStatus(ILog log, string messageFormat, object[] args) Writes the specified message as warning and status message.\nParameters    Name Description     log The log.   messageFormat The message format.   args The formatting arguments.    WarningWithData(ILog log, Exception exception, string message, object extraData) Writes the specified message as warning message with extra data.\nParameters    Name Description     log The log.   exception The exception.   message The message.   extraData The extra data.    Exceptions    Name Description     ArgumentNullException The exception isnull.    WarningWithData(ILog log, string message, LogData logData) Writes the specified message as warning message with log data.\nParameters    Name Description     log The log.   message The message.   logData The log data.    WarningWithData(ILog log, string message, object extraData) Writes the specified message as warning message with extra data.\nParameters    Name Description     log The log.   message The message.   extraData The extra data.    Write(ILog log, LogEvent logEvent, Exception exception, string messageFormat, object[] args) Writes the specified message as the specified log event.\nParameters    Name Description     log The log.   logEvent The log event.   exception The exception.   messageFormat The message format.   args The formatting arguments.    Exceptions    Name Description     ArgumentNullException The exception isnull.    Write(ILog log, LogEvent logEvent, string messageFormat, object s1) Writes the specified message as the specified log event.\nParameters    Name Description     log The log.   logEvent The log event.   messageFormat The message format.   s1 The formatting argument 1.    Write(ILog log, LogEvent logEvent, string messageFormat, object s1, object s2) Writes the specified message as the specified log event.\nParameters    Name Description     log The log.   logEvent The log event.   messageFormat The message format.   s1 The formatting argument 1.   s2 The formatting argument 2.    Write(ILog log, LogEvent logEvent, string messageFormat, object s1, object s2, object s3) Writes the specified message as the specified log event.\nParameters    Name Description     log The log.   logEvent The log event.   messageFormat The message format.   s1 The formatting argument 1.   s2 The formatting argument 2.   s3 The formatting argument 3.    Write(ILog log, LogEvent logEvent, string messageFormat, object s1, object s2, object s3, object s4) Writes the specified message as the specified log event.\nParameters    Name Description     log The log.   logEvent The log event.   messageFormat The message format.   s1 The formatting argument 1.   s2 The formatting argument 2.   s3 The formatting argument 3.   s4 The formatting argument 4.    Write(ILog log, LogEvent logEvent, string messageFormat, object s1, object s2, object s3, object s4, object s5, object[] others) Writes the specified message as the specified log event.\nParameters    Name Description     log The log.   logEvent The log event.   messageFormat The message format.   s1 The formatting argument 1.   s2 The formatting argument 2.   s3 The formatting argument 3.   s4 The formatting argument 4.   s5 The formatting argument 5.   others The formatting arguments.    Write(ILog log, LogEvent logEvent, string messageFormat, object[] args) Writes the specified message as the specified log event.\nParameters    Name Description     log The log.   logEvent The log event.   messageFormat The message format.   args The formatting arguments.    WriteWithData(ILog log, Exception exception, string message, object extraData, LogEvent logEvent) Writes the specified message as specified log event with extra data.\nParameters    Name Description     log The log.   exception The exception.   message The message.   extraData The extra data.   logEvent The log event.    Exceptions    Name Description     ArgumentNullException The exception isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/loglistenerbase/",
	"title": "LogListenerBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class LogListenerBase : ILogListener  Base types\nILogListener\nAbstract base class that implements the ILogListener interface.\nFields Constructors Properties IgnoreCatelLogging Gets or sets a value indicating whether to ignore Catel logging.\nIsDebugEnabled Gets or sets a value indicating whether this listener is interested in debug messages. This default value istrue.\nIsErrorEnabled Gets or sets a value indicating whether this listener is interested in error messages. This default value istrue.\nIsInfoEnabled Gets or sets a value indicating whether this listener is interested in info messages. This default value istrue.\nIsStatusEnabled Gets or sets a value indicating whether this listener is interested in status messages. This default value istrue.\nIsWarningEnabled Gets or sets a value indicating whether this listener is interested in warning messages. This default value istrue.\nTimeDisplay Gets or sets a value indicating what format of time to use. This default value isTime.\nEvents LogMessage Occurs when a log message is written to one of the logs.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/loglistenerconfiguration/",
	"title": "LogListenerConfiguration",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6    public class LogListenerConfiguration : ConfigurationElement  Base types ConfigurationElement\nThe log listener configuration element.\nFields Constructors LogListenerConfiguration() Initializes a new instance of the LogListenerConfiguration class.\nProperties Type Gets or sets the type.\nMethods GetLogListener(Assembly assembly) Gets the log listener which this configuration represents.\nParameters    Name Description     assembly The assembly to load the product info from. Ifnull, the entry assembly will be used.    Returns The ILogListener.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/loglistenerconfigurationcollection/",
	"title": "LogListenerConfigurationCollection",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6    public class LogListenerConfigurationCollection : ConfigurationElementCollection  Base types ConfigurationElementCollection\nThe log listeners configuration collection.\nFields Properties CollectionType The collection type.\nReturns The ConfigurationElementCollectionType of this collection.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/logmanager/",
	"title": "LogManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class LogManager  Log manager that allows external libraries to subscribe to logging of Catel. The manager automatically adds an instance of the DebugLogListener to the list of listeners so the tracing is available in debug mode. To remove this listener, call ClearListeners before doing any initialization.\nFields Constructors Properties IgnoreCatelLogging Gets a value indicating whether the global IgnoreCatelLogging should be overriden. Note that this value will override all settings of each listener globally. If this value is set tonull, nothing will be overriden.\nIsDebugEnabled Gets a value indicating whether the global IsDebugEnabled should be overriden. Note that this value will override all settings of each listener globally. If this value is set tonull, nothing will be overriden.\nIsErrorEnabled Gets a value indicating whether the global IsErrorEnabled should be overriden. Note that this value will override all settings of each listener globally. If this value is set tonull, nothing will be overriden.\nIsInfoEnabled Gets a value indicating whether the global IsInfoEnabled should be overriden. Note that this value will override all settings of each listener globally. If this value is set tonull, nothing will be overriden.\nIsStatusEnabled Gets a value indicating whether the global IsStatusEnabled should be overriden. Note that this value will override all settings of each listener globally. If this value is set tonull, nothing will be overriden.\nIsWarningEnabled Gets a value indicating whether the global IsWarningEnabled should be overriden. Note that this value will override all settings of each listener globally. If this value is set tonull, nothing will be overriden.\nEvents LogMessage Occurs when a log message is written to one of the logs.\nMethods AddDebugListener(bool ignoreCatelLogging) Registers the default debug listener. Starting with Catel 2.4, the debug listener is no longer attached for performance reasons. To register the debug listener, call this method. When an instance of the DebugLogListener is already registered, the existing instance is returned.\nReturns The newly created or existing DebugLogListener.\nAddListener(ILogListener listener) Adds a log listener which will receive all log events. This method does not check whether the listener is already added to the list of registered listeners.\nParameters    Name Description     listener The listener.    Exceptions    Name Description     ArgumentNullException The listener isnull.    ClearListeners() Clears all the current listeners.\nFlushAll() Flushes all listeners that implement the IBatchLogListener by calling FlushAsync.\nGetCurrentClassLogger() Gets the current class logger.\nReturns GetListeners() Gets all the currently registered log listeners.\nReturns An enumerable of all listeners.\nGetLogger(Type type) Gets the logger for the specified type.\nParameters    Name Description     type The type.    Returns The ILog object for the specified type.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetLogger(string name) Gets the logger with the specified name.\nParameters    Name Description     name The name of the logger.    Returns The ILog object with the specified name.\nExceptions    Name Description     ArgumentException If name is null or a whitespace.    GetLogger(string name, Type type) Gets the logger with the specified name and type.\nParameters    Name Description     name The name of the logger.   type The type.    Returns The ILog object with the specified name.\nExceptions    Name Description     ArgumentException If name is null or a whitespace.   ArgumentNullException The type isnull.    GetLogger() Gets the logger for the specified generic type.\nType Parameters T The type.\nReturns The ILog object for the specified type.\nIsListenerRegistered(ILogListener listener) Determines whether the specified listener is already registered or not.\nParameters    Name Description     listener The listener.    Returns true if the specified listener is already registered; otherwise,false.\nExceptions    Name Description     ArgumentNullException The listener isnull.    LoadListenersFromConfiguration(Configuration configuration, Assembly assembly) Loads the listeners from the specified configuration.\nParameters    Name Description     configuration The configuration.   assembly The assembly to determine product info. Ifnull, the entry assembly will be used.    LoadListenersFromConfigurationFile(string configurationFilePath, Assembly assembly) Loads the listeners from the specified configuration file.\nParameters    Name Description     configurationFilePath The configuration file path.   assembly The assembly to determine product info. Ifnull, the entry assembly will be used.    RemoveListener(ILogListener listener) Removes the a log listener which will stop receiving all log events.\nParameters    Name Description     listener The listener.    Exceptions    Name Description     ArgumentNullException The listener isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/logmessageeventargs/",
	"title": "LogMessageEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class LogMessageEventArgs : EventArgs  Base types EventArgs\nEvent args containing information about a message that has been written to a log.\nConstructors LogMessageEventArgs(ILog log, string message, object extraData, LogData logData, LogEvent logEvent) Initializes a new instance of the LogMessageEventArgs class.\nParameters    Name Description     log The log.   message The message.   extraData The extra data.   logData The log data.   logEvent The log event.    LogMessageEventArgs(ILog log, string message, object extraData, LogData logData, LogEvent logEvent, DateTime time) Initializes a new instance of the LogMessageEventArgs class.\nParameters    Name Description     log The log.   message The message.   extraData The extra data.   logData The log data.   logEvent The log event.   time The time.    Properties ExtraData Gets the extra data.\nLog Gets the log the message was written to.\nLogData Gets the log data attached to this log entry.\nLogEvent Gets the log event.\nMessage Gets the message that was written to the log.\nTag Gets the tag, which is automatically retrieved via the ILog.\nTime Gets the time at which the message was written to the log.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/loggingconfigurationsection/",
	"title": "LoggingConfigurationSection",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6    public class LoggingConfigurationSection : ConfigurationSection  Base types ConfigurationSection\nLogging configuration section.\nExamples sectionGroup name = \u0026quot;catel\u0026quot; \u0026gt; \u0026lt; section name=\u0026quot;logging\u0026quot; type=\u0026quot;Catel.Logging.LoggingConfigurationSection, Catel.Core\u0026quot; /\u0026gt; \u0026lt;/sectionGroup\u0026gt; \u0026lt;/configSections\u0026gt; \u0026lt;catel\u0026gt; \u0026lt;logging\u0026gt; \u0026lt;listeners\u0026gt; \u0026lt;listener type = \u0026quot;Catel.Logging.FileLogListener\u0026quot; [IsDebugEnabled = \u0026quot;true\u0026quot;] [IsInfoEnabled = \u0026quot;true\u0026quot;] [IsWarningEnabled = \u0026quot;true\u0026quot;] [IsErrorEnabled = \u0026quot;true\u0026quot;] [IgnoreCatelLogging = \u0026quot;true\u0026quot;] /\u0026gt; \u0026lt;/ listeners \u0026gt; \u0026lt;/ logging \u0026gt; \u0026lt;/ catel \u0026gt; \u0026lt;/ configuration \u0026gt;  Fields Properties LogListenerConfigurationCollection Gets the logging configuration collection.\nMethods GetLogListeners(Assembly assembly) Gets the log listeners.\nParameters    Name Description     assembly The assembly to load the product info from. Ifnull, the entry assembly will be used.    Returns IEnumerable{ILogListener}.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/providers/logicbase/",
	"title": "LogicBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Providers   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class LogicBase : IUniqueIdentifyable, IViewLoadState, ObservableObject  Base types ObservableObject\nBase types\nIUniqueIdentifyable,IViewLoadState\nBase implementation of the behaviors, which defines all the different possible situations a behavior must implement / support to be a valid MVVM provider behavior.\nFields Constructors Properties IsTargetViewLoaded Gets a value indicating whether the target control is loaded or not.\nPreventViewModelCreation Gets or sets a value indicating whether the view model container should prevent the creation of a view model. This property is very useful when using views in transitions where the view model is no longer required.\nUniqueIdentifier Gets the unique identifier.\nViewModel Gets or sets the view model.\nRemarks When a new value is set, the old view model will be disposed.\nViewModelBehavior Gets the view model behavior.\nViewModelType Gets the type of the view model.\nEvents DetermineViewModelInstance Occurs when the view model is about to construct a new view model. This event can be used to intercept and inject a dynamically instantiated view model.\nDetermineViewModelType Occurs when the view model is about to construct a new view model. This event can be used to intercept and inject a dynamically determined view model type.\nLoaded Occurs when the view model container is loaded.\nTargetViewPropertyChanged Occurs when a property on the TargetView has changed.\nUnloaded Occurs when the view model container is unloaded.\nViewModelCanceledAsync Occurs when the ViewModel has been canceled.\nViewModelChanged Occurs when the ViewModel property has changed.\nViewModelClosedAsync Occurs when the ViewModel has been closed.\nViewModelPropertyChanged Occurs when a property on the current ViewModel has changed.\nViewModelSavedAsync Occurs when the ViewModel has been saved.\nMethods CancelAndCloseViewModelAsync() Cancels and closes the view model.\nReturns true if the view model is successfully canceled; otherwisefalse.\nCancelViewModelAsync() Cancels the view model.\nReturns true if the view model is successfully canceled; otherwisefalse.\nCloseViewModelAsync(Nullable result) Closes the view model.\nOnTargetViewDataContextChanged(object sender, DataContextChangedEventArgs e) Called when theDataContext property of the TargetView has changed.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    OnTargetViewLoadedAsync(object sender, EventArgs e) Called when the TargetView has just been loaded. The base implementation will try to create a view model based on the current DataContext and set it as the DataContext of the TargetView. To create custom logic for view model creation, override this method and do not call the base.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    Returns Task.\nOnTargetViewPropertyChanged(object sender, PropertyChangedEventArgs e) Called when a property on the TargetView has changed.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    OnTargetViewUnloadedAsync(object sender, EventArgs e) Called when the TargetView has just been unloaded.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    Returns Task.\nOnViewLoadedManagerLoadedInternal(object sender, ViewLoadEventArgs e) Called when the view manager is loaded. This method is public because the view loaded manager must be subscribed to as a weak event.\nParameters    Name Description     sender The sender.   e The ViewLoadEventArgs instance containing the event data.    OnViewLoadedManagerLoadingInternal(object sender, ViewLoadEventArgs e) Called when the view manager is unloading. This method is public because the view loaded manager must be subscribed to as a weak event.\nParameters    Name Description     sender The sender.   e The ViewLoadEventArgs instance containing the event data.    OnViewLoadedManagerUnloadedInternal(object sender, ViewLoadEventArgs e) Called when the view manager is unloaded. This method is public because the view loaded manager must be subscribed to as a weak event.\nParameters    Name Description     sender The sender.   e The ViewLoadEventArgs instance containing the event data.    OnViewLoadedManagerUnloadingInternal(object sender, ViewLoadEventArgs e) Called when the view manager is unloading. This method is public because the view loaded manager must be subscribed to as a weak event.\nParameters    Name Description     sender The sender.   e The ViewLoadEventArgs instance containing the event data.    OnViewModelCanceledAsync(object sender, EventArgs e) Called when the ViewModel has been saved.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    OnViewModelClosedAsync(object sender, ViewModelClosedEventArgs e) Called when the ViewModel has been closed.\nParameters    Name Description     sender The sender.   e The ViewModelClosedEventArgs instance containing the event data.    OnViewModelPropertyChanged(object sender, PropertyChangedEventArgs e) Called when a property on the ViewModel has changed.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    OnViewModelSavedAsync(object sender, EventArgs e) Called when the ViewModel has been saved.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    SaveAndCloseViewModelAsync() Saves and closes the view model. If the saving fails, the view model is not closed.\nReturns true if the view model is successfully saved; otherwisefalse.\nSaveViewModelAsync() Saves the view model.\nReturns true if the view model is successfully saved; otherwisefalse.\nValidateViewModel() Validates the view model.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/providers/logicextensions/",
	"title": "LogicExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Providers   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class LogicExtensions  Extension methods to safely interact with logic from inside views.\nMethods GetValue(LogicBase logic, Funcfunction) Sets the value of the logic property.\nParameters    Name Description     logic The logic, can benull so the caller don\u0026rsquo;t have to check for this.   function The function that will get the actual value, will only be executed if logic is notnull.    Exceptions    Name Description     ArgumentNullException The function isnull.    GetValue(LogicBase logic, Funcfunction, TValue defaultValue) Sets the value of the logic property.\nParameters    Name Description     logic The logic, can benull so the caller don\u0026rsquo;t have to check for this.   function The function that will get the actual value, will only be executed if logic is notnull.   defaultValue The default value to return if the logic is not available.    Exceptions    Name Description     ArgumentNullException The function isnull.    SetValue(LogicBase logic, Action action) Sets the value of the logic property.\nParameters    Name Description     logic The logic, can benull so the caller don\u0026rsquo;t have to check for this.   action The action that will set the actual value, will only be executed if logic is notnull.    Exceptions    Name Description     ArgumentNullException The action isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/providers/logicviewmodelbehavior/",
	"title": "LogicViewModelBehavior",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Providers   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum LogicViewModelBehavior : Enum  Base types Enum\nThe available view model behaviors.\nFields Dynamic 1\nView model is dynamic and will be automatically determined.\nInjected 0\nView model was injected thus will be stable during the lifetime of the view.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/faq/mvvm/",
	"title": "MVVM",
	"tags": [],
	"description": "",
	"content": " How to support example data with view models? To find out how to create design time data, see the designerstopic.\nHow to use events with MVVM? When writing MVVM, it\u0026rsquo;s \u0026ldquo;forbidden\u0026rdquo; (read: not a best practice) to use click handlers (or other UI events) in your view-model. But then should you react to events?\n Start with creating a command like you are used to using MVVM. This command will be executed when the event occurs. Add a reference to System.Windows.Interactivity.dll (ships with Catel). If you have used NuGet to add a reference, it is automatically included for you. Add the following namespace definitions to your view declaration:\nxmlns:i=\u0026quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot;  Use the following code to convert an event to a command:\n\u0026lt;i:Interaction.Triggers\u0026gt; \u0026lt;i:EventTrigger EventName=\u0026quot;[YourEvent]\u0026quot;\u0026gt; \u0026lt;catel:EventToCommand Command=\u0026quot;{Binding [YourCommand]}\u0026quot; DisableAssociatedObjectOnCannotExecute=\u0026quot;False\u0026quot; /\u0026gt; \u0026lt;/i:EventTrigger\u0026gt; \u0026lt;/i:Interaction.Triggers\u0026gt;   An example for a *ListBox *double click:\n\u0026lt;ListBox ItemsSource=\u0026quot;{Binding PersonCollection}\u0026quot; SelectedItem=\u0026quot;{Binding SelectedPerson}\u0026quot;\u0026gt; \u0026lt;i:Interaction.Triggers\u0026gt; \u0026lt;i:EventTrigger EventName=\u0026quot;MouseDoubleClick\u0026quot;\u0026gt; \u0026lt;catel:EventToCommand Command=\u0026quot;{Binding Edit}\u0026quot; DisableAssociatedObjectOnCannotExecute=\u0026quot;False\u0026quot; /\u0026gt; \u0026lt;/i:EventTrigger\u0026gt; \u0026lt;/i:Interaction.Triggers\u0026gt; \u0026lt;ListBox.ItemTemplate\u0026gt; \u0026lt;DataTemplate\u0026gt; \u0026lt;StackPanel Orientation=\u0026quot;Horizontal\u0026quot;\u0026gt; \u0026lt;Label Content=\u0026quot;{Binding FirstName}\u0026quot; /\u0026gt; \u0026lt;Label Content=\u0026quot;{Binding MiddleName}\u0026quot; /\u0026gt; \u0026lt;Label Content=\u0026quot;{Binding LastName}\u0026quot; /\u0026gt; \u0026lt;/StackPanel\u0026gt; \u0026lt;/DataTemplate\u0026gt; \u0026lt;/ListBox.ItemTemplate\u0026gt; \u0026lt;/ListBox\u0026gt;  How can I add the MVVM behaviors via code (programmatically)? Below is the code-behind of a view that adds the UserControlBehavior via code:\npublic partial class DynamicBehaviorView : UserControl, IViewModelContainer { private Catel.Windows.Controls.MVVMProviders.UserControlBehavior _mvvmBehavior; /// \u0026lt;summary\u0026gt; /// Initializes a new instance of the \u0026lt;see cref=\u0026quot;DynamicBehaviorView\u0026quot;/\u0026gt; class. /// \u0026lt;/summary\u0026gt; public DynamicBehaviorView() { InitializeComponent(); _mvvmBehavior = new Catel.Windows.Controls.MVVMProviders.UserControlBehavior(); _mvvmBehavior.ViewModelType = typeof(ViewModels.MyViewModel); System.Windows.Interactivity.Interaction.GetBehaviors(this).Add(_mvvmBehavior); _mvvmBehavior.ViewModelChanged += (sender, e) =\u0026gt; ViewModelChanged.SafeInvoke(this, e); _mvvmBehavior.ViewModelPropertyChanged += (sender, e) =\u0026gt; ViewModelPropertyChanged.SafeInvoke(this, e); } /// \u0026lt;summary\u0026gt; /// Gets the view model that is contained by the container. /// \u0026lt;/summary\u0026gt; /// \u0026lt;value\u0026gt;The view model.\u0026lt;/value\u0026gt; public IViewModel ViewModel { get { return _mvvmBehavior.ViewModel; } } /// \u0026lt;summary\u0026gt; /// Occurs when the \u0026lt;see cref=\u0026quot;ViewModel\u0026quot;/\u0026gt; property has changed. /// \u0026lt;/summary\u0026gt; public event EventHandler\u0026lt;EventArgs\u0026gt; ViewModelChanged; /// \u0026lt;summary\u0026gt; /// Occurs when a property on the \u0026lt;see cref=\u0026quot;ViewModel\u0026quot;/\u0026gt; has changed. /// \u0026lt;/summary\u0026gt; public event EventHandler\u0026lt;PropertyChangedEventArgs\u0026gt; ViewModelPropertyChanged; /// \u0026lt;summary\u0026gt; /// Occurs when a property on the container has changed. /// \u0026lt;/summary\u0026gt; /// \u0026lt;remarks\u0026gt; /// This event makes it possible to externally subscribe to property changes of a \u0026lt;see cref=\u0026quot;DependencyObject\u0026quot;/\u0026gt; /// (mostly the container of a view model) because the .NET Framework does not allows us to. /// \u0026lt;/remarks\u0026gt; public event EventHandler\u0026lt;PropertyChangedEventArgs\u0026gt; PropertyChanged; /// \u0026lt;summary\u0026gt; /// Invoked whenever the effective value of any dependency property on this \u0026lt;see cref=\u0026quot;T:System.Windows.FrameworkElement\u0026quot;/\u0026gt; has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides \u0026lt;see cref=\u0026quot;M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\u0026quot;/\u0026gt;. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;e\u0026quot;\u0026gt;The event data that describes the property that changed, as well as old and new values.\u0026lt;/param\u0026gt; protected override void OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e) { base.OnPropertyChanged(e); PropertyChanged.SafeInvoke(this, new PropertyChangedEventArgs(e.Property.Name)); } }  Using this technique, it is even possible to determine the view model of any view dynamically at runtime.\nHow can I inject or manipulate the view model of a UserControl? The UserControl is a very powerful control. It allows lazy loaded dynamic view model construction. However, sometimes you just don\u0026rsquo;t want the user control to dynamically create the view model. Luckily, the user control instantiates a new view model with this logic:\n The DataContext of the control can be injected into a constructor of the view model The view model has an empty constructor   You can set the DataContext of the control to a view model, and this way \u0026ldquo;inject\u0026rdquo; a view model into a control instead of letting it be created first. In fact, the user control first checks whether the DataContext is already a valid view model for the user control. If so, it keeps it that way.\nHow can I prevent validation of required fields? Catel does not validate the properties with data annotations at startup. It will only validate the data annotations when properties change or when the view model is about to be saved. This is implemented this way to allow a developer to show required fields with an asterisk (*) instead of errors. If a developer still wants to initially display errors, only a single call has to be made in the constructor:\nValidate(true, false);  If the validation is implemented in the models and not in the view model, set the ValidateModelsOnInitialization to false.\n "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/mvvmmodule/",
	"title": "MVVMModule",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class MVVMModule : IServiceLocatorInitializer  Base types\nIServiceLocatorInitializer\nMVVM module which allows the registration of default services in the service locator.\nMethods Initialize(IServiceLocator serviceLocator) Initializes the specified service locator.\nParameters    Name Description     serviceLocator The service locator.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/memberinfoextensions/",
	"title": "MemberInfoExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class MemberInfoExtensions  Member info extensions.\nFields Methods GetSignature(ConstructorInfo constructorInfo) Gets the signature of a method.\nParameters    Name Description     constructorInfo The member info.    Returns The signature of the member info.\nExceptions    Name Description     ArgumentNullException The constructorInfo isnull.    GetSignature(MethodInfo methodInfo) Gets the signature of a method.\nParameters    Name Description     methodInfo The member info.    Returns The signature of the member info.\nExceptions    Name Description     ArgumentNullException The methodInfo isnull.    IsStatic(PropertyInfo propertyInfo) Returns whether property is static.\nParameters    Name Description     propertyInfo Property info.    SortByParametersMatchDistance(List constructors, object[] parameters) Sort constructors by parameters match distance.\nParameters    Name Description     constructors The constructors   parameters The constructor parameters    Returns The constructors sorted by match distance.\nTryGetConstructorDistanceByParametersMatch(ConstructorInfo constructor, object[] parameters, int distance) Try to get the constructor distance by parameters match.\nParameters    Name Description     constructor The constructor info   parameters    distance The distance    Returns true whether the constructor match with the parameters and distance can be computed; otherwisefalse\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/membermetadata/",
	"title": "MemberMetadata",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class MemberMetadata  Metadata about a member of a type.\nConstructors MemberMetadata(Type containingType, Type memberType, SerializationMemberGroup memberGroup, string memberName) Initializes a new instance of the MemberMetadata class.\nParameters    Name Description     containingType Type of the containing.   memberType Type of the member.   memberGroup The member group.   memberName Name of the member.    Properties ContainingType Gets the type of the containing.\nMemberGroup Gets the member group.\nMemberName Gets the name of the member.\nMemberNameForSerialization Gets or sets the member name for serialization. This is a name mapped based on attributes like DataMember(\u0026ldquo;something\u0026rdquo;), etc.\nMemberType Gets the type of the member.\nTag Gets or sets the tag.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/memberserializationeventargs/",
	"title": "MemberSerializationEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class MemberSerializationEventArgs : SerializationEventArgs  Base types SerializationEventArgs\nSpecial member value serialization event args.\nConstructors MemberSerializationEventArgs(ISerializationContext serializationContext, MemberValue memberValue) Initializes a new instance of the MemberSerializationEventArgs class.\nParameters    Name Description     serializationContext The serialization context.   memberValue The member value.    Properties MemberValue Gets the member value.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/membervalue/",
	"title": "MemberValue",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class MemberValue  Member value which represents the serialization info of a specific member.\nFields Constructors MemberValue(SerializationMemberGroup memberGroup, Type modelType, Type memberType, string name, string nameForSerialization, object value) Initializes a new instance of the MemberValue class.\nParameters    Name Description     memberGroup Group of the member.   modelType Type of the model.   memberType Type of the member.   name The name.   nameForSerialization The name for serialization.   value The value.    Properties ActualMemberType Gets the actual type of the value.\nMemberGroup Gets the group of the member.\nMemberType Gets the type of the member. This is the actual member type as it is defined on the type. This isnot a wrapper around thevalue.GetType().\nMemberTypeName Gets the name of the model type, which should be a cached version ofModelType.GetSafeFullName(false);.\nModelType Gets the type of the model which this member value is a member of.\nModelTypeName Gets the name of the model type, which should be a cached version ofModelType.GetSafeFullName(false);.\nName Gets the name of the member.\nNameForSerialization Gets or sets the name for serialization. This is a name mapped based on attributes like DataMember(\u0026ldquo;something\u0026rdquo;), etc.\nValue Gets or sets the value.\nMethods GetBestMemberType() Gets the the best member type. Code is equal tomemberValue.ActualMemberType ?? memberValue.MemberType.\nReturns Type.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/messaging/message-mediator/",
	"title": "Message mediator",
	"tags": [],
	"description": "",
	"content": " Catel allows sending messages to unknown targets by implementing the mediator pattern. The mediator is assured memory leak free, and can be used safely in any .NET environment (even ASP.NET). Below are a few usage examples of the MessageMediator class.\nRegistering to a message  To register a handler for a specific message type, in this case a string, use the following code:\nvar mediator = ServiceLocator.Default.ResolveType\u0026lt;IMessageMediator\u0026gt;(); mediator.Register\u0026lt;string\u0026gt;(this, OnMessage);  Sending out a message  To send a message to all recipients, use the following code:\nvar mediator = ServiceLocator.Default.ResolveType\u0026lt;IMessageMediator\u0026gt;(); mediator.SendMessage\u0026lt;string\u0026gt;(\u0026quot;message\u0026quot;);  Sending out a message with a tag  Sometimes, you want to send messages only based on a tag. For example, you want to let other view models know that you just added a person. All recipients that registered to the string message type with the Person tag will receive the message:\nvar mediator = ServiceLocator.Default.ResolveType\u0026lt;IMessageMediator\u0026gt;(); mediator.SendMessage\u0026lt;string\u0026gt;(\u0026quot;Person added\u0026quot;, \u0026quot;Person\u0026quot;);  "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/messaging/messagebase/",
	"title": "MessageBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Messaging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class MessageBase\u0026lt;TMessage, TData\u0026gt; where TMessage : new(), MessageBase\u0026lt;TMessage, TData\u0026gt;  Base class for messages distributed via the Catel MessageMediator subsystem. Inherit from this class to define individual message types. For most subclasses the only thing to code is an empty class body including the type parameters. For the payload data you can choose betweeen the following options:\nType Parameters TMessage The actual type of the message.\nTData The type of payload data to be carried with the message.\nFields Constructors Properties Data Provides access to the payload data.\nMethods Register(object recipient, Action handler, object tag) Convenient helper method to subscribe to this Message type. Usage:\nParameters    Name Description     recipient The instance which registers to the messages. Is most cases this will bethis.   handler A delegate handling the incoming message. For example: msg =\u0026gt; Handler(msg.Data).   tag The optional Catel mediator tag to be used.    Exceptions    Name Description     ArgumentNullException The handler isnull.    SendWith(TData data, object tag) Use Object) to send a new message via the mediator service.\nParameters    Name Description     data The payload data.   tag The optional Catel mediator tag to be used.    Unregister(object recipient, Action handler, object tag) Convenient helper method to unsubscribe from this Message type. Usage:\nParameters    Name Description     recipient The instance which unregisters from the messages. Is most cases this will bethis.   handler A delegate handling the incoming message. For example: msg =\u0026gt; Handler(msg.Data).   tag The optional Catel mediator tag to be used.    Exceptions    Name Description     ArgumentNullException The handler isnull.    With(TData data) "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/messagebutton/",
	"title": "MessageButton",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum MessageButton : Enum  Base types Enum\nAvailable message buttons.\nRemarks Although directly extracted from the WPFMessageBoxButton, this enum provides more flexibility to use other ways to show messages to the user instead of the defaultMessageBox.\nFields OK OK button.\nOKCancel OK and Cancel buttons.\nYesNo Yes and No buttons.\nYesNoCancel Yes, No and Cancel buttons.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/messageimage/",
	"title": "MessageImage",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum MessageImage : Enum  Base types Enum\nAvailable message images.\nRemarks Although directly extracted from the WPFMessageBoxImage, this enum provides more flexibility to use other ways to show messages to the user instead of the defaultMessageBox.\nFields Error 4\nError image.\nExclamation 3\nExclamation image.\nInformation 1\nInformation image.\nNone 0\nShow no image.\nQuestion 2\nQuestion image.\nStop 5\nStop image.\nWarning 6\nWarning image.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/messaging/messagemediator/",
	"title": "MessageMediator",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Messaging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class MessageMediator : IMessageMediator  Base types\nIMessageMediator\nThis class creates a simple Mediator which loosely connects different objects together. The message handlers are organized using string-based message keys and are held in a WeakReference collection.\nFields Properties Default Gets the default instance of the message mediator.\nMethods CleanUp() Cleans up the list of registered handlers. All handlers that are no longer alive are removed from the list. This method is automatically invoked after each call to Object), but can also be invoked manually.\nIsMessageRegistered(Type messageType, object tag) Determines whether the specified message type is registered.\nParameters    Name Description     messageType The type of the message.   tag The tag.    Returns true if the message type is registered; otherwise,false.\nExceptions    Name Description     ArgumentNullException The messageType isnull.    IsMessageRegistered(object tag) Determines whether the specified message type is registered.\nType Parameters TMessage The type of the message.\nParameters    Name Description     tag The tag.    Returns true if the message type is registered; otherwise,false.\nIsRegistered(object recipient, Action handler, object tag) Determines whether the specified recipient is registered.\nType Parameters TMessage The type of the message.\nParameters    Name Description     recipient The recipient.   handler The handler.   tag The tag.    Returns true if the specified recipient is registered; otherwise,false.\nExceptions    Name Description     ArgumentNullException The handler isnull.    Register(object recipient, Action handler, object tag) Registers a specific recipient for a specific message.\nType Parameters TMessage The type of the message.\nParameters    Name Description     recipient The recipient to register.   handler The handler method.   tag The message tag.    Returns true if the handler is registered successfully; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The handler isnull.    Remarks A handler cannot be registered twice. If the same handler is already registered, this method will returnfalse.\nSendMessage(TMessage message, object tag) Broadcasts a message to all message targets for a given message tag and passes a parameter.\nType Parameters TMessage The type of the message.\nParameters    Name Description     message The message parameter.   tag The message tag.    Returns true if any handlers were invoked; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The message isnull.    Unregister(object recipient, Action handler, object tag) Unregisters a specific recipient for a specific message with the specified tag.\nType Parameters TMessage The type of the message.\nParameters    Name Description     recipient The recipient to unregister.   handler The handler method.   tag The message tag.    Returns true if the handler is unregistered successfully; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The handler isnull.    Remarks A handler cannot be unregistered when it is not registered first. If a handler is unregistered while it is not registered, this method will returnfalse.\nUnregisterRecipient(object recipient, object tag) Unregisters a specific recipient for all the (non-static) message the recipient is subscribed to.\nParameters    Name Description     recipient The recipient to unregister.   tag The message tag.    Returns true if the handler is unregistered successfully; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The recipient isnull.    Remarks A handler cannot be unregistered when it is not registered first. If a handler is unregistered while it is not registered, this method will returnfalse.\nUnregisterRecipient(object recipient, object tag, bool ignoreTag) Unregisters a specific recipient for all the (non-static) message the recipient is subscribed to.\nParameters    Name Description     recipient The recipient to unregister.   tag The message tag.   ignoreTag If set totrue, tags are ignored.    Returns true if the handler is unregistered successfully; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The recipient isnull.    Remarks A handler cannot be unregistered when it is not registered first. If a handler is unregistered while it is not registered, this method will returnfalse.\nUnregisterRecipientAndIgnoreTags(object recipient) Unregisters a specific recipient for all the (non-static) message the recipient is subscribed to. This method ignores any tags. If a message recipient matches the specified recipient, it is unsubscribed.\nParameters    Name Description     recipient The recipient to unregister.    Returns true if the handler is unregistered successfully; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The recipient isnull.    Remarks A handler cannot be unregistered when it is not registered first. If a handler is unregistered while it is not registered, this method will returnfalse.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/messaging/messagemediatorhelper/",
	"title": "MessageMediatorHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Messaging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class MessageMediatorHelper  Helper class for the MessageMediator to allow easy subscription\nFields Methods SubscribeRecipient(object instance, IMessageMediator messageMediator) Subscribes all methods of the specified instance that are decorated with the MessageRecipientAttribute.\nParameters    Name Description     instance The instance to subscribe.   messageMediator The message mediator. Ifnull, the default will be used.    Exceptions    Name Description     ArgumentNullException The instance isnull.   NotSupportedException The object has non-public methods decorated with the MessageRecipientAttribute, but the application is not written in full .NET.   InvalidCastException One of the methods cannot be casted to a valid message method.    UnsubscribeRecipient(object instance, IMessageMediator messageMediator) Unsubscribes all methods of the specified instance that are decorated with the MessageRecipientAttribute.\nParameters    Name Description     instance The instance.   messageMediator The message mediator. Ifnull, the default will be used.    Exceptions    Name Description     ArgumentNullException The instance isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/messaging/messagerecipientattribute/",
	"title": "MessageRecipientAttribute",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Messaging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class MessageRecipientAttribute : Attribute  Base types Attribute\nAttribute defining a method as recipient for the MessageMediator.\nConstructors MessageRecipientAttribute() Initializes a new instance of the MessageRecipientAttribute class.\nProperties Tag Gets the tag.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/messageresult/",
	"title": "MessageResult",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum MessageResult : Enum  Base types Enum\nAvailable message results.\nRemarks Although directly extracted from the WPFMessageBoxResult, this enum provides more flexibility to use other ways to show messages to the user instead of the defaultMessageBox.\nFields Cancel 2\nMessage is canceled.\nNo 4\nMessage is acknowledged with no.\nNone 0\nNo result available.\nOK 1\nMessage is acknowledged.\nYes 3\nMessage is acknowledged with yes.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/messageservice/",
	"title": "MessageService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class MessageService : IMessageService, ViewModelServiceBase  Base types ViewModelServiceBase\nBase types\nIMessageService\nMessage service that implements the IMessageService.\nFields Constructors MessageService(IDispatcherService dispatcherService) Initializes a new instance of the MessageService class.\nParameters    Name Description     dispatcherService The dispatcher service.    Exceptions    Name Description     ArgumentNullException The dispatcherService isnull.    Methods ShowAsync(string message, string caption, MessageButton button, MessageImage icon) Shows an information message to the user and allows a callback operation when the message is completed.\nParameters    Name Description     message The message.   caption The caption.   button The button.   icon The icon.    Exceptions    Name Description     ArgumentException The message isnull or whitespace.    ShowErrorAsync(Exception exception) Shows an error message to the user and allows a callback operation when the message is completed.\nParameters    Name Description     exception The exception.    Exceptions    Name Description     ArgumentNullException The exception isnull.    ShowErrorAsync(string message, string caption) Shows an error message to the user and allows a callback operation when the message is completed.\nParameters    Name Description     message The message.   caption The caption.    Exceptions    Name Description     ArgumentException The message isnull or whitespace.    ShowInformationAsync(string message, string caption) Shows an information message to the user and allows a callback operation when the message is completed.\nParameters    Name Description     message The message.   caption The caption.    Exceptions    Name Description     ArgumentException The message isnull or whitespace.    ShowWarningAsync(string message, string caption) Shows a warning message to the user and allows a callback operation when the message is completed.\nParameters    Name Description     message The message.   caption The caption.    Exceptions    Name Description     ArgumentException The message isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/methodtovalueconverter/",
	"title": "MethodToValueConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class MethodToValueConverter : ValueConverterBase  Base types ValueConverterBase\nConverts the result of a method to a value. This makes it possible to bind to a method.\nExamples {Binding MyObject, Converter={StaticResource MethodToValueConverter}, ConverterParameter=\u0026lsquo;MyMethod\u0026rsquo;}\nRemarks Code originally comes from http://stackoverflow.com/questions/502250/bind-to-a-method-in-wpf. Original license: CC BY-SA 2.5, compatible with the MIT license.\nFields Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/missingtypeeventargs/",
	"title": "MissingTypeEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class MissingTypeEventArgs : EventArgs  Base types EventArgs\nEvent arguments for the MissingType event. These event arguments will be fired. To resolve a type, set either the ImplementingInstance or ImplementingType. If both are filled, the instance will be used.\nConstructors MissingTypeEventArgs(Type interfaceType) Initializes a new instance of the MissingTypeEventArgs class.\nParameters    Name Description     interfaceType Type of the interface.    Exceptions    Name Description     ArgumentNullException The interfaceType isnull.    Properties ImplementingInstance Gets or sets the implementing instance. Set if the registration of an instance is required.\nImplementingType Gets or sets the implementing type. Set if the registration of a type is required.\nInterfaceType Gets the type of the interface that is currently unresolved.\nRegistrationType Gets or sets the life style of the type that will be registered.\nRemarks If the ImplementingInstance is set then this value will be ignored.\nTag Gets or sets the tag.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/modelattribute/",
	"title": "ModelAttribute",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ModelAttribute : Attribute  Base types Attribute\nAttribute to define a property in a view model as a model. Objects decorated with this attribute will be automatically validated when a property changes.\nConstructors ModelAttribute() Initializes a new instance of the ModelAttribute class.\nProperties SupportIEditableObject Gets or sets a value indicating whether the interface should be used on the model if possible. The default value istrue.\nSupportValidation Gets or sets a value indicating whether the model validation mapping is enabled. The default value istrue.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/modelbase/",
	"title": "ModelBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class ModelBase : IModel, ObservableObject  Base types ObservableObject\nBase types\nIModel\nAbstract class that serves as a base class for serializable objects.\nFields IsDirtyProperty Register the IsDirty property so it is known in the class.\nIsReadOnlyProperty Register the IsReadOnly property so it is known in the class.\nConstructors Properties DisablePropertyChangeNotifications Gets or sets a value indicating whether property change notifications are currently disabled for all instances.\nIsDirty Gets or sets a value indicating whether this object is dirty (contains unsaved data).\nIsReadOnly Gets or sets a value indicating whether this object is currently read-only. When the object is read-only, values can only be read, not set.\nEvents Methods GetObjectData(SerializationInfo info, StreamingContext context) Populates a SerializationInfo with the data needed to serialize the target object.\nParameters    Name Description     info The SerializationInfo to populate with data.   context The destination (see StreamingContext ) for this serialization.    Exceptions    Name Description     T:System.Security.SecurityException The caller does not have the required permission.    IsPropertyRegistered(string name) Returns whether a specific property is registered.\nParameters    Name Description     name Name of the property.    Returns True if the property is registered, otherwise false.\nRegisterProperty(string name, Type type, Func createDefaultValue, EventHandler propertyChangedEventHandler, bool includeInSerialization, bool includeInBackup) Registers a property that will be automatically handled by this object.\nParameters    Name Description     name Name of the property.   type Type of the property.   createDefaultValue The delegate that creates the default value. Ifnull, a delegate returning the default value (null for reference types,Activator.CreateInstance(type) for value types).   propertyChangedEventHandler The property changed event handler.   includeInSerialization if set totrue, the property should be included in the serialization.   includeInBackup if set totrue, the property should be included in the backup when handling IEditableObject.    Returns PropertyData containing the property information.\nExceptions    Name Description     ArgumentException The name isnull or whitespace.   ArgumentNullException The type isnull.    RegisterProperty(Expression\u0026gt; propertyExpression, Func createDefaultValue, ActionpropertyChangedEventHandler, bool includeInSerialization, bool includeInBackup) Registers a property that will be automatically handled by this object.\nType Parameters TModel The model type.\nTValue The value type.\nParameters    Name Description     propertyExpression The property expression.   createDefaultValue The delegate that creates the default value. Ifnull, a delegate returning the default value (null for reference types,Activator.CreateInstance(type) for value types).   propertyChangedEventHandler The property changed event handler.   includeInSerialization If set totrue, the property should be included in the serialization.   includeInBackup If set totrue, the property should be included in the backup when handling IEditableObject.    Returns PropertyData containing the property information.\nExceptions    Name Description     System.ArgumentException The member type of the body of the propertyExpression of should beMemberTypes.Property.   System.ArgumentNullException The propertyExpression isnull.    RegisterProperty(Expression\u0026gt; propertyExpression, TValue defaultValue, ActionpropertyChangedEventHandler, bool includeInSerialization, bool includeInBackup) Registers a property that will be automatically handled by this object.\nType Parameters TModel The model type.\nTValue The value type.\nParameters    Name Description     propertyExpression The property expression.   defaultValue Default value of the property.   propertyChangedEventHandler The property changed event handler.   includeInSerialization If set totrue, the property should be included in the serialization.   includeInBackup If set totrue, the property should be included in the backup when handling IEditableObject.    Returns PropertyData containing the property information.\nExceptions    Name Description     System.ArgumentException The member type of the body of the propertyExpression of should beMemberTypes.Property.   System.ArgumentNullException The propertyExpression isnull.    RegisterProperty(string name, Type type, TValue defaultValue, EventHandler propertyChangedEventHandler, bool includeInSerialization, bool includeInBackup) Registers a property that will be automatically handled by this object.\nType Parameters TValue The type of the value.\nParameters    Name Description     name Name of the property.   type Type of the property.   defaultValue Default value of the property.   propertyChangedEventHandler The property changed event handler.   includeInSerialization if set totrue, the property should be included in the serialization.   includeInBackup if set totrue, the property should be included in the backup when handling IEditableObject.    Returns PropertyData containing the property information.\nExceptions    Name Description     ArgumentException The name isnull or whitespace.   ArgumentNullException The type isnull.    SuspendChangeCallbacks() Suspends the change callbacks whenever a property has been called. This is very useful when there are expensive property change callbacks registered with a property that need to be temporarily disabled.\nReturns SuspendChangeNotifications(bool raiseOnResume) Suspends the change notifications until the disposed object has been released.\nParameters    Name Description     raiseOnResume if set totrue, the notifications are invoked on resume.    Returns A disposable object.\nToString() Returns a that represents this instance.\nReturns A that represents this instance.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/modelbaseextensions/",
	"title": "ModelBaseExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ModelBaseExtensions  Extension methods for the ModelBase class.\nMethods Save(ModelBase model, Stream stream, ISerializer serializer) Saves the specified model to the stream using the serializer.\nParameters    Name Description     model The model.   stream The stream.   serializer The serializer.    Save(ModelBase model, string filePath, ISerializer serializer) Saves the specified model to the file using the specified serializer.\nParameters    Name Description     model The model.   filePath The file path.   serializer The serializer.    SaveAsXml(ModelBase model, Stream stream) Saves as XML.\nParameters    Name Description     model The model.   stream The stream.    SaveAsXml(ModelBase model, string filePath) Saves the specified model to the file as xml.\nParameters    Name Description     model The model.   filePath The file path.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/modelcleanupmode/",
	"title": "ModelCleanUpMode",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum ModelCleanUpMode : Enum  Base types Enum\nAvailable clean up models for a model.\nFields CancelEdit 0\nCall.\nEndEdit 1\nCall.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/modelequalitycomparer/",
	"title": "ModelEqualityComparer",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ModelEqualityComparer : IModelEqualityComparer, EqualityComparer\u0026lt;ModelBase\u0026gt;  Base types EqualityComparer\nBase types\nIModelEqualityComparer\nImplementation of the for the ModelBase.\nFields Constructors ModelEqualityComparer() Initializes a new instance of the ModelEqualityComparer class.\nProperties CompareCollections Gets or sets a value indicating whether collections should be compared as well. Note that this might degrade performance on properties with large collections. The default value isfalse.\nCompareProperties Gets or sets a value indicating whether properties should be compared. The default value isfalse.\nCompareValues Gets or sets a value indicating whether values should be compared as well. Note that this might degrade performance on properties with large collections. The default value isfalse.\nMethods Equals(ModelBase x, ModelBase y) When overridden in a derived class, determines whether two objects of type ModelBase are equal.\nParameters    Name Description     x The first object to compare.   y The second object to compare.    Returns true if the specified objects are equal; otherwise, false.\nExceptions    Name Description     System.NotImplementedException     GetHashCode(ModelBase obj) Returns a hash code for this instance.\nParameters    Name Description     obj The object for which to get a hash code.    Returns A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/modelnotregisteredexception/",
	"title": "ModelNotRegisteredException",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ModelNotRegisteredException : Exception  Base types Exception\nException for when a model is not registered on a class, but a ViewModelToModelAttribute is used with the model.\nConstructors ModelNotRegisteredException(string modelName, string propertyDeclaringViewModelToModelAttribute) Initializes a new instance of the ModelNotRegisteredException class.\nParameters    Name Description     modelName Name of the model.   propertyDeclaringViewModelToModelAttribute The property declaring the view model to model attribute.    Properties ModelName Gets the name of the model.\nPropertyDeclaringViewModelToModelAttribute Gets the property declaring the view model to model attribute.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/core/moduleinitializer/",
	"title": "ModuleInitializer",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Core   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ModuleInitializer  Class that gets called as soon as the module is loaded.\nRemarks This is made possible thanks to Fody.\nFields Methods Initialize() Initializes the module.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/moduleinitializer/",
	"title": "ModuleInitializer",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ModuleInitializer  Class that gets called as soon as the module is loaded.\nRemarks This is made possible thanks to Fody.\nMethods Initialize() Initializes the module\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/mouseinfo/",
	"title": "MouseInfo",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6    public class MouseInfo : BehaviorBase\u0026lt;FrameworkElement\u0026gt;  Base types BehaviorBase\nTrigger that enables a property to bind the several mouse events for the associated object.\nFields IsMouseOverProperty Using a DependencyProperty as the backing store for IsMouseOver. This enables animation, styling, binding, etc\u0026hellip;\nProperties IsMouseOver Gets or sets a value indicating whether the mouse is currently over the associated object.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/multiplyconverter/",
	"title": "MultiplyConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class MultiplyConverter : ValueConverterBase  Base types ValueConverterBase\nCalculate the product of given value and factor in parameter.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/mustbeimplementedexception/",
	"title": "MustBeImplementedException",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class MustBeImplementedException : Exception  Base types Exception\nException in case the functionality is not yet implemented but is supported in the current platform. Unfortunately, the team has limited resources and must focus on the most requested features. Feel free to create a pull request or notify the team that you are missing this feature.\nConstructors MustBeImplementedException() Initializes a new instance of the NotSupportedInPlatformException class.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/namingconvention/",
	"title": "NamingConvention",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class NamingConvention  Class that is able to resolve naming conventions.\nFields Assembly The assembly constant that will be replaced by the naming convention. This constant will be replaced by the assembly name. For example, the following naming convention:[AS].UI.Views.[VM]View will result in the following view forExampleViewModel :MyAssembly.UI.Views.ExampleView.xaml\nCurrent The current constant that will keep the convention in the current namespace. For example, the following naming convention:[CURRENT].[VM]View will result in the following view forCatel.ExampleViewModel :Catel.ExampleView.xaml\nUp The up constant that will be replaced by the naming convention. This constant will be move up one step in the type namespace tree. For example, the following naming convention:[UP].Views.[VM]View will result in the following view forCatel.ViewModels.ExampleViewModel :Catel.Views.ExampleView.xaml\nViewModelName The view model name constant that will be replaced by the naming convention. This constant will be replaced by the view model name without the \u0026ldquo;ViewModel\u0026rdquo; prefix. For example, the following naming convention:[AS].UI.Views.[VM]View will result in the following view forExampleViewModel :MyAssembly.UI.Views.ExampleView.xaml\nViewName The view name constant that will be replaced by the naming convention. This constant will be replaced by the view name without the \u0026ldquo;View\u0026rdquo;, \u0026ldquo;Window\u0026rdquo; and \u0026ldquo;Control\u0026rdquo; prefix. For example, the following naming convention:[AS].UI.Views.[VW]ViewModel will result in the following view model forExampleViewModel :MyAssembly.UI.Views.ExampleView.xaml\nMethods GetParentPath(string path) Gets the parent path with the separator of choice. For example, the following path:Catel.Services Will return the following value when using the dot (.) as separator:Catel.MVVM\nParameters    Name Description     path The path.    Returns The parent path.\nExceptions    Name Description     ArgumentException The path isnull or whitespace.    Remarks This method automatically finds the parent separator by calling the String) and then calls String).\nGetParentPath(string path, string separator) Gets the parent path with the separator of choice. For example, the following path:Catel.Services Will return the following value when using the dot (.) as separator:Catel.MVVM\nParameters    Name Description     path The path.   separator The separator.    Returns The parent path.\nExceptions    Name Description     ArgumentException The path isnull or whitespace.    GetParentSeparator(string path) Gets the parent separator. This method tries to use the following separators:\nParameters    Name Description     path The path.    Returns The separator ornull if no known separator was found.\nExceptions    Name Description     ArgumentException The path isnull or whitespace.    ResolveNamingConvention(DictionaryconstantsWithValues, string conventionToUse) Resolves the naming convention.\nParameters    Name Description     constantsWithValues The constants with values. TheKey must be the constant as it will be used inside the convention. TheValue is the value the constant must be replaced with.   conventionToUse The convention to use.    Returns The resolved convention.\nExceptions    Name Description     ArgumentNullException If constantsWithValues isnull.   ArgumentException If conventionToUse isnull or whitespace.    ResolveNamingConvention(DictionaryconstantsWithValues, string conventionToUse, string value) Resolves the naming convention.\nParameters    Name Description     constantsWithValues The constants with values. TheKey must be the constant as it will be used inside the convention. TheValue is the value the constant must be replaced with.   conventionToUse The convention to use.   value The value you try to resolve    Returns The resolved convention.\nExceptions    Name Description     ArgumentNullException If constantsWithValues isnull.   ArgumentException If conventionToUse isnull or whitespace.    ResolveViewByViewModelName(string assembly, string fullViewModelName, string conventionToUse) Resolves the convention by using the view model name. This method does not add assemblies or resolve types, but will only return a string containing the resolved value based on the convention. The following constants can be used in this method: * ViewModelName\nParameters    Name Description     assembly The assembly which is the base namespace.   fullViewModelName Class name of the view model. This parameter must only contain the type name, not the full type. For exampleExampleViewModel.   conventionToUse The convention to use.    Returns The resolved convention.\nExceptions    Name Description     ArgumentException If assembly isnull or whitespace.    ResolveViewModelByViewName(string assembly, string fullViewName, string conventionToUse) Resolves the convention by using the view name. This method does not add assemblies or resolve types, but will only return a string containing the resolved value based on the convention. The following constants can be used in this method: * ViewName\nParameters    Name Description     assembly The assembly which is the base namespace.   fullViewName Class name of the view. This parameter must only contain the type name, not the full type. For exampleExampleView.   conventionToUse The convention to use.    Returns The resolved convention.\nExceptions    Name Description     ArgumentException If assembly isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/namingregistrationconvention/",
	"title": "NamingRegistrationConvention",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class NamingRegistrationConvention : RegistrationConventionBase  Base types RegistrationConventionBase\nThe naming convention based on RegistrationConventionBase.\nFields Constructors NamingRegistrationConvention(IServiceLocator serviceLocator, RegistrationType registrationType) Initializes a new instance of the NamingRegistrationConvention class.\nParameters    Name Description     serviceLocator The service locator.   registrationType Type of the registration.    Methods Process(IEnumerable typesToRegister) Processes the specified types to register.\nParameters    Name Description     typesToRegister The types to register.    Exceptions    Name Description     System.ArgumentNullException The typesToRegister isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/navigate/",
	"title": "Navigate",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6    public class Navigate : Behavior\u0026lt;Hyperlink\u0026gt;  Base types Behavior\nNavigate behavior to allow the execution of an url in non-pages for WPF.\nFields Constructors Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/navigation/navigatedeventargs/",
	"title": "NavigatedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Navigation   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class NavigatedEventArgs : NavigationEventArgsBase  Base types NavigationEventArgsBase\nNavigated event args.\nConstructors NavigatedEventArgs(string uri, NavigationMode navigationMode) Initializes a new instance of the NavigatedEventArgs class.\nParameters    Name Description     uri The URI.   navigationMode The navigation mode.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/navigation/navigatingeventargs/",
	"title": "NavigatingEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Navigation   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class NavigatingEventArgs : NavigationEventArgsBase  Base types NavigationEventArgsBase\nNavigating event args.\nConstructors NavigatingEventArgs(string uri, NavigationMode navigationMode) Initializes a new instance of the NavigatedEventArgs class.\nParameters    Name Description     uri The URI.   navigationMode The navigation mode.    Properties Cancel Gets or sets a value indicating whether the navigation should be canceled.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/navigation/navigationadapter/",
	"title": "NavigationAdapter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Navigation   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class NavigationAdapter : NavigationAdapterBase  Base types NavigationAdapterBase\nNavigation adapter class because everyone seems to be implementing their own :-(\nFields Constructors NavigationAdapter(IView navigationTarget, object navigationRoot) Initializes a new instance of the NavigationAdapter class.\nParameters    Name Description     navigationTarget The navigation target.   navigationRoot The navigation root.    Properties NavigationContext Gets the navigation context.\nNavigationRoot Gets the navigation root.\nNavigationTarget Gets the navigation target.\nNavigationTargetType Gets the type of the navigation target.\nEvents NavigatedAway Occurs when the app has navigated away from this view.\nNavigatedTo Occurs when the app has navigated to this view.\nNavigatingAway Occurs when the app is about to navigate away from this view.\nMethods GetNavigationUriForTargetPage() Gets the navigation URI for the target page.\nReturns System.String.\nUninitializeNavigationService() Uninitializes the navigation service.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/navigation/navigationadapterbase/",
	"title": "NavigationAdapterBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Navigation   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class NavigationAdapterBase  Abstract base class to allow partial abstract methods.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/navigation/navigationcontext/",
	"title": "NavigationContext",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Navigation   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class NavigationContext  Generic navigation context class that works for all target frameworks.\nConstructors NavigationContext() Initializes a new instance of the NavigationContext class.\nProperties Values Gets the values.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/navigation/navigationeventargsbase/",
	"title": "NavigationEventArgsBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Navigation   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class NavigationEventArgsBase : EventArgs  Base types EventArgs\nBase class for navigation event args.\nConstructors Properties NavigationMode Gets the navigation mode.\nUri Gets the URI.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/navigation/navigationeventargsextensions/",
	"title": "NavigationEventArgsExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Navigation   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class NavigationEventArgsExtensions  Navigation event args extensions.\nMethods GetUriWithoutQueryInfo(NavigatingCancelEventArgs e) Gets the URI from the navigating context.\nParameters    Name Description     e The instance containing the event data.    Returns The uri.\nExceptions    Name Description     ArgumentNullException The e isnull.    GetUriWithoutQueryInfo(NavigationEventArgs e) Gets the URI from the navigated context.\nParameters    Name Description     e The instance containing the event data.    Returns The uri.\nExceptions    Name Description     ArgumentNullException The e isnull.    GetUriWithoutQueryInfo(string uri) Gets the URI from the navigated context.\nParameters    Name Description     uri The URI.    Returns The uri.\nExceptions    Name Description     ArgumentNullException The uri isnull or whitespace.    IsNavigationForView(NavigatingCancelEventArgs e, Type viewType) Determines whether the navigation is for the specified view.\nParameters    Name Description     e The instance containing the event data.   viewType Type of the view.    Returns true if the navigation is for the specified view model; otherwise,false.\nExceptions    Name Description     ArgumentNullException The e isnull.    IsNavigationForView(NavigationEventArgs e, Type viewType) Determines whether the navigation is for the specified view model.\nParameters    Name Description     e The instance containing the event data.   viewType Type of the view.    Returns true if the navigation is for the specified view model; otherwise,false.\nExceptions    Name Description     ArgumentNullException The e isnull.    IsNavigationForView(string uriString, Type viewType) Determines whether the navigation is for the specified view model.\nParameters    Name Description     uriString The uri string instance containing the event data.   viewType Type of the view.    Returns true if the navigation is for the specified view model; otherwise,false.\nExceptions    Name Description     ArgumentException The uriString isnull or whitespace.   ArgumentNullException The viewType isnull.    IsNavigationToExternal(Uri uri) Determines whether the specified string is a navigation to an external source.\nParameters    Name Description     uri The URI.    Returns true if the uri is a navigation to an external source; otherwise,false.\nExceptions    Name Description     ArgumentNullException The uri isnull.    IsNavigationToExternal(string uriString) Determines whether the specified string is a navigation to an external source.\nParameters    Name Description     uriString The URI string.    Returns true if the uri is a navigation to an external source; otherwise,false.\nExceptions    Name Description     ArgumentNullException The uriString isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/navigationhelper/",
	"title": "NavigationHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on Portable Class Libraries    public static class NavigationHelper  The navigation helper class.\nMethods PopModalAsync() Asynchronously dismisses the most recent modally presented Page.\nReturns An awaitable Task\u0026lt;Page\u0026gt;, indicating the PopModalAsync completion. The Task.Result is the Page that has been popped.\nPushModalAsync(ContentPage contentPage) Presents a Page modally.\nParameters    Name Description     contentPage The page to present    Returns An awaitable Task, indicating the PushModal completion.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/providers/navigationlogicbase/",
	"title": "NavigationLogicBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Providers   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class NavigationLogicBase\u0026lt;T\u0026gt; : LogicBase where T : IView  Base types LogicBase\nBase class for pages or controls containing navigation logic.\nType Parameters T Type of the control or page.\nFields Constructors Properties TargetPage Gets the target page.\nMethods OnTargetViewLoadedAsync(object sender, EventArgs e) Called when the TargetView has just been loaded.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    OnTargetViewUnloadedAsync(object sender, EventArgs e) Called when the TargetView has just been unloaded.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/navigation/navigationmode/",
	"title": "NavigationMode",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Navigation   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum NavigationMode : Enum  Base types Enum\nNavigation modes.\nFields Back 0\nNavigating back.\nForward 1\nNavigating forward.\nNew 2\nNavigating to a new page.\nRefresh 3\nRefreshing current view.\nUnknown 4\nThe navigation mode is unknown at this stage.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/navigation/navigationmodeextensions/",
	"title": "NavigationModeExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Navigation   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public static class NavigationModeExtensions  Extension methods for navigation mode.\nMethods Convert(NavigationMode navigationMode) Converts the specified navigation mode.\nParameters    Name Description     navigationMode The navigation mode.    Returns NavigationMode.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/navigationrootservice/",
	"title": "NavigationRootService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class NavigationRootService : INavigationRootService  Base types\nINavigationRootService\nService to retrieve the navigation root in the application.\nFields Methods GetNavigationRoot() Gets the navigation root.\nReturns System.Object.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/navigationservice/",
	"title": "NavigationService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class NavigationService : INavigationService, NavigationServiceBase  Base types NavigationServiceBase\nBase types\nINavigationService\nService to navigate inside applications.\nFields Constructors NavigationService(INavigationRootService navigationRootService) Initializes a new instance of the NavigationService class.\nParameters    Name Description     navigationRootService The navigation root service.    Properties CanGoBack Gets a value indicating whether it is possible to navigate back.\nCanGoForward Gets a value indicating whether it is possible to navigate forward.\nEvents ApplicationClosed Occurs when nothing has canceled the application closing and the application is really about to be closed.\nApplicationClosing Occurs when the application is about to be closed.\nMethods CloseApplication() Closes the current application. The actual implementation depends on the final target framework.\nReturns true if the application is closed; otherwisefalse.\nGetBackStackCount() Returns the number of total back entries (which is the navigation history).\nReturns System.Int32.\nGoBack() Navigates back to the previous page.\nGoForward() Navigates forward to the next page.\nNavigate(Type viewModelType, Dictionaryparameters) Navigates the specified location registered using the view model type.\nParameters    Name Description     viewModelType The view model type.   parameters Dictionary of parameters, where the key is the name of the parameter, and the value is the value of the parameter.    Exceptions    Name Description     ArgumentNullException The viewModelType isnull.    Navigate(Uri uri) Navigates to a specific location.\nExceptions    Name Description     ArgumentNullException The uri isnull.    Navigate(string uri, Dictionaryparameters) Navigates to a specific location.\nParameters    Name Description     uri The URI.   parameters Dictionary of parameters, where the key is the name of the parameter, and the value is the value of the parameter.    Exceptions    Name Description     ArgumentException The uri isnull or whitespace.    Navigate(Dictionaryparameters) Navigates the specified location registered using the view model type.\nType Parameters TViewModelType The view model type.\nParameters    Name Description     parameters Dictionary of parameters, where the key is the name of the parameter, and the value is the value of the parameter.    Register(Type viewModelType, Uri uri) Registers the specified view model and the uri. Use this method to override the uri detection mechanism in Catel.\nParameters    Name Description     viewModelType Type of the view model.   uri The URI to register.    Exceptions    Name Description     ArgumentException The viewModelType does not implement IViewModel.   ArgumentNullException The uri isnull.    Register(string name, Uri uri) Registers the specified view model and the uri. Use this method to override the uri detection mechanism in Catel.\nParameters    Name Description     name The name of the registered page.   uri The URI to register.    Exceptions    Name Description     ArgumentException The name isnull or whitespace.   ArgumentNullException The uri isnull.   InvalidOperationException The name is already registered.    RemoveAllBackEntries() Removes all the back entries from the navigation history.\nRemoveBackEntry() Removes the last back entry from the navigation history.\nUnregister(Type viewModelType) This unregisters the specified view model.\nParameters    Name Description     viewModelType Type of the view model to unregister.    Returns true if the view model is unregistered; otherwisefalse.\nUnregister(string name) This unregisters the specified view model.\nParameters    Name Description     name Name of the registered page.    Returns true if the view model is unregistered; otherwisefalse.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/navigationservicebase/",
	"title": "NavigationServiceBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class NavigationServiceBase : ViewModelServiceBase  Base types ViewModelServiceBase\nAbstract base class to support abstract partial methods.\nProperties CanGoBack Gets a value indicating whether it is possible to navigate back.\nCanGoForward Gets a value indicating whether it is possible to navigate forward.\nMethods GetBackStackCount() Returns the number of total back entries (which is the navigation history).\nRemoveAllBackEntries() Removes all the back entries from the navigation history.\nRemoveBackEntry() Removes the last back entry from the navigation history.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/navigationviewmodelbase/",
	"title": "NavigationViewModelBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class NavigationViewModelBase : ViewModelBase  Base types ViewModelBase\nExtended base class for view models that include navigation. This class adds navigation commands and the navigation service.\nFields Constructors Properties Back Gets the Back command.\nForward Gets the Forward command.\nNavigationService Gets the navigation service which can be used to navigate inside an application.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/notsupportedinplatformexception/",
	"title": "NotSupportedInPlatformException",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class NotSupportedInPlatformException : Exception  Base types Exception\nException in case the functionality is not supported in the current platform. Unfortunately, some platforms miss a lot of functionality. When a feature is not supported in Catel, this is because the .NET Framework (or actually the specified platform) does not allow the code to handle that specific feature.\nConstructors NotSupportedInPlatformException() Initializes a new instance of the NotSupportedInPlatformException class.\nNotSupportedInPlatformException(string message) Initializes a new instance of the NotSupportedInPlatformException class.\nParameters    Name Description     message The message.    NotSupportedInPlatformException(string featureFormat, object[] args) Initializes a new instance of the NotSupportedInPlatformException class.\nParameters    Name Description     featureFormat The feature format.   args The formatting arguments.    Properties Platform Gets the platform.\nReason Get the reason why the feature is not supported.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/collections/notifylistchangedeventargs/",
	"title": "NotifyListChangedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Collections   Available on .NET Framework 4.5, .NET Framework 4.6    public class NotifyListChangedEventArgs : ListChangedEventArgs  Base types ListChangedEventArgs\nThe notify list changed event args.\nConstructors NotifyListChangedEventArgs(ListChangedType listChangedType) Initializes a new instance of the NotifyListChangedEventArgs class.\nParameters    Name Description     listChangedType Type of change.    NotifyListChangedEventArgs(ListChangedType listChangedType, PropertyDescriptor propDesc) Initializes a new instance of the NotifyListChangedEventArgs class.\nParameters    Name Description     listChangedType Type of change.   propDesc The that was added, removed, or changed.    NotifyListChangedEventArgs(ListChangedType listChangedType, int newIndex) Initializes a new instance of the NotifyListChangedEventArgs class.\nParameters    Name Description     listChangedType Type of change.   newIndex The index of the item that was added, changed, or removed.    NotifyListChangedEventArgs(ListChangedType listChangedType, int newIndex, PropertyDescriptor propDesc) Initializes a new instance of the NotifyListChangedEventArgs class.\nParameters    Name Description     listChangedType Type of change.   newIndex The index of the item that was added or changed.   propDesc The describing the item.    NotifyListChangedEventArgs(ListChangedType listChangedType, int newIndex, int oldIndex) Initializes a new instance of the NotifyListChangedEventArgs class.\nParameters    Name Description     listChangedType Type of change.   newIndex The new index of the item that was moved.   oldIndex The old index of the item that was moved.    NotifyListChangedEventArgs(ListChangedType listChangedType, int newIndex, object newItem) Initializes a new instance of the NotifyListChangedEventArgs class.\nParameters    Name Description     listChangedType Type of change.   newIndex The index of the item that was added, changed, or removed.   newItem The item that was added, changed, or removed.    NotifyListChangedEventArgs(ListChangedType listChangedType, int newIndex, object newItem, PropertyDescriptor propDesc) Initializes a new instance of the NotifyListChangedEventArgs class.\nParameters    Name Description     listChangedType Type of change.   newIndex The index of the item that was added or changed.   newItem The item that was added, changed, or removed.   propDesc The describing the item.    NotifyListChangedEventArgs(ListChangedType listChangedType, int newIndex, object newItem, int oldIndex, object oldItem) Initializes a new instance of the NotifyListChangedEventArgs class.\nParameters    Name Description     listChangedType Type of change.   newIndex The new index of the item that was moved.   newItem The new item that was moved.   oldIndex The old index of the item that was moved.   oldItem The old item that was moved.    Properties NewItem The new item.\nOldItem The old item.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/collections/notifyrangedcollectionchangedeventargs/",
	"title": "NotifyRangedCollectionChangedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Collections   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class NotifyRangedCollectionChangedEventArgs : NotifyCollectionChangedEventArgs  Base types NotifyCollectionChangedEventArgs\nThe ranged notify collection changed event args.\nConstructors NotifyRangedCollectionChangedEventArgs() Initializes a new instance of the NotifyRangedCollectionChangedEventArgs class.\nRemarks This is only for use of None.\nNotifyRangedCollectionChangedEventArgs(IList changedItems, IList indices, SuspensionMode mode) Initializes a new instance of the NotifyRangedCollectionChangedEventArgs class.\nParameters    Name Description     changedItems The changed items.   indices The indices.   mode The suspension mode.    Remarks This only for use of Adding and Removing.\nNotifyRangedCollectionChangedEventArgs(IList changedItems, IList indices, SuspensionMode mode, NotifyCollectionChangedAction action) Initializes a new instance of the NotifyRangedCollectionChangedEventArgs class.\nParameters    Name Description     changedItems The changed items.   indices The indices.   mode The suspension mode.   action The action.    Remarks This is only for use of MixedBash.\nNotifyRangedCollectionChangedEventArgs(IList changedItems, IList indices, IList mixedActions) Initializes a new instance of the NotifyRangedCollectionChangedEventArgs class.\nParameters    Name Description     changedItems The changed items.   indices The indices.   mixedActions The mixed actions.    Remarks This is only for use of Mixed.\nProperties ChangedItems Gets the changed items.\nIndices Gets the indices.\nMixedActions Gets the mixed actions.\nSuspensionMode Gets the suspension mode.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/collections/notifyrangedlistchangedaction/",
	"title": "NotifyRangedListChangedAction",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Collections   Available on .NET Framework 4.5, .NET Framework 4.6    public enum NotifyRangedListChangedAction : Enum  Base types Enum\nDescribes the real action performed on the Missing: .\nFields Add 0\nItems was added to the Missing: .\nRemove 1\nItems was removed from the Missing: .\nReset 2\nThe Missing:  has been reset.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/collections/notifyrangedlistchangedeventargs/",
	"title": "NotifyRangedListChangedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Collections   Available on .NET Framework 4.5, .NET Framework 4.6    public class NotifyRangedListChangedEventArgs : NotifyListChangedEventArgs  Base types NotifyListChangedEventArgs\nThe ranged notify list changed event args.\nConstructors NotifyRangedListChangedEventArgs(NotifyRangedListChangedAction action) Initializes a new instance of the NotifyRangedListChangedEventArgs class.\nParameters    Name Description     action The real action that was performed on the Missing: .    NotifyRangedListChangedEventArgs(NotifyRangedListChangedAction action, IList changedItems, IList indices) Initializes a new instance of the NotifyRangedListChangedEventArgs class.\nParameters    Name Description     action The real action that was performed on the Missing: .   changedItems The changed items.   indices The indices.    Properties Action Gets the real action that was performed on the Missing: .\nIndices Gets the indices.\nNewItems Gets the new items.\nNewStartingIndex Gets the new starting index.\nOldItems Gets the old items.\nOldStartingIndex Gets the old starting index.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/nullablevalueconverter/",
	"title": "NullableValueConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class NullableValueConverter : ValueConverterBase  Base types ValueConverterBase\nConverts a value to a representive value for nullable.\nRemarks Resolves problem with databinding with nullables. When textbox hasn\u0026rsquo;t a value then null is expected as return value.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/numerictextbox/",
	"title": "NumericTextBox",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6    public class NumericTextBox : BehaviorBase\u0026lt;TextBox\u0026gt;  Base types BehaviorBase\nBehavior to only allow numeric input on a.\nFields IsDecimalAllowedProperty Using a DependencyProperty as the backing store for IsDecimalAllowed. This enables animation, styling, binding, etc\u0026hellip;\nIsNegativeAllowedProperty Are negative numbers allowed\nUpdateBindingOnTextChangedProperty Using a DependencyProperty as the backing store for UpdateBindingOnTextChanged. This enables animation, styling, binding, etc\u0026hellip;\nProperties IsDecimalAllowed Gets or sets a value indicating whether decimal values are allowed.\nIsNegativeAllowed Gets or sets a value indicating whether negative values are allowed.\nUpdateBindingOnTextChanged Gets or sets a value indicating whether the binding should be updated whenever the text changes.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/objectadapter/",
	"title": "ObjectAdapter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ObjectAdapter : IObjectAdapter  Base types\nIObjectAdapter\nAdapter to interact with objects.\nFields Methods GetMemberValue(object model, string memberName, SerializationModelInfo modelInfo) Gets the member value.\nParameters    Name Description     model The model.   memberName Name of the member.   modelInfo The model information.    Returns MemberValue.\nSetMemberValue(object model, MemberValue member, SerializationModelInfo modelInfo) Sets the member value.\nParameters    Name Description     model The model.   member The member.   modelInfo The model information.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/objectconverterservice/",
	"title": "ObjectConverterService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ObjectConverterService : IObjectConverterService  Base types\nIObjectConverterService\nService to convert objects to strings and vice versa.\nConstructors ObjectConverterService() Initializes a new instance of the ObjectConverterService class.\nProperties DefaultCulture Gets or sets the default culture.\nMethods ConvertFromObjectToObject(object value, Type targetType) Converts the specified object to an object.\nParameters    Name Description     value The value.   targetType Type of the target.    Returns The object value.\nConvertFromObjectToString(object value) Converts the specified object to a string.\nParameters    Name Description     value The value.    Returns The string value.\nConvertFromObjectToString(object value, CultureInfo culture) Converts from object to string.\nParameters    Name Description     value The value.   culture The culture.    Returns System.String.\nExceptions    Name Description     System.NotImplementedException     ConvertFromStringToObject(string value, Type targetType) Converts the specified string value to an object.\nParameters    Name Description     value The value.   targetType The target type.    Returns The object value.\nConvertFromStringToObject(string value, Type targetType, CultureInfo culture) Converts from string to object.\nParameters    Name Description     value The value.   targetType Type of the target.   culture The culture.    Returns System.Object.\nExceptions    Name Description     System.NotImplementedException     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/objectextensions/",
	"title": "ObjectExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ObjectExtensions  IoC extensions for all objects.\nMethods GetDependencyResolver(object obj) Gets the IDependencyResolver that was used to create the specified object. This is a convenience call that internally does this:``` var dependencyResolverManager = DependencyResolverManager.Default; var dependencyResolver = dependencyResolverManager.GetDependencyResolverForInstance(obj);\n #### Parameters Name|Description ---|--- **obj**|The object. #### Returns The [IDependencyResolver](#) for this object. ### GetServiceLocator(object obj) Gets the [IServiceLocator](#) that was used to create the specified object. This is a convenience call that internally does this:``` var serviceLocator = DependencyResolverManager.Default; var dependencyResolver = dependencyResolverManager.GetDependencyResolverForInstance(obj); var serviceLocator = dependencyResolver.Resolve\u0026lt;IServiceLocator\u0026gt;();  Parameters    Name Description     obj The object.    Returns The IServiceLocator used to create this object.\nGetTypeFactory(object obj) Gets the ITypeFactory that was used to create the specified object. This is a convenience call that internally does this:``` var dependencyResolverManager = DependencyResolverManager.Default; var dependencyResolver = dependencyResolverManager.GetDependencyResolverForInstance(obj); var typeFactory = dependencyResolver.Resolve();\n```\nParameters    Name Description     obj The object.    Returns The ITypeFactory used to create this object.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/objectextensions/",
	"title": "ObjectExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ObjectExtensions  Object extensions for reflection.\nMethods ToAttributeArray(object[] objects) Converts the list of objects to an array of attributes, very easy to use during GetCustomAttribute reflection.\nParameters    Name Description     objects The object array, can benull.    Returns Attribute array or empty array if objects isnull.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/objectextensions/",
	"title": "ObjectExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ObjectExtensions  Object extensions class.\nMethods IsSentinelBindingObject(object dataContext) Determines whether the specified object is a sentinel. For more information, see http://stackoverflow.com/questions/3868786/wpf-sentinel-objects-and-how-to-check-for-an-internal-type. Original license: CC BY-SA 2.5, compatible with the MIT license.\nParameters    Name Description     dataContext The data context.    Returns true if the data context is a sentinel; otherwise,false.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/objecthelper/",
	"title": "ObjectHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ObjectHelper  Object helper class.\nMethods AreEqual(object object1, object object2) Checks whether the 2 specified objects are equal. This method is better, simple because it also checks boxing so 2 integers with the same values that are boxed are equal.\nParameters    Name Description     object1 The first object.   object2 The second object.    Returns true if the objects are equal; otherwisefalse.\nAreEqualReferences(object object1, object object2) Checks whether the 2 specified objects are equal references. This method is better, simple because it also checks boxing so 2 integers with the same values that are boxed are equal. Two objects are considered equal if one of the following expressions returns true:\nParameters    Name Description     object1 The first object.   object2 The second object.    Returns true if the objects are equal references; otherwisefalse.\nIsNull(object obj) Determines whether the specified object isnull orDBNull.Value.\nParameters    Name Description     obj The object to chec..    Returns true if the specified object isnull orDBNull.Value; otherwise,false.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/objecttodisplaynameconverter/",
	"title": "ObjectToDisplayNameConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ObjectToDisplayNameConverter : ValueConverterBase  Base types ValueConverterBase\nConverts elements to a display name. This supports classes, member info, enums, etc.\nProperties LanguageService Gets or sets the language service. If this value is set, it will be used inside the DisplayNameAttribute.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/objecttostringhelper/",
	"title": "ObjectToStringHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ObjectToStringHelper  Simple static class that turns an object to string.\nConstructors Properties DefaultCulture Gets or sets the default culture to use for parsing.\nMethods ToFullTypeString(object instance) Returns a that represents the full type name of the instance. If the instance isnull, this method will return \u0026ldquo;null\u0026rdquo;. This method is great when the value of a property must be logged.\nParameters    Name Description     instance The instance.    Returns A that represents the type of the instance.\nToString(object instance) Returns a that represents the instance. If the instance isnull, this method will return \u0026ldquo;null\u0026rdquo;. This method is great when the value of a property must be logged.\nParameters    Name Description     instance The instance, can benull.    Returns A that represents the instance.\nToString(object instance, CultureInfo cultureInfo) Returns a that represents the instance. If the instance isnull, this method will return \u0026ldquo;null\u0026rdquo;. This method is great when the value of a property must be logged.\nParameters    Name Description     instance The instance, can benull.   cultureInfo The culture information.    Returns A that represents the instance.\nToTypeString(object instance) Returns a that represents the type name of the instance. If the instance isnull, this method will return \u0026ldquo;null\u0026rdquo;. This method is great when the value of a property must be logged.\nParameters    Name Description     instance The instance.    Returns A that represents the type of the instance.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/observableobject/",
	"title": "ObservableObject",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ObservableObject : IAdvancedNotifyPropertyChanged  Base types\nIAdvancedNotifyPropertyChanged\nVery basic class implementing the interfaces.\nEvents PropertyChanged Occurs when a property of this object has changed.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/observableobjectextensions/",
	"title": "ObservableObjectExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ObservableObjectExtensions  Extension methods for the ObservableObject class.\nMethods RaiseAllPropertiesChanged(ObservableObject sender) Raises the property changed event for the specified ObservableObject.\nParameters    Name Description     sender The observable object.    Exceptions    Name Description     ArgumentNullException The sender isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/openfileservice/",
	"title": "OpenFileService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class OpenFileService : IOpenFileService, FileServiceBase  Base types FileServiceBase\nBase types\nIOpenFileService\nService to open files.\nProperties FileNames Gets the file names in case IsMultiSelect istrue.\nIsMultiSelect Gets or sets a value indicating whether this instance is multi select.\nMethods DetermineFileAsync() Determines the filename of the file what will be used.\nReturns true if a file is selected; otherwisefalse.\nRemarks If this method returnstrue, theFileName property will be filled with the filename. Otherwise, no changes will occur to the data of this object.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/openinstanceactionhandler/",
	"title": "OpenInstanceActionHandler",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public delegate OpenInstanceActionHandler\u0026lt;TTarget\u0026gt; : MulticastDelegate  Base types MulticastDelegate\nOpen instance delegate which allows the creation of an instance method without an actual reference to the target.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/openinstanceeventhandler/",
	"title": "OpenInstanceEventHandler",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public delegate OpenInstanceEventHandler\u0026lt;TTarget, TEventArgs\u0026gt; : MulticastDelegate  Base types MulticastDelegate\nOpen instance delegate which allows the creation of an instance method without an actual reference to the target.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/controls/page/",
	"title": "Page",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Controls   Available on .NET Framework 4.5, .NET Framework 4.6    public class Page : IPage, Page  Base types Page\nBase types\nIPage\nPage class that supports MVVM with Catel.\nFields Constructors Page() Initializes a new instance of the Page class.\nRemarks It is not possible to inject view models.\nProperties PreventViewModelCreation Gets or sets a value indicating whether the view model container should prevent the creation of a view model. This property is very useful when using views in transitions where the view model is no longer required.\nViewModel Gets the view model that is contained by the container.\nViewModelType Gets the type of the view model that this user control uses.\nEvents PropertyChanged Occurs when a property on the container has changed.\nRemarks This event makes it possible to externally subscribe to property changes of a (mostly the container of a view model) because the .NET Framework does not allows us to.\nViewModelChanged Occurs when the ViewModel property has changed.\nViewModelPropertyChanged Occurs when a property on the ViewModel has changed.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/providers/pagelogic/",
	"title": "PageLogic",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Providers   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class PageLogic : NavigationLogicBase\u0026lt;IPage\u0026gt;  Base types NavigationLogicBase\nMVVM Provider behavior implementation for a navigation page.\nFields Constructors PageLogic(IPage targetPage, Type viewModelType) Initializes a new instance of the PageLogic class.\nParameters    Name Description     targetPage The page this provider should take care of.   viewModelType Type of the view model.    Exceptions    Name Description     ArgumentNullException The targetPage isnull.    Properties Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/pagenotregisteredexception/",
	"title": "PageNotRegisteredException",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class PageNotRegisteredException : Exception  Base types Exception\nException in case a page not registered, but still being used.\nConstructors PageNotRegisteredException(string name) Initializes a new instance of the PageNotRegisteredException class.\nParameters    Name Description     name The name of the page.    Properties Name Gets the name of the page.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/parallelhelper/",
	"title": "ParallelHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ParallelHelper  Helper class to execute groups of methods in parallel.\nFields Methods ExecuteInParallel(List items, Action actionToInvoke, int itemsPerBatch, string taskName) Executes all the items in the collection in parallel batches.\nType Parameters T The item type.\nParameters    Name Description     items The items.   actionToInvoke The action to invoke per item.   itemsPerBatch The items per batch.   taskName Name of the task, can benull.    Exceptions    Name Description     ArgumentNullException The items isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/io/path/",
	"title": "Path",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IO   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class Path  Static class that implements some path methods\nMethods AppendTrailingSlash(string path) Appends a trailing backslash () to the path.\nParameters    Name Description     path Path to append the trailing backslash to.    Returns Path including the trailing backslash.\nExceptions    Name Description     ArgumentException The path isnull or whitespace.    AppendTrailingSlash(string path, char slash) Appends a trailing slash (\\ or /) to the path.\nParameters    Name Description     path Path to append the trailing slash to.   slash Slash to append (\\ or /).    Returns Path including the trailing slash.\nExceptions    Name Description     ArgumentException The path isnull or whitespace.    Combine(string[] paths) Returns a combination of multiple paths.\nParameters    Name Description     paths Paths to combine.    Returns Combination of all the paths passed.\nCombineUrls(string[] urls) Returns a combination of multiple urls.\nParameters    Name Description     urls Urls to combine.    Returns Combination of all the urls passed.\nGetApplicationDataDirectory() Gets the application data directory for the company and product as defined the the assembly information of the entry assembly. If the entry assembly isnull, this method will fall back to the calling assembly to retrieve the information. If the folder does not exist, the folder is automatically created by this method. This method returns a value like [application data][company][product name].\nReturns Directory for the application data.\nGetApplicationDataDirectory(ApplicationDataTarget applicationDataTarget) Gets the application data directory for the company and product as defined the the assembly information of the entry assembly. If the entry assembly isnull, this method will fall back to the calling assembly to retrieve the information. If the folder does not exist, the folder is automatically created by this method. This method returns a value like [application data][company][product name].\nReturns Directory for the application data.\nGetApplicationDataDirectory(ApplicationDataTarget applicationDataTarget, string productName) Gets the application data directory for a specific product. If the folder does not exist, the folder is automatically created by this method. This method returns a value like [application data][product name].\nParameters    Name Description     applicationDataTarget The application data target.   productName Name of the product.    Returns Directory for the application data.\nGetApplicationDataDirectory(ApplicationDataTarget applicationDataTarget, string companyName, string productName) Gets the application data directory for a specific product of a specific company. If the folder does not exist, the folder is automatically created by this method. This method returns a value like [application data][company][product name].\nParameters    Name Description     applicationDataTarget The application data target.   companyName Name of the company.   productName Name of the product.    Returns Directory for the application data.\nGetApplicationDataDirectory(string productName) Gets the application data directory for a specific product. If the folder does not exist, the folder is automatically created by this method. This method returns a value like [application data][product name].\nParameters    Name Description     productName Name of the product.    Returns Directory for the application data.\nGetApplicationDataDirectory(string companyName, string productName) Gets the application data directory for a specific product of a specific company. If the folder does not exist, the folder is automatically created by this method. This method returns a value like [application data][company][product name].\nParameters    Name Description     companyName Name of the company.   productName Name of the product.    Returns Directory for the application data.\nGetApplicationDataDirectoryForAllUsers() Gets the application data directory for the company and product as defined the the assembly information of the entry assembly. If the entry assembly isnull, this method will fall back to the calling assembly to retrieve the information. If the folder does not exist, the folder is automatically created by this method. This method returns a value like [application data][company][product name].\nReturns Directory for the application data.\nGetApplicationDataDirectoryForAllUsers(string productName) Gets the application data directory for a specific product. If the folder does not exist, the folder is automatically created by this method. This method returns a value like [application data][product name].\nParameters    Name Description     productName Name of the product.    Returns Directory for the application data.\nGetApplicationDataDirectoryForAllUsers(string companyName, string productName) Gets the application data directory for a specific product of a specific company. If the folder does not exist, the folder is automatically created by this method. This method returns a value like [application data][company][product name].\nParameters    Name Description     companyName Name of the company.   productName Name of the product.    Returns Directory for the application data.\nGetDirectoryName(string path) Gets the name of the directory.\nParameters    Name Description     path The path to get the directory name from.    Returns The directory name.\nExceptions    Name Description     ArgumentException The path isnull or whitespace.    GetFileName(string path) Gets the name of the file.\nParameters    Name Description     path The path to get the file name from.    Returns The file name.\nExceptions    Name Description     ArgumentException The path isnull or whitespace.    GetFullPath(string relativePath, string basePath) Returns the full path for a relative path.\nParameters    Name Description     relativePath Relative path to convert to a full path.   basePath Base path (a.k.a. working directory).    Returns Full path.\nExceptions    Name Description     ArgumentException The relativePath isnull or whitespace.    GetParentDirectory(string path) Gets the parent directory.\nParameters    Name Description     path The path to get the parent directory from.    Returns Parent directory of a path. If there is no parent directory, is returned.\nRemarks This method will always strip the trailing backslash from the parent.\nGetRelativePath(string fullPath, string basePath) Returns a relative path string from a full path. The path to convert. Can be either a file or a directory The base path to truncate to and replace Lower case string of the relative path. If path is a directory it\u0026rsquo;s returned without a backslash at the end. Examples of returned values: .\\test.txt, ..\\test.txt, ......\\test.txt, ., ..\nParameters    Name Description     fullPath Full path to convert to relative path.   basePath The base path (a.k.a. working directory). If this parameter isnull or empty, the current working directory will be used.    Returns Relative path.\nExceptions    Name Description     ArgumentException The fullPath isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/platformtobooleanconverter/",
	"title": "PlatformToBooleanConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class PlatformToBooleanConverter : ValueConverterBase  Base types ValueConverterBase\nReturns a boolean whether the currently executing platform is available.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/platforms/",
	"title": "Platforms",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class Platforms  Information about the platforms.\nConstructors Properties CurrentPlatform Gets the current platform.\nMethods IsPlatformSupported(KnownPlatforms platformToCheck) Determines whether the specified known platforms is currently supported.\nParameters    Name Description     platformToCheck The platform to check.    Returns true if the platform is supported; otherwise,false.\nIsPlatformSupported(KnownPlatforms platformToCheck, SupportedPlatforms currentPlatform) Determines whether the specified known platforms is currently supported.\nParameters    Name Description     platformToCheck The platform to check.   currentPlatform The current platform.    Returns true if the platform is supported; otherwise,false.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/pleasewaitservice/",
	"title": "PleaseWaitService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class PleaseWaitService : IPleaseWaitService  Base types\nIPleaseWaitService\nService to show a busy indicator.\nFields Constructors PleaseWaitService(ILanguageService languageService, IDispatcherService dispatcherService) Initializes a new instance of the PleaseWaitService class.\nParameters    Name Description     languageService The language service.   dispatcherService The dispatcher service.    Properties ShowCounter Gets the show counter. This property can be used to get the current show counter if the please wait window should be hidden for a moment.\nMethods Hide() Hides this please wait window.\nPop() Decreases the number of clients that show the please wait window. The implementing class is responsible for holding a counter internally which a call to this method will decrease. As long as the internal counter is not zero (0), the please wait window will stay visible. To increase the counter, make a call to Pop. A call to String) or one of its overloads will not increase the internal counter. A call to Hide will reset the internal counter to zero (0) and thus hide the window.\nPush(string status) Increases the number of clients that show the please wait window. The implementing class is responsible for holding a counter internally which a call to this method will increase. As long as the internal counter is not zero (0), the please wait window will stay visible. To decrease the counter, make a call to Pop. A call to String) or one of its overloads will not increase the internal counter. A call to Hide will reset the internal counter to zero (0) and thus hide the window.\nParameters    Name Description     status The status to change the text to.    Show(PleaseWaitWorkDelegate workDelegate, string status) Shows the please wait window with the specified status text and executes the work delegate (in a background thread). When the work is finished, the please wait window will be automatically closed.\nParameters    Name Description     workDelegate The work delegate.   status The status. When the string isnull or empty, the default please wait text will be used.    Show(string status) Shows the please wait window with the specified status text.\nParameters    Name Description     status The status. When the string isnull or empty, the default please wait text will be used.    Remarks When this method is used, the Hide method must be called to hide the window again.\nUpdateStatus(int currentItem, int totalItems, string statusFormat) Updates the status and shows a progress bar with the specified status text. The percentage will be automatically calculated. The busy indicator will automatically hide when the totalItems is larger than currentItem. When providing the statusFormat, it is possible to use{0} (represents current item) and{1} (represents total items).\nParameters    Name Description     currentItem The current item.   totalItems The total items.   statusFormat The status format. Can be empty, but notnull.    Exceptions    Name Description     ArgumentOutOfRangeException The currentItem is smaller than zero.   ArgumentNullException The statusFormat isnull.    UpdateStatus(string status) Updates the status text.\nParameters    Name Description     status The status. When the string isnull or empty, the default please wait text will be used.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/pleasewaitworkdelegate/",
	"title": "PleaseWaitWorkDelegate",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public delegate PleaseWaitWorkDelegate : MulticastDelegate  Base types MulticastDelegate\nPlease wait work delegate.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/exceptionhandling/policybase/",
	"title": "PolicyBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ExceptionHandling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class PolicyBase : IPolicy  Base types\nIPolicy\nThe policy base.\nProperties Interval Gets the interval.\nNumberOfTimes Gets the number of times.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/pooling/poolmanager/",
	"title": "PoolManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Pooling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class PoolManager\u0026lt;TPoolable\u0026gt; : IPoolManager\u0026lt;TPoolable\u0026gt; where TPoolable : new(), class, IPoolable  Base types\nIPoolManager\nPool manager allowing objects to be pooled. The implementation removes objects from the internal stack and releases them. If no instance is available, a new one will be created that should be returned to the pool once disposed.\nType Parameters TPoolable Type of the object to be pooled.\nFields Constructors PoolManager() Creates a new instance of the pool manager.\nProperties Count Gets the total number of objects insider this pool.\nCurrentSize Gets the current size.\nMaxSize Gets the maximum size of the pool.\nMethods GetObject() Gets the poolable object from the pool.\nReturns A free poolable object.\nReturnObject(TPoolable value) Returns a used object back to the pool so it can be re-used.\nParameters    Name Description     value The value to return to the pool.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/pooling/poolablebase/",
	"title": "PoolableBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Pooling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class PoolableBase : IUniqueIdentifyable, IPoolable  Base types\nIUniqueIdentifyable,IPoolable\nBase implementation for any poolable object.\nFields Constructors Properties Size The size of the object.\nUniqueIdentifier Gets the unique identifier.\nMethods Dispose() Disposes the object and returns the object to the pool manager.\nReset() Resets the object to an initial state.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/popuphelper/",
	"title": "PopupHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows   Available on .NET Framework 4.5, .NET Framework 4.6    public static class PopupHelper  Popup helper class to retrieve all the popups inside a windows application, which are not available via the regular property.\nProperties Popups Gets all the popups of the current application.\nMethods GetAllPopups() Gets all the popups of the current application.\nReturns The popups.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/controls/popuplayout/",
	"title": "PopupLayout",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Controls   Available on Portable Class Libraries    public class PopupLayout : RelativeLayout  Base types RelativeLayout\nIs a relative layout that allow show view as modal.\nFields Properties Content The content view.\nIsPopupActive Methods DismissPopupAsync() Dismiss popup.\nReturns ShowPopupAsync(View view) Show a view as\nParameters    Name Description     view The view to be displayed as popup    Returns Exceptions    Name Description     System.ArgumentNullException The view isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/processcompleteddelegate/",
	"title": "ProcessCompletedDelegate",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public delegate ProcessCompletedDelegate : MulticastDelegate  Base types MulticastDelegate\nDelegate to invoke when a process of the IProcessService is completed.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/processextensions/",
	"title": "ProcessExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6    public static class ProcessExtensions  Process extensions.\nMethods GetParent(Process process) Gets the parent process of the specified process.\nParameters    Name Description     process The process.    Returns Process.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/processservice/",
	"title": "ProcessService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6    public class ProcessService : IProcessService  Base types\nIProcessService\nProcess service to run files or start processes from a view model.\nMethods StartProcess(string fileName, string arguments, ProcessCompletedDelegate processCompletedCallback) Starts a process resource by specifying the name of an application and a set of command-line arguments.\nParameters    Name Description     fileName The name of an application file to run in the process.   arguments Command-line arguments to pass when starting the process.   processCompletedCallback The process completed callback, invoked only when the process is started successfully and completed.    Exceptions    Name Description     ArgumentException The fileName isnull or whitespace.   Win32Exception An error occurred when opening the associated file.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/progresscontext/",
	"title": "ProgressContext",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ProgressContext : Disposable  Base types Disposable\nNever calculate progress manually anymore.\nFields Constructors ProgressContext(long totalCount, int numberOfRefreshes) Initializes a new instance of the ProgressContext class.\nParameters    Name Description     totalCount The total count that this progress context represents.   numberOfRefreshes The number of refreshes required during progress.    Properties CurrentCount Gets or sets the current count.\nCurrentRefreshNumber Gets the current refresh number. This represents a value that is calculated based on the TotalCount, CurrentCount and NumberOfRefreshes.\nIsRefreshRequired Gets a value indicating whether an update is required. An update is required at the moment that the CurrentCount exactly meets the count representing a single refresh.\nNumberOfRefreshes Gets the number of refreshes.\nPercentage Gets the percentage of the progress.\nTotalCount Gets the total count.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/progressnotifyableviewmodel/",
	"title": "ProgressNotifyableViewModel",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class ProgressNotifyableViewModel : IProgressNotifyableViewModel, ViewModelBase  Base types ViewModelBase\nBase types\nIProgressNotifyableViewModel\nThe progress notifyable view model base.\nFields DetailedMessageProperty Register the DetailedMessage property so it is known in the class.\nTaskIsIndeterminateProperty Register the TaskPercentage property so it is known in the class.\nTaskMessageProperty Register the TaskMessage property so it is known in the class.\nTaskNameProperty Register the TaskName property so it is known in the class.\nTaskPercentageProperty Register the TaskPercentage property so it is known in the class.\nTaskProperty Register the Task property so it is known in the class.\nConstructors ProgressNotifyableViewModel() Initializes a new instance of the ProgressNotifyableViewModel class.\nRemarks Must have a public constructor in order to be serializable.\nProgressNotifyableViewModel(IServiceLocator serviceLocator, bool supportIEditableObject, bool ignoreMultipleModelsWarning, bool skipViewModelAttributesInitialization) Initializes a new instance of the ViewModelBase class. This constructor allows the injection of a custom IServiceLocator.\nParameters    Name Description     serviceLocator The service locator to inject. Ifnull, the Default will be used.   supportIEditableObject if set totrue, the view model will natively support models that implement the interface.   ignoreMultipleModelsWarning if set totrue, the warning when using multiple models is ignored.   skipViewModelAttributesInitialization if set totrue, the initialization will be skipped and must be done manually via InitializeViewModelAttributes.    Exceptions    Name Description     T:Catel.MVVM.ModelNotRegisteredException A mapped model is not registered.   T:Catel.MVVM.PropertyNotFoundInModelException A mapped model property is not found.    ProgressNotifyableViewModel(bool supportIEditableObject, bool ignoreMultipleModelsWarning, bool skipViewModelAttributesInitialization) Initializes a new instance of the ProgressNotifyableViewModel class.\nParameters    Name Description     supportIEditableObject if set totrue, the view model will natively support models that implement the interface.   ignoreMultipleModelsWarning if set totrue, the warning when using multiple models is ignored.   skipViewModelAttributesInitialization if set totrue, the initialization will be skipped and must be done manually via InitializeViewModelAttributes.    Exceptions    Name Description     T:Catel.MVVM.ModelNotRegisteredException A mapped model is not registered.   T:Catel.MVVM.PropertyNotFoundInModelException A mapped model property is not found.    Properties DetailedMessage Gets the detailed message.\nPercentage Gets the percentage.\nTask Gets the task.\nTaskIsIndeterminate Gets or sets the task percentage.\nTaskMessage Gets or sets the task message.\nTaskName Gets or sets the task name.\nTaskPercentage Gets or sets the task percentage.\nMethods UpdateStatus(int currentItem, int totalItems, ITask task) The update status.\nParameters    Name Description     currentItem The current item.   totalItems The total items.   task The task    Exceptions    Name Description     System.ArgumentNullException The task isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/progressivetaskcommand/",
	"title": "ProgressiveTaskCommand",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ProgressiveTaskCommand\u0026lt;TProgress\u0026gt; : TaskCommand\u0026lt;object, object, TProgress\u0026gt; where TProgress : ITaskProgressReport  Base types TaskCommand\nImplements the Missing:  class with only the TProgress as generic type.\nType Parameters TProgress Type of the progress change info.\nConstructors ProgressiveTaskCommand(Func, Task\u0026gt; execute, Func canExecute, Action reportProgress, object tag) Initializes a new instance of the Missing:  class.\nParameters    Name Description     execute The action to execute.   canExecute The function to call to determine whether the command can be executed.   reportProgress Action is executed each time task progress is reported.   tag The tag of the command.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/propertyalreadyregisteredexception/",
	"title": "PropertyAlreadyRegisteredException",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class PropertyAlreadyRegisteredException : Exception  Base types Exception\nException when a property is added to the ModelBase class that is already registered by the object.\nConstructors PropertyAlreadyRegisteredException(string propertyName, Type propertyType) Initializes a new instance of the PropertyAlreadyRegisteredException class.\nParameters    Name Description     propertyName Name of the property that caused the exception.   propertyType Type of the object that is trying to register the property.    Properties PropertyName Gets or sets the property name.\nPropertyType Gets or sets the property type for which the property is already registered.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/propertybag/",
	"title": "PropertyBag",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class PropertyBag : INotifyPropertyChanged  Base types INotifyPropertyChanged\nClass that is able to manage all properties of a specific object in a thread-safe manner.\nFields Constructors PropertyBag() Initializes a new instance of the PropertyBag class.\nProperties this[] Gets or sets the property using the indexer.\nParameters    Name Description     name The name.    Returns The value of the property.\nEvents PropertyChanged Occurs when a property value changes.\nMethods GetAllProperties() Gets all the currently available properties in the property bag.\nReturns A list of all property names and values.\nGetPropertyValue(string propertyName) Gets the property value. If the property is not yet created, the default value will be returned.\nType Parameters TValue The type of the value.\nParameters    Name Description     propertyName Name of the property.    Returns The property value or the default value of TValue if the property does not exist.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    GetPropertyValue(string propertyName, TValue defaultValue) Gets the property value. If the property is not yet created, the default value will be returned.\nType Parameters TValue The type of the value.\nParameters    Name Description     propertyName Name of the property.   defaultValue The default value.    Returns The property value or the default value of TValue if the property does not exist.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    Import(DictionarypropertiesToImport) Imports the properties in the existing dictionary. This method will overwrite all existing property values in the property bag.\nParameters    Name Description     propertiesToImport The properties to import.    Exceptions    Name Description     ArgumentNullException The propertiesToImport isnull.    IsPropertyAvailable(string propertyName) Determines whether the specified property is available on the property bag, which means it has a value.\nParameters    Name Description     propertyName Name of the property.    Returns true if the property is available; otherwise,false.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    SetPropertyValue(string propertyName, bool value) Sets the property value.\nParameters    Name Description     propertyName Name of the property.   value The value.    Exceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    SetPropertyValue(string propertyName, short value) Sets the property value.\nParameters    Name Description     propertyName Name of the property.   value The value.    Exceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    SetPropertyValue(string propertyName, int value) Sets the property value.\nParameters    Name Description     propertyName Name of the property.   value The value.    Exceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    SetPropertyValue(string propertyName, long value) Sets the property value.\nParameters    Name Description     propertyName Name of the property.   value The value.    Exceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    SetPropertyValue(string propertyName, object value) Sets the property value.\nParameters    Name Description     propertyName Name of the property.   value The value.    Exceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    SetPropertyValue(string propertyName, ushort value) Sets the property value.\nParameters    Name Description     propertyName Name of the property.   value The value.    Exceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    SetPropertyValue(string propertyName, uint value) Sets the property value.\nParameters    Name Description     propertyName Name of the property.   value The value.    Exceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    SetPropertyValue(string propertyName, ulong value) Sets the property value.\nParameters    Name Description     propertyName Name of the property.   value The value.    Exceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    UpdatePropertyValue(string propertyName, Funcupdate) Updates the property value by retrieving it from the property bag. After invoking the update action, the value will be written back to the property bag.\nType Parameters TValue The type of the t value.\nParameters    Name Description     propertyName Name of the property.   update The update.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/system/componentmodel/propertychangedeventargsextensions/",
	"title": "PropertyChangedEventArgsExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace System.ComponentModel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class PropertyChangedEventArgsExtensions  Extensions for the class.\nMethods AllPropertiesChanged(PropertyChangedEventArgs e) Returns whether the specified instance of the represents that all properties of an object have changed. This is the case when the isnull or empty.\nParameters    Name Description     e The instance containing the event data.    Returns true if the isnull or empty,false otherwise.\nExceptions    Name Description     ArgumentNullException The e isnull.    HasPropertyChanged(PropertyChangedEventArgs e, string propertyName) Determines whether the specified instance of the represents a change notification for the property specified by the property name.\nParameters    Name Description     e The instance containing the event data.   propertyName Name of the property.    Returns true if equals the property from the property expression; otherwise,false.\nExceptions    Name Description     ArgumentNullException The e isnull.   ArgumentException The propertyName isnull or whitespace.    HasPropertyChanged(PropertyChangedEventArgs e, Expression\u0026gt; propertyExpression, bool allowNested) Determines whether the specified instance of the represents a change notification for the property specified by the property expression.\nType Parameters TModel The type of the model.\nTValue The type of the value.\nParameters    Name Description     e The instance containing the event data.   propertyExpression The property expression.   allowNested if set totrue, nested properties are allowed.    Returns true if equals the property from the property expression; otherwise,false.\nExceptions    Name Description     ArgumentNullException The e isnull.    HasPropertyChanged(PropertyChangedEventArgs e, Expression\u0026gt; propertyExpression, bool allowNested) Determines whether the specified instance of the represents a change notification for the property specified by the property expression.\nType Parameters TValue The type of the value.\nParameters    Name Description     e The instance containing the event data.   propertyExpression The property expression.   allowNested if set totrue, nested properties are allowed.    Returns true if equals the property from the property expression; otherwise,false.\nExceptions    Name Description     ArgumentNullException The e isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/propertydata/",
	"title": "PropertyData",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class PropertyData  Object that contains all the property data that is used by the ModelBase class.\nFields Constructors Properties IncludeInBackup Gets a value indicating whether whether the property should be included in the backup for IEditableObject.\nIncludeInSerialization Gets a value indicating whether whether the property should be included in the serialization.\nIsCalculatedProperty Gets a value indicating whether this is a calculated property.\nIsModelBaseProperty Gets a value indicating whether the property is declared by the ModelBase.\nIsSerializable Gets a value indicating whether this property is serializable.\nName Gets the name of the property.\nType Gets the type of the property.\nMethods GetDefaultValue() Returns the default value of the property.\nReturns Default value of the property.\nGetDefaultValue() Returns the typed default value of the property.\nType Parameters TValue The type of the value.\nReturns Default value of the property.\nGetPropertyInfo(Type containingType) Gets the property information.\nParameters    Name Description     containingType Type of the containing.    Returns CachedPropertyInfo.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/propertydatamanager/",
	"title": "PropertyDataManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class PropertyDataManager  Property data manager.\nFields Constructors PropertyDataManager() Initializes a new instance of the PropertyDataManager class.\nProperties Default Gets the default instance of the property data manager.\nMethods GetCatelTypeInfo(Type type) Gets the property data type information.\nParameters    Name Description     type The type.    Returns The CatelTypeInfo representing the specified type.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetPropertyData(Type type, string name) Gets the property data.\nParameters    Name Description     type The type for which to get the property data.   name The name of the property.    Returns The PropertyData of the requested property.\nExceptions    Name Description     ArgumentNullException The type isnull.   ArgumentException The name isnull or whitespace.   T:Catel.Data.PropertyNotRegisteredException Thrown when the property is not registered.    IsPropertyNameMappedToXmlAttribute(Type type, string propertyName) Determines whether the specified property is mapped to an XML attribute.\nParameters    Name Description     type The type.   propertyName Name of the property.    Returns true if the property name is mapped to an XML attribute; otherwise,false.\nExceptions    Name Description     ArgumentNullException The type isnull.   ArgumentException The propertyName isnull or whitespace.    IsPropertyNameMappedToXmlElement(Type type, string propertyName) Determines whether the specified property is mapped to an XML element.\nParameters    Name Description     type The type.   propertyName Name of the property.    Returns true if the property name is mapped to an XML element; otherwise,false.\nExceptions    Name Description     ArgumentNullException The type isnull.   ArgumentException The propertyName isnull or whitespace.    IsPropertyRegistered(Type type, string name) Returns whether a specific property is registered.\nParameters    Name Description     type The type for which to check whether the property is registered.   name The name of the property.    Returns True if the property is registered, otherwise false.\nExceptions    Name Description     ArgumentNullException The type isnull.   ArgumentException The name isnull or whitespace.    IsXmlAttributeNameMappedToProperty(Type type, string xmlName) Determines whether the specified XML attribute is mapped to a property name.\nParameters    Name Description     type The type.   xmlName Name of the XML.    Returns true if the XML attribute is mapped to a property name; otherwise,false.\nExceptions    Name Description     ArgumentNullException The type isnull.   ArgumentException The xmlName isnull or whitespace.    IsXmlElementNameMappedToProperty(Type type, string xmlName) Determines whether the specified XML element is mapped to a property name.\nParameters    Name Description     type The type.   xmlName Name of the XML.    Returns true if the XML element is mapped to a property name; otherwise,false.\nExceptions    Name Description     ArgumentNullException The type isnull.   ArgumentException The xmlName isnull or whitespace.    MapPropertyNameToXmlAttributeName(Type type, string propertyName) Maps the name of the property name to an XML attribute name.\nParameters    Name Description     type The type for which to make the xml name.   propertyName Name of the property.    Returns Name of the XML attribute that represents the property value.\nMapPropertyNameToXmlElementName(Type type, string propertyName) Maps the name of the property name to an XML element name.\nParameters    Name Description     type The type for which to make the xml name.   propertyName Name of the property.    Returns Name of the XML element that represents the property value.\nMapXmlAttributeNameToPropertyName(Type type, string xmlName) Maps the name of the XML attribute to a property name.\nParameters    Name Description     type The type for which to make the xml name.   xmlName Name of the XML attribute.    Returns Name of the property that represents the xml value.\nExceptions    Name Description     ArgumentNullException The type isnull.   ArgumentException The xmlName isnull or whitespace.    MapXmlElementNameToPropertyName(Type type, string xmlName) Maps the name of the XML element to a property name.\nParameters    Name Description     type The type for which to make the xml name.   xmlName Name of the XML element.    Returns Name of the property that represents the xml value.\nExceptions    Name Description     ArgumentNullException The type isnull.   ArgumentException The xmlName isnull or whitespace.    RegisterProperties(Type type) Registers all the properties for the specified type. This method can only be called once per type. The PropertyDataManager caches whether it has already registered the properties once.\nParameters    Name Description     type The type to register the properties for.    Returns The property data type info.\nExceptions    Name Description     ArgumentNullException The type isnull.   InvalidOperationException The properties are not declared correctly.    RegisterProperty(Type type, string name, PropertyData propertyData) Registers a property for a specific type.\nParameters    Name Description     type The type for which to register the property.   name The name of the property.   propertyData The property data.    Exceptions    Name Description     ArgumentNullException The type isnull.   ArgumentException The name isnull or whitespace.   T:Catel.Data.PropertyAlreadyRegisteredException A property with the same name is already registered.    UnregisterProperty(Type type, string name) Unregisters a property for a specific type.\nParameters    Name Description     type The type for which to register the property.   name The name of the property.    Exceptions    Name Description     ArgumentNullException The type isnull.   ArgumentException The name isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/propertyhelper/",
	"title": "PropertyHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class PropertyHelper  Property helper class.\nFields Methods GetHiddenPropertyValue(object obj, string property, Type baseType) Gets hidden property value.\nType Parameters TValue The type of the T value.\nParameters    Name Description     obj The obj.   property The property.   baseType The base Type.    Returns ``0.\nExceptions    Name Description     T:Catel.Reflection.PropertyNotFoundException    System.ArgumentNullException The obj isnull.   System.ArgumentException The property isnull or whitespace.    GetPropertyInfo(object obj, string property, bool ignoreCase) Gets the property info from the cache.\nParameters    Name Description     obj The object.   property The property.   ignoreCase if set totrue, ignore case.    Returns PropertyInfo.\nGetPropertyName(Expression propertyExpression, bool allowNested) Gets the name of the property based on the expression.\nParameters    Name Description     propertyExpression The property expression.   allowNested If set totrue, nested properties are allowed.    Returns The string representing the property name.\nExceptions    Name Description     ArgumentNullException The propertyExpression isnull.   NotSupportedException The specified expression is not a member access expression.    GetPropertyName(Expression\u0026gt; propertyExpression, bool allowNested) Gets the name of the property based on the expression.\nType Parameters TModel The type of the model.\nTValue The type of the value.\nParameters    Name Description     propertyExpression The property expression.   allowNested If set totrue, nested properties are allowed.    Returns The string representing the property name.\nExceptions    Name Description     ArgumentNullException The propertyExpression isnull.   NotSupportedException The specified expression is not a member access expression.    GetPropertyName(Expression\u0026gt; propertyExpression, bool allowNested) Gets the name of the property based on the expression.\nType Parameters TValue The type of the value.\nParameters    Name Description     propertyExpression The property expression.   allowNested If set totrue, nested properties are allowed.    Returns The string representing the property name.\nExceptions    Name Description     ArgumentNullException The propertyExpression isnull.   NotSupportedException The specified expression is not a member access expression.    GetPropertyValue(object obj, string property, bool ignoreCase) Gets the property value of a specific object.\nParameters    Name Description     obj The object.   property The property.   ignoreCase if set totrue, ignore case when searching for the property name.    Returns The property value ornull if no property can be found.\nExceptions    Name Description     T:Catel.Reflection.PropertyNotFoundException The obj is not found or not publicly available.   T:Catel.Reflection.CannotGetPropertyValueException The property value cannot be read.   ArgumentNullException The obj isnull.   ArgumentException The property isnull or whitespace.    GetPropertyValue(object obj, string property, bool ignoreCase) Gets the property value of a specific object.\nType Parameters TValue The type of the value.\nParameters    Name Description     obj The object.   property The property.   ignoreCase if set totrue, ignore case when searching for the property name.    Returns The property value ornull if no property can be found.\nExceptions    Name Description     ArgumentNullException The obj isnull.   ArgumentException The property isnull or whitespace.   T:Catel.Reflection.PropertyNotFoundException The obj is not found or not publicly available.   T:Catel.Reflection.CannotGetPropertyValueException The property value cannot be read.    IsPropertyAvailable(object obj, string property, bool ignoreCase) Determines whether the specified property is available on the object.\nParameters    Name Description     obj The object.   property The property.   ignoreCase if set totrue, ignore case when searching for the property name.    Returns true if the property exists on the object type; otherwise,false.\nExceptions    Name Description     ArgumentNullException The obj isnull.   ArgumentException The property isnull or whitespace.    IsPublicProperty(object obj, string property, bool ignoreCase) Determines whether the specified property is a public property on the specified object.\nParameters    Name Description     obj The object.   property The property.   ignoreCase if set totrue, ignore case when searching for the property name.    Returns true if the property is a public property on the specified object; otherwise,false.\nExceptions    Name Description     ArgumentNullException The obj isnull.   ArgumentException The property isnull or whitespace.    SetPropertyValue(object obj, string property, object value, bool ignoreCase) Sets the property value of a specific object.\nParameters    Name Description     obj The object.   property The property.   value The value.   ignoreCase if set totrue, ignore case when searching for the property name.    Exceptions    Name Description     T:Catel.Reflection.PropertyNotFoundException The obj is not found or not publicly available.   T:Catel.Reflection.CannotSetPropertyValueException The the property value cannot be written.   ArgumentNullException The obj isnull.   ArgumentException The property isnull or whitespace.    TryGetPropertyValue(object obj, string property, bool ignoreCase, object value) Tries to get the property value. If it fails, not exceptions will be thrown but the value is set to a default value and the method will returnfalse.\nParameters    Name Description     obj The object.   property The property.   ignoreCase if set totrue, ignore case when searching for the property name.   value The value as output parameter.    Returns true if the method succeeds; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The obj isnull.   ArgumentException The property isnull or whitespace.    TryGetPropertyValue(object obj, string property, object value) Tries to get the property value. If it fails, not exceptions will be thrown but the value is set to a default value and the method will returnfalse.\nParameters    Name Description     obj The object.   property The property.   value The value as output parameter.    Returns true if the method succeeds; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The obj isnull.   ArgumentException The property isnull or whitespace.    TryGetPropertyValue(object obj, string property, bool ignoreCase, TValue value) Tries to get the property value. If it fails, not exceptions will be thrown but the value is set to a default value and the method will returnfalse.\nType Parameters TValue The type of the value.\nParameters    Name Description     obj The object.   property The property.   ignoreCase if set totrue, ignore case when searching for the property name.   value The value as output parameter.    Returns true if the method succeeds; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The obj isnull.   ArgumentException The property isnull or whitespace.    TryGetPropertyValue(object obj, string property, TValue value) Tries to get the property value. If it fails, not exceptions will be thrown but the value is set to a default value and the method will returnfalse.\nType Parameters TValue The type of the value.\nParameters    Name Description     obj The object.   property The property.   value The value as output parameter.    Returns true if the method succeeds; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The obj isnull.   ArgumentException The property isnull or whitespace.    TrySetPropertyValue(object obj, string property, object value, bool ignoreCase) Tries to set the property value. If it fails, no exceptions will be thrown, butfalse will be returned.\nParameters    Name Description     obj The object.   property The property.   value The value.   ignoreCase if set totrue, ignore case when searching for the property name.    Returns true if the method succeeds; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The obj isnull.   ArgumentException The property isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/propertynotfoundexception/",
	"title": "PropertyNotFoundException",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class PropertyNotFoundException : Exception  Base types Exception\nException for in case a property is not found.\nConstructors PropertyNotFoundException(string propertyName) Initializes a new instance of the PropertyNotFoundException class.\nParameters    Name Description     propertyName Name of the property.    Properties PropertyName Gets the name of the property.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/propertynotfoundinmodelexception/",
	"title": "PropertyNotFoundInModelException",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class PropertyNotFoundInModelException : Exception  Base types Exception\nException in case a mapped property is not found on the model.\nConstructors PropertyNotFoundInModelException(string viewModelPropertyName, string modelName, string modelPropertyName) Initializes a new instance of the PropertyNotFoundInModelException class.\nParameters    Name Description     viewModelPropertyName Name of the view model property.   modelName Name of the model.   modelPropertyName Name of the model property.    Properties ModelName Gets the name of the model.\nModelPropertyName Gets the name of the model property.\nViewModelPropertyName Gets the name of the view model property.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/propertynotnullableexception/",
	"title": "PropertyNotNullableException",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class PropertyNotNullableException : Exception  Base types Exception\nException when a property value is set to null but when the type does not support null values.\nConstructors PropertyNotNullableException(string propertyName, Type propertyType) Initializes a new instance of the PropertyNotNullableException class.\nParameters    Name Description     propertyName Name of the property that caused the exception.   propertyType Type of the object that is trying to register the property.    Properties PropertyName Gets or sets the property name.\nPropertyType Gets or sets the property type for which the property is already registered.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/propertynotregisteredexception/",
	"title": "PropertyNotRegisteredException",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class PropertyNotRegisteredException : Exception  Base types Exception\nException when a property is used by the ModelBase class that is not registered by the object.\nConstructors PropertyNotRegisteredException(string propertyName, Type objectType) Initializes a new instance of the PropertyNotRegisteredException class.\nParameters    Name Description     propertyName Name of the property that caused the exception.   objectType Type of the object that is trying to register the property.    Properties ObjectType Gets or sets the object type for which the property is already registered.\nPropertyName Gets or sets the property name.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/propertyvalue/",
	"title": "PropertyValue",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class PropertyValue : ISerializable  Base types ISerializable\nClass holding a property value to serialize using the ModelBase.\nConstructors PropertyValue() Initializes a new instance of the PropertyValue class.\nPropertyValue(PropertyData propertyData, KeyValuePairkeyValuePair) Initializes a new instance of the PropertyValue class.\nParameters    Name Description     propertyData The property data.   keyValuePair The key value pair.    Exceptions    Name Description     ArgumentNullException The propertyData isnull.   ArgumentException TheKey of keyValuePair isnull or whitespace.    PropertyValue(PropertyData propertyData, string name, object value) Initializes a new instance of the PropertyValue class.\nParameters    Name Description     propertyData The property data.   name The name of the property.   value The value of the property.    Exceptions    Name Description     ArgumentNullException The propertyData isnull.   ArgumentException The name isnull or whitespace.    PropertyValue(SerializationInfo info, StreamingContext context) Initializes a new instance of the PropertyValue class.\nProperties GraphId Gets or sets the graph identifier.\nGraphRefId Gets or sets the graph reference identifier.\nName Gets or sets the name of the property.\nPropertyData Gets the property data.\nValue Gets or sets the value of the property.\nMethods GetObjectData(SerializationInfo info, StreamingContext context) Populates a SerializationInfo with the data needed to serialize the target object.\nParameters    Name Description     info The SerializationInfo to populate with data.   context The destination (see StreamingContext ) for this serialization.    Exceptions    Name Description     T:System.Security.SecurityException The caller does not have the required permission.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/threading/readerwriterlockslimextensions/",
	"title": "ReaderWriterLockSlimExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ReaderWriterLockSlimExtensions  Provides extensions for.\nMethods PerformRead(ReaderWriterLockSlim lockSlim, Action criticalOperation) Performs operation that requires read access to shared resource.\nParameters    Name Description     lockSlim The reader-writer lock.   criticalOperation Performed operation.    PerformRead(ReaderWriterLockSlim lockSlim, Func criticalOperation) Performs operation that requires read access to shared resource and returns it result.\nType Parameters T Type of result.\nParameters    Name Description     lockSlim The reader-writer lock.   criticalOperation Performed operation.    Returns Performed operation result.\nPerformUpgradableRead(ReaderWriterLockSlim lockSlim, Action criticalOperation) Performs operation that requires read access to shared resource but may require write access also.\nParameters    Name Description     lockSlim The reader-writer lock.   criticalOperation Performed operation.    PerformUpgradableRead(ReaderWriterLockSlim lockSlim, Func criticalOperation) Performs operation that requires read access to shared resource but may require write access also and returns it result.\nType Parameters T Type of result.\nParameters    Name Description     lockSlim The reader-writer lock.   criticalOperation Performed operation.    Returns Performed operation result.\nPerformWrite(ReaderWriterLockSlim lockSlim, Action criticalOperation) Performs operation that requires write access to shared resource.\nParameters    Name Description     lockSlim The reader-writer lock.   criticalOperation Performed operation.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/binary/redirectdeserializationbinder/",
	"title": "RedirectDeserializationBinder",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Binary   Available on .NET Framework 4.5, .NET Framework 4.6    public class RedirectDeserializationBinder : SerializationBinder  Base types SerializationBinder\nclass that supports backwards compatible serialization.\nFields Constructors RedirectDeserializationBinder(int typesPerThread) Initializes a new instance of the RedirectDeserializationBinder class. Creates a custom binder that redirects all the types to new types if required. All properties decorated with the RedirectTypeAttribute will be redirected.\nParameters    Name Description     typesPerThread The number of types per thread to initialize. If-1, the types will be initialized in a single thread.    Remarks This constructor searches for attributes in a specific application domain.\nMethods BindToType(string assemblyName, string typeName) Binds an assembly and typename to a specific type.\nParameters    Name Description     assemblyName Original assembly name.   typeName Original type name.    Returns that the serialization should actually use.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/binary/redirecttypeattribute/",
	"title": "RedirectTypeAttribute",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Binary   Available on .NET Framework 4.5, .NET Framework 4.6    public class RedirectTypeAttribute : Attribute  Base types Attribute\nAttribute that can be used to redirect types to other types to be able to rename / move property types.\nRemarks This attribute should be appended to the property definition. In case this attribute is used on a field or property, the NewAssemblyName and NewTypeName are mandatory. In all other cases, the type and assembly will be loaded automatically.\nConstructors RedirectTypeAttribute(string originalAssemblyName, string originalTypeName) Initializes a new instance of the RedirectTypeAttribute class.\nParameters    Name Description     originalAssemblyName Original assembly location..   originalTypeName Original type name.    Exceptions    Name Description     ArgumentException The originalAssemblyName isnull or whitespace.    Properties NewAssemblyName Gets or sets the new assembly name.\nRemarks Leave empty if the assembly name is unchanged.\nNewTypeName Gets or sets the new type name.\nRemarks Leave empty if the type name is unchanged. List or Array types should be postfixed with a [[]].\nOriginalAssemblyName Gets the original assembly name.\nOriginalType Gets the original type.\nOriginalTypeName Gets the original type name.\nRemarks List or Array types should be postfixed with a [[]].\nTypeToLoad Gets the new type that should be loaded.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/referenceequalitycomparer/",
	"title": "ReferenceEqualityComparer",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ReferenceEqualityComparer\u0026lt;TObject\u0026gt; : IEqualityComparer\u0026lt;TObject\u0026gt; where TObject : class  Base types IEqualityComparer\nEquality comparer for by reference.\nType Parameters TObject The type of the object.\nMethods Equals(TObject x, TObject y) Determines whether the specified objects are equal.\nParameters    Name Description     x The first object to compare.   y The second object to compare.    Returns true if the specified objects are equal; otherwise, false.\nGetHashCode(TObject obj) Returns a hash code for this instance.\nParameters    Name Description     obj The Object for which a hash code is to be returned.    Returns A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.\nExceptions    Name Description     System.NotImplementedException     "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/referenceinfo/",
	"title": "ReferenceInfo",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ReferenceInfo  Info about a reference which can provide a unique reference.\nConstructors ReferenceInfo(object instance, int id, bool isFirstUsage) Initializes a new instance of the ReferenceInfo class.\nParameters    Name Description     instance The instance.   id The unique identifier.   isFirstUsage if set totrue, this is the first usage of this instance.    Properties Id Gets the unique identifier.\nInstance Gets the instance.\nIsFirstUsage Gets a value indicating whether this is the first usage of this instance.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/referencemanager/",
	"title": "ReferenceManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ReferenceManager  Class responsible for managing identifiers for circular dependencies.\nFields Constructors ReferenceManager() Initializes a new instance of the ReferenceManager class.\nProperties Count Gets the number of items in the reference manager.\nMethods GetInfo(object instance) Gets the info for the specified instance.\nParameters    Name Description     instance The instance.    Returns The ReferenceInfo ornull if instance isnull.\nGetInfoAt(int index) Gets the info at the specified index.\nParameters    Name Description     index The index.    Returns The ReferenceInfo.\nGetInfoById(int id) Gets the information by the unique identifier.\nParameters    Name Description     id The unique identifier.    Returns The ReferenceInfo ornull if the id is not found.\nRegisterManually(int id, object instance) Registers the specified instance manually.\nParameters    Name Description     id The unique identifier.   instance The instance.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/referencetobooleanconverter/",
	"title": "ReferenceToBooleanConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ReferenceToBooleanConverter : ValueConverterBase  Base types ValueConverterBase\nImplementation of class ReferenceToBooleanConverter\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/referencetocollapsingvisibilityconverter/",
	"title": "ReferenceToCollapsingVisibilityConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - Android, Xamarin - iOS    public class ReferenceToCollapsingVisibilityConverter : VisibilityConverterBase  Base types VisibilityConverterBase\nConvert from reference to. If the reference contains a value, Visibility.Visible will be returned. If the reference is null, Visibility.Collapsed will be returned.\nConstructors ReferenceToCollapsingVisibilityConverter() Initializes a new instance of the ReferenceToCollapsingVisibilityConverter class.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/referencetohidingvisibilityconverter/",
	"title": "ReferenceToHidingVisibilityConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6    public class ReferenceToHidingVisibilityConverter : ReferenceToCollapsingVisibilityConverter  Base types ReferenceToCollapsingVisibilityConverter\nConvert from reference to. If the reference contains a value, Visibility.Visible will be returned. If the reference is null, Visibility.Hidden will be returned.\nConstructors ReferenceToHidingVisibilityConverter() Initializes a new instance of the ReferenceToHidingVisibilityConverter class.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/reflectionextensions/",
	"title": "ReflectionExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ReflectionExtensions  Reflection extension class.\nFields Methods ContainsGenericParametersEx(Type type) Determines whether the specified type contains generic parameters.\nParameters    Name Description     type The type.    Returns true if the specified type contains generic parameters; otherwise,false.\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetAssemblyEx(Type type) The get assembly ex.\nParameters    Name Description     type The type.    Returns Assembly.\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetAssemblyFullNameEx(Type type) The get assembly full name ex.\nParameters    Name Description     type The type.    Returns The get assembly full name ex.\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetAttribute(MemberInfo memberInfo, Type attributeType) Gets the attribute from the member.\nParameters    Name Description     memberInfo The member Info.   attributeType Type of the attribute.    Returns The attribute ornull of the member is not decorated with the attribute.\nExceptions    Name Description     ArgumentNullException The memberInfo isnull.    GetAttribute(Type type, Type attributeType) Gets the attribute from the type.\nParameters    Name Description     type The type.   attributeType Type of the attribute.    Returns The attribute ornull of the member is not decorated with the attribute.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetAttribute(MemberInfo memberInfo) Gets the attribute from the member.\nType Parameters TAttribute The attribute type.\nParameters    Name Description     memberInfo The member Info.    Returns The attribute ornull of the member is not decorated with the attribute.\nExceptions    Name Description     ArgumentNullException The memberInfo isnull.    GetAttribute(Type type) Gets the attribute from the type.\nType Parameters TAttribute The attribute type.\nParameters    Name Description     type The type.    Returns The attribute ornull of the member is not decorated with the attribute.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetBaseTypeEx(Type type) The get base type ex.\nParameters    Name Description     type The type.    Returns Type.\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetConstructorEx(Type type, Type[] types) The get constructor ex.\nParameters    Name Description     type The type.   types The types.    Returns ConstructorInfo.\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetConstructorsEx(Type type) The get constructors ex.\nParameters    Name Description     type The type.    Returns ConstructorInfo[][].\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetCustomAttributeEx(Assembly assembly, Type attributeType) GetCustomAttributeEx(MethodInfo methodInfo, Type attributeType, bool inherit) GetCustomAttributeEx(PropertyInfo propertyInfo, Type attributeType, bool inherit) GetCustomAttributeEx(Type type, Type attributeType, bool inherit) The get custom attribute ex.\nParameters    Name Description     type The type.   attributeType The attribute type.   inherit The inherit.    Returns The get custom attribute ex.\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetCustomAttributesEx(Assembly assembly, Type attributeType) GetCustomAttributesEx(MethodInfo methodInfo, Type attributeType, bool inherit) GetCustomAttributesEx(MethodInfo methodInfo, bool inherit) GetCustomAttributesEx(PropertyInfo propertyInfo, Type attributeType, bool inherit) GetCustomAttributesEx(PropertyInfo propertyInfo, bool inherit) GetCustomAttributesEx(Type type, Type attributeType, bool inherit) The get custom attributes ex.\nParameters    Name Description     type The type.   attributeType The attribute type.   inherit The inherit.    Returns System.Object[][].\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetCustomAttributesEx(Type type, bool inherit) The get custom attributes ex.\nParameters    Name Description     type The type.   inherit The inherit.    Returns System.Object[][].\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetElementTypeEx(Type type) Gets the element type of the specified type.\nParameters    Name Description     type The type.    Returns Type.\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetEventEx(Type type, string name, BindingFlags bindingFlags) The get event ex.\nParameters    Name Description     type The type.   name The name.   bindingFlags The binding Flags.    Returns EventInfo.\nExceptions    Name Description     System.ArgumentNullException The type isnull.   System.ArgumentException The name isnull or whitespace.    GetEventEx(Type type, string name, bool flattenHierarchy, bool allowStaticMembers) The get event ex.\nParameters    Name Description     type The type.   name The name.   flattenHierarchy The flatten Hierarchy.   allowStaticMembers The allow Static Members.    Returns EventInfo.\nExceptions    Name Description     System.ArgumentNullException The type isnull.   System.ArgumentException The name isnull or whitespace.    GetEventsEx(Type type, bool flattenHierarchy, bool allowStaticMembers) The get events ex.\nParameters    Name Description     type The type.   flattenHierarchy The flatten Hierarchy.   allowStaticMembers The allow Static Members.    Returns EventInfo[][].\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetExportedTypesEx(Assembly assembly) GetFieldEx(Type type, string name, BindingFlags bindingFlags) The get field ex.\nParameters    Name Description     type The type.   name The name.   bindingFlags The binding Flags.    Returns FieldInfo.\nExceptions    Name Description     System.ArgumentNullException The type isnull.   System.ArgumentException The name isnull or whitespace.    GetFieldEx(Type type, string name, bool flattenHierarchy, bool allowStaticMembers) The get field ex.\nParameters    Name Description     type The type.   name The name.   flattenHierarchy The flatten hierarchy.   allowStaticMembers The allow static members.    Returns FieldInfo.\nExceptions    Name Description     System.ArgumentNullException The type isnull.   System.ArgumentException The name isnull or whitespace.    GetFieldsEx(Type type, BindingFlags bindingFlags) The get fields ex.\nParameters    Name Description     type The type.   bindingFlags The binding Flags.    Returns FieldInfo[][].\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetFieldsEx(Type type, bool flattenHierarchy, bool allowStaticMembers) The get fields ex.\nParameters    Name Description     type The type.   flattenHierarchy The flatten hierarchy.   allowStaticMembers The allow static members.    Returns FieldInfo[][].\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetGenericArgumentsEx(Type type) The get generic arguments ex.\nParameters    Name Description     type The type.    Returns Type[][].\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetGenericTypeDefinitionEx(Type type) Gets the generic type definition of the specified type.\nParameters    Name Description     type The type.    Returns The generic type definition.\nExceptions    Name Description     ArgumentNullException The type isnull.   NotSupportedException The specified type is not a generic type.    GetInterfaceEx(Type type, string name, bool ignoreCase) Gets the element type of the specified type.\nParameters    Name Description     type The type.   name The name.   ignoreCase if set totrue [ignore case].    Returns Type.\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetInterfacesEx(Type type) The get interfaces ex.\nParameters    Name Description     type The type.    Returns Type[][].\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetMemberEx(Type type, string name, BindingFlags bindingFlags) Gets the member on the specified type.\nParameters    Name Description     type The type.   name The name.   bindingFlags The binding Flags.    Returns MemberInfo[][].\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetMemberEx(Type type, string name, bool flattenHierarchy, bool allowStaticMembers) Gets the member on the specified type.\nParameters    Name Description     type The type.   name The name.   flattenHierarchy The flatten hierarchy.   allowStaticMembers The allow static members.    Returns MemberInfo[][].\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetMethodEx(Type type, string name, BindingFlags bindingFlags) The get method ex.\nParameters    Name Description     type The type.   name The name.   bindingFlags The binding Flags.    Returns MethodInfo.\nExceptions    Name Description     System.ArgumentNullException The type isnull.   System.ArgumentException The name isnull or whitespace.    GetMethodEx(Type type, string name, Type[] types, BindingFlags bindingFlags) The get method ex.\nParameters    Name Description     type The type.   name The name.   types The types.   bindingFlags The binding Flags.    Returns MethodInfo.\nExceptions    Name Description     System.ArgumentNullException The type isnull.   System.ArgumentException The name isnull or whitespace.    GetMethodEx(Type type, string name, Type[] types, bool flattenHierarchy, bool allowStaticMembers) The get method ex.\nParameters    Name Description     type The type.   name The name.   types The types.   flattenHierarchy The flatten Hierarchy.   allowStaticMembers The allow Static Members.    Returns MethodInfo.\nExceptions    Name Description     System.ArgumentNullException The type isnull.   System.ArgumentException The name isnull or whitespace.    GetMethodEx(Type type, string name, bool flattenHierarchy, bool allowStaticMembers) The get method ex.\nParameters    Name Description     type The type.   name The name.   flattenHierarchy The flatten Hierarchy.   allowStaticMembers The allow Static Members.    Returns MethodInfo.\nExceptions    Name Description     System.ArgumentNullException The type isnull.   System.ArgumentException The name isnull or whitespace.    GetMethodsEx(Type type, BindingFlags bindingFlags) The get methods ex.\nParameters    Name Description     type The type.   bindingFlags The binding Flags.    Returns MethodInfo[][].\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetMethodsEx(Type type, bool flattenHierarchy, bool allowStaticMembers) The get methods ex.\nParameters    Name Description     type The type.   flattenHierarchy The flatten Hierarchy.   allowStaticMembers The allow Static Members.    Returns MethodInfo[][].\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetParentTypes(Type type) Gets the parent types.\nParameters    Name Description     type The type.    Returns GetPropertiesEx(Type type, BindingFlags bindingFlags) The get properties ex.\nParameters    Name Description     type The type.   bindingFlags The binding Flags.    Returns PropertyInfo[][].\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetPropertiesEx(Type type, bool flattenHierarchy, bool allowStaticMembers) The get properties ex.\nParameters    Name Description     type The type.   flattenHierarchy The flatten hierarchy.   allowStaticMembers The allow static members.    Returns PropertyInfo[][].\nExceptions    Name Description     System.ArgumentNullException The type isnull.    GetPropertyEx(Type type, string name, BindingFlags bindingFlags, bool allowExplicitInterfaceProperties) The get property ex.\nParameters    Name Description     type The type.   name The name.   bindingFlags The binding Flags.   allowExplicitInterfaceProperties if set totrue, this method will check for explicit interface implementations when the property is not found.    Returns PropertyInfo.\nExceptions    Name Description     System.ArgumentNullException The type isnull.   System.ArgumentException The name isnull or whitespace.    GetPropertyEx(Type type, string name, bool flattenHierarchy, bool allowStaticMembers, bool allowExplicitInterfaceProperties) The get property ex.\nParameters    Name Description     type The type.   name The name.   flattenHierarchy The flatten hierarchy.   allowStaticMembers The allow static members.   allowExplicitInterfaceProperties if set totrue, this method will check for explicit interface implementations when the property is not found.    Returns PropertyInfo.\nExceptions    Name Description     System.ArgumentNullException The type isnull.   System.ArgumentException The name isnull or whitespace.    GetSafeFullName(Type type, bool fullyQualifiedAssemblyName) Gets the full name of the type in a safe way. This means it checks for null first.\nParameters    Name Description     type The type.   fullyQualifiedAssemblyName if set totrue, include the assembly name in the type name.    Returns The safe full name.\nGetTypeDistance(Type fromType, Type toType) Gets the distance between types.\nParameters    Name Description     fromType The type   toType The base type    Returns The distance distance between types or -1 if the toType is not assignable from the fromType\nGetTypesEx(Assembly assembly) HasBaseTypeEx(Type type, Type typeToCheck) The has base type ex.\nParameters    Name Description     type The type.   typeToCheck The type to check.    Returns The has base type ex.\nExceptions    Name Description     System.ArgumentNullException The type isnull.    ImplementsInterfaceEx(Type type, Type interfaceType) Returns whether the specified type implements the specified interface.\nParameters    Name Description     type The type.   interfaceType Type of the interface.    Returns true if the type implements the interface; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The type isnull.    ImplementsInterfaceEx(Type type) Returns whether the specified type implements the specified interface.\nType Parameters TInterface The type of the t interface.\nParameters    Name Description     type The type.    Returns true if the type implements the interface; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The type isnull.    IsAbstractEx(Type type) Determines whether the specified type is abstract.\nParameters    Name Description     type The type.    Returns true if the specified type is abstract; otherwise,false.\nIsArrayEx(Type type) Determines whether the specified type is an array.\nParameters    Name Description     type The type.    Returns true if the specified type is an array; otherwise,false.\nIsAssignableFromEx(Type type, Type typeToCheck) The is assignable from ex.\nParameters    Name Description     type The type.   typeToCheck The type to check.    Returns The is assignable from ex.\nExceptions    Name Description     System.ArgumentNullException The type isnull.    IsCatelType(Type type) Determines whether the specified type is a Catel type.\nParameters    Name Description     type Type of the target.    Returns true if the specified type is a Catel type; otherwise,false.\nExceptions    Name Description     ArgumentNullException The type isnull.    IsClassEx(Type type) Determines whether the specified type is a class.\nParameters    Name Description     type The type.    Returns true if the specified type is a class; otherwise,false.\nIsCOMObjectEx(Type type) Determines whether the specified type is a COM object.\nParameters    Name Description     type     Returns IsDecoratedWithAttribute(MemberInfo memberInfo, Type attributeType) Determines whether the specified member is decorated with the specified attribute type.\nParameters    Name Description     memberInfo The member info.   attributeType Type of the attribute.    Returns true if the member is decorated with the attribute; otherwise,false.\nExceptions    Name Description     ArgumentNullException The memberInfo isnull.    IsDecoratedWithAttribute(Type type, Type attributeType) Determines whether the specified member is decorated with the specified attribute type.\nParameters    Name Description     type The type.   attributeType Type of the attribute.    Returns true if the member is decorated with the attribute; otherwise,false.\nExceptions    Name Description     ArgumentNullException The type isnull.    IsDecoratedWithAttribute(MemberInfo memberInfo) Determines whether the specified member is decorated with the specified attribute type.\nType Parameters TAttribute The type of the attribute.\nParameters    Name Description     memberInfo The member info.    Returns true if the member is decorated with the attribute; otherwise,false.\nExceptions    Name Description     ArgumentNullException The memberInfo isnull.    IsDecoratedWithAttribute(Type type) Determines whether the specified member is decorated with the specified attribute type.\nType Parameters TAttribute The type of the attribute.\nParameters    Name Description     type The type.    Returns true if the member is decorated with the attribute; otherwise,false.\nExceptions    Name Description     ArgumentNullException The type isnull.    IsEnumEx(Type type) The is enum ex.\nParameters    Name Description     type The type.    Returns The is enum ex.\nExceptions    Name Description     System.ArgumentNullException The type isnull.    IsGenericTypeDefinitionEx(Type type) The is generic type definition ex.\nParameters    Name Description     type The type.    Returns The is generic type ex.\nExceptions    Name Description     System.ArgumentNullException The type isnull.    IsGenericTypeEx(Type type) The is generic type ex.\nParameters    Name Description     type The type.    Returns The is generic type ex.\nExceptions    Name Description     System.ArgumentNullException The type isnull.    IsInstanceOfTypeEx(Type type, object objectToCheck) The is instance of type ex.\nParameters    Name Description     type The type.   objectToCheck The object to check.    Returns The is instance of type ex.\nExceptions    Name Description     System.ArgumentNullException The type isnull.    IsInterfaceEx(Type type) The is interface ex.\nParameters    Name Description     type The type.    Returns The is interface ex.\nExceptions    Name Description     System.ArgumentNullException The type isnull.    IsNestedPublicEx(Type type) The is nested public ex.\nParameters    Name Description     type The type.    Returns The is nested public ex.\nExceptions    Name Description     System.ArgumentNullException The type isnull.    IsPrimitiveEx(Type type) Returns whether the specified type is a primitive type.\nParameters    Name Description     type The type.    Returns The primitive type specification.\nExceptions    Name Description     System.ArgumentNullException The type isnull.    IsPublicEx(Type type) The is public ex.\nParameters    Name Description     type The type.    Returns The is public ex.\nExceptions    Name Description     System.ArgumentNullException The type isnull.    IsSerializableEx(Type type) The is serializable ex.\nParameters    Name Description     type The type.    Returns The is serializable ex.\nExceptions    Name Description     System.ArgumentNullException The type isnull.    IsValueTypeEx(Type type) The is value type ex.\nParameters    Name Description     type The type.    Returns The is value type ex.\nExceptions    Name Description     System.ArgumentNullException The type isnull.    TryGetAttribute(MemberInfo memberInfo, Type attributeType, Attribute attribute) Tries to the get attribute.\nParameters    Name Description     memberInfo The member Info.   attributeType Type of the attribute.   attribute The attribute.    Returns true if the attribute is retrieved successfully; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The memberInfo isnull.    TryGetAttribute(Type type, Type attributeType, Attribute attribute) Tries to the get attribute.\nParameters    Name Description     type The type.   attributeType Type of the attribute.   attribute The attribute.    Returns true if the attribute is retrieved successfully; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The type isnull.    TryGetAttribute(MemberInfo memberInfo, TAttribute attribute) Tries to the get attribute.\nType Parameters TAttribute The attribute type.\nParameters    Name Description     memberInfo The member Info.   attribute The attribute.    Returns true if the attribute is retrieved successfully; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The memberInfo isnull.    TryGetAttribute(Type type, TAttribute attribute) Tries to the get attribute.\nType Parameters TAttribute The attribute type.\nParameters    Name Description     type The type.   attribute The attribute.    Returns true if the attribute is retrieved successfully; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The type isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/registration/",
	"title": "Registration",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6    public class Registration : ConfigurationElement  Base types ConfigurationElement\nThe registration element.\nFields Properties ImplementationType Gets the implementation type.\nImplementationTypeName Gets or sets the implementation type name.\nInterfaceType Gets the interface type.\nInterfaceTypeName Gets or sets the interface type name.\nRegistrationType Gets or sets the registration type.\nTag Gets or sets the tag.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/registrationconventionbase/",
	"title": "RegistrationConventionBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class RegistrationConventionBase : IRegistrationConvention  Base types\nIRegistrationConvention\nThe IRegistrationConvention base implementation.\nConstructors RegistrationConventionBase(IServiceLocator serviceLocator, RegistrationType registrationType) Initializes a new instance of the RegistrationConventionBase class.\nParameters    Name Description     serviceLocator The service locator.   registrationType Type of the registration.    Properties Container Gets the container.\nRegistrationType Gets or sets the type of the registration.\nMethods Process(IEnumerable typesToRegister) Processes the specified types to register.\nParameters    Name Description     typesToRegister The types to register.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/registrationconventionhandler/",
	"title": "RegistrationConventionHandler",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class RegistrationConventionHandler : IRegistrationConventionHandler  Base types\nIRegistrationConventionHandler\nRepresents the IRegistrationConventionHandler implementation.\nFields Constructors RegistrationConventionHandler(IServiceLocator serviceLocator, ITypeFactory typeFactory) Initializes a new instance of the RegistrationConventionHandler class.\nParameters    Name Description     serviceLocator The service locator.   typeFactory The type factory.    Properties AssemblyFilter Gets the assembly filter.\nDefault Gets the default instance of the registration convention handler.\nRegistrationConventions Gets the registration conventions.\nTypeFilter Gets the type filter.\nMethods AddAssemblyToScan(Assembly assembly) Adds the assembly to scan.\nParameters    Name Description     assembly The assembly.    Exceptions    Name Description     System.ArgumentNullException The assembly isnull.    ApplyConventions() Applies the registered conventions.\nRegisterConvention(RegistrationType registrationType) Registers the convention.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/registrationconventionhandlerextensions/",
	"title": "RegistrationConventionHandlerExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class RegistrationConventionHandlerExtensions  Extensions of IRegistrationConventionHandler.\nMethods AddAssemblyToScan(IRegistrationConventionHandler registrationConventionHandler) Adds the assembly to scan.\nExceptions    Name Description     System.ArgumentNullException The registrationConventionHandler isnull.    ExcludeAllTypesOfNamespace(IRegistrationConventionHandler registrationConventionHandler, string namespace) Excludes the namespace.\nParameters    Name Description     registrationConventionHandler The registration convention handler.   namespace The namespace.    Returns Exceptions    Name Description     System.ArgumentNullException The registrationConventionHandler isnull.   System.ArgumentException The namespace isnull or whitespace.    ExcludeAllTypesOfNamespaceContaining(IRegistrationConventionHandler registrationConventionHandler) Excludes the namespace containing.\nType Parameters T\nParameters    Name Description     registrationConventionHandler The registration convention handler.    Returns Exceptions    Name Description     System.ArgumentNullException The registrationConventionHandler isnull.    ExcludeAssembliesWhere(IRegistrationConventionHandler registrationConventionHandler, Predicate exclude) Only exclude assemblies that match the specified predicate when scanning.\nParameters    Name Description     registrationConventionHandler The registration convention handler.   exclude The exclude.    Returns Exceptions    Name Description     System.ArgumentNullException The registrationConventionHandler isnull.    ExcludeAssembly(IRegistrationConventionHandler registrationConventionHandler) Excludes the assembly.\nType Parameters TAssembly The type of the assembly.\nParameters    Name Description     registrationConventionHandler The registration convention handler.    Returns Exceptions    Name Description     System.ArgumentNullException The registrationConventionHandler isnull.    ExcludeType(IRegistrationConventionHandler registrationConventionHandler) Excludes the type.\nType Parameters T\nParameters    Name Description     registrationConventionHandler The registration convention handler.    Returns Exceptions    Name Description     System.ArgumentNullException The registrationConventionHandler isnull.    ExcludeTypesWhere(IRegistrationConventionHandler registrationConventionHandler, Predicate exclude) Only exclude types that match the specified predicate when scanning.\nParameters    Name Description     registrationConventionHandler The registration convention handler.   exclude The exclude.    Returns Exceptions    Name Description     System.ArgumentNullException The registrationConventionHandler isnull.    IncludeAllTypesOfNamespace(IRegistrationConventionHandler registrationConventionHandler, string namespace) Only include types in the specified namespace or its sub namespaces when scanning.\nParameters    Name Description     registrationConventionHandler The registration convention handler.   namespace The namespace to include.    Returns Exceptions    Name Description     System.ArgumentNullException The registrationConventionHandler isnull.    IncludeAllTypesOfNamespaceContaining(IRegistrationConventionHandler registrationConventionHandler) Only include types in the same namespace as the specified type or its sub namespaces when scanning.\nType Parameters T A type in the namespace to include.\nParameters    Name Description     registrationConventionHandler The registration convention handler.    Returns Exceptions    Name Description     System.ArgumentNullException The registrationConventionHandler isnull.    IncludeType(IRegistrationConventionHandler registrationConventionHandler) Type Parameters T\nParameters    Name Description     registrationConventionHandler The registration convention handler.    Returns Exceptions    Name Description     System.ArgumentNullException The registrationConventionHandler isnull.    IncludeTypesWhere(IRegistrationConventionHandler registrationConventionHandler, Predicate include) Only include types that match the specified predicate when scanning.\nParameters    Name Description     registrationConventionHandler The registration convention handler.   include The predicate to use for matching.    Returns Exceptions    Name Description     System.ArgumentNullException The registrationConventionHandler isnull.    ShouldAlsoUseConvention(IRegistrationConventionHandler registrationConventionHandler, RegistrationType registrationType) Registers the convention.\nType Parameters TRegistrationConvention The type of the registration convention.\nParameters    Name Description     registrationConventionHandler The registration convention handler.   registrationType Type of the registration.    Returns Exceptions    Name Description     System.ArgumentNullException The registrationConventionHandler isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/registrationinfo/",
	"title": "RegistrationInfo",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class RegistrationInfo  Class containing the registration info about a particular type registered in the ServiceLocator.\nConstructors Properties DeclaringType Gets the declaring type, an interface in most cases.\nImplementingType Gets the implementing type.\nIsLateBoundRegistration Gets a value indicating whether this is a late-bound registration, meaning that the type can only be determined after the type is created by a callback.\nIsTypeInstantiatedForSingleton Gets or sets a value indicating whether there is already an instance of this type instantiated when registered as Singleton.\nRemarks Note that this value is alwaysfalse for types that are not registered as Singleton.\nRegistrationType Gets the registration type.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/registrationtype/",
	"title": "RegistrationType",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum RegistrationType : Enum  Base types Enum\nAvailable registration types.\nFields Singleton 0\nSingleton mode which means that the same instance will be returned every time a type is resolved.\nTransient 1\nTransient mode which means that a new instance will be returned every time a type is resolved.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/resourcehelper/",
	"title": "ResourceHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ResourceHelper  Resource helper class to read resource files.\nFields Methods GetString(Type callingType, string resourceFile, string resourceName) Gets the string from the specified resource file.\nParameters    Name Description     callingType Type of the calling.   resourceFile The resource file.   resourceName Name of the resource.    Returns Exceptions    Name Description     ArgumentException The resourceFile isnull or whitespace.    GetString(string resourceName) Gets the string from the specified resource file.\nParameters    Name Description     resourceName Name of the resource.    Returns System.String.\nExceptions    Name Description     ArgumentException The resourceName isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/resourcehelper/",
	"title": "ResourceHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public static class ResourceHelper  Resource helper class.\nFields Methods EnsurePackUriIsAllowed() Ensures that the pack URI is allowed. Sometimes, when no application object is instantiated yet, the pack URI is not allowed. This method takes care of that.\nGetResourceUri(string resourceUri, string shortAssemblyName) Gets the resource URI for the specified resource and assembly name. The uri will be created like the following examples:\nParameters    Name Description     resourceUri The resource URI.   shortAssemblyName Name of the assembly. Ifnull or empty, the current application will be used. If used, this must be the short name of the assembly.    Returns The resource uri.\nExceptions    Name Description     ArgumentException The resourceUri isnull or whitespace.    XamlPageExists(Uri uri) Determines whether the specified uri is pointing to a valid xaml file.\nReturns true if the specified uri is pointing to a valid xaml file; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The uri isnull.    Remarks Note that the uri must be a valid resource URI. The String) can be used to easily create a resource URI.\nXamlPageExists(string uriString) Determines whether the specified uri is pointing to a valid xaml file.\nReturns true if the specified uri is pointing to a valid xaml file; otherwisefalse.\nExceptions    Name Description     ArgumentException The uriString isnull or whitespace.    Remarks Note that the uriString must be a valid resource URI. The String) can be used to easily create a resource URI.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/exceptionhandling/retrypolicy/",
	"title": "RetryPolicy",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ExceptionHandling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class RetryPolicy : IRetryPolicy, PolicyBase  Base types PolicyBase\nBase types\nIRetryPolicy\nRepresents the retry policy.\nConstructors RetryPolicy(int numberOfTimes, TimeSpan interval) Initializes a new instance of the RetryPolicy class.\nParameters    Name Description     numberOfTimes The number of times.   interval The interval.    Exceptions    Name Description     System.ArgumentOutOfRangeException The numberOfTimes is larger than1.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/exceptionhandling/retryingeventargs/",
	"title": "RetryingEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ExceptionHandling   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class RetryingEventArgs : EventArgs  Base types EventArgs\nConstructors RetryingEventArgs(int currentRetryCount, TimeSpan delay, Exception lastException) Initializes a new instance of the RetryingEventArgs class.\nParameters    Name Description     currentRetryCount The current retry attempt count.   delay The delay that indicates how long the current thread will be suspended before the next iteration is invoked.   lastException The exception that caused the retry conditions to occur.    Exceptions    Name Description     System.ArgumentNullException The lastException isnull.    Properties CurrentRetryCount Gets the current retry count.\nDelay Gets the delay that indicates how long the current thread will be suspended before the next iteration is invoked.\nLastException Gets the exception that caused the retry conditions to occur.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/rollinginmemoryloglistener/",
	"title": "RollingInMemoryLogListener",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class RollingInMemoryLogListener : LogListenerBase  Base types LogListenerBase\nIn memory log listener that keeps track of the latest log messages.\nFields Constructors RollingInMemoryLogListener() Initializes a new instance of the RollingInMemoryLogListener class.\nProperties MaximumNumberOfErrorLogEntries Gets or sets the maximum number of error log entries to keep. The default value is 50.\nMaximumNumberOfLogEntries Gets or sets the maximum number of log entries to keep. The default value is 250.\nMaximumNumberOfWarningLogEntries Gets or sets the maximum number of warning log entries to keep. The default value is 50.\nMethods GetErrorLogEntries() Gets the error log entries.\nReturns IEnumerable\u0026lt;LogEntry\u0026gt;.\nGetLogEntries() Gets the log entries.\nReturns IEnumerable\u0026lt;LogEntry\u0026gt;.\nGetWarningLogEntries() Gets the warning log entries.\nReturns IEnumerable\u0026lt;LogEntry\u0026gt;.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/rollinginmemorylogservice/",
	"title": "RollingInMemoryLogService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class RollingInMemoryLogService : IRollingInMemoryLogService, ServiceBase  Base types ServiceBase\nBase types\nIRollingInMemoryLogService\nRolling in memory log service.\nFields Constructors RollingInMemoryLogService() Initializes a new instance of the RollingInMemoryLogService class.\nRollingInMemoryLogService(RollingInMemoryLogListener logListener) Initializes a new instance of the RollingInMemoryLogService class.\nParameters    Name Description     logListener The log listener. Ifnull, this service will create its own log listener.    Properties LogListener Gets the log listener.\nMaximumNumberOfErrorLogEntries Gets or sets the maximum number of error log entries to keep. The default value is 50.\nMaximumNumberOfLogEntries Gets or sets the maximum number of log entries to keep. The default value is 250.\nMaximumNumberOfWarningLogEntries Gets or sets the maximum number of warning log entries to keep. The default value is 50.\nEvents LogMessage Occurs when a log message is written.\nMethods GetErrorLogEntries() Gets the error log entries.\nReturns IEnumerable\u0026lt;LogEntry\u0026gt;.\nGetLogEntries() Gets the log entries.\nReturns IEnumerable\u0026lt;LogEntry\u0026gt;.\nGetWarningLogEntries() Gets the warning log entries.\nReturns IEnumerable\u0026lt;LogEntry\u0026gt;.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/routedeventtrigger/",
	"title": "RoutedEventTrigger",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6    public class RoutedEventTrigger : EventTriggerBase\u0026lt;FrameworkElement\u0026gt;  Base types EventTriggerBase\nEvent trigger that supports routed events.\nProperties RoutedEvent Gets or sets the routed event.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/apicop/rules/",
	"title": "Rules",
	"tags": [],
	"description": "",
	"content": " Rules always belong to an *IApiCop* instance. Rules are registered once and then updated when needed, based on the requirement of the rule. Rules are normally custom-made, but Catel does provide a few base implementations.\nRegistering rules To register a rule in the IApiCop, use the following code:\nApiCop.RegisterRule(new UnusedFeatureApiCopRule(\u0026quot;UserControlLogic.InfoBarMessageControl\u0026quot;, \u0026quot;The InfoBarMessageControl is not found in the visual tree. This will have a negative impact on performance. Consider setting the SkipSearchingForInfoBarMessageControl or DefaultSkipSearchingForInfoBarMessageControlValue to true.\u0026quot;, ApiCopRuleLevel.Error, \u0026quot;https://catelproject.atlassian.net/wiki/display/CTL/Performance+considerations\u0026quot;));  The first argument is the name of the rule. This is a unique identifier and allows users to ignore rules by this name. The next parameter is a good extension which will explain to the end-developer what is wrong and why the rule is created in the first place. In this case it is about the InfoBarMessageControl which might have a negative impact on performance.\nIt is good practice to use the ClassName.FeatureName for the rule names\n\rUpdating rules Once a rule is registered, it must be updated to actually provide any useful information. How a rule must be updated depends on the rule implementation, but the code below shows how the feature can be used. This specific rule is implemented to check if the InfoBarMessageControl is actually used by the software. If it is, the counter is increased as \u0026ldquo;feature being used\u0026rdquo;, otherwise \u0026ldquo;feature not being used\u0026rdquo;.\n_infoBarMessageControl = FindParentByPredicate(TargetControl, o =\u0026gt; o is InfoBarMessageControl) as InfoBarMessageControl; ApiCop.UpdateRule\u0026lt;UnusedFeatureApiCopRule\u0026gt;(\u0026quot;UserControlLogic.InfoBarMessageControl\u0026quot;, rule =\u0026gt; rule.IncreaseCount(_infoBarMessageControl != null, TargetControlType.FullName));  This code shows the regular code executed by the framework (the search in the visual tree) and the update of the rule. Note that the update method only requires the following things: the name, a callback method and a tag. The reason a callback method is being used is that the callback will only be executed when a debugger is attached to minimize the impact on performance in production scenarios.\nIt is good practice to use the final class name as as tag (especially when the rule is registered in a base class)\n\rAvailable rules Catel provides the following rules out of the box.\nUnusedFeatureApiCopRule This rule contains several counters. Each time code is executed, one must call the IncreaseCount method and specify if the feature is being used.\nUsage ApiCop.UpdateRule\u0026lt;UnusedFeatureApiCopRule\u0026gt;(\u0026quot;ruleName\u0026quot;, rule =\u0026gt; rule.IncreaseCount(isFeatureBeingUsed));  "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/runtimebindingredirect/",
	"title": "RuntimeBindingRedirect",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime   Available on .NET Framework 4.5, .NET Framework 4.6    public class RuntimeBindingRedirect  Automatically tries to resolve different versions of already loaded assemblies (runtime binding redirects).\nFields Constructors RuntimeBindingRedirect() Initializes a new instance of the RuntimeBindingRedirect class.\nRuntimeBindingRedirect(AppDomain appDomain) Initializes a new instance of the RuntimeBindingRedirect class.\nParameters    Name Description     appDomain The application domain.    Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/savablemodelbase/",
	"title": "SavableModelBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class SavableModelBase\u0026lt;T\u0026gt; : ISavableModel, ModelBase where T : class  Base types ModelBase\nBase types\nISavableModel\nAbstract class that makes the ModelBase serializable.\nType Parameters T Type that the class should hold (same as the defined type).\nFields Constructors Methods Load(Stream stream, ISerializer serializer, ISerializationConfiguration configuration) Loads the object from a stream using a specific formatting.\nParameters    Name Description     stream Stream that contains the serialized data of this object.   serializer The serializer.   configuration The configuration.    Returns Deserialized instance of the object. If the deserialization fails,null is returned.\nRemarks When enableRedirects is enabled, loading will take more time. Only set the parameter totrue when the deserialization without redirects fails.\nLoad(Type type, Stream stream, ISerializer serializer, ISerializationConfiguration configuration) Loads the object from a stream using a specific formatting.\nParameters    Name Description     type The type.   stream Stream that contains the serialized data of this object.   serializer The serializer.   configuration The configuration.    Returns Deserialized instance of the object. If the deserialization fails,null is returned.\nRemarks When enableRedirects is enabled, loading will take more time. Only set the parameter totrue when the deserialization without redirects fails.\nSave(Stream stream, ISerializer serializer, ISerializationConfiguration configuration) Saves the object to a stream using a specific formatting.\nParameters    Name Description     stream Stream that will contain the serialized data of this object.   serializer The serializer to use.   configuration The configuration.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/savefileservice/",
	"title": "SaveFileService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class SaveFileService : ISaveFileService, FileServiceBase  Base types FileServiceBase\nBase types\nISaveFileService\nService to save files.\nMethods DetermineFileAsync() Determines the filename of the file what will be used.\nReturns true if a file is selected; otherwisefalse.\nRemarks If this method returnstrue, the FileName property will be filled with the filename. Otherwise, no changes will occur to the data of this object.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/savingeventargs/",
	"title": "SavingEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class SavingEventArgs : CancellableEventArgs  Base types CancellableEventArgs\nEventArgs for the SavingAsync event.\nConstructors SavingEventArgs() Initializes a new instance of the SavingEventArgs class.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/schedulerservice/",
	"title": "SchedulerService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class SchedulerService : ISchedulerService, ViewModelServiceBase  Base types ViewModelServiceBase\nBase types\nISchedulerService\nService that allows scheduling of actions in the future.\nMethods Schedule(Action action, DateTime dateTime) Schedules the specified action in an absolute.\nParameters    Name Description     action The action.   dateTime The date time.    Exceptions    Name Description     ArgumentNullException The action isnull.   ArgumentOutOfRangeException The dateTime is in the past.    Schedule(Action action, TimeSpan timeSpan) Schedules the specified action in a relative.\nParameters    Name Description     action The action.   timeSpan The time span.    Exceptions    Name Description     ArgumentNullException The action isnull.   ArgumentOutOfRangeException The timeSpan is in the past.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/scoping/scopeclosedeventargs/",
	"title": "ScopeClosedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Scoping   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ScopeClosedEventArgs : EventArgs  Base types EventArgs\nEventArgs for the ScopeClosed event.\nConstructors ScopeClosedEventArgs(object scopeObject, string scopeName) Initializes a new instance of the ScopeClosedEventArgs class.\nParameters    Name Description     scopeObject The scope object.   scopeName Name of the scope.    Properties ScopeName Gets the name of the scope.\nScopeObject Gets the scope object.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/scoping/scopemanager/",
	"title": "ScopeManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Scoping   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ScopeManager\u0026lt;T\u0026gt; : IDisposable where T : class  Base types IDisposable\nCustom scope manager to define a scope for a type.\nType Parameters T The type to scope.\nFields Constructors Properties RefCount Gets the current reference count for this object.\nScopeObject Gets the scope object.\nEvents ScopeClosed Occurs when the scope reference count reaches zero.\nMethods Dispose() Dispose object, dereferencing or disposing the context it is managing.\nGetScopeManager(string scopeName, Func createScopeFunction) Gets the ContextManager object for the specified database.\nParameters    Name Description     scopeName Name of the scope.   createScopeFunction The create scope function. Can benull.    Returns The Missing: .\nExceptions    Name Description     ArgumentException The scopeName isnull.    ScopeExists(string scopeName) Determines whether the specified scope exists.\nParameters    Name Description     scopeName Name of the scope.    Returns true if the scope exists,false otherwise.\nExceptions    Name Description     ArgumentException The scopeName isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/scrolldirection/",
	"title": "ScrollDirection",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6    public enum ScrollDirection : Enum  Base types Enum\nThe scroll direction.\nFields Bottom 1\nScroll to bottom.\nTop 0\nScroll to top.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/selectdirectoryservice/",
	"title": "SelectDirectoryService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class SelectDirectoryService : ISelectDirectoryService, ViewModelServiceBase  Base types ViewModelServiceBase\nBase types\nISelectDirectoryService\nService to open files.\nProperties DirectoryName Gets the directory name.\nFileName Gets or sets the name of the file.\nFilter Gets or sets the filter to use when opening or saving the file.\nInitialDirectory Gets or sets the initial directory.\nShowNewFolderButton Gets or sets a value indicating whether to show the new folder button to be able to create new folders while browsing.\nTitle Gets or sets the title which will be used for display.\nMethods DetermineDirectoryAsync() Determines the DirectoryName of the Directory what will be used.\nReturns true if a directory is selected; otherwisefalse.\nRemarks If this method returnstrue, the DirectoryName property will be filled with the directory name. Otherwise, no changes will occur to the data of this object.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/selecttextonfocus/",
	"title": "SelectTextOnFocus",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class SelectTextOnFocus : BehaviorBase\u0026lt;TextBox\u0026gt;  Base types BehaviorBase\nSelects all the text when the is focused.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/sensorservicebase/",
	"title": "SensorServiceBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class SensorServiceBase\u0026lt;TValueInterface, TEventArgs\u0026gt; : ISensorService\u0026lt;TValueInterface, TEventArgs\u0026gt;, ViewModelServiceBase where TEventArgs : EventArgs  Base types ViewModelServiceBase\nBase types\nISensorService\nBase class for implementing sensor services.\nFields Constructors Properties CurrentValue Gets the current sensor value. If no value is available,null will be returned.\nRemarks This is convenience property that internally calls GetCurrentValue. Note that the services inside Catel do not support, thus you cannot subscribe to changes of this property. Instead, subscribe to the CurrentValueChanged event.\nIsSupported Gets a value indicating whether the device supports the current sensor and thus supports getting values.\nTimeBetweenUpdates Gets or sets the preferred time between updates.\nEvents CurrentValueChanged Occurs when the current sensor value has changed.\nMethods GetCurrentValue() Gets the current sensor value.\nReturns The current sensor value. If no value is available,null will be returned.\nStart() Starts the sensor service so it\u0026rsquo;s retrieving data.\nStop() Stops the sensor service so it\u0026rsquo;s no longer retrieving data.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/seqloglistener/",
	"title": "SeqLogListener",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6    public class SeqLogListener : BatchLogListenerBase  Base types BatchLogListenerBase\nLog listener which writes all data to a Seq server.\nFields Constructors SeqLogListener() Initializes a new instance of the SeqLogListener class.\nProperties ApiKey Gets or sets the seq server api key.\nServerUrl Gets or sets the seq server url.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/serializablekeyvaluepair/",
	"title": "SerializableKeyValuePair",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class SerializableKeyValuePair  Serializable key value pair.\nProperties Key Gets or sets the key.\nKeyType Gets or sets the type of the key.\nValue Gets or sets the value.\nValueType Gets or sets the type of the value.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/serializationconfiguration/",
	"title": "SerializationConfiguration",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class SerializationConfiguration : ISerializationConfiguration  Base types\nISerializationConfiguration\nSerialization configuration.\nConstructors SerializationConfiguration() Initializes a new instance of the SerializationConfiguration class.\nProperties Culture Gets or sets the culture used for serialization.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/serializationcontext/",
	"title": "SerializationContext",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class SerializationContext\u0026lt;TContext\u0026gt; : ISerializationContext\u0026lt;TContext\u0026gt; where TContext : class  Base types\nISerializationContext\nThe serialization context used to serialize and deserialize models.\nType Parameters TContext The type of the context.\nFields Constructors SerializationContext(object model, Type modelType, TContext context, SerializationContextMode contextMode, ISerializationConfiguration configuration) Initializes a new instance of the Missing:  class.\nParameters    Name Description     model The model, can benull for value types.   modelType Type of the model.   context The context.   contextMode The context mode.   configuration The configuration.    Exceptions    Name Description     ArgumentNullException The modelType isnull.    Properties Configuration Gets the serialization configuration.\nContext Gets the context.\nContextMode Gets the context mode.\nDepth Gets the depth of the current element being processed.\nModel Gets or sets the model that needs serialization or deserialization.\nRemarks Only set the model if you know what you are doing. In most (99.9%), you want to serializer to take care of this.\nModelType Gets the type of the model.\nModelTypeName Gets the name of the model type, which should be a cached version ofModelType.GetSafeFullName(false);.\nReferenceManager Gets the reference manager.\nSerializationInfo Gets or sets the serialization information.\nTypeStack Gets the type stack inside the current scope.\nMethods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/serializationcontexthelper/",
	"title": "SerializationContextHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class SerializationContextHelper  Helper class for serialization.\nMethods GetSerializationReferenceManagerScopeName() Gets the name of the serialization reference manager scope.\nReturns The name of the scope.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/serializationcontextmode/",
	"title": "SerializationContextMode",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum SerializationContextMode : Enum  Base types Enum\nThe mode in which a context is being used.\nFields Deserialization 1\nThe context is being used for deserialization.\nSerialization 0\nThe context is being used for serialization.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/serializationeventargs/",
	"title": "SerializationEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class SerializationEventArgs : EventArgs  Base types EventArgs\nThe serialization event args.\nConstructors SerializationEventArgs(ISerializationContext serializationContext) Initializes a new instance of the SerializationEventArgs class.\nParameters    Name Description     serializationContext The serialization context.    Properties SerializationContext Gets the serialization context.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/serializationfactory/",
	"title": "SerializationFactory",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class SerializationFactory  Factory responsible to create serializers. Internally this will query the ServiceLocator the retrieve the registered serializers.\nMethods GetBinarySerializer() Gets the binary serializer.\nReturns The registered IBinarySerializer.\nGetXmlSerializer() Gets the XML serializer.\nReturns The registered IXmlSerializer.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/serializationinfoserializationcontextinfo/",
	"title": "SerializationInfoSerializationContextInfo",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class SerializationInfoSerializationContextInfo : ISerializationContextInfo  Base types\nISerializationContextInfo\nClass containing all information about the serialization info (.NET only) serialization context.\nConstructors SerializationInfoSerializationContextInfo() Initializes a new instance of the SerializationInfoSerializationContextInfo class.\nSerializationInfoSerializationContextInfo(SerializationInfo serializationInfo, List memberValues) Initializes a new instance of the SerializationInfoSerializationContextInfo class.\nParameters    Name Description     serializationInfo The serialization info.   memberValues The member values.    Exceptions    Name Description     ArgumentNullException The serializationInfo isnull.    Properties MemberValues Gets the member values.\nPropertyValues Gets the property values.\nSerializationInfo Gets the serialization info.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/serializationjsonmodule/",
	"title": "SerializationJsonModule",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class SerializationJsonModule : IServiceLocatorInitializer  Base types\nIServiceLocatorInitializer\nCore module which allows the registration of default services in the service locator.\nMethods Initialize(IServiceLocator serviceLocator) Initializes the specified service locator.\nParameters    Name Description     serviceLocator The service locator.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/serializationmanager/",
	"title": "SerializationManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class SerializationManager : ISerializationManager  Base types\nISerializationManager\nManager which is responsible for discovering what fields and properties of an object should be serialized.\nFields Events CacheInvalidated Occurs when the cache for a specific type has been invalidated.\nMethods AddSerializerModifier(Type type, Type serializerModifierType) Adds the serializer modifier for a specific type.\nParameters    Name Description     type The type.   serializerModifierType Type of the serializer modifier.    Exceptions    Name Description     ArgumentNullException The type isnull.    Clear(Type type) Clears the specified type from cache so it will be evaluated.\nParameters    Name Description     type The type.    Exceptions    Name Description     ArgumentNullException The type isnull.    GetCatelProperties(Type type, bool includeModelBaseProperties) Gets the catel properties.\nParameters    Name Description     type Type of the model.   includeModelBaseProperties if set totrue, also include model base properties.    Returns A hash set containing the Catel properties.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetCatelPropertiesToSerialize(Type type) Gets the catel properties to serialize.\nParameters    Name Description     type The type.    Returns The list of properties to serialize.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetCatelPropertyNames(Type type, bool includeModelBaseProperties) Gets the catel property names.\nParameters    Name Description     type Type of the model.   includeModelBaseProperties if set totrue, also include model base properties.    Returns A hash set containing the Catel property names.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetFieldNames(Type type) Gets the field names.\nParameters    Name Description     type Type of the model.    Returns A hash set containing the field names.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetFields(Type type) Gets the fields\nParameters    Name Description     type Type of the model.    Returns A hash set containing the fields.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetFieldsToSerialize(Type type) Gets the fields to serialize for the specified object.\nParameters    Name Description     type The type.    Returns The list of fields to serialize.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetRegularProperties(Type type) Gets the regular properties.\nParameters    Name Description     type Type of the model.    Returns A hash set containing the regular properties.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetRegularPropertiesToSerialize(Type type) Gets the properties to serialize for the specified object.\nParameters    Name Description     type The type.    Returns The list of properties to serialize.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetRegularPropertyNames(Type type) Gets the regular property names.\nParameters    Name Description     type Type of the model.    Returns A hash set containing the regular property names.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetSerializerModifiers(Type type) Gets the serializer modifiers for the specified type. Note that the order is important because the modifiers will be called in the returned order during serialization and in reversed order during deserialization.\nParameters    Name Description     type The type.    Returns An array containing the modifiers. Nevernull, but can be an empty array.\nExceptions    Name Description     ArgumentNullException The type isnull.    RemoveSerializerModifier(Type type, Type serializerModifierType) Removes the serializer modifier for a specific type.\nParameters    Name Description     type The type.   serializerModifierType Type of the serializer modifier.    Exceptions    Name Description     ArgumentNullException The type isnull.    Warmup(Type type) Warmups the specified type by calling all the methods for the specified type.\nParameters    Name Description     type The type.    Exceptions    Name Description     ArgumentNullException The type isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/serializationmembergroup/",
	"title": "SerializationMemberGroup",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum SerializationMemberGroup : Enum  Base types Enum\nEnum representing all member group.\nFields CatelProperty 0\nThe member is a catel property.\nCollection 4\nThe member is a collection.\nDictionary 5\nThe member is a dictionary.\nField 2\nThe member is a field.\nRegularProperty 1\nThe member is a regular property.\nSimpleRootObject 3\nThe member is a simple root object, must be handled by external serializer immediately.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/serializationmodelinfo/",
	"title": "SerializationModelInfo",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class SerializationModelInfo  Class that contains info about serializable models.\nConstructors SerializationModelInfo(Type modelType, DictionarycatelProperties, Dictionaryfields, DictionaryregularProperties) Initializes a new instance of the SerializationModelInfo class.\nParameters    Name Description     modelType Type of the model.   catelProperties The catel properties.   fields The fields.   regularProperties The properties.    Properties CatelProperties Gets the catel properties.\nCatelPropertiesByName Gets the Catel properties by name.\nCatelPropertyNames Gets the catel property names.\nFieldNames Gets the field names.\nFields Gets the fields.\nFieldsByName Gets the fields by name.\nModelType Gets the type of the model.\nProperties Gets the properties.\nPropertiesByName Gets the properties by name.\nPropertyNames Gets the property names.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/serializationobject/",
	"title": "SerializationObject",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class SerializationObject  Class containing information about a (de)serialized value.\nFields Constructors Properties IsSuccessful Gets or sets a value indicating whether this instance is successful.\nMemberGroup Gets the group of the member.\nMemberName Gets the name of the property.\nMemberValue Gets the member value.\nExceptions    Name Description     InvalidOperationException The IsSuccessful is false and this member cannot be used.    ModelType Gets the type of the model.\nMethods FailedToDeserialize(Type modelType, SerializationMemberGroup memberGroup, string memberName) Creates an instance of the SerializationObject which represents a failed deserialized value.\nParameters    Name Description     modelType Type of the model.   memberGroup Type of the member.   memberName Name of the member.    Returns SerializationObject.\nExceptions    Name Description     ArgumentNullException The modelType isnull.   ArgumentException The memberName isnull or whitespace.    SucceededToDeserialize(Type modelType, SerializationMemberGroup memberGroup, string memberName, object memberValue) Creates an instance of the SerializationObject which represents a succeeded deserialized value.\nParameters    Name Description     modelType Type of the model.   memberGroup Type of the member.   memberName Name of the property.   memberValue The member value.    Returns SerializationObject.\nExceptions    Name Description     ArgumentNullException The modelType isnull.   ArgumentException The memberName isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/serializationscope/",
	"title": "SerializationScope",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class SerializationScope  The serialization scope.\nConstructors SerializationScope(ISerializer serializer, ISerializationConfiguration configuration) Initializes a new instance of the SerializationScope class.\nParameters    Name Description     serializer The serializer.   configuration The configuration.    Properties Configuration Gets or sets the configuration.\nSerializer Gets the serializer.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/serializeascollectionattribute/",
	"title": "SerializeAsCollectionAttribute",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class SerializeAsCollectionAttribute : Attribute  Base types Attribute\nAttribute to inform the serializers in Catel to serialize the object as collection. This can only be used on ModelBase classes that implement.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/serializeenumasstringattribute/",
	"title": "SerializeEnumAsStringAttribute",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class SerializeEnumAsStringAttribute : Attribute  Base types Attribute\nAttribute to define that a enum member must be serialized as string.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/serializeusingparseandtostringattribute/",
	"title": "SerializeUsingParseAndToStringAttribute",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class SerializeUsingParseAndToStringAttribute : Attribute  Base types Attribute\nParse the members decorated with this attribute usingParse andToString.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/serializerbase/",
	"title": "SerializerBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class SerializerBase\u0026lt;TSerializationContext\u0026gt; : ISerializer where TSerializationContext : class  Base types\nISerializer\nBase class for all serializers.\nType Parameters TSerializationContext The type of the serialization context.\nFields Constructors Properties Events Deserialized Occurs when an object has just been deserialized.\nDeserializedMember Occurs when an object has just deserialized a specific member.\nDeserializing Occurs when an object is about to be deserialized.\nDeserializingMember Occurs when an object is about to deserialize a specific member.\nSerialized Occurs when an object has just been serialized.\nSerializedMember Occurs when an object has just serialized a specific member.\nSerializing Occurs when an object is about to be serialized.\nSerializingMember Occurs when an object is about to serialize a specific member.\nMethods Deserialize(Type modelType, ISerializationContextInfo serializationContext, ISerializationConfiguration configuration) Deserializes the specified model type.\nParameters    Name Description     modelType Type of the model.   serializationContext The serialization context.   configuration The configuration.    Returns The deserialized.\nDeserialize(Type modelType, Stream stream, ISerializationConfiguration configuration) Deserializes the specified model type.\nParameters    Name Description     modelType Type of the model.   stream The stream.   configuration The configuration.    Returns The deserialized.\nDeserialize(Type modelType, TSerializationContext serializationContext, ISerializationConfiguration configuration) Deserializes the specified model type.\nParameters    Name Description     modelType Type of the model.   serializationContext The serialization context.   configuration The configuration.    Returns The deserialized.\nDeserialize(object model, ISerializationContextInfo serializationContext, ISerializationConfiguration configuration) Deserializes the specified model.\nParameters    Name Description     model The model.   serializationContext The serialization context.   configuration The configuration.    Returns The deserialized model.\nDeserialize(object model, Stream stream, ISerializationConfiguration configuration) Deserializes the specified model.\nParameters    Name Description     model The model.   stream The stream.   configuration The configuration.    Returns The deserialized model.\nDeserialize(object model, TSerializationContext serializationContext, ISerializationConfiguration configuration) Deserializes the specified model.\nParameters    Name Description     model The model.   serializationContext The serialization context.   configuration The configuration.    Returns DeserializeMembers(Type modelType, ISerializationContextInfo serializationContextInfo, ISerializationConfiguration configuration) Deserializes the members.\nParameters    Name Description     modelType Type of the model.   serializationContextInfo The serialization context information.   configuration The configuration.    Returns The deserialized list of member values.\nDeserializeMembers(Type modelType, Stream stream, ISerializationConfiguration configuration) Deserializes the members.\nParameters    Name Description     modelType Type of the model.   stream The stream.   configuration The configuration.    Returns The deserialized list of member values.\nDeserializeMembers(Type modelType, TSerializationContext serializationContext, ISerializationConfiguration configuration) Deserializes the members.\nParameters    Name Description     modelType Type of the model.   serializationContext The serialized context.   configuration The configuration.    Returns The deserialized list of member values.\nGetSerializableMembers(ISerializationContext context, object model, string[] membersToIgnore) Gets the serializable members for the specified model.\nParameters    Name Description     context The serialization context.   model The model.   membersToIgnore The members to ignore.    Returns The list of members to serialize.\nExceptions    Name Description     ArgumentNullException The model isnull.    Serialize(object model, ISerializationContextInfo context, ISerializationConfiguration configuration) Serializes the specified model.\nParameters    Name Description     model The model.   context The context.   configuration The configuration.    Serialize(object model, Stream stream, ISerializationConfiguration configuration) Serializes the specified model.\nParameters    Name Description     model The model.   stream The stream.   configuration The configuration.    Serialize(object model, TSerializationContext context, ISerializationConfiguration configuration) Serializes the specified model.\nParameters    Name Description     model The model.   context The context.   configuration The configuration.    SerializeMembers(object model, Stream stream, ISerializationConfiguration configuration, string[] membersToIgnore) Serializes the members.\nParameters    Name Description     model The model.   stream The stream.   configuration The configuration.   membersToIgnore The members to ignore.    Warmup(IEnumerable types, int typesPerThread) Warms up the specified types. If the types isnull, all types known in the TypeCache will be initialized. Note that it is not required to call this, but it can help to prevent an additional performance impact the first time a type is serialized.\nParameters    Name Description     types The types to warmp up. Ifnull, all types will be initialized.   typesPerThread The types per thread. If-1, all types will be initialized on the same thread.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/serializermodifierattribute/",
	"title": "SerializerModifierAttribute",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class SerializerModifierAttribute : Attribute  Base types Attribute\nAttribute to specify the serialization modifier attribute.\nConstructors SerializerModifierAttribute(Type serializerModifierType) Initializes a new instance of the SerializerModifierAttribute class.\nParameters    Name Description     serializerModifierType Type of the serializer modifier.    Properties SerializerModifierType Gets the type of the serializer modifier.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/serializermodifierbase/",
	"title": "SerializerModifierBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class SerializerModifierBase\u0026lt;TModel\u0026gt; : SerializerModifierBase  Base types SerializerModifierBase\nAllows modifications for a specific model for every supported serializer.\nType Parameters TModel The type of the model.\nMethods OnDeserialized(ISerializationContext context, TModel model) Called when the object is deserialized.\nParameters    Name Description     context The context.   model The model.    OnDeserializing(ISerializationContext context, TModel model) Called when the object is about to be deserialized.\nParameters    Name Description     context The context.   model The model.    OnSerialized(ISerializationContext context, TModel model) Called when the object is serialized.\nParameters    Name Description     context The context.   model The model.    OnSerializing(ISerializationContext context, TModel model) Called when the object is about to be serialized.\nParameters    Name Description     context The context.   model The model.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/servicebase/",
	"title": "ServiceBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class ServiceBase : IService  Base types\nIService\nBase class for services.\nProperties Name Gets the name of the service.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/markup/servicedependencyextension/",
	"title": "ServiceDependencyExtension",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Markup   Available on .NET Framework 4.5, .NET Framework 4.6    public class ServiceDependencyExtension : MarkupExtension  Base types MarkupExtension\nService dependency extension to allow service access in xaml for services with properties.\nConstructors ServiceDependencyExtension() Initializes a new instance of the ServiceDependencyExtension class.\nServiceDependencyExtension(Type type) Initializes a new instance of the ServiceDependencyExtension class.\nParameters    Name Description     type The type.    Properties Tag Gets or sets the tag.\nType Gets or sets the type.\nMethods ProvideValue(IServiceProvider serviceProvider) When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension.\nParameters    Name Description     serviceProvider Object that can provide services for the markup extension.    Returns The object value to set on the property where the extension is applied.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/servicelocator/",
	"title": "ServiceLocator",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ServiceLocator : IServiceLocator  Base types\nIServiceLocator\nDefault implementation of the IServiceLocator interface.\nFields Constructors ServiceLocator() Initializes a new instance of the ServiceLocator class.\nProperties AutoRegisterTypesViaAttributes Gets or sets a value indicating whether this service locators will automatically register types via attributes.\nRemarks By default, this value isfalse\nCanResolveNonAbstractTypesWithoutRegistration Gets or sets a value indicating whether the service locator can resolve non abstract types without registration.\nDefault Gets or sets the instance of the default service locator. This property serves as as singleton.\nIgnoreRuntimeIncorrectUsageOfRegisterAttribute Gets or sets a value indicating whether this service locators will ignore incorrect usage of ServiceLocatorRegistrationAttribute and do not throw.\nRemarks By default, this value istrue.\nEvents MissingType Occurs when a type cannot be resolved the by service locator. It first tries to raise this event. If there are no handlers or no handler can fill up the missing type, an exception will be thrown by the service locator.\nTypeInstantiated Occurs when a type is instantiated in the service locator.\nTypeRegistered Occurs when a type is registered in the service locator.\nMethods AreAllTypesRegistered(Type[] types) Determines whether all the specified types are registered with the service locator.\nParameters    Name Description     types The types that should be registered.    Returns true if all the specified types are registered with this instance of the IServiceLocator; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The types isnull.    Remarks Note that this method is written for optimalization by the TypeFactory. This means that the TypeFactory does not need to call the ServiceLocator several times to construct a single type using dependency injection. Only use this method if you know what you are doing, otherwise use the Object) instead.\nDispose() Disposes this instance and all registered instances.\nGetRegistrationInfo(Type serviceType, object tag) Gets the registration info about the specified type.\nParameters    Name Description     serviceType Type of the service.   tag The tag the service is registered with. The default value isnull.    Returns The RegistrationInfo ornull if the type is not registered.\nExceptions    Name Description     ArgumentNullException The serviceType isnull.    IsTypeRegistered(Type serviceType, object tag) Determines whether the specified service type is registered.\nParameters    Name Description     serviceType The type of the service.   tag The tag to register the service with. The default value isnull.    Returns true if the specified service type is registered; otherwise,false.\nExceptions    Name Description     ArgumentNullException The serviceType isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nIsTypeRegisteredAsSingleton(Type serviceType, object tag) Determines whether the specified service type is registered as singleton.\nParameters    Name Description     serviceType The service type.   tag The tag to register the service with. The default value isnull.    Returns true if the serviceType type is registered as singleton, otherwisefalse.\nRegisterInstance(Type serviceType, object instance, object tag) Registers a specific instance of a service.\nParameters    Name Description     serviceType Type of the service.   instance The instance.   tag The tag to register the service with. The default value isnull.    Exceptions    Name Description     ArgumentNullException The serviceType isnull.   ArgumentException The instance is not of the right type.    RegisterType(Type serviceType, FunccreateServiceFunc, object tag, RegistrationType registrationType, bool registerIfAlreadyRegistered) Registers an implementation of a service using a create type callback, but only if the type is not yet registered.\nParameters    Name Description     serviceType The type of the service.   createServiceFunc The create service function.   tag The tag to register the service with. The default value isnull.   registrationType The registration type. The default value is Singleton.   registerIfAlreadyRegistered If set totrue, an older type registration is overwritten by this new one.    Exceptions    Name Description     ArgumentNullException If serviceType isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nRegisterType(Type serviceType, Type serviceImplementationType, object tag, RegistrationType registrationType, bool registerIfAlreadyRegistered) Registers an implementation of a service, but only if the type is not yet registered.\nParameters    Name Description     serviceType The type of the service.   serviceImplementationType The type of the implementation.   tag The tag to register the service with. The default value isnull.   registrationType The registration type. The default value is Singleton.   registerIfAlreadyRegistered If set totrue, an older type registration is overwritten by this new one.    Exceptions    Name Description     ArgumentNullException If serviceType isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nRemoveAllTypes(Type serviceType) Removes all registered types of a certain service type.\nParameters    Name Description     serviceType The type of the service.    Exceptions    Name Description     System.ArgumentNullException The serviceType isnull.    RemoveType(Type serviceType, object tag) Removes the registered type with the specific tag.\nParameters    Name Description     serviceType The type of the service.   tag The tag of the registered the service. The default value isnull.    Exceptions    Name Description     System.ArgumentNullException The serviceType isnull.    ResolveAllTypes(Type[] types) Resolves all the specified types.\nParameters    Name Description     types The collection of types that should be resolved.    Returns The resolved types in the same order as the types.\nExceptions    Name Description     ArgumentNullException The types isnull.    Remarks Note that this method is written for optimalization by the TypeFactory. This means that the TypeFactory does not need to call the ServiceLocator several times to construct a single type using dependency injection. Only use this method if you know what you are doing, otherwise use the Object) instead.\nResolveType(Type serviceType, object tag) Resolves an instance of the type registered on the service.\nParameters    Name Description     serviceType The type of the service.   tag The tag to register the service with. The default value isnull.    Returns An instance of the type registered on the service.\nExceptions    Name Description     ArgumentNullException The serviceType isnull.   T:Catel.IoC.TypeNotRegisteredException The type is not found in any container.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nResolveTypes(Type serviceType) Resolves all instances of the type registered on the service.\nParameters    Name Description     serviceType The type of the service.    Returns All instance of the type registered on the service.\nExceptions    Name Description     System.ArgumentNullException The serviceType isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/servicelocatorautoregistrationmanager/",
	"title": "ServiceLocatorAutoRegistrationManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ServiceLocatorAutoRegistrationManager  Manager that can handle the registrations of the service locator.\nFields Constructors ServiceLocatorAutoRegistrationManager(IServiceLocator serviceLocator) Initializes a new instance of the ServiceLocatorAutoRegistrationManager class.\nParameters    Name Description     serviceLocator The service locator.    Exceptions    Name Description     ArgumentNullException The serviceLocator isnull.    Properties AutoRegisterTypesViaAttributes Gets or sets a value indicating whether this service locators will automatically register types via attributes.\nRemarks By default, this value isfalse.\nIgnoreRuntimeIncorrectUsageOfRegisterAttribute Gets or sets a value indicating whether this service locators will ignore incorrect usage of ServiceLocatorRegistrationAttribute and do not throw.\nRemarks By default, this value istrue.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/servicelocatorconfiguration/",
	"title": "ServiceLocatorConfiguration",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6    public class ServiceLocatorConfiguration : ConfigurationElementCollection  Base types ConfigurationElementCollection\nThe IoC configuration element.\nFields Constructors ServiceLocatorConfiguration(string name) Initializes a new instance of the ServiceLocatorConfiguration class.\nParameters    Name Description     name The configuration name.    Properties CollectionType Gets the collection type.\nReturns The ConfigurationElementCollectionType of this collection.\nName Gets or sets the name.\nMethods Configure(IServiceLocator serviceLocator) Configures an instance of IServiceLocator.\nParameters    Name Description     serviceLocator The instance of IServiceLocator    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/servicelocatorconfigurationcollection/",
	"title": "ServiceLocatorConfigurationCollection",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6    public class ServiceLocatorConfigurationCollection : ConfigurationElementCollection  Base types ConfigurationElementCollection\nThe IoC configuration collection.\nFields Properties CollectionType The collection type\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/servicelocatorextensions/",
	"title": "ServiceLocatorExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ServiceLocatorExtensions  Extension methods for the IServiceLocator interface.\nFields Methods IsTypeRegistered(IServiceLocator serviceLocator, object tag) Determines whether the specified service type is registered.\nType Parameters TService The type of the service.\nParameters    Name Description     serviceLocator The service locator.   tag The tag.    Returns true if the specified service type is registered; otherwise,false.\nExceptions    Name Description     ArgumentNullException The serviceLocator isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nIsTypeRegisteredAsSingleton(IServiceLocator serviceLocator, object tag) Determines whether the specified service type is registered as singleton.\nType Parameters TService The service type.\nParameters    Name Description     serviceLocator The service locator.   tag The tag.    Returns true if the TService type is registered as singleton, otherwisefalse.\nExceptions    Name Description     ArgumentNullException The serviceLocator isnull.    RegisterInstance(IServiceLocator serviceLocator, TService instance, object tag) Registers a specific instance of a service.\nType Parameters TService The type of the service.\nParameters    Name Description     serviceLocator The service locator.   instance The specific instance to register.   tag The tag.    Exceptions    Name Description     ArgumentNullException The serviceLocator isnull.    RegisterType(IServiceLocator serviceLocator, RegistrationType registrationType, bool registerIfAlreadyRegistered) Registers an implementation of a service.\nType Parameters TService The type of the service.\nTServiceImplementation The type of the implementation.\nParameters    Name Description     serviceLocator The service locator.   registrationType The registration type. The default value is Singleton.   registerIfAlreadyRegistered If set totrue, an older type registration is overwritten by this new one.    Exceptions    Name Description     ArgumentNullException The serviceLocator isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nRegisterType(IServiceLocator serviceLocator, FunccreateServiceFunc, RegistrationType registrationType, bool registerIfAlreadyRegistered) Registers an implementation of ea service using a create type callback\nType Parameters TService The type of the service.\nParameters    Name Description     serviceLocator The service locator.   createServiceFunc The create service function.   registrationType The registration type. The default value is Singleton.   registerIfAlreadyRegistered If set totrue, an older type registration is overwritten by this new one.    Exceptions    Name Description     ArgumentNullException The serviceLocator isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nRegisterType(IServiceLocator serviceLocator, RegistrationType registrationType) Registers a service where the implementation type is the same as the registered type.\nType Parameters TServiceImplementation The type of the service definition and implementation.\nParameters    Name Description     serviceLocator The service locator.   registrationType The registration type. The default value is Singleton.    Exceptions    Name Description     ArgumentNullException The serviceLocator isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nRegisterTypeAndInstantiate(IServiceLocator serviceLocator) Registers a service where the implementation type is the same as the registered type and immediately instantiates the type using the type factory.\nType Parameters TService The type of the service.\nTServiceImplementation The type of the service definition and implementation.\nParameters    Name Description     serviceLocator The service locator.    Returns TService.\nExceptions    Name Description     ArgumentNullException The serviceLocator isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nRegisterTypeAndInstantiate(IServiceLocator serviceLocator) Registers a service where the implementation type is the same as the registered type and immediately instantiates the type using the type factory.\nType Parameters TServiceImplementation The type of the service definition and implementation.\nParameters    Name Description     serviceLocator The service locator.    Exceptions    Name Description     ArgumentNullException The serviceLocator isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nRegisterTypeIfNotYetRegistered(IServiceLocator serviceLocator, Type serviceType, Type serviceImplementationType, RegistrationType registrationType) Registers an implementation of an service, but only if the type is not yet registered.\nParameters    Name Description     serviceLocator The service locator.   serviceType The type of the service.   serviceImplementationType The type of the implementation.   registrationType The registration type. The default value is Singleton.    Exceptions    Name Description     ArgumentNullException The serviceLocator isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nRegisterTypeIfNotYetRegistered(IServiceLocator serviceLocator, RegistrationType registrationType) Registers an implementation of an service, but only if the type is not yet registered.\nType Parameters TService The type of the service.\nTServiceImplementation The type of the implementation.\nParameters    Name Description     serviceLocator The service locator.   registrationType The registration type. The default value is Singleton.    Exceptions    Name Description     ArgumentNullException The serviceLocator isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nRegisterTypeIfNotYetRegisteredWithTag(IServiceLocator serviceLocator, Type serviceType, Type serviceImplementationType, object tag, RegistrationType registrationType) Registers an implementation of an service, but only if the type is not yet registered.\nParameters    Name Description     serviceLocator The service locator.   serviceType The type of the service.   serviceImplementationType The type of the implementation.   tag The tag to register the service with. The default value isnull.   registrationType The registration type. The default value is Singleton.    Exceptions    Name Description     ArgumentNullException The serviceLocator isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nRegisterTypeIfNotYetRegisteredWithTag(IServiceLocator serviceLocator, object tag, RegistrationType registrationType) Registers an implementation of an service, but only if the type is not yet registered.\nType Parameters TService The type of the service.\nTServiceImplementation The type of the implementation.\nParameters    Name Description     serviceLocator The service locator.   tag The tag.   registrationType The registration type. The default value is Singleton.    Exceptions    Name Description     ArgumentNullException The serviceLocator isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nRegisterTypesUsingAllConventions(IServiceLocator serviceLocator, RegistrationType registrationType) Registers the types using all conventions.\nParameters    Name Description     serviceLocator The service locator.   registrationType Type of the registration.    Returns Exceptions    Name Description     System.ArgumentNullException The serviceLocator isnull.    RegisterTypesUsingConvention(IServiceLocator serviceLocator, RegistrationType registrationType) Registers the types using the specified convention.\nType Parameters TRegistrationConvention The type of the registration convention.\nParameters    Name Description     serviceLocator The service locator.   registrationType Type of the registration.    Returns IRegistrationConventionHandler.\nRegisterTypesUsingDefaultFirstInterfaceConvention(IServiceLocator serviceLocator, RegistrationType registrationType) Registers the types using the first interface convention.\nParameters    Name Description     serviceLocator The service locator.   registrationType Type of the registration.    Returns IRegistrationConventionHandler.\nRegisterTypesUsingDefaultNamingConvention(IServiceLocator serviceLocator, RegistrationType registrationType) Registers the types using the default naming convention.\nParameters    Name Description     serviceLocator The service locator.   registrationType Type of the registration.    Returns IRegistrationConventionHandler.\nRegisterTypeWithTag(IServiceLocator serviceLocator, object tag, RegistrationType registrationType, bool registerIfAlreadyRegistered) Registers an implementation of a service.\nType Parameters TService The type of the service.\nTServiceImplementation The type of the implementation.\nParameters    Name Description     serviceLocator The service locator.   tag The tag.   registrationType The registration type. The default value is Singleton.   registerIfAlreadyRegistered If set totrue, an older type registration is overwritten by this new one.    Exceptions    Name Description     ArgumentNullException The serviceLocator isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nRegisterTypeWithTag(IServiceLocator serviceLocator, FunccreateServiceFunc, object tag, RegistrationType registrationType, bool registerIfAlreadyRegistered) Registers an implementation of ea service using a create type callback\nType Parameters TService The type of the service.\nParameters    Name Description     serviceLocator The service locator.   createServiceFunc The create service function.   tag The tag.   registrationType The registration type. The default value is Singleton.   registerIfAlreadyRegistered If set totrue, an older type registration is overwritten by this new one.    Exceptions    Name Description     ArgumentNullException The serviceLocator isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nRegisterTypeWithTag(IServiceLocator serviceLocator, object tag, RegistrationType registrationType) Registers a service where the implementation type is the same as the registered type.\nType Parameters TServiceImplementation The type of the service definition and implementation.\nParameters    Name Description     serviceLocator The service locator.   tag The tag.   registrationType The registration type. The default value is Singleton.    Exceptions    Name Description     ArgumentNullException The serviceLocator isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nRemoveType(IServiceLocator serviceLocator, object tag) Removes the type from the service locator.\nType Parameters TService The type of the service.\nParameters    Name Description     serviceLocator The service locator.   tag The tag.    Exceptions    Name Description     ArgumentNullException The serviceLocator isnull.    ResolveType(IServiceLocator serviceLocator, object tag) Resolves an instance of the type registered on the service.\nType Parameters TService The type of the service.\nParameters    Name Description     serviceLocator The service locator.   tag The tag.    Returns An instance of the type registered on the service.\nExceptions    Name Description     ArgumentNullException The serviceLocator isnull.   T:Catel.IoC.TypeNotRegisteredException The type is not found in any container.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nResolveTypeAndReturnNullIfNotRegistered(IServiceLocator serviceLocator, Type serviceType, object tag) Resolves the type from the IServiceLocator. If the type is not registered, this method will returnnull.\nParameters    Name Description     serviceLocator The service locator.   serviceType The type of the service to retrieve.   tag The tag.    Returns The resolved type ornull if the type is not registered in the IServiceLocator.\nExceptions    Name Description     ArgumentNullException The serviceLocator isnull.    ResolveTypeAndReturnNullIfNotRegistered(IServiceLocator serviceLocator, object tag) Resolves the type from the IServiceLocator. If the type is not registered, this method will returnnull.\nType Parameters T The type of the service to retrieve.\nParameters    Name Description     serviceLocator The service locator.   tag The tag.    Returns The resolved type ornull if the type is not registered in the IServiceLocator.\nExceptions    Name Description     ArgumentNullException The serviceLocator isnull.    ResolveTypes(IServiceLocator serviceLocator) Resolves all instances of the type registered on the service.\nType Parameters TService The type of the service.\nParameters    Name Description     serviceLocator The service locator.    Returns All instance of the type registered on the service.\nExceptions    Name Description     ArgumentNullException The serviceLocator isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\nResolveTypeUsingParameters(IServiceLocator serviceLocator, Type serviceType, object[] parameters, object tag) Resolves the type using parameters. This method combines the Object) and the Object[]) to provide the functionality.\nParameters    Name Description     serviceLocator The service locator.   serviceType Type of the service.   parameters The parameters.   tag The tag.    Returns The instantiated type constructed with the specified parameters.\nExceptions    Name Description     ArgumentNullException The serviceLocator isnull.   InvalidOperationException The type is not registered in the container as transient type.    ResolveTypeUsingParameters(IServiceLocator serviceLocator, object[] parameters, object tag) Resolves the type using parameters. This method combines the Object) and the Object[]) to provide the functionality.\nType Parameters T The type of the interface to resolve.\nParameters    Name Description     serviceLocator The service locator.   parameters The parameters.   tag The tag.    Returns The instantiated type constructed with the specified parameters.\nExceptions    Name Description     ArgumentNullException The serviceLocator isnull.   InvalidOperationException The type is not registered in the container as transient type.    TryResolveType(IServiceLocator serviceLocator, object tag) Try to resolve an instance of the type registered on the service.\nType Parameters TService The type of the service.\nParameters    Name Description     serviceLocator The service locator.   tag The tag.    Returns An instance of the type registered on the service ornull if missing.\nExceptions    Name Description     ArgumentNullException The serviceLocator isnull.    Remarks Note that the actual implementation lays in the hands of the IoC technique being used.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/servicelocatorregistration/",
	"title": "ServiceLocatorRegistration",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ServiceLocatorRegistration  Contains all information about the registration of an entry in the ServiceLocator.\nConstructors ServiceLocatorRegistration(Type declaringType, Type implementingType, object tag, RegistrationType registrationType, FunccreateServiceFunc) Initializes a new instance of the ServiceLocatorRegistration class.\nParameters    Name Description     declaringType Type of the declaring.   implementingType Type of the implementing.   tag The tag.   registrationType Type of the registration.   createServiceFunc The create service function.    Properties CreateServiceFunc Gets the create service function.\nDeclaringType Gets the declaring type.\nDeclaringTypeName Gets the name of the declaring type.\nImplementingType Gets the implementing type.\nImplementingTypeName Gets the name of the implementing type.\nRegistrationType Gets the type of the registration.\nTag Gets the tag.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/servicelocatorregistrationattribute/",
	"title": "ServiceLocatorRegistrationAttribute",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ServiceLocatorRegistrationAttribute : Attribute  Base types Attribute\nThe register attribute.\nConstructors ServiceLocatorRegistrationAttribute(Type interfaceType, ServiceLocatorRegistrationMode registrationMode, object tag) Initializes a new instance of the ServiceLocatorRegistrationAttribute class.\nParameters    Name Description     interfaceType Type of the interface.   registrationMode The registration mode.   tag The tag.    Exceptions    Name Description     System.ArgumentNullException The interfaceType isnull.    Properties InterfaceType Gets the type.\nRegistrationMode Gets the registration model.\nRegistrationType Gets the registration type.\nTag Gets the tag.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/servicelocatorregistrationgroup/",
	"title": "ServiceLocatorRegistrationGroup",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ServiceLocatorRegistrationGroup  Represents a group of service locator registrations. This is needed to implement automatic resolving of related (generic) types on the same singleton instance of a registered service.\nConstructors ServiceLocatorRegistrationGroup(ServiceLocatorRegistration entryRegistration) Initializes a new instance of the ServiceLocatorRegistrationGroup class.\nParameters    Name Description     entryRegistration The entry registration.    Exceptions    Name Description     ArgumentNullException The entryRegistration isnull.    Properties EntryRegistration Gets the entry registration.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/servicelocatorregistrationmode/",
	"title": "ServiceLocatorRegistrationMode",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum ServiceLocatorRegistrationMode : Enum  Base types Enum\nAvailable modes for the ServiceLocatorRegistrationAttribute.\nFields SingletonInstantiateImmediately 1\nThe singleton instance will be created immediately and then registered.\nSingletonInstantiateWhenRequired 2\nThe singleton instance will be created when it is first queried.\nTransient 0\nThe type will be registered as transient.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/shortdateformattingconverter/",
	"title": "ShortDateFormattingConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ShortDateFormattingConverter : FormattingConverter  Base types FormattingConverter\nShortDateFormattingConverter\nConstructors ShortDateFormattingConverter() Initializes a new instance of the ShortDateFormattingConverter class.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/messaging/simplemessage/",
	"title": "SimpleMessage",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.Core   Namespace Catel.Messaging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class SimpleMessage : MessageBase\u0026lt;SimpleMessage, string\u0026gt;  Base types MessageBase\nImplements a simple message with a string payload data.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/size/",
	"title": "Size",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public struct Size : ValueType  Base types ValueType\nObject containing size information.\nFields Constructors Size(double width, double height) Initializes a new instance of the Size class.\nParameters    Name Description     width The width.   height The height.    Properties Height Gets or sets the height.\nWidth Gets or sets the width.\nMethods Equals(Size size) Determines whether the specified size equals this instance.\nParameters    Name Description     size The size to compare this instance to.    Returns true if equal,false otherwise.\nEquals(object obj) Determines whether the specified is equal to this instance.\nParameters    Name Description     obj The to compare with this instance.    Returns true if the specified is equal to this instance; otherwise,false.\nGetHashCode() Returns a hash code for this instance.\nReturns A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.\nToString() Returns a that represents this instance.\nReturns A that represents this instance.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/caching/policies/slidingexpirationpolicy/",
	"title": "SlidingExpirationPolicy",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Caching.Policies   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class SlidingExpirationPolicy : DurationExpirationPolicy  Base types DurationExpirationPolicy\nThe cache item will expire using the duration property as the sliding expiration.\nConstructors Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/startupinfoprovider/",
	"title": "StartUpInfoProvider",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6    public class StartUpInfoProvider : IStartUpInfoProvider  Base types\nIStartUpInfoProvider\nFields Properties Arguments Gets the application command line argument.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/stateservice/",
	"title": "StateService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class StateService : IStateService  Base types\nIStateService\nThe state service which can store and restore states.\nFields Methods LoadState(string key) Loads the state.\nParameters    Name Description     key The key.    Returns StoreState(string key, IState state) Stores the state.\nParameters    Name Description     key The key.   state The state.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/statichelper/",
	"title": "StaticHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class StaticHelper  Helper class for static classes and members.\nMethods GetCallingType() Gets the type which is calling the current method which might be static.\nReturns The type calling the method.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/statusloglistener/",
	"title": "StatusLogListener",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class StatusLogListener : LogListenerBase  Base types LogListenerBase\nLog listener for status messages.\nConstructors StatusLogListener() Initializes a new instance of the StatusLogListener class.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/setup-deployment/stepping-through-the-code/",
	"title": "Stepping through the code",
	"tags": [],
	"description": "",
	"content": "It is possible to step through the source code of Catel. This will give great insights when debugging applications because you can actually see what is happening inside Catel.\nTo enable stepping through the source code, use the following steps:\n Install any Catel package via NuGet (all have support for stepping through the code) Enable source server support in Visual Studio:  Note that you must have defined a valid symbols directory in order for symbols to be stored on disk\n\rNote that Visual Studio 2012 needs to run elevated in order to download the source server files due to a bug in Visual Studio 2012\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/io/streamextensions/",
	"title": "StreamExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IO   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class StreamExtensions  Extensions for the class.\nMethods GetString(Stream stream, Encoding encoding) Gets the string from the stream using the specified encoding.\nParameters    Name Description     stream The stream.   encoding The encoding.    Returns System.String.\nGetUtf8String(Stream stream) Gets the UTF8 string from the stream.\nParameters    Name Description     stream The stream.    Returns System.String.\nToByteArray(Stream stream) Converters the stream to a byte array.\nParameters    Name Description     stream The stream to convert to a byte array.    Returns The byte array representing the stream.\nExceptions    Name Description     ArgumentNullException The stream isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/text/stringbuilderextensions/",
	"title": "StringBuilderExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Text   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class StringBuilderExtensions  Extensions for the class.\nMethods AppendLine(StringBuilder sb, string format, object[] args) Appends a new line with formatting options to the string builder.\nParameters    Name Description     sb The.   format The message format.   args The formatting arguments.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/stringextensions/",
	"title": "StringExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class StringExtensions  String extensions.\nFields SlugRegex The slug regex.\nWhiteSpaceRegex The white space regex.\nMethods ContainsIgnoreCase(string str, string valueToCheck) Determines whether the specified string contains the value to check.\nParameters    Name Description     str The string.   valueToCheck The value to check.    Returns true if the string contains the value to check,false otherwise.\nEndsWithAny(string str, string[] values) Determines whether the string ends with any of the values.\nParameters    Name Description     str The string.   values The values to check for.    Returns true if the string ends with any of the values,false otherwise.\nEndsWithAnyIgnoreCase(string str, string[] values) Determines whether the string ends with any of the values.\nParameters    Name Description     str The string.   values The values to check for.    Returns true if the string ends with any of the values,false otherwise.\nEndsWithIgnoreCase(string str, string valueToCheck) Determines whether the string ends with the value to check.\nParameters    Name Description     str The string.   valueToCheck The value to check.    Returns true if the string ends with the value to check,false otherwise.\nEqualsAny(string str, string[] values) Determines whether the string equals any of the values.\nParameters    Name Description     str The string.   values The values to check for.    Returns true if the string equals any of the values,false otherwise.\nEqualsAnyIgnoreCase(string str, string[] values) Determines whether the string equals with any of the values.\nParameters    Name Description     str The string.   values The values to check for.    Returns true if the string equals any of the values,false otherwise.\nEqualsIgnoreCase(string str, string valueToCheck) Executes a string comparison that is case insensitive.\nParameters    Name Description     str The string.   valueToCheck The value to check.    Returns true if the strings are equal,false otherwise.\nGetSlug(string input, string spaceReplacement, string dotReplacement, bool makeLowercase) Gets the slug of the specific input string.\nParameters    Name Description     input The input.   spaceReplacement The space replacement.   dotReplacement The dot replacement.   makeLowercase if set totrue, make the slug lower case.    Returns The slug based on the input.\nGetUniqueControlName(string controlName) Gets the a unique name for a control. This is sometimes required in some frameworks. The name is made unique by appending a unique guid.\nParameters    Name Description     controlName Name of the control.    Returns System.String.\nIndexOfIgnoreCase(string str, string valueToCheck) Determines the index of the value to check inside the specified string.\nParameters    Name Description     str The string.   valueToCheck The value to check.    Returns The index or-1 if not found.\nPrepareAsSearchFilter(string filter) Prepares a string value as search filter by trimming it and making it lower-case.\nParameters    Name Description     filter The filter.    Returns The search filter.\nRemoveDiacritics(string value) Removes the diacritics (special characters) from the string.\nParameters    Name Description     value The value.    SplitCamelCase(string value) Splits the string by camel case, e.g. \u0026lsquo;HiThere\u0026rsquo; will result in \u0026lsquo;Hi there\u0026rsquo;.\nParameters    Name Description     value The value.    Returns System.String.\nStartsWithAny(string str, string[] values) Determines whether the string starts with any of the values.\nParameters    Name Description     str The string.   values The values to check for.    Returns true if the string starts with any of the values,false otherwise.\nStartsWithAnyIgnoreCase(string str, string[] values) Determines whether the string starts with any of the values.\nParameters    Name Description     str The string.   values The values to check for.    Returns true if the string starts with any of the values,false otherwise.\nStartsWithIgnoreCase(string str, string valueToCheck) Determines whether the string starts with the value to check.\nParameters    Name Description     str The string.   valueToCheck The value to check.    Returns true if the string starts with the value to check,false otherwise.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/stringtointconverter/",
	"title": "StringToIntConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class StringToIntConverter : ValueConverterBase  Base types ValueConverterBase\nConverts string to integer and back.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/stringtoobjecthelper/",
	"title": "StringToObjectHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class StringToObjectHelper  String to object helper class that converts a string to the right object if possible.\nFields Constructors Properties DefaultCulture Gets or sets the default culture to use for parsing.\nMethods ToBool(string value) Converts a string to a boolean.\nParameters    Name Description     value The value.    Returns The boolean value of the string.\nToByteArray(string value) Converts a string to a byte array.\nParameters    Name Description     value The value.    Returns The byte array value of the string.\nToDateTime(string value) Converts a string to a date/time.\nParameters    Name Description     value The value.    Returns The date/time value of the string.\nToDateTime(string value, CultureInfo cultureInfo) Converts a string to a date/time.\nParameters    Name Description     value The value.   cultureInfo The culture information.    Returns The date/time value of the string.\nToDecimal(string value) Converts a string to a decimal.\nParameters    Name Description     value The value.    Returns The decimal value of the string.\nToDecimal(string value, CultureInfo cultureInfo) Converts a string to a decimal.\nParameters    Name Description     value The value.   cultureInfo The culture information.    Returns The decimal value of the string.\nToDouble(string value) Converts a string to a double.\nParameters    Name Description     value The value.    Returns The double value of the string.\nToDouble(string value, CultureInfo cultureInfo) Converts a string to a double.\nParameters    Name Description     value The value.   cultureInfo The culture information.    Returns The double value of the string.\nToEnum(string value, TEnumValue defaultValue) Converts a string to an enum value. If the value cannot be converted for any reason, the defaultValue will be returned.\nType Parameters TEnumValue The type of the enum.\nParameters    Name Description     value The value.   defaultValue The default value.    Returns The enum value representing the string.\nToFloat(string value) Converts a string to a float.\nParameters    Name Description     value The value.    Returns The float value of the string.\nToFloat(string value, CultureInfo cultureInfo) Converts a string to a float.\nParameters    Name Description     value The value.   cultureInfo The culture information.    Returns The float value of the string.\nToGuid(string value) Converts a string to a guid.\nParameters    Name Description     value The value.    Returns The guid value of the string.\nToInt(string value) Converts a string to an integer.\nParameters    Name Description     value The value.    Returns The integer value of the string.\nToInt(string value, CultureInfo cultureInfo) Converts a string to an integer.\nParameters    Name Description     value The value.   cultureInfo The culture information.    Returns The integer value of the string.\nToLong(string value) Converts a string to a long.\nParameters    Name Description     value The value.    Returns The long value of the string.\nToLong(string value, CultureInfo cultureInfo) Converts a string to a long.\nParameters    Name Description     value The value.   cultureInfo The culture information.    Returns The long value of the string.\nToRightType(Type targetType, string value) Converts a string to the right target type, such as, and.\nParameters    Name Description     targetType The target type to convert to.   value The value to convert to the specified target type.    Returns The converted value. If the value isnull, this method will returnnull.\nExceptions    Name Description     NotSupportedException The specified targetType is not supported.    ToRightType(Type targetType, string value, CultureInfo cultureInfo) Converts a string to the right target type, such as, and.\nParameters    Name Description     targetType The target type to convert to.   value The value to convert to the specified target type.   cultureInfo The culture information.    Returns The converted value. If the value isnull, this method will returnnull.\nExceptions    Name Description     NotSupportedException The specified targetType is not supported.    ToShort(string value) Converts a string to a short.\nParameters    Name Description     value The value.    Returns The short value of the string.\nToShort(string value, CultureInfo cultureInfo) Converts a string to a short.\nParameters    Name Description     value The value.   cultureInfo The culture information.    Returns The short value of the string.\nToString(string value) Converts a string to a string.\nParameters    Name Description     value The value.    Returns The string value of the string.\nToTimeSpan(string value) Converts a string to a timespan.\nParameters    Name Description     value The value.    Returns The timespan value of the string.\nToTimeSpan(string value, CultureInfo cultureInfo) Converts a string to a timespan.\nParameters    Name Description     value The value.   cultureInfo The culture information.    Returns The timespan value of the string.\nToType(string value) Converts a string to a Type.\nParameters    Name Description     value The value.    Returns The Type value of the string.\nToUInt(string value) Converts a string to an unsigned integer.\nParameters    Name Description     value The value.    Returns The unsigned integer value of the string.\nToUInt(string value, CultureInfo cultureInfo) Converts a string to an unsigned integer.\nParameters    Name Description     value The value.   cultureInfo The culture information.    Returns The unsigned integer value of the string.\nToULong(string value) Converts a string to an unsigned long.\nParameters    Name Description     value The value.    Returns The unsigned long value of the string.\nToULong(string value, CultureInfo cultureInfo) Converts a string to an unsigned long.\nParameters    Name Description     value The value.   cultureInfo The culture information.    Returns The unsigned long value of the string.\nToUri(string value) Converts a string to a Uri.\nParameters    Name Description     value The value.    Returns The Uri value of the string.\nToUShort(string value) Converts a string to an unsigned short.\nParameters    Name Description     value The value.    Returns The unsigned short value of the string.\nToUShort(string value, CultureInfo cultureInfo) Converts a string to an unsigned short.\nParameters    Name Description     value The value.   cultureInfo The culture information.    Returns The unsigned short value of the string.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/stringtotypeconverter/",
	"title": "StringToTypeConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6    public class StringToTypeConverter : TypeConverter  Base types TypeConverter\nConvert a string defining a .NET type into a value.\nMethods CanConvertFrom(ITypeDescriptorContext context, Type sourceType) Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.\nParameters    Name Description     context An ITypeDescriptorContext that provides a format context.   sourceType A Type that represents the type you want to convert from.    Returns true if this converter can perform the conversion; otherwise, false.\nConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) Converts the given object to the type of this converter, using the specified context and culture information.\nParameters    Name Description     context An ITypeDescriptorContext that provides a format context.   culture The CultureInfo to use as the current culture.   value The Object to convert.    Returns An Object that represents the converted value.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/supportedplatforms/",
	"title": "SupportedPlatforms",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum SupportedPlatforms : Enum  Base types Enum\nAll the available supported platforms.\nFields Android 6\nThe Android platform.\niOS 7\nThe iOS platform.\nNET45 0\n.NET framework 4.5.\nNET46 1\n.NET framework 4.6.\nNET47 2\n.NET framework 4.7.\nNET50 3\n.NET framework 5.0.\nNetStandard20 4\n.NET Standard 2.0.\nPCL 9\nPortable Class Library platform.\nWindowsUniversal 5\nWindows Universal 10.0.\nXamarinForms 8\nPortable Class Library platform.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/suspensioncontext/",
	"title": "SuspensionContext",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class SuspensionContext  Suspension context that can track properties during a suspension period.\nFields Properties Counter Gets the counter.\nProperties Gets the properties.\nMethods Add(string propertyName) Adds the specified property name to the suspension context.\nParameters    Name Description     propertyName Name of the property. Ifnull, this will be converted tostring.Empty.    Decrement() Decrements this instance.\nIncrement() Increments this instance.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/collections/suspensionmode/",
	"title": "SuspensionMode",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Collections   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum SuspensionMode : Enum  Base types Enum\nThe suspension mode.\nFields Adding 1\nThe adding.\nMixed 3\nMixed mode (combination of Adding and Removing). This behaves the same as None, except that it holds additional lists of the changed items, their indices and the concrete actions.\nMixedBash 4\nMixedBash mode (combination of Adding and Removing). This behaves the same as Mixed, except that this raises multiple events and events instead of single event.\nMixedConsolidate 5\nMixedConsolidate mode (combination of Adding and Removing). This behaves the same as MixedBash, except that this consolidates those add and remove events which annulled each other.\nNone 0\nNo specific mode. When the suspension stops, this will result in a single event.\nRemoving 2\nThe removing.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/threading/synchronizationcontext/",
	"title": "SynchronizationContext",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class SynchronizationContext  Provides a synchronization context to acquire or release exclusive lock of an object and execute thread safe code.\nRemarks Be aware when you use this class. If it is improperly used could provoke dead locks.\nFields Properties IsLockAcquired Gets a value indicating whether is the lock is acquired.\nMethods Acquire() Acquires an exclusive lock.\nExecute(Action code) This method execute the code into a exclusive lock.\nParameters    Name Description     code The code to be executed.    Exceptions    Name Description     ArgumentNullException If code isnull.    Remarks If the lock is acquired before call this method, then the code execution is delayed until the lock would released.\nExecute(Func code) This method execute the code into a exclusive lock and returns a value.\nType Parameters T The result type.\nParameters    Name Description     code The code to be executed.    Returns The result of execute the code.\nExceptions    Name Description     ArgumentNullException If code isnull.    Remarks If the lock is acquired before call this method, then the code execution is delayed until the lock would released, blocking the current thread.\nRelease() Releases an exclusive lock.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/threading/synchronizationcontextextensions/",
	"title": "SynchronizationContextExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class SynchronizationContextExtensions  Extension methods for the SynchronizationContext.\nMethods AcquireScope(SynchronizationContext synchronizationContext) Acquires the scope of the SynchronizationContext. When the token is disposed, the context is released.\nParameters    Name Description     synchronizationContext The synchronization context.    Returns IDisposableToken\u0026lt;SynchronizationContext\u0026gt;.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/taghelper/",
	"title": "TagHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class TagHelper  Helper class for comparing tags.\nMethods AreTagsEqual(object firstTag, object secondTag) Compares the firstTag with the secondTag. This method is introduced because a string comparison fails when using ==.\nParameters    Name Description     firstTag The first tag.   secondTag The second tag.    Returns true if the tags are equal; otherwisefalse.\nRemarks When both tags arenull, the tags are considered equal.\nToString(object tag) Returns a that represents the tag. This method also handlesnull, in that case it will return \u0026ldquo;null\u0026rdquo;.\nParameters    Name Description     tag The tag.    Returns A that represents this instance.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/tasks/taskbase/",
	"title": "TaskBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Tasks   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class TaskBase : ITask, ModelBase  Base types ModelBase\nBase types\nITask\nThe task base.\nRemarks This class inherits from ModelBase in use it as model as part of the wizard view models.\nFields AutomaticallyDispatchProperty Register the AutomaticallyDispatch property so it is known in the class.\nIsIndeterminatedProperty Register the IsIndeterminate property so it is known in the class.\nMessageProperty Register the Message property so it is known in the class.\nNameProperty Register the Name property so it is known in the class.\nPercentageProperty Register the Percentage property so it is known in the class.\nConstructors Properties AutomaticallyDispatch Gets or sets whether this task should automatically be dispatched to the UI thread.\nIsIndeterminate Indicates whether the task progress is indeterminated\nMessage Gets or sets the message.\nName Gets the name.\nPercentage Gets or sets the percentage.\nMethods Execute() The execute.\nRollback() The rollback.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/taskcommand/",
	"title": "TaskCommand",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class TaskCommand\u0026lt;TExecuteParameter, TCanExecuteParameter\u0026gt; : TaskCommand\u0026lt;TExecuteParameter, TCanExecuteParameter, ITaskProgressReport\u0026gt;  Base types TaskCommand\nImplements the Missing:  class with only the TExecuteParameter as generic type.\nType Parameters TExecuteParameter The type of the execute parameter.\nTCanExecuteParameter The type of the can execute parameter.\nConstructors TaskCommand(Funcexecute, FunccanExecute, object tag) Initializes a new instance of the Missing:  class.\nParameters    Name Description     execute The action to execute.   canExecute The function to call to determine whether the command can be executed.   tag The tag of the command.    TaskCommand(Funcexecute, FunccanExecute, object tag) Initializes a new instance of the Missing:  class.\nParameters    Name Description     execute The action to execute.   canExecute The function to call to determine whether the command can be executed.   tag The tag of the command.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/threading/taskextensions/",
	"title": "TaskExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class TaskExtensions  Class TaskExtensions.\nMethods WaitAndUnwrapException(Task task) Waits for the task to complete, unwrapping any exceptions.\nParameters    Name Description     task The task. May not benull.    WaitAndUnwrapException(Task task, CancellationToken cancellationToken) Waits for the task to complete, unwrapping any exceptions.\nParameters    Name Description     task The task. May not benull.   cancellationToken A cancellation token to observe while waiting for the task to complete.    Exceptions    Name Description     OperationCanceledException The cancellationToken was cancelled before the task completed, or the task raised an.    WaitAndUnwrapException(Task task) Waits for the task to complete, unwrapping any exceptions.\nType Parameters TResult The type of the result of the task.\nParameters    Name Description     task The task. May not benull.    Returns The result of the task.\nWaitAndUnwrapException(Task task, CancellationToken cancellationToken) Waits for the task to complete, unwrapping any exceptions.\nType Parameters TResult The type of the result of the task.\nParameters    Name Description     task The task. May not benull.   cancellationToken A cancellation token to observe while waiting for the task to complete.    Returns The result of the task.\nExceptions    Name Description     OperationCanceledException The cancellationToken was cancelled before the task completed, or the task raised an.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/threading/taskhelper/",
	"title": "TaskHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class TaskHelper  Helper class for tasks.\nFields DefaultConfigureAwaitValue The default configure await value.\nProperties Canceled A that has been canceled.\nCompleted A that has been completed.\nMethods Run(Action action, bool configureAwait, CancellationToken cancellationToken) Runs the specified function using Task.Run if available.\nParameters    Name Description     action The action.   configureAwait The value to be passed into ConfigureAwait.   cancellationToken The cancellation token.    Returns Task\u0026lt;T\u0026gt;.\nRun(Func func, bool configureAwait, CancellationToken cancellationToken) Runs the specified function using Task.Run if available.\nParameters    Name Description     func The function.   configureAwait The value to be passed into ConfigureAwait.   cancellationToken The cancellation token.    Returns Task\u0026lt;T\u0026gt;.\nRun(Func\u0026gt; func, bool configureAwait, CancellationToken cancellationToken) Runs the specified function using Task.Run if available.\nType Parameters TResult Type of the result.\nParameters    Name Description     func The function.   configureAwait The value to be passed into ConfigureAwait.   cancellationToken The cancellation token.    Returns Task\u0026lt;T\u0026gt;.\nRun(Func func, bool configureAwait, CancellationToken cancellationToken) Runs the specified function using Task.Run if available.\nType Parameters TResult Type of the result.\nParameters    Name Description     func The function.   configureAwait The value to be passed into ConfigureAwait.   cancellationToken The cancellation token.    Returns Task\u0026lt;T\u0026gt;.\nRunAndWait(Action[] actions) Runs all the specified actions in separate threads and waits for the to complete.\nParameters    Name Description     actions The actions to spawn in separate threads.    Exceptions    Name Description     ArgumentNullException The actions isnull.    RunAndWaitAsync(Action[] actions) Runs all the specified actions in separate threads and waits for the to complete. The waiting for all threads is also done in a separate thread which makes this method asynchronous.\nParameters    Name Description     actions The actions to spawn in separate threads.    Exceptions    Name Description     ArgumentNullException The actions isnull.    RunAndWaitAsync(Func[] actions) Runs all the specified actions in separate threads and waits for the to complete. The waiting for all threads is also done in a separate thread which makes this method asynchronous.\nParameters    Name Description     actions The actions to spawn in separate threads.    Exceptions    Name Description     ArgumentNullException The actions isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/threading/taskshim/",
	"title": "TaskShim",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class TaskShim  Task wrapper so it works on all platforms.\nRemarks This code originally comes from https://github.com/StephenCleary/AsyncEx/ (MIT license).\nMethods Delay(TimeSpan dueTime) Starts a Task that will complete after the specified due time.\nParameters    Name Description     dueTime The delay before the returned task completes.    Returns The timed Task.\nExceptions    Name Description     T:System.ArgumentOutOfRangeException The dueTime argument must be non-negative or -1 and less than or equal to Int32.MaxValue.    Delay(TimeSpan dueTime, CancellationToken cancellationToken) Starts a Task that will complete after the specified due time.\nParameters    Name Description     dueTime The delay before the returned task completes.   cancellationToken The cancellation token.    Returns The timed Task.\nExceptions    Name Description     T:System.ArgumentOutOfRangeException The dueTime argument must be non-negative or -1 and less than or equal to Int32.MaxValue.    Delay(int millisecondsDelay) Creates a task that will complete after a time delay.\nParameters    Name Description     millisecondsDelay The number of milliseconds to wait before completing the returned task    Returns A task that represents the time delay\nExceptions    Name Description     T:System.ArgumentOutOfRangeException The millisecondsDelay is less than -1.    Delay(int millisecondsDelay, CancellationToken cancellationToken) Creates a task that will complete after a time delay.\nParameters    Name Description     millisecondsDelay The number of milliseconds to wait before completing the returned task   cancellationToken The cancellation token.    Returns A task that represents the time delay\nExceptions    Name Description     T:System.ArgumentOutOfRangeException The millisecondsDelay is less than -1.    FromResult(TResult result) Creates a Missing:  that\u0026rsquo;s completed successfully with the specified result.\nType Parameters TResult The type of the result returned by the task.\nParameters    Name Description     result The result to store into the completed task.    Returns The successfully completed task.\nRun(Action action) Queues the specified work to run on the ThreadPool and returns a task handle for that work.\nParameters    Name Description     action The work to execute asynchronously.    Returns A task that represents the work queued to execute in the ThreadPool.\nExceptions    Name Description     T:System.ArgumentNullException The action parameter was null.    Run(Action action, CancellationToken cancellationToken) Queues the specified work to run on the ThreadPool and returns a task handle for that work.\nParameters    Name Description     action The work to execute asynchronously.   cancellationToken The cancellation token.    Returns A task that represents the work queued to execute in the ThreadPool.\nExceptions    Name Description     T:System.ArgumentNullException The action parameter was null.    Run(Func function) Queues the specified work to run on the ThreadPool and returns a proxy for the task returned by function.\nParameters    Name Description     function The work to execute asynchronously.    Returns A task that represents a proxy for the task returned by function.\nExceptions    Name Description     T:System.ArgumentNullException The function parameter was null.    Run(Func function, CancellationToken cancellationToken) Queues the specified work to run on the ThreadPool and returns a proxy for the task returned by function.\nParameters    Name Description     function The work to execute asynchronously.   cancellationToken The cancellation token.    Returns A task that represents a proxy for the task returned by function.\nExceptions    Name Description     T:System.ArgumentNullException The function parameter was null.    Run(Func\u0026gt; function) Queues the specified work to run on the ThreadPool and returns a proxy for the Task(TResult) returned by function.\nType Parameters TResult The type of the result returned by the proxy task.\nParameters    Name Description     function The work to execute asynchronously    Returns A Task(TResult) that represents a proxy for the Task(TResult) returned by function.\nExceptions    Name Description     T:System.ArgumentNullException The function parameter was null.    Run(Func\u0026gt; function, CancellationToken cancellationToken) Queues the specified work to run on the ThreadPool and returns a proxy for the Task(TResult) returned by function.\nType Parameters TResult The type of the result returned by the proxy task.\nParameters    Name Description     function The work to execute asynchronously   cancellationToken The cancellation token.    Returns A Task(TResult) that represents a proxy for the Task(TResult) returned by function.\nExceptions    Name Description     T:System.ArgumentNullException The function parameter was null.    Run(Func function) Queues the specified work to run on the ThreadPool and returns a Task(TResult) handle for that work.\nType Parameters TResult The result type of the task.\nParameters    Name Description     function The work to execute asynchronously.    Returns A Task(TResult) that represents the work queued to execute in the ThreadPool.\nExceptions    Name Description     T:System.ArgumentNullException The function parameter was null.    Run(Func function, CancellationToken cancellationToken) Queues the specified work to run on the ThreadPool and returns a Task(TResult) handle for that work.\nType Parameters TResult The result type of the task.\nParameters    Name Description     function The work to execute asynchronously.   cancellationToken The cancellation token.    Returns A Task(TResult) that represents the work queued to execute in the ThreadPool.\nExceptions    Name Description     T:System.ArgumentNullException The function parameter was null.    WhenAll(IEnumerable tasks) Creates a task that will complete when all of the supplied tasks have completed.\nParameters    Name Description     tasks The tasks to wait on for completion.    Returns A task that represents the completion of all of the supplied tasks.\nExceptions    Name Description     T:System.ArgumentNullException The tasks argument was null.   T:System.ArgumentException The tasks collection contained a null task.    WhenAll(Task[] tasks) Creates a task that will complete when all of the supplied tasks have completed.\nParameters    Name Description     tasks The tasks to wait on for completion.    Returns A task that represents the completion of all of the supplied tasks.\nExceptions    Name Description     T:System.ArgumentNullException The tasks argument was null.   T:System.ArgumentException The tasks array contained a null task.    WhenAll(IEnumerable\u0026gt; tasks) Creates a task that will complete when all of the supplied tasks have completed.\nType Parameters TResult The type of the completed task.\nParameters    Name Description     tasks The tasks to wait on for completion.    Returns A task that represents the completion of all of the supplied tasks.\nExceptions    Name Description     T:System.ArgumentNullException The tasks argument was null.   T:System.ArgumentException The tasks collection contained a null task.    WhenAll(Task[] tasks) Creates a task that will complete when all of the supplied tasks have completed.\nType Parameters TResult The type of the completed task.\nParameters    Name Description     tasks The tasks to wait on for completion.    Returns A task that represents the completion of all of the supplied tasks.\nExceptions    Name Description     T:System.ArgumentNullException The tasks argument was null.   T:System.ArgumentException The tasks array contained a null task.    WhenAny(IEnumerable tasks) Creates a task that will complete when any of the supplied tasks have completed.\nParameters    Name Description     tasks The tasks to wait on for completion.    Returns A task that represents the completion of one of the supplied tasks. The return task\u0026rsquo;s Result is the task that completed.\nExceptions    Name Description     T:System.ArgumentNullException The tasks argument was null.   T:System.ArgumentException The tasks array contained a null task, or was empty.    WhenAny(Task[] tasks) Creates a task that will complete when any of the supplied tasks have completed.\nParameters    Name Description     tasks The tasks to wait on for completion.    Returns A task that represents the completion of one of the supplied tasks. The return task\u0026rsquo;s Result is the task that completed.\nExceptions    Name Description     T:System.ArgumentNullException The tasks argument was null.   T:System.ArgumentException The tasks array contained a null task, or was empty.    WhenAny(IEnumerable\u0026gt; tasks) Creates a task that will complete when any of the supplied tasks have completed.\nType Parameters TResult The type of the completed task.\nParameters    Name Description     tasks The tasks to wait on for completion.    Returns A task that represents the completion of one of the supplied tasks. The return task\u0026rsquo;s Result is the task that completed.\nExceptions    Name Description     T:System.ArgumentNullException The tasks argument was null.   T:System.ArgumentException The tasks array contained a null task, or was empty.    WhenAny(Task[] tasks) Creates a task that will complete when any of the supplied tasks have completed.\nType Parameters TResult The type of the completed task.\nParameters    Name Description     tasks The tasks to wait on for completion.    Returns A task that represents the completion of one of the supplied tasks. The return task\u0026rsquo;s Result is the task that completed.\nExceptions    Name Description     T:System.ArgumentNullException The tasks argument was null.   T:System.ArgumentException The tasks array contained a null task, or was empty.    Yield() Creates an awaitable task that asynchronously yields back to the current context when awaited.\nReturns A context that, when awaited, will asynchronously transition back into the current context at the time of the await. If the current SynchronizationContext is non-null, it is treated as the current context. Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/textapicoplistenerbase/",
	"title": "TextApiCopListenerBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ApiCop   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class TextApiCopListenerBase : ApiCopListenerBase  Base types ApiCopListenerBase\nIApiCopListener implementation which writes all results to a text file.\nFields Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/listeners/textfileapicoplistener/",
	"title": "TextFileApiCopListener",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ApiCop.Listeners   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class TextFileApiCopListener : TextApiCopListenerBase  Base types TextApiCopListenerBase\nIApiCopListener implementation which writes all results to a text file. If noFileStream is available in the target platform, this will write to a memory stream.\nFields Constructors TextFileApiCopListener(string fileName) Initializes a new instance of the TextFileApiCopListener class.\nParameters    Name Description     fileName Name of the file.    Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/texttolowercaseconverter/",
	"title": "TextToLowerCaseConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class TextToLowerCaseConverter : ValueConverterBase  Base types ValueConverterBase\nConverts string values to lower case.\nFields Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/texttouppercaseconverter/",
	"title": "TextToUpperCaseConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class TextToUpperCaseConverter : ValueConverterBase  Base types ValueConverterBase\nConverts string values to upper case.\nFields Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/themehelper/",
	"title": "ThemeHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public static class ThemeHelper  Theme helper to ensure themes are loaded upon usage.\nFields Methods EnsureCatelMvvmThemeIsLoaded() Ensures that the Catel.MVVM theme is loaded.\nEnsureThemeIsLoaded(Uri resourceUri) Ensures that the specified theme is loaded.\nParameters    Name Description     resourceUri The resource URI.    EnsureThemeIsLoaded(Uri resourceUri, Func predicate) Ensures that the specified theme is loaded.\nParameters    Name Description     resourceUri The resource URI.   predicate The predicate.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/threadhelper/",
	"title": "ThreadHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ThreadHelper  Helper class for thread methods.\nMethods GetCurrentThreadId() Gets the current thread identifier.\nReturns System.String.\nSleep(int millisecondsTimeout) Lets the current execution thread sleep for the specified milliseconds. In WinRT, this method uses the Task to delay.\nParameters    Name Description     millisecondsTimeout The milliseconds timeout.    SpinWait(int iterations) Causes a thread to wait the number of times defined by the iterations parameter.\nParameters    Name Description     iterations The number of iterations.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/logging/timedisplay/",
	"title": "TimeDisplay",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Logging   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum TimeDisplay : Enum  Base types Enum\nAvailable time display formats.\nFields DateTime 1\nThe date time format.\nTime 0\nThe time format.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/threading/timeout/",
	"title": "Timeout",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class Timeout  The timeout class.\nFields Infinite A constant used to specify an infinite waiting period, for threading methods that accept an Int32 parameter.\nInfiniteTimeSpan A constant used to specify an infinite waiting period, for threading methods that accept an TimeSpan parameter.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/threading/timer/",
	"title": "Timer",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class Timer : IDisposable  Base types IDisposable\nTimer for WinRT since WinRT only provides the DispatcherTimer which cannot be used outside the UI thread.\nFields Constructors Timer() Initializes a new instance of the Timer class.\nTimer(TimerCallback callback) Initializes a new instance of the Timer class.\nParameters    Name Description     callback The callback.    Timer(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan interval) Initializes a new instance of the Timer class.\nParameters    Name Description     callback The callback.   state The state.   dueTime The due time.   interval The interval.    Exceptions    Name Description     ArgumentNullException The callback isnull.    Timer(TimerCallback callback, object state, int dueTime, int interval) Initializes a new instance of the Timer class.\nParameters    Name Description     callback The callback.   state The state.   dueTime The due time.   interval The interval.    Exceptions    Name Description     ArgumentNullException The callback isnull.    Timer(int interval) Initializes a new instance of the Timer class.\nParameters    Name Description     interval The interval in milliseconds.    Properties Interval Gets or sets the interval.\nEvents Elapsed Occurs when the interval elapses.\nMethods Change(TimeSpan dueTime, TimeSpan interval) Changes the specified interval.\nParameters    Name Description     dueTime The due time.   interval The interval.    Change(int dueTime, int interval) Changes the specified interval.\nParameters    Name Description     dueTime The due time.   interval The interval.    Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/threading/timercallback/",
	"title": "TimerCallback",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public delegate TimerCallback : MulticastDelegate  Base types MulticastDelegate\nTimer callback delegate.\nParameters    Name Description     state The state.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/rules/toomanydependenciesapicoprule/",
	"title": "TooManyDependenciesApiCopRule",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ApiCop.Rules   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class TooManyDependenciesApiCopRule : ApiCopRule  Base types ApiCopRule\nRule to prevent too many dependencies on a class.\nFields Constructors TooManyDependenciesApiCopRule(string name, string description, ApiCopRuleLevel level, string url) Initializes a new instance of the ApiCopRule class.\nParameters    Name Description     name The name.   description The description.   level The level.   url The URL.    Methods GetResultAsText(string tag) Gets the result as text.\nParameters    Name Description     tag The tag.    Returns The result as text.\nIsValid(IApiCop apiCop, string tag) Determines whether the specified ApiCop rule is valid.\nParameters    Name Description     apiCop The ApiCop.   tag The tag.    Returns true if the specified ApiCop is valid; otherwise,false.\nSetNumberOfDependenciesInjected(Type type, int numberOfDependencies) Sets the number of dependencies injected for the specified type.\nParameters    Name Description     type The type.   numberOfDependencies The number of dependencies.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/triggeractionbase/",
	"title": "TriggerActionBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6    public abstract class TriggerActionBase\u0026lt;T, T\u0026gt; : TriggerAction\u0026lt;T\u0026gt; where T : FrameworkElement  Base types TriggerAction\nTriggerAction base class that handles a safe unsubscribe and clean up because the default TriggerAction class does not always callOnDetaching. This class also adds some specific features such as ValidateRequiredProperties which is automatically called when the trigger action is attached.\nType Parameters T The this trigger action should attach to.\nFields Properties IsAssociatedObjectLoaded Gets a value indicating whether theTriggerActionBase{T}.AssociatedObject is loaded.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/triggerbase/",
	"title": "TriggerBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6    public abstract class TriggerBase\u0026lt;T, T\u0026gt; : ITrigger, TriggerBase\u0026lt;T\u0026gt; where T : FrameworkElement  Base types TriggerBase\nBase types\nITrigger\nTrigger base class that handles a safe unsubscribe and clean up because the default Trigger class does not always call OnDetaching. This class also adds some specific features such as ValidateRequiredProperties which is automatically called when the trigger is attached.\nType Parameters T The this trigger should attach to.\nFields IsEnabledProperty The IsEnabled property registration.\nProperties IsAssociatedObjectLoaded Gets a value indicating whether theTriggerBase{T}.AssociatedObject is loaded.\nIsEnabled Gets or sets a value indicating whether this trigger is enabled.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/triggereventargs/",
	"title": "TriggerEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class TriggerEventArgs : EventArgs  Base types EventArgs\nTrigger event args.\nConstructors TriggerEventArgs(ITrigger trigger) Creates the event args.\nParameters    Name Description     trigger The trigger.    Exceptions    Name Description     ArgumentNullException The trigger isnull.    Properties Trigger Gets the trigger.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/typearray/",
	"title": "TypeArray",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class TypeArray  The type array class.\nMethods From() Gets an array of type from two type parameters.\nType Parameters T The type\nReturns Array of types\nFrom() Gets an array of type from two type parameters.\nType Parameters T1 The type 1\nT2 The type 2\nT3 The type 3\nT4 The type 4\nT5 The type 5\nReturns Array of types\nFrom() Gets an array of type from two type parameters.\nType Parameters T1 The type 1\nT2 The type 2\nT3 The type 3\nT4 The type 4\nReturns Array of types\nFrom() Gets an array of type from two type parameters.\nType Parameters T1 The type 1\nT2 The type 2\nT3 The type 3\nReturns Array of types\nFrom() Gets an array of type from two type parameters.\nType Parameters T1 The type 1\nT2 The type 2\nReturns Array of types\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/typecache/",
	"title": "TypeCache",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class TypeCache  Cache containing the types of an appdomain.\nFields Constructors Properties ShouldIgnoreAssemblyEvaluators Gets the evaluators used to determine whether a specific assembly should be ignored.\nShouldIgnoreTypeEvaluators Gets the evaluators used to determine whether a specific type should be ignored.\nEvents AssemblyLoaded Occurs when an assembly is loaded into the currently.\nMethods GetType(string typeNameWithAssembly, bool ignoreCase, bool allowInitialization) Gets the specified type from the loaded assemblies.\nParameters    Name Description     typeNameWithAssembly The name of the type including namespace and assembly, formatted with the String) method.   ignoreCase A value indicating whether the case should be ignored.   allowInitialization If set totrue, allow initialization of the AppDomain if it hasn\u0026rsquo;t happened yet. Iffalse, deal with the types currently in the cache.    Returns The ornull if the type cannot be found.\nExceptions    Name Description     ArgumentException The typeNameWithAssembly isnull or whitespace.    GetTypes(Funcpredicate, bool allowInitialization) Gets all the types from the current where the predicate returns true.\nParameters    Name Description     predicate The predicate where the type should apply to.   allowInitialization If set totrue, allow initialization of the AppDomain if it hasn\u0026rsquo;t happened yet. Iffalse, deal with the types currently in the cache.    Returns An array containing all the that match the predicate.\nExceptions    Name Description     ArgumentNullException The predicate isnull.    GetTypesImplementingInterface(Type interfaceType) Gets the types implementing the specified interface.\nParameters    Name Description     interfaceType Type of the interface.    Returns Type[].\nGetTypesOfAssembly(Assembly assembly, Funcpredicate) Gets the types of the specified assembly.\nParameters    Name Description     assembly The assembly.   predicate The predicate to use on the types.    Returns All types of the specified assembly.\nGetTypeWithAssembly(string typeName, string assemblyName, bool ignoreCase, bool allowInitialization) Gets the specified type from the loaded assemblies.\nParameters    Name Description     typeName The name of the type including namespace.   assemblyName The name of the type including namespace.   ignoreCase A value indicating whether the case should be ignored.   allowInitialization If set totrue, allow initialization of the AppDomain if it hasn\u0026rsquo;t happened yet. Iffalse, deal with the types currently in the cache.    Returns The ornull if the type cannot be found.\nExceptions    Name Description     ArgumentException The typeName isnull or whitespace.    GetTypeWithoutAssembly(string typeNameWithoutAssembly, bool ignoreCase, bool allowInitialization) Gets the type without assembly. For example, when the valueCatel.TypeHelper is used as parameter, the type forCatel.TypeHelper, Catel.Core will be returned.\nParameters    Name Description     typeNameWithoutAssembly The type name without assembly.   ignoreCase A value indicating whether the case should be ignored.   allowInitialization If set totrue, allow initialization of the AppDomain if it hasn\u0026rsquo;t happened yet. Iffalse, deal with the types currently in the cache.    Returns The ornull if the type cannot be found.\nExceptions    Name Description     ArgumentException The typeNameWithoutAssembly isnull or whitespace.    Remarks Note that this method can only support one type of \u0026ldquo;simple type name\u0026rdquo; resolving. For example, if \u0026ldquo;Catel.TypeHelper\u0026rdquo; is located in multiple assemblies, it will always use the latest known type for resolving the type.\nInitializeTypes(Assembly assembly, bool forceFullInitialization, bool allowMultithreadedInitialization) Initializes the types in the specified assembly. It does this by looping through all loaded assemblies and registering the type by type name and assembly name. The types initialized by this method are used by.\nParameters    Name Description     assembly The assembly to initialize the types from. Ifnull, all assemblies will be checked.   forceFullInitialization Iftrue, the types are initialized, even when the types are already initialized.   allowMultithreadedInitialization Iftrue, allow multithreaded initialization. The default value isfalse.    InitializeTypes(string assemblyName, bool forceFullInitialization, bool allowMultithreadedInitialization) Initializes the types. It does this by looping through all loaded assemblies and registering the type by type name and assembly name. The types initialized by this method are used by.\nParameters    Name Description     assemblyName Name of the assembly. Ifnull, all assemblies will be checked.   forceFullInitialization Iftrue, the types are initialized, even when the types are already initialized.   allowMultithreadedInitialization Iftrue, allow multithreaded initialization.    Exceptions    Name Description     ArgumentException The assemblyName isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/typeextensions/",
	"title": "TypeExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class TypeExtensions  Extensions for the type class.\nMethods GetCollectionElementType(Type type) Gets the element type of the collection.\nParameters    Name Description     type The type.    Returns Type.\nExceptions    Name Description     ArgumentNullException The type isnull.    IsBasicType(Type type) Determines whether the specified type is a basic type. A basic type is one that can be wholly expressed as an XML attribute. All primitive data types and and are basic types.\nParameters    Name Description     type The type to check.    Returns true if the specified type is a basic type; otherwise,false.\nExceptions    Name Description     ArgumentNullException The type isnull.    IsClassType(Type type) Determines whether the specified type is a class type, meaning it is not a value type but also not a string or any of the primitive types in .NET.\nParameters    Name Description     type The type.    Returns true if this type is a class type; otherwise,false.\nIsCollection(Type type) Determines whether the specified type is a collection.\nParameters    Name Description     type The type.    Returns true if the specified type is a collection; otherwise,false.\nIsDictionary(Type type) Determines whether the specified type is a dictionary.\nParameters    Name Description     type The type.    Returns true if the specified type is a dictionary; otherwise,false.\nIsModelBase(Type type) Determines whether the specified type derives from ModelBase.\nParameters    Name Description     type The type.    Returns true if the specified type is a model base; otherwise,false.\nExceptions    Name Description     ArgumentNullException The type isnull.    IsNullableType(Type type) Returns whether a type is nullable or not.\nParameters    Name Description     type Type to check.    Returns True if the type is nullable, otherwise false.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/ioc/introduction-to-components/typefactory/",
	"title": "TypeFactory",
	"tags": [],
	"description": "",
	"content": " The TypeFactory is responsible for actually creating types inside Catel. It uses the following mechanism:\n List all the constructors, order them from most parameters to least parameters While (constructors available) try to construct type using injection If all constructors fail, the TypeFactory will fallback to Activator.CreateInstance()  Dependency injection The ServiceLocator in Catel supports dependency injection.\nIntroduction to dependency injection Some people make dependency injection hard to understand, or maybe they don\u0026rsquo;t understand it themselves. Dependency injection simply means that instead of hard referencing or instantiating other classes (dependendies), the dependencies are injected into the class via the constructor.\nExample 1: bad, instantiates the dependencies itself\npublic class MyClass { private IFirstDependency _firstDependency; private ISecondDependency _secondDependency; public MyClass() { _firstDependency = new FirstDependency(); _secondDependency = new SecondDependency(); } }  Example 2: good, retrieves the dependencies via the service locator)\npublic class MyClass { private IFirstDependency _firstDependency; private ISecondDependency _secondDependency; public MyClass() { _firstDependency = ServiceLocator.Instance.ResolveType\u0026lt;IFirstDependency\u0026gt;(); _secondDependency = ServiceLocator.Instance.ResolveType\u0026lt;ISecondDependency\u0026gt;(); } }   Example 3: good, gets the dependencies injected\npublic class MyClass { private IFirstDependency _firstDependency; private ISecondDependency _secondDependency; public MyClass(IFirstDependency firstDependency, ISecondDependency secondDepdenceny) { Argument.IsNotNull(\u0026quot;firstDependency\u0026quot;, firstDependency); Argument.IsNotNull(\u0026quot;secondDependency\u0026quot;, secondDependency); _firstDependency = firstDependency; _secondDependency = secondDependency; } }  There are other ways of using dependency injection, for example via attributes. This documentation will focus on dependency injection via the constructor only\n\rUsing dependency injection in Catel Dependency injection via the ServiceLocator in Catel is enabled by default. This means that when a type is resolved from the container, it will automatically use dependency injection to construct the type if it is not registered as instance.\nIt will first search for all available constructors on the type that will be instantiated. Then, for each constructor, starting with the one with the most parameters, it will try to retrieve all values. If one fails, it will go to the next. If all fail, it will try to use the default constructor without parameters. If that fails as well, then the type cannot be constructed and an exception will be thrown.\nTo get a better understanding of what happens, see the class below:\npublic class MyClass { private IFirstDependency _firstDependency; private ISecondDependency _secondDependency; public MyClass() : this(null) { } public MyClass(IFirstDependency firstDependency) : this(firstDependency, null) { } public MyClass(IFirstDependency firstDependency, ISecondDependency secondDepdenceny) { _firstDependency = firstDependency; _secondDependency = secondDependency; } }  When the MyClass will be retrieved from the ServiceLocator, this will happen:\n Find constructor with most parameters (the one with both firstDependency and secondDependency). If both IFirstDependency and ISecondDependency can be resolved from the ServiceLocator, the type will be constructed with the constructor. Otherwise it will proceed with step 2. Find next constructor with most parameters (the one with only firstDependency). If IFirstDependency can be resolved from the ServiceLocator, the type will be constructed with the constructor. Otherwise it will proceed with step 3. At this point, no constructor could be used. In this case, the ServiceLocator will try to use the default constructor (the one without parameters) as last resort to instantiate the type.  Disabling dependency injection  Maybe you don\u0026rsquo;t want dependency injection because it does not give you what you need or you want a very, very small improvement in performance. In that case, the dependency injection can be disabled using the code below:\nServiceLocator.Default.SupportedDependencyInjection = false  Custom initialization All types created with the TypeFactory can be initialized with custom code. This can be done by implementing the INeedCustomInitialization interface. As soon as a type is created, the TypeFactory will check whether it implements the INeedCustomInitialization interface. If so, it will call the Initialize method of the interface.\nTo prevent misuse of the Initialize method, it is best to implement the interface explicitly\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/typefactory/",
	"title": "TypeFactory",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class TypeFactory : ITypeFactory  Base types\nITypeFactory\nType factory which will cache constructors to ensure the best performance available. This class will automatically watch the TypeRegistered event and clear the cache automatically when the event occurs.\nFields Constructors TypeFactory(IServiceLocator serviceLocator) Initializes a new instance of the TypeFactory class.\nParameters    Name Description     serviceLocator The service locator.    Exceptions    Name Description     ArgumentNullException The serviceLocator isnull.    Properties Default Gets the default instance.\nRemarks Do not move initialization to a field, it will cause a deadlock with the initialization of the default ServiceLocator.\nMethods ClearCache() Clears the cache of all constructors. This call is normally not necessary since the type factory should keep an eye on the TypeRegistered event to invalidate the cache.\nCreateInstance(Type typeToConstruct) Creates an instance of the specified type using dependency injection.\nParameters    Name Description     typeToConstruct The type to construct.    Returns The instantiated type using dependency injection.\nExceptions    Name Description     ArgumentNullException The typeToConstruct isnull.    CreateInstanceWithParameters(Type typeToConstruct, object[] parameters) Creates an instance of the specified type using the specified parameters as injection values.\nParameters    Name Description     typeToConstruct The type to construct.   parameters The parameters to inject.    Returns The instantiated type using dependency injection.\nExceptions    Name Description     ArgumentNullException The typeToConstruct isnull.    CreateInstanceWithParametersAndAutoCompletion(Type typeToConstruct, object[] parameters) Creates an instance of the specified type using the specified parameters as injection values. This method will also auto-complete any additional dependencies that can be resolved from the IServiceLocator.\nParameters    Name Description     typeToConstruct The type to construct.   parameters The parameters to inject.    Returns The instantiated type using dependency injection.\nExceptions    Name Description     ArgumentNullException The typeToConstruct isnull.    CreateInstanceWithParametersAndAutoCompletionWithTag(Type typeToConstruct, object tag, object[] parameters) Creates an instance of the specified type using the specified parameters as injection values. This method will also auto-complete any additional dependencies that can be resolved from the IServiceLocator.\nParameters    Name Description     typeToConstruct The type to construct.   tag The preferred tag when resolving dependencies.   parameters The parameters to inject.    Returns The instantiated type using dependency injection.\nExceptions    Name Description     ArgumentNullException The typeToConstruct isnull.    CreateInstanceWithParametersWithTag(Type typeToConstruct, object tag, object[] parameters) Creates an instance of the specified type using the specified parameters as injection values.\nParameters    Name Description     typeToConstruct The type to construct.   tag The preferred tag when resolving dependencies.   parameters The parameters to inject.    Returns The instantiated type using dependency injection.\nExceptions    Name Description     ArgumentNullException The typeToConstruct isnull.    CreateInstanceWithTag(Type typeToConstruct, object tag) Creates an instance of the specified type using dependency injection.\nParameters    Name Description     typeToConstruct The type to construct.   tag The preferred tag when resolving dependencies.    Returns The instantiated type using dependency injection.\nExceptions    Name Description     ArgumentNullException The typeToConstruct isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/typefactoryextensions/",
	"title": "TypeFactoryExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class TypeFactoryExtensions  Extension methods for the ITypeFactory.\nMethods CreateInstance(ITypeFactory typeFactory) Creates an instance of the specified type using dependency injection.\nType Parameters T The type to instantiate.\nParameters    Name Description     typeFactory The type factory.    Returns The instantiated type using dependency injection.\nExceptions    Name Description     ArgumentNullException The typeFactory isnull.    CreateInstanceWithParameters(ITypeFactory typeFactory, object[] parameters) Creates an instance of the specified type using the specified parameters as injection values.\nType Parameters T The type to instantiate.\nParameters    Name Description     typeFactory The type factory.   parameters The parameters to inject.    Returns The instantiated type using dependency injection.\nExceptions    Name Description     ArgumentNullException The typeFactory isnull.    CreateInstanceWithParametersAndAutoCompletion(ITypeFactory typeFactory, object[] parameters) Creates an instance of the specified type using the specified parameters as injection values. This method will also auto-complete any additional dependencies that can be resolved from the IServiceLocator.\nType Parameters T The type to instantiate.\nParameters    Name Description     typeFactory The type factory.   parameters The parameters to inject.    Returns The instantiated type using dependency injection.\nExceptions    Name Description     ArgumentNullException The typeFactory isnull.    CreateInstanceWithParametersAndAutoCompletionWithTag(ITypeFactory typeFactory, object tag, object[] parameters) Creates an instance of the specified type using the specified parameters as injection values. This method will also auto-complete any additional dependencies that can be resolved from the IServiceLocator.\nType Parameters T The type to instantiate.\nParameters    Name Description     typeFactory The type factory.   tag The preferred tag when resolving dependencies.   parameters The parameters to inject.    Returns The instantiated type using dependency injection.\nExceptions    Name Description     ArgumentNullException The typeFactory isnull.    CreateInstanceWithParametersWithTag(ITypeFactory typeFactory, object tag, object[] parameters) Creates an instance of the specified type using the specified parameters as injection values.\nType Parameters T The type to instantiate.\nParameters    Name Description     typeFactory The type factory.   tag The preferred tag when resolving dependencies.   parameters The parameters to inject.    Returns The instantiated type using dependency injection.\nExceptions    Name Description     ArgumentNullException The typeFactory isnull.    CreateInstanceWithTag(ITypeFactory typeFactory, object tag) Creates an instance of the specified type using dependency injection.\nType Parameters T The type to instantiate.\nParameters    Name Description     typeFactory The type factory.   tag The preferred tag when resolving dependencies.    Returns The instantiated type using dependency injection.\nExceptions    Name Description     ArgumentNullException The typeFactory isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/typehelper/",
	"title": "TypeHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class TypeHelper  helper class.\nFields Constructors Properties MicrosoftPublicKeyTokens Gets the Microsoft public key tokens.\nMethods Cast(TInput value) Generic cast of a value.\nType Parameters TOutput Requested return type.\nTInput The input type.\nParameters    Name Description     value The value to cast.    Returns The casted value.\nCast(TInput value, TOutput whenNullValue) Generic cast of a value.\nType Parameters TOutput Requested return type.\nTInput The input type.\nParameters    Name Description     value The value to cast.   whenNullValue When unable to cast the incoming value, this value is returned instead.    Returns The casted value or when uncastable the whenNullValue is returned.\nCast(object value) Generic cast of a value.\nType Parameters TOutput Requested return type.\nParameters    Name Description     value The value to cast.    Returns The casted value.\nConvertTypeToVersionIndependentType(string type, bool stripAssemblies) Converts a string representation of a type to a version independent type by removing the assembly version information.\nParameters    Name Description     type Type to convert.   stripAssemblies if set totrue, the assembly names will be stripped as well.    Returns String representing the type without version information.\nExceptions    Name Description     ArgumentException The type isnull or whitespace.    FormatInnerTypes(string[] innerTypes, bool stripAssemblies) Formats multiple inner types into one string.\nParameters    Name Description     innerTypes The inner types.   stripAssemblies if set totrue, the assembly names will be stripped as well.    Returns string representing a combination of all inner types.\nFormatType(string assembly, string type) Formats a type in the official type description like [typename], [assemblyname].\nParameters    Name Description     assembly Assembly name to format.   type Type name to format.    Returns Type name like [typename], [assemblyname].\nExceptions    Name Description     ArgumentException The assembly isnull or whitespace.    GetAssemblyName(string fullTypeName) Gets the name of the assembly.\nParameters    Name Description     fullTypeName Full name of the type, for exampleCatel.TypeHelper, Catel.Core.    Returns The assembly name retrieved from the type, for exampleCatel.Core ornull if the assembly is not contained by the type.\nExceptions    Name Description     ArgumentException The fullTypeName isnull or whitespace.    GetAssemblyNameWithoutOverhead(string fullyQualifiedAssemblyName) Gets the assembly name without overhead (version, public keytoken, etc)\nParameters    Name Description     fullyQualifiedAssemblyName Name of the fully qualified assembly.    Returns The assembly without the overhead.\nExceptions    Name Description     ArgumentException The fullyQualifiedAssemblyName isnull or whitespace.    GetInnerTypes(string type) Returns the inner type of a type, for example, a generic array type.\nParameters    Name Description     type Full type which might contain an inner type.    Returns Array of inner types.\nExceptions    Name Description     ArgumentException The type isnull or whitespace.    GetTypedInstance(object instance) Gets the typed instance based on the specified instance.\nParameters    Name Description     instance The instance to retrieve in the typed form.    Returns The typed instance.\nExceptions    Name Description     NotSupportedException The instance cannot be casted to TTargetType.    GetTypeName(string fullTypeName) Gets the name of the type without the assembly but including the namespace.\nParameters    Name Description     fullTypeName Full name of the type, for exampleCatel.TypeHelper, Catel.Core.    Returns The type name retrieved from the type, for exampleCatel.TypeHelper.\nExceptions    Name Description     ArgumentException The fullTypeName isnull or whitespace.    GetTypeNamespace(string fullTypeName) Gets the type namespace.\nParameters    Name Description     fullTypeName Full name of the type, for exampleCatel.TypeHelper, Catel.Core.    Returns The type namespace retrieved from the type, for exampleCatel.\nExceptions    Name Description     ArgumentException The fullTypeName isnull or whitespace.    GetTypeNameWithAssembly(string fullTypeName) Gets the type name with assembly, but without the fully qualified assembly name. For example, this method provides the string:Catel.TypeHelper, Catel.Core, Version=1.0.0.0, PublicKeyToken=123456789 and will return:Catel.TypeHelper, Catel.Core\nParameters    Name Description     fullTypeName Full name of the type.    Returns The type name including the assembly.\nExceptions    Name Description     ArgumentException The fullTypeName isnull or whitespace.    GetTypeNameWithoutNamespace(string fullTypeName) Gets the type name without the assembly namespace.\nParameters    Name Description     fullTypeName Full name of the type, for exampleCatel.TypeHelper, Catel.Core.    Returns The type name retrieved from the type, for exampleTypeHelper.\nExceptions    Name Description     ArgumentException The fullTypeName isnull or whitespace.    IsSubclassOfRawGeneric(Type generic, Type toCheck) Determines whether the subclass is of a raw generic type.\nParameters    Name Description     generic The generic.   toCheck The type to check.    Returns true if the subclass is of a raw generic type; otherwise,false.\nExceptions    Name Description     ArgumentNullException The generic isnull.    Remarks This implementation is based on this forum thread: http://stackoverflow.com/questions/457676/c-reflection-check-if-a-class-is-derived-from-a-generic-class Original license: CC BY-SA 2.5, compatible with the MIT license.\nTryCast(TInput value, TOutput output) Tries to Generic cast of a value.\nType Parameters TOutput Requested return type.\nTInput The input type.\nParameters    Name Description     value The value to cast.   output The casted value.    Returns When a cast is succeded true else false.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/typeinfo/",
	"title": "TypeInfo",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on Xamarin - Android, Xamarin - iOS    public class TypeInfo  The type info.\nFields Constructors Properties Assembly Gets the Assembly in which the type is declared. For generic types, gets the Assembly in which the generic type is defined.\nReturns An Assembly instance that describes the assembly containing the current type. For generic types, the instance describes the assembly that contains the generic type definition, not the assembly that creates and uses a particular constructed type.\nAssemblyQualifiedName Gets the assembly-qualified name of the Type, which includes the name of the assembly from which the Type was loaded.\nReturns The assembly-qualified name of the Type, which includes the name of the assembly from which the Type was loaded, or null if the current instance represents a generic type parameter.\nAttributes Gets the attributes associated with the Type.\nReturns A TypeAttributes object representing the attribute set of the Type, unless the Type represents a generic type parameter, in which case the value is unspecified.\nBaseType Gets the type from which the current Type directly inherits.\nReturns The Type from which the current Type directly inherits, or null if the current Type represents the Object class or an interface.\nContainsGenericParameters Gets a value indicating whether the current Type object has type parameters that have not been replaced by specific types.\nReturns true if the Type object is itself a generic type parameter or has type parameters for which specific types have not been supplied; otherwise, false.\nDeclaredEvents Gets DeclaredEvents.\nDeclaredFields Gets DeclaredFields.\nDeclaredProperties Gets DeclaredProperties.\nDeclaringMethod Gets a MethodBase that represents the declaring method, if the current Type represents a type parameter of a generic method.\nReturns If the current Type represents a type parameter of a generic method, a MethodBase that represents declaring method; otherwise, null.\nDeclaringType Gets the type that declares the current nested type or generic type parameter.\nReturns A Type object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, null.\nFullName Gets the fully qualified name of the Type, including the namespace of the Type but not the assembly.\nReturns The fully qualified name of the Type, including the namespace of the Type but not the assembly; or null if the current instance represents a generic type parameter, an array type, pointer type, or byref type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.\nGenericParameterAttributes Gets a combination of GenericParameterAttributes flags that describe the covariance and special constraints of the current generic type parameter.\nReturns A bitwise combination of GenericParameterAttributes values that describes the covariance and special constraints of the current generic type parameter.\nExceptions    Name Description     T:System.InvalidOperationException The current Type object is not a generic type parameter. That is, the IsGenericParameter property returns false.   T:System.NotSupportedException The invoked method is not supported in the base class.    GenericParameterPosition Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the Type object represents a type parameter of a generic type or a generic method.\nReturns The position of a type parameter in the type parameter list of the generic type or method that defines the parameter. Position numbers begin at 0.\nExceptions    Name Description     T:System.InvalidOperationException The current type does not represent a type parameter. That is, IsGenericParameter returns false.    GenericTypeArguments Gets GenericTypeArguments\nGUID Gets the GUID associated with the Type.\nReturns The GUID associated with the Type.\nHasElementType Gets a value indicating whether the current Type encompasses or refers to another type; that is, whether the current Type is an array, a pointer, or is passed by reference.\nReturns true if the Type is an array, a pointer, or is passed by reference; otherwise, false.\nImplementedInterfaces Gets ImplementedInterfaces\nIsAbstract Gets a value indicating whether the Type is abstract and must be overridden.\nReturns true if the Type is abstract; otherwise, false.\nIsAnsiClass Gets a value indicating whether the string format attribute AnsiClass is selected for the Type.\nReturns true if the string format attribute AnsiClass is selected for the Type; otherwise, false.\nIsArray Gets a value indicating whether the Type is an array.\nReturns true if the Type is an array; otherwise, false.\nIsAutoClass Gets a value indicating whether the string format attribute AutoClass is selected for the Type.\nReturns true if the string format attribute AutoClass is selected for the Type; otherwise, false.\nIsAutoLayout Gets a value indicating whether the class layout attribute AutoLayout is selected for the Type.\nReturns true if the class layout attribute AutoLayout is selected for the Type; otherwise, false.\nIsByRef Gets a value indicating whether the Type is passed by reference.\nReturns true if the Type is passed by reference; otherwise, false.\nIsClass Gets a value indicating whether the Type is a class; that is, not a value type or interface.\nReturns true if the Type is a class; otherwise, false.\nIsCOMObject Gets a value indicating whether the Type is a COM object.\nReturns true if the Type is a COM object; otherwise, false.\nIsEnum Gets a value indicating whether the current Type represents an enumeration.\nReturns true if the current Type represents an enumeration; otherwise, false.\nIsGenericParameter Gets a value indicating whether the current Type represents a type parameter in the definition of a generic type or method.\nReturns true if the Type object represents a type parameter of a generic type definition or generic method definition; otherwise, false.\nIsGenericType Gets a value indicating whether the current type is a generic type.\nReturns true if the current type is a generic type; otherwise, false.\nIsGenericTypeDefinition Gets a value indicating whether the current Type represents a generic type definition, from which other generic types can be constructed.\nReturns true if the Type object represents a generic type definition; otherwise, false.\nIsImport Gets a value indicating whether the Type has a ComImportAttribute attribute applied, indicating that it was imported from a COM type library.\nReturns true if the Type has a ComImportAttribute; otherwise, false.\nIsInterface Gets a value indicating whether the Type is an interface; that is, not a class or a value type.\nReturns true if the Type is an interface; otherwise, false.\nIsNested Gets a value indicating whether the current Type object represents a type whose definition is nested inside the definition of another type.\nReturns true if the Type is nested inside another type; otherwise, false.\nIsNestedAssembly Gets a value indicating whether the Type is nested and visible only within its own assembly.\nReturns true if the Type is nested and visible only within its own assembly; otherwise, false.\nIsNestedFamANDAssem Gets a value indicating whether the Type is nested and visible only to classes that belong to both its own family and its own assembly.\nReturns true if the Type is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, false.\nIsNestedFamily Gets a value indicating whether the Type is nested and visible only within its own family.\nReturns true if the Type is nested and visible only within its own family; otherwise, false.\nIsNestedFamORAssem Gets a value indicating whether the Type is nested and visible only to classes that belong to either its own family or to its own assembly.\nReturns true if the Type is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, false.\nIsNestedPrivate Gets a value indicating whether the Type is nested and declared private.\nReturns true if the Type is nested and declared private; otherwise, false.\nIsNestedPublic Gets a value indicating whether a class is nested and declared public.\nReturns true if the class is nested and declared public; otherwise, false.\nIsNotPublic Gets a value indicating whether the Type is not declared public.\nReturns true if the Type is not declared public and is not a nested type; otherwise, false.\nIsPointer Gets a value indicating whether the Type is a pointer.\nReturns true if the Type is a pointer; otherwise, false.\nIsPrimitive Gets a value indicating whether the Type is one of the primitive types.\nReturns true if the Type is one of the primitive types; otherwise, false.\nIsPublic Gets a value indicating whether the Type is declared public.\nReturns true if the Type is declared public and is not a nested type; otherwise, false.\nIsSealed Gets a value indicating whether the Type is declared sealed.\nReturns true if the Type is declared sealed; otherwise, false.\nIsSerializable Gets a value indicating whether the Type is serializable.\nReturns true if the Type is serializable; otherwise, false.\nIsSpecialName Gets a value indicating whether the Type has a name that requires special handling.\nReturns true if the Type has a name that requires special handling; otherwise, false.\nIsUnicodeClass Gets a value indicating whether the string format attribute UnicodeClass is selected for the Type.\nReturns true if the string format attribute UnicodeClass is selected for the Type; otherwise, false.\nIsValueType Gets a value indicating whether the Type is a value type.\nReturns true if the Type is a value type; otherwise, false.\nIsVisible Gets a value indicating whether the Type can be accessed by code outside the assembly.\nReturns true if the current Type is a public type or a public nested type such that all the enclosing types are public; otherwise, false.\nMemberType Gets a MemberTypes value indicating that this member is a type or a nested type.\nReturns A MemberTypes value indicating that this member is a type or a nested type.\nMetadataToken Gets a value that identifies a metadata element.\nReturns A value which, in combination with Module, uniquely identifies a metadata element.\nExceptions    Name Description     T:System.InvalidOperationException The current MemberInfo represents an array method, such as Address, on an array type whose element type is a dynamic type that has not been completed. To get a metadata token in this case, pass the MemberInfo object to theSystem.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo) method; or use theSystem.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[]) method to get the token directly, instead of using theSystem.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[]) method to get a MethodInfo first.    Module Gets the module (the DLL) in which the current Type is defined.\nReturns The module in which the current Type is defined.\nName Gets the name of the current member.\nReturns A String containing the name of this member.\nNamespace Gets the namespace of the Type.\nReturns The namespace of the Type, or null if the current instance represents a generic parameter.\nReflectedType Gets the class object that was used to obtain this member.\nReturns The Type object through which this MemberInfo object was obtained.\nTypeHandle Gets the handle for the current Type.\nReturns The handle for the current Type.\nExceptions    Name Description     T:System.NotSupportedException The .NET Compact Framework does not currently support this property.    UnderlyingSystemType Indicates the type provided by the common language runtime that represents this type.\nReturns The underlying system type for the Type.\nMethods AsType() Gets the type.\nReturns Equals(TypeInfo o) Determines if the underlying system type of the current TypeInfo is the same as the underlying system type of the specified TypeInfo.\nParameters    Name Description     o The TypeInfo whose underlying system type is to be compared with the underlying system type of the current TypeInfo.    Returns true if the underlying system type of o is the same as the underlying system type of the current TypeInfo; otherwise, false.\nEquals(Type o) Determines if the underlying system type of the current TypeInfo is the same as the underlying system type of the specified Type.\nParameters    Name Description     o The Type whose underlying system type is to be compared with the underlying system type of the current TypeInfo.    Returns true if the underlying system type of o is the same as the underlying system type of the current TypeInfo; otherwise, false.\nFindMembers(MemberTypes memberType, BindingFlags bindingAttr, MemberFilter filter, object filterCriteria) Returns a filtered array of MemberInfo objects of the specified member type.\nParameters    Name Description     memberType A MemberTypes object indicating the type of member to search for.   bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. -or- Zero, to return null.   filter The delegate that does the comparisons, returning true if the member currently being inspected matches the filterCriteria and false otherwise. You can use the FilterAttribute, FilterName, and FilterNameIgnoreCase delegates supplied by this class. The first uses the fields of FieldAttributes, MethodAttributes, and MethodImplAttributes as search criteria, and the other two delegates use String objects as the search criteria.   filterCriteria The search criteria that determines whether a member is returned in the array of MemberInfo objects. The fields of FieldAttributes, MethodAttributes, and MethodImplAttributes can be used in conjunction with the FilterAttribute delegate supplied by this class.    Returns A filtered array of MemberInfo objects of the specified member type. -or- An empty array of type MemberInfo, if the current Type does not have members of type memberType that match the filter criteria.\nExceptions    Name Description     T:System.ArgumentNullException filter is null.    GetArrayRank() Gets the number of dimensions in an Array.\nReturns An Int32 containing the number of dimensions in the current Type.\nExceptions    Name Description     T:System.NotSupportedException The functionality of this method is unsupported in the base class and must be implemented in a derived class instead.   T:System.ArgumentException The current Type is not an array.    GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers) Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.\nParameters    Name Description     bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. -or- Zero, to return null.   binder A Binder object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection. -or- null, to use the DefaultBinder.   types An array of Type objects representing the number, order, and type of the parameters for the constructor to get. -or- An empty array of the type Type (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters. -or- EmptyTypes.   modifiers An array of ParameterModifier objects representing the attributes associated with the corresponding element in the parameter type array. The default binder does not process this parameter.    Returns A ConstructorInfo object representing the constructor that matches the specified requirements, if found; otherwise, null.\nExceptions    Name Description     T:System.ArgumentNullException types is null. -or- One of the elements in types is null.   T:System.ArgumentException types is multidimensional. -or- modifiers is multidimensional. -or- types and modifiers do not have the same length.    GetConstructor(Type[] types) Searches for a public instance constructor whose parameters match the types in the specified array.\nParameters    Name Description     types An array of Type objects representing the number, order, and type of the parameters for the desired constructor. -or- An empty array of Type objects, to get a constructor that takes no parameters.    Returns A ConstructorInfo object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, null.\nExceptions    Name Description     T:System.ArgumentNullException types is null. -or- One of the elements in types is null.   T:System.ArgumentException types is multidimensional.    GetConstructors() Returns all the public constructors defined for the current Type.\nReturns An array of ConstructorInfo objects representing all the public instance constructors defined for the current Type, but not including the type initializer (static constructor). If no public instance constructors are defined for the current Type, or if the current Type represents a type parameter in the definition of a generic type or generic method, an empty array of type ConstructorInfo is returned.\nGetConstructors(BindingFlags bindingAttr) When overridden in a derived class, searches for the constructors defined for the current Type, using the specified BindingFlags.\nParameters    Name Description     bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. -or- Zero, to return null.    Returns An array of ConstructorInfo objects representing all constructors defined for the current Type that match the specified binding constraints, including the type initializer if it is defined. Returns an empty array of type ConstructorInfo if no constructors are defined for the current Type, if none of the defined constructors match the binding constraints, or if the current Type represents a type parameter in the definition of a generic type or generic method.\nGetCustomAttributes(Type attributeType, bool inherit) When overridden in a derived class, returns an array of custom attributes identified by Type.\nParameters    Name Description     attributeType The type of attribute to search for. Only attributes that are assignable to this type are returned.   inherit Specifies whether to search this member\u0026rsquo;s inheritance chain to find the attributes.    Returns An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.\nExceptions    Name Description     T:System.TypeLoadException A custom attribute type cannot be loaded.   T:System.ArgumentNullException If attributeType is null.   T:System.InvalidOperationException This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.    GetCustomAttributes(bool inherit) When overridden in a derived class, returns an array containing all the custom attributes.\nParameters    Name Description     inherit Specifies whether to search this member\u0026rsquo;s inheritance chain to find the attributes.    Returns An array that contains all the custom attributes, or an array with zero elements if no attributes are defined.\nExceptions    Name Description     T:System.InvalidOperationException This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.   T:System.TypeLoadException A custom attribute type cannot be loaded.    GetDefaultMembers() Searches for the members defined for the current Type whose DefaultMemberAttribute is set.\nReturns An array of MemberInfo objects representing all default members of the current Type. -or- An empty array of type MemberInfo, if the current Type does not have default members.\nGetElementType() When overridden in a derived class, returns the Type of the object encompassed or referred to by the current array, pointer or reference type.\nReturns The Type of the object encompassed or referred to by the current array, pointer, or reference type, or null if the current Type is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.\nGetEvent(string name) Returns the EventInfo object representing the specified public event.\nParameters    Name Description     name The String containing the name of an event which is declared or inherited by the current Type.    Returns The EventInfo object representing the specified public event which is declared or inherited by the current Type, if found; otherwise, null.\nExceptions    Name Description     T:System.ArgumentNullException name is null.    GetEvent(string name, BindingFlags bindingAttr) When overridden in a derived class, returns the EventInfo object representing the specified event, using the specified binding constraints.\nParameters    Name Description     name The String containing the name of an event which is declared or inherited by the current Type.   bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. -or- Zero, to return null.    Returns The EventInfo object representing the specified event which is declared or inherited by the current Type, if found; otherwise, null.\nExceptions    Name Description     T:System.ArgumentNullException name is null.    GetEvents() Returns all the public events that are declared or inherited by the current Type.\nReturns An array of EventInfo objects representing all the public events which are declared or inherited by the current Type. -or- An empty array of type EventInfo, if the current Type does not have public events.\nGetEvents(BindingFlags bindingAttr) When overridden in a derived class, searches for events that are declared or inherited by the current Type, using the specified binding constraints.\nParameters    Name Description     bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. -or- Zero, to return null.    Returns An array of EventInfo objects representing all events which are declared or inherited by the current Type that match the specified binding constraints. -or- An empty array of type EventInfo, if the current Type does not have events, or if none of the events match the binding constraints.\nGetField(string name) Searches for the public field with the specified name.\nParameters    Name Description     name The String containing the name of the data field to get.    Returns A FieldInfo object representing the public field with the specified name, if found; otherwise, null.\nExceptions    Name Description     T:System.ArgumentNullException name is null.   T:System.NotSupportedException This Type object is aSystem.Reflection.Emit.TypeBuilder whoseSystem.Reflection.Emit.TypeBuilder.CreateType method has not yet been called.    GetField(string name, BindingFlags bindingAttr) Searches for the specified field, using the specified binding constraints.\nParameters    Name Description     name The String containing the name of the data field to get.   bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. -or- Zero, to return null.    Returns A FieldInfo object representing the field that matches the specified requirements, if found; otherwise, null.\nExceptions    Name Description     T:System.ArgumentNullException name is null.    GetFields() Returns all the public fields of the current Type.\nReturns An array of FieldInfo objects representing all the public fields defined for the current Type. -or- An empty array of type FieldInfo, if no public fields are defined for the current Type.\nGetFields(BindingFlags bindingAttr) When overridden in a derived class, searches for the fields defined for the current Type, using the specified binding constraints.\nParameters    Name Description     bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. -or- Zero, to return null.    Returns An array of FieldInfo objects representing all fields defined for the current Type that match the specified binding constraints. -or- An empty array of type FieldInfo, if no fields are defined for the current Type, or if none of the defined fields match the binding constraints.\nGetGenericArguments() Returns an array of Type objects that represent the type arguments of a generic type or the type parameters of a generic type definition.\nReturns An array of Type objects that represent the type arguments of a generic type. Returns an empty array if the current type is not a generic type.\nGetGenericParameterConstraints() Returns an array of Type objects that represent the constraints on the current generic type parameter.\nReturns An array of Type objects that represent the constraints on the current generic type parameter.\nExceptions    Name Description     T:System.InvalidOperationException The current Type object is not a generic type parameter. That is, the IsGenericParameter property returns false.    GetGenericTypeDefinition() Returns a Type object that represents a generic type definition from which the current generic type can be constructed.\nReturns A Type object representing a generic type from which the current type can be constructed.\nExceptions    Name Description     T:System.InvalidOperationException The current type is not a generic type. That is, IsGenericType returns false.   T:System.NotSupportedException The invoked method is not supported in the base class. Derived classes must provide an implementation.    GetInterface(string name) Searches for the interface with the specified name.\nParameters    Name Description     name The String containing the name of the interface to get. For generic interfaces, this is the mangled name.    Returns A Type object representing the interface with the specified name, implemented or inherited by the current Type, if found; otherwise, null.\nExceptions    Name Description     T:System.ArgumentNullException name is null.   T:System.Reflection.AmbiguousMatchException The current Type represents a type that implements the same generic interface with different type arguments.    GetInterface(string name, bool ignoreCase) When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.\nParameters    Name Description     name The String containing the name of the interface to get. For generic interfaces, this is the mangled name.   ignoreCase true to ignore the case of that part of name that specifies the simple interface name (the part that specifies the namespace must be correctly cased). -or- false to perform a case-sensitive search for all parts of name.    Returns A Type object representing the interface with the specified name, implemented or inherited by the current Type, if found; otherwise, null.\nExceptions    Name Description     T:System.ArgumentNullException name is null.   T:System.Reflection.AmbiguousMatchException The current Type represents a type that implements the same generic interface with different type arguments.    GetInterfaceMap(Type interfaceType) Returns an interface mapping for the specified interface type.\nParameters    Name Description     interfaceType The Type of the interface of which to retrieve a mapping.    Returns An InterfaceMapping object representing the interface mapping for interfaceType.\nExceptions    Name Description     T:System.ArgumentException The interfaceType parameter does not refer to an interface.   T:System.ArgumentNullException interfaceType is null.   T:System.InvalidOperationException The current Type represents a generic type parameter; that is, IsGenericParameter is true.   T:System.NotSupportedException The invoked method is not supported in the base class. Derived classes must provide an implementation.    GetInterfaces() When overridden in a derived class, gets all the interfaces implemented or inherited by the current Type.\nReturns An array of Type objects representing all the interfaces implemented or inherited by the current Type. -or- An empty array of type Type, if no interfaces are implemented or inherited by the current Type.\nExceptions    Name Description     T:System.Reflection.TargetInvocationException A static initializer is invoked and throws an exception.    GetMember(string name) Searches for the public members with the specified name.\nParameters    Name Description     name The String containing the name of the public members to get.    Returns An array of MemberInfo objects representing the public members with the specified name, if found; otherwise, an empty array.\nExceptions    Name Description     T:System.ArgumentNullException name is null.    GetMember(string name, BindingFlags bindingAttr) Searches for the specified members, using the specified binding constraints.\nParameters    Name Description     name The String containing the name of the members to get.   bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. -or- Zero, to return an empty array.    Returns An array of MemberInfo objects representing the public members with the specified name, if found; otherwise, an empty array.\nExceptions    Name Description     T:System.ArgumentNullException name is null.    GetMember(string name, MemberTypes type, BindingFlags bindingAttr) Searches for the specified members of the specified member type, using the specified binding constraints.\nParameters    Name Description     name The String containing the name of the members to get.   type The MemberTypes value to search for.   bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. -or- Zero, to return an empty array.    Returns An array of MemberInfo objects representing the public members with the specified name, if found; otherwise, an empty array.\nExceptions    Name Description     T:System.ArgumentNullException name is null.   T:System.NotSupportedException A derived class must provide an implementation.    GetMembers() Returns all the public members of the current Type.\nReturns An array of MemberInfo objects representing all the public members of the current Type. -or- An empty array of type MemberInfo, if the current Type does not have public members.\nGetMembers(BindingFlags bindingAttr) When overridden in a derived class, searches for the members defined for the current Type, using the specified binding constraints.\nParameters    Name Description     bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. -or- Zero, to return null.    Returns An array of MemberInfo objects representing all members defined for the current Type that match the specified binding constraints. -or- An empty array of type MemberInfo, if no members are defined for the current Type, or if none of the defined members match the binding constraints.\nGetMethod(string name) Searches for the public method with the specified name.\nParameters    Name Description     name The String containing the name of the public method to get.    Returns A MethodInfo object representing the public method with the specified name, if found; otherwise, null.\nExceptions    Name Description     T:System.Reflection.AmbiguousMatchException More than one method is found with the specified name.   T:System.ArgumentNullException name is null.    GetMethod(string name, BindingFlags bindingAttr) Searches for the specified method, using the specified binding constraints.\nParameters    Name Description     name The String containing the name of the method to get.   bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. -or- Zero, to return null.    Returns A MethodInfo object representing the method that matches the specified requirements, if found; otherwise, null.\nExceptions    Name Description     T:System.Reflection.AmbiguousMatchException More than one method is found with the specified name and matching the specified binding constraints.   T:System.ArgumentNullException name is null.    GetMethod(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.\nParameters    Name Description     name The String containing the name of the method to get.   bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. -or- Zero, to return null.   binder A Binder object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection. -or- null, to use the DefaultBinder.   callConvention The CallingConventions object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.   types An array of Type objects representing the number, order, and type of the parameters for the method to get. -or- An empty array of Type objects (as provided by the EmptyTypes field) to get a method that takes no parameters.   modifiers An array of ParameterModifier objects representing the attributes associated with the corresponding element in the types array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.    Returns A MethodInfo object representing the method that matches the specified requirements, if found; otherwise, null.\nExceptions    Name Description     T:System.Reflection.AmbiguousMatchException More than one method is found with the specified name and matching the specified binding constraints.   T:System.ArgumentNullException name is null. -or- types is null. -or- One of the elements in types is null.   T:System.ArgumentException types is multidimensional. -or- modifiers is multidimensional.    GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers) Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.\nParameters    Name Description     name The String containing the name of the method to get.   bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. -or- Zero, to return null.   binder A Binder object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection. -or- null, to use the DefaultBinder.   types An array of Type objects representing the number, order, and type of the parameters for the method to get. -or- An empty array of Type objects (as provided by the EmptyTypes field) to get a method that takes no parameters.   modifiers An array of ParameterModifier objects representing the attributes associated with the corresponding element in the types array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.    Returns A MethodInfo object representing the method that matches the specified requirements, if found; otherwise, null.\nExceptions    Name Description     T:System.Reflection.AmbiguousMatchException More than one method is found with the specified name and matching the specified binding constraints.   T:System.ArgumentNullException name is null. -or- types is null. -or- One of the elements in types is null.   T:System.ArgumentException types is multidimensional. -or- modifiers is multidimensional.    GetMethod(string name, Type[] types) Searches for the specified public method whose parameters match the specified argument types.\nParameters    Name Description     name The String containing the name of the public method to get.   types An array of Type objects representing the number, order, and type of the parameters for the method to get. -or- An empty array of Type objects to get a method that takes no parameters.    Returns A MethodInfo object representing the public method whose parameters match the specified argument types, if found; otherwise, null.\nExceptions    Name Description     T:System.Reflection.AmbiguousMatchException More than one method is found with the specified name and specified parameters.   T:System.ArgumentNullException name is null. -or- types is null. -or- One of the elements in types is null.   T:System.ArgumentException types is multidimensional.    GetMethod(string name, Type[] types, BindingFlags bindingAttr) Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.\nParameters    Name Description     name The String containing the name of the method to get.   types An array of Type objects representing the number, order, and type of the parameters for the method to get. -or- An empty array of Type objects (as provided by the EmptyTypes field) to get a method that takes no parameters.   bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. -or- Zero, to return null.    Returns A MethodInfo object representing the method that matches the specified requirements, if found; otherwise, null.\nExceptions    Name Description     T:System.Reflection.AmbiguousMatchException More than one method is found with the specified name and matching the specified binding constraints.   T:System.ArgumentNullException name is null. -or- types is null. -or- One of the elements in types is null.   T:System.ArgumentException types is multidimensional.    GetMethod(string name, Type[] types, ParameterModifier[] modifiers) Searches for the specified public method whose parameters match the specified argument types and modifiers.\nParameters    Name Description     name The String containing the name of the public method to get.   types An array of Type objects representing the number, order, and type of the parameters for the method to get. -or- An empty array of Type objects (as provided by the EmptyTypes field) to get a method that takes no parameters.   modifiers An array of ParameterModifier objects representing the attributes associated with the corresponding element in the types array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.    Returns A MethodInfo object representing the public method that matches the specified requirements, if found; otherwise, null.\nExceptions    Name Description     T:System.Reflection.AmbiguousMatchException More than one method is found with the specified name and specified parameters.   T:System.ArgumentNullException name is null. -or- types is null. -or- One of the elements in types is null.   T:System.ArgumentException types is multidimensional. -or- modifiers is multidimensional.    GetMethods() Returns all the public methods of the current Type.\nReturns An array of MethodInfo objects representing all the public methods defined for the current Type. -or- An empty array of type MethodInfo, if no public methods are defined for the current Type.\nGetMethods(BindingFlags bindingAttr) When overridden in a derived class, searches for the methods defined for the current Type, using the specified binding constraints.\nParameters    Name Description     bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. -or- Zero, to return null.    Returns An array of MethodInfo objects representing all methods defined for the current Type that match the specified binding constraints. -or- An empty array of type MethodInfo, if no methods are defined for the current Type, or if none of the defined methods match the binding constraints.\nGetNestedType(string name) Searches for the public nested type with the specified name.\nParameters    Name Description     name The string containing the name of the nested type to get.    Returns A Type object representing the public nested type with the specified name, if found; otherwise, null.\nExceptions    Name Description     T:System.ArgumentNullException name is null.    GetNestedType(string name, BindingFlags bindingAttr) When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.\nParameters    Name Description     name The string containing the name of the nested type to get.   bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. -or- Zero, to return null.    Returns A Type object representing the nested type that matches the specified requirements, if found; otherwise, null.\nExceptions    Name Description     T:System.ArgumentNullException name is null.    GetNestedTypes() Returns the public types nested in the current Type.\nReturns An array of Type objects representing the public types nested in the current Type (the search is not recursive), or an empty array of type Type if no public types are nested in the current Type.\nGetNestedTypes(BindingFlags bindingAttr) When overridden in a derived class, searches for the types nested in the current Type, using the specified binding constraints.\nParameters    Name Description     bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. -or- Zero, to return null.    Returns An array of Type objects representing all the types nested in the current Type that match the specified binding constraints (the search is not recursive), or an empty array of type Type, if no nested types are found that match the binding constraints.\nGetProperties() Returns all the public properties of the current Type.\nReturns An array of PropertyInfo objects representing all public properties of the current Type. -or- An empty array of type PropertyInfo, if the current Type does not have public properties.\nGetProperties(BindingFlags bindingAttr) When overridden in a derived class, searches for the properties of the current Type, using the specified binding constraints.\nParameters    Name Description     bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. -or- Zero, to return null.    Returns An array of PropertyInfo objects representing all properties of the current Type that match the specified binding constraints. -or- An empty array of type PropertyInfo, if the current Type does not have properties, or if none of the properties match the binding constraints.\nGetProperty(string name) Searches for the public property with the specified name.\nParameters    Name Description     name The String containing the name of the public property to get.    Returns A PropertyInfo object representing the public property with the specified name, if found; otherwise, null.\nExceptions    Name Description     T:System.Reflection.AmbiguousMatchException More than one property is found with the specified name. See Remarks.   T:System.ArgumentNullException name is null.    GetProperty(string name, BindingFlags bindingAttr) Searches for the specified property, using the specified binding constraints.\nParameters    Name Description     name The String containing the name of the property to get.   bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. -or- Zero, to return null.    Returns A PropertyInfo object representing the property that matches the specified requirements, if found; otherwise, null.\nExceptions    Name Description     T:System.Reflection.AmbiguousMatchException More than one property is found with the specified name and matching the specified binding constraints. See Remarks.   T:System.ArgumentNullException name is null.    GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.\nParameters    Name Description     name The String containing the name of the property to get.   bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. -or- Zero, to return null.   binder A Binder object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection. -or- null, to use the DefaultBinder.   returnType The return type of the property.   types An array of Type objects representing the number, order, and type of the parameters for the indexed property to get. -or- An empty array of the type Type (that is, Type[] types = new Type[0]) to get a property that is not indexed.   modifiers An array of ParameterModifier objects representing the attributes associated with the corresponding element in the types array. The default binder does not process this parameter.    Returns A PropertyInfo object representing the property that matches the specified requirements, if found; otherwise, null.\nExceptions    Name Description     T:System.Reflection.AmbiguousMatchException More than one property is found with the specified name and matching the specified binding constraints.   T:System.ArgumentNullException name is null. -or- types is null.   T:System.ArgumentException types is multidimensional. -or- modifiers is multidimensional. -or- types and modifiers do not have the same length.   T:System.NullReferenceException An element of types is null.    GetProperty(string name, Type returnType) Searches for the public property with the specified name and return type.\nParameters    Name Description     name The String containing the name of the public property to get.   returnType The return type of the property.    Returns A PropertyInfo object representing the public property with the specified name, if found; otherwise, null.\nExceptions    Name Description     T:System.Reflection.AmbiguousMatchException More than one property is found with the specified name.   T:System.ArgumentNullException name is null, or returnType is null.    GetProperty(string name, Type returnType, Type[] types) Searches for the specified public property whose parameters match the specified argument types.\nParameters    Name Description     name The String containing the name of the public property to get.   returnType The return type of the property.   types An array of Type objects representing the number, order, and type of the parameters for the indexed property to get. -or- An empty array of the type Type (that is, Type[] types = new Type[0]) to get a property that is not indexed.    Returns A PropertyInfo object representing the public property whose parameters match the specified argument types, if found; otherwise, null.\nExceptions    Name Description     T:System.Reflection.AmbiguousMatchException More than one property is found with the specified name and matching the specified argument types.   T:System.ArgumentNullException name is null. -or- types is null.   T:System.ArgumentException types is multidimensional.   T:System.NullReferenceException An element of types is null.    GetProperty(string name, Type returnType, Type[] types, ParameterModifier[] modifiers) Searches for the specified public property whose parameters match the specified argument types and modifiers.\nParameters    Name Description     name The String containing the name of the public property to get.   returnType The return type of the property.   types An array of Type objects representing the number, order, and type of the parameters for the indexed property to get. -or- An empty array of the type Type (that is, Type[] types = new Type[0]) to get a property that is not indexed.   modifiers An array of ParameterModifier objects representing the attributes associated with the corresponding element in the types array. The default binder does not process this parameter.    Returns A PropertyInfo object representing the public property that matches the specified requirements, if found; otherwise, null.\nExceptions    Name Description     T:System.Reflection.AmbiguousMatchException More than one property is found with the specified name and matching the specified argument types and modifiers.   T:System.ArgumentNullException name is null. -or- types is null.   T:System.ArgumentException types is multidimensional. -or- modifiers is multidimensional. -or- types and modifiers do not have the same length.   T:System.NullReferenceException An element of types is null.    InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args) Invokes the specified member, using the specified binding constraints and matching the specified argument list.\nParameters    Name Description     name The String containing the name of the constructor, method, property, or field member to invoke. -or- An empty string (\u0026ldquo;\u0026rdquo;) to invoke the default member. -or- For IDispatch members, a string representing the DispID, for example \u0026ldquo;[DispID=3]\u0026ldquo;.   invokeAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public   binder A Binder object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection. -or- null, to use the DefaultBinder. Note that explicitly defining a Binder object may be requird for successfully invoking method overloads with variable arguments.   target The Object on which to invoke the specified member.   args An array containing the arguments to pass to the member to invoke.    Returns An Object representing the return value of the invoked member.\nExceptions    Name Description     T:System.ArgumentNullException invokeAttr contains CreateInstance and name is null.   T:System.ArgumentException args is multidimensional. -or- invokeAttr is not a valid BindingFlags attribute. -or- invokeAttr does not contain one of the following binding flags: InvokeMethod, CreateInstance, GetField, SetField, GetProperty, or SetProperty. -or- invokeAttr contains CreateInstance combined with InvokeMethod, GetField, SetField, GetProperty, or SetProperty. -or- invokeAttr contains both GetField and SetField. -or- invokeAttr contains both GetProperty and SetProperty. -or- invokeAttr contains InvokeMethod combined with SetField or SetProperty. -or- invokeAttr contains SetField and args has more than one element. -or- This method is called on a COM object and one of the following binding flags was not passed in: BindingFlags.InvokeMethod, BindingFlags.GetProperty, BindingFlags.SetProperty, BindingFlags.PutDispProperty, or BindingFlags.PutRefDispProperty. -or- One of the named parameter arrays contains a string that is null.   T:System.MethodAccessException The specified member is a class initializer.   T:System.MissingFieldException The field or property cannot be found.   T:System.MissingMethodException The method cannot be found. -or- The current Type object represents a type that contains open type parameters, that is, ContainsGenericParameters returns true.   T:System.Reflection.TargetException The specified member cannot be invoked on target.   T:System.Reflection.AmbiguousMatchException More than one method matches the binding criteria.   T:System.NotSupportedException The .NET Compact Framework does not currently support this method.   T:System.InvalidOperationException The method represented by name has one or more unspecified generic type parameters. That is, the method\u0026rsquo;sContainsGenericParameters property returns true.    InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.\nParameters    Name Description     name The String containing the name of the constructor, method, property, or field member to invoke. -or- An empty string (\u0026ldquo;\u0026rdquo;) to invoke the default member. -or- For IDispatch members, a string representing the DispID, for example \u0026ldquo;[DispID=3]\u0026ldquo;.   invokeAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public   binder A Binder object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection. -or- null, to use the DefaultBinder. Note that explicitly defining a Binder object may be requird for successfully invoking method overloads with variable arguments.   target The Object on which to invoke the specified member.   args An array containing the arguments to pass to the member to invoke.   modifiers An array of ParameterModifier objects representing the attributes associated with the corresponding element in the args array. A parameter\u0026rsquo;s associated attributes are stored in the member\u0026rsquo;s signature. The default binder processes this parameter only when calling a COM component.   culture The CultureInfo object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double. -or- null to use the current thread\u0026rsquo;s CultureInfo.   namedParameters An array containing the names of the parameters to which the values in the args array are passed.    Returns An Object representing the return value of the invoked member.\nExceptions    Name Description     T:System.ArgumentNullException invokeAttr contains CreateInstance and name is null.   T:System.ArgumentException args is multidimensional. -or- modifiers is multidimensional. -or- args and modifiers do not have the same length. -or- invokeAttr is not a valid BindingFlags attribute. -or- invokeAttr does not contain one of the following binding flags: InvokeMethod, CreateInstance, GetField, SetField, GetProperty, or SetProperty. -or- invokeAttr contains CreateInstance combined with InvokeMethod, GetField, SetField, GetProperty, or SetProperty. -or- invokeAttr contains both GetField and SetField. -or- invokeAttr contains both GetProperty and SetProperty. -or- invokeAttr contains InvokeMethod combined with SetField or SetProperty. -or- invokeAttr contains SetField and args has more than one element. -or- The named parameter array is larger than the argument array. -or- This method is called on a COM object and one of the following binding flags was not passed in: BindingFlags.InvokeMethod, BindingFlags.GetProperty, BindingFlags.SetProperty, BindingFlags.PutDispProperty, or BindingFlags.PutRefDispProperty. -or- One of the named parameter arrays contains a string that is null.   T:System.MethodAccessException The specified member is a class initializer.   T:System.MissingFieldException The field or property cannot be found.   T:System.MissingMethodException The method cannot be found. -or- The current Type object represents a type that contains open type parameters, that is, ContainsGenericParameters returns true.   T:System.Reflection.TargetException The specified member cannot be invoked on target.   T:System.Reflection.AmbiguousMatchException More than one method matches the binding criteria.   T:System.InvalidOperationException The method represented by name has one or more unspecified generic type parameters. That is, the method\u0026rsquo;sContainsGenericParameters property returns true.    IsAssignableFrom(TypeInfo typeInfo) The is assignable from.\nParameters    Name Description     typeInfo The type info.    Returns The is assignable from.\nIsAssignableFrom(Type c) Determines whether an instance of the current Type can be assigned from an instance of the specified Type.\nParameters    Name Description     c The Type to compare with the current Type.    Returns true if c and the current Type represent the same type, or if the current Type is in the inheritance hierarchy of c, or if the current Type is an interface that c implements, or if c is a generic type parameter and the current Type represents one of the constraints of c. false if none of these conditions are true, or if c is null.\nIsDefined(Type attributeType, bool inherit) When overridden in a derived class, indicates whether one or more instance of attributeType is applied to this member.\nParameters    Name Description     attributeType The Type object to which the custom attributes are applied.   inherit Specifies whether to search this member\u0026rsquo;s inheritance chain to find the attributes.    Returns true if one or more instance of attributeType is applied to this member; otherwise false.\nIsInstanceOfType(object o) Determines whether the specified object is an instance of the current Type.\nParameters    Name Description     o The object to compare with the current Type.    Returns true if the current Type is in the inheritance hierarchy of the object represented by o, or if the current Type is an interface that o supports. false if neither of these conditions is the case, or if o is null, or if the current Type is an open generic type (that is, ContainsGenericParameters returns true).\nIsSubclassOf(Type c) Determines whether the class represented by the current Type derives from the class represented by the specified Type.\nParameters    Name Description     c The Type to compare with the current Type.    Returns true if the Type represented by the c parameter and the current Type represent classes, and the class represented by the current Type derives from the class represented by c; otherwise, false. This method also returns false if c and the current Type represent the same class.\nExceptions    Name Description     T:System.ArgumentNullException The c parameter is null.    MakeArrayType() Returns a Type object representing a one-dimensional array of the current type, with a lower bound of zero.\nReturns A Type object representing a one-dimensional array of the current type, with a lower bound of zero.\nMakeArrayType(int rank) Returns a Type object representing an array of the current type, with the specified number of dimensions.\nParameters    Name Description     rank The number of dimensions for the array.    Returns A Type object representing an array of the current type, with the specified number of dimensions.\nExceptions    Name Description     T:System.IndexOutOfRangeException rank is invalid. For example, 0 or negative.   T:System.NotSupportedException The invoked method is not supported in the base class.    MakeByRefType() Returns a Type object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).\nReturns A Type object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).\nExceptions    Name Description     T:System.NotSupportedException The invoked method is not supported in the base class.    MakeGenericType(Type[] typeArguments) Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a Type object representing the resulting constructed type.\nParameters    Name Description     typeArguments An array of types to be substituted for the type parameters of the current generic type.    Returns A Type representing the constructed type formed by substituting the elements of typeArguments for the type parameters of the current generic type.\nExceptions    Name Description     T:System.InvalidOperationException The current type does not represent a generic type definition. That is, IsGenericTypeDefinition returns false.   T:System.ArgumentNullException typeArguments is null. -or- Any element of typeArguments is null.   T:System.ArgumentException The number of elements in typeArguments is not the same as the number of type parameters in the current generic type definition. -or- Any element of typeArguments does not satisfy the constraints specified for the corresponding type parameter of the current generic type.   T:System.NotSupportedException The invoked method is not supported in the base class. Derived classes must provide an implementation.    MakePointerType() Returns a Type object that represents a pointer to the current type.\nReturns A Type object that represents a pointer to the current type.\nExceptions    Name Description     T:System.NotSupportedException The invoked method is not supported in the base class.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/reflection/typeinfoextensions/",
	"title": "TypeInfoExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Reflection   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries    public static class TypeInfoExtensions  The type info extensions.\nFields Methods GetConstructor(TypeInfo typeInfo, Type[] types, BindingFlags bindingFlags) Gets the constructor with the specified types.\nParameters    Name Description     typeInfo The.   types The types of the constructor.   bindingFlags The binding flags.    Returns An array of.\nExceptions    Name Description     ArgumentNullException The typeInfo isnull.    GetConstructors(TypeInfo typeInfo, BindingFlags bindingFlags) Gets the constructors.\nParameters    Name Description     typeInfo The.   bindingFlags The binding flags.    Returns An array of.\nExceptions    Name Description     ArgumentNullException The typeInfo isnull.    GetEvent(TypeInfo typeInfo, string name, BindingFlags bindingFlags) Gets the event with the specified name.\nParameters    Name Description     typeInfo The.   name The name of the member to retrieve.   bindingFlags The binding flags.    Returns The ornull if the member is not found.\nExceptions    Name Description     ArgumentNullException The typeInfo isnull.   ArgumentException The name isnull or whitespace.    GetEvents(TypeInfo typeInfo, BindingFlags bindingFlags) Gets the events.\nParameters    Name Description     typeInfo The.   bindingFlags The binding flags.    Returns An array of.\nExceptions    Name Description     ArgumentNullException The typeInfo isnull.    GetField(TypeInfo typeInfo, string name, BindingFlags bindingFlags) Gets the field with the specified name.\nParameters    Name Description     typeInfo The.   name The name of the member to retrieve.   bindingFlags The binding flags.    Returns The ornull if the member is not found.\nExceptions    Name Description     ArgumentNullException The typeInfo isnull.   ArgumentException The name isnull or whitespace.    GetFields(TypeInfo typeInfo, BindingFlags bindingFlags) Gets the fields.\nParameters    Name Description     typeInfo The.   bindingFlags The binding flags.    Returns An array of.\nExceptions    Name Description     ArgumentNullException The typeInfo isnull.    GetMember(TypeInfo typeInfo, string name, BindingFlags bindingFlags) Gets the member with the specified name.\nParameters    Name Description     typeInfo The.   name The name of the member to retrieve.   bindingFlags The binding flags.    Returns The ornull if the member is not found.\nExceptions    Name Description     ArgumentNullException The typeInfo isnull.   ArgumentException The name isnull or whitespace.    GetMembers(TypeInfo typeInfo, BindingFlags bindingFlags) Gets the members.\nParameters    Name Description     typeInfo The.   bindingFlags The binding flags.    Returns An array of.\nExceptions    Name Description     ArgumentNullException The typeInfo isnull.    GetMethod(TypeInfo typeInfo, string name, BindingFlags bindingFlags) Gets the method with the specified name.\nParameters    Name Description     typeInfo The.   name The name of the member to retrieve.   bindingFlags The binding flags.    Returns The ornull if the member is not found.\nExceptions    Name Description     ArgumentNullException The typeInfo isnull.   ArgumentException The name isnull or whitespace.    GetMethod(TypeInfo typeInfo, string name, Type[] types, BindingFlags bindingFlags) Gets the method with the specified name and types.\nParameters    Name Description     typeInfo The.   name The name of the member to retrieve.   types The types of the method.   bindingFlags The binding flags.    Returns The ornull if the member is not found.\nExceptions    Name Description     ArgumentNullException The typeInfo isnull.   ArgumentException The name isnull or whitespace.    GetMethods(TypeInfo typeInfo, BindingFlags bindingFlags) Gets the methods.\nParameters    Name Description     typeInfo The.   bindingFlags The binding flags.    Returns An array of.\nExceptions    Name Description     ArgumentNullException The typeInfo isnull.    GetProperties(TypeInfo typeInfo, BindingFlags bindingFlags) Gets the properties.\nParameters    Name Description     typeInfo The.   bindingFlags The binding flags.    Returns An array of.\nExceptions    Name Description     ArgumentNullException The typeInfo isnull.    GetProperty(TypeInfo typeInfo, string name, BindingFlags bindingFlags) Gets the property with the specified name.\nParameters    Name Description     typeInfo The.   name The name of the member to retrieve.   bindingFlags The binding flags.    Returns The ornull if the member is not found.\nExceptions    Name Description     ArgumentNullException The typeInfo isnull.   ArgumentException The name isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/typeinstantiatedeventargs/",
	"title": "TypeInstantiatedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class TypeInstantiatedEventArgs : EventArgs  Base types EventArgs\nEventArgs for the TypeInstantiated event.\nConstructors TypeInstantiatedEventArgs(Type serviceType, Type serviceImplementationType, object tag, RegistrationType registrationType) Initializes a new instance of the TypeInstantiatedEventArgs class.\nParameters    Name Description     serviceType Type of the service.   serviceImplementationType Type of the service implementation.   tag The tag.   registrationType Type of the registration.    Exceptions    Name Description     ArgumentNullException The serviceType isnull.    Properties RegistrationType Gets the type of the registration.\nServiceImplementationType Gets the type of the actual implementation.\nServiceType Gets the type of the service.\nTag Gets the tag.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/typenotregisteredexception/",
	"title": "TypeNotRegisteredException",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class TypeNotRegisteredException : Exception  Base types Exception\nException class in case an requested type from IServiceLocator is not registered.\nConstructors TypeNotRegisteredException(Type requestedType, string message) Initializes a new instance of the TypeNotRegisteredException class.\nParameters    Name Description     requestedType The requested type.   message The message.    Properties RequestedType Gets the requested type.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/typeregisteredeventargs/",
	"title": "TypeRegisteredEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class TypeRegisteredEventArgs : EventArgs  Base types EventArgs\nEventArgs for the TypeRegistered event.\nConstructors TypeRegisteredEventArgs(Type serviceType, Type serviceImplementationType, object tag, RegistrationType registrationType) Initializes a new instance of the TypeRegisteredEventArgs class.\nParameters    Name Description     serviceType Type of the service.   serviceImplementationType Type of the service implementation.   tag The tag.   registrationType Type of the registration.    Exceptions    Name Description     ArgumentNullException The serviceType isnull.    Properties RegistrationType Gets the type of the registration.\nServiceImplementationType Gets the type of the actual implementation.\nServiceType Gets the type of the service.\nTag Gets the tag.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/typerequestinfo/",
	"title": "TypeRequestInfo",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class TypeRequestInfo  Request information about a type.\nFields Constructors TypeRequestInfo(Type type, object tag) Initializes a new instance of the TypeRequestInfo class.\nParameters    Name Description     type The type.   tag The tag.    Exceptions    Name Description     ArgumentNullException The type isnull.    Properties Tag Gets the tag.\nType Gets the type.\nMethods Equals(object obj) Determines whether the specified is equal to this instance.\nParameters    Name Description     obj The Object to compare with the current Object.    Returns true if the specified is equal to this instance; otherwise,false.\nGetHashCode() Returns a hash code for this instance.\nReturns A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.\nToString() Converts the type to a string.\nReturns The string.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/ioc/typerequestpath/",
	"title": "TypeRequestPath",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.IoC   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class TypeRequestPath : ITypeRequestPath  Base types\nITypeRequestPath\nA list of types in which the types will be constructed when being resolved from the ServiceLocator.\nFields Constructors Properties AllTypes Gets all types in the right order.\nFirstType Gets the first type in the type path.\nLastType Gets the last type in the type path.\nName Gets the name.\nTypeCount Gets the number of types in the type path.\nMethods Branch(TypeRequestPath parent, TypeRequestInfo typeRequestInfo) Creates branch of type request path.\nParameters    Name Description     parent Parent path   typeRequestInfo Appended path item    Returns Root(string name) Creates root of type request path.\nParameters    Name Description     name Path\u0026rsquo;s name    Returns ToString() Returns a that represents this instance.\nReturns A that represents this instance.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/uicompletedeventargs/",
	"title": "UICompletedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class UICompletedEventArgs : EventArgs  Base types EventArgs\nThis is the EventArgs return value for the IUIVisualizer.Show completed event.\nConstructors UICompletedEventArgs(object dataContext, Nullable result) Initializes a new instance of the UICompletedEventArgs class.\nParameters    Name Description     dataContext The data context.   result The result.    Properties DataContext Gets the data context.\nResult Gets the result of the window.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/uielementextensions/",
	"title": "UIElementExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows   Available on .NET Framework 4.5, .NET Framework 4.6    public static class UIElementExtensions  Extensions for.\nMethods FocusFirstControl(ContentElement element, bool focusParentsFirst) Focuses the first control on the ContentElement.\nParameters    Name Description     element Reference to the current.   focusParentsFirst if set totrue, the parents are focused first.    FocusFirstControl(UIElement element, bool focusParentsFirst) Focuses the first control on the UI Element.\nParameters    Name Description     element Reference to the current.   focusParentsFirst if set totrue, the parents are focused first.    GetFocusedControl(UIElement element) Gets the focused control.\nParameters    Name Description     element The element to check and all childs.    Returns The focused ornull if none if the children has the focus.\nExceptions    Name Description     ArgumentNullException The element isnull.    MoveFocus(ContentElement element, FocusNavigationDirection direction, int hops) Moves the focus in a specific direction.\nParameters    Name Description     element The element.   direction The direction.   hops The hops.    MoveFocus(IInputElement element, FocusNavigationDirection direction, int hops) Moves the focus in a specific direction.\nParameters    Name Description     element The element.   direction The direction.   hops The hops.    MoveFocus(UIElement element, FocusNavigationDirection direction, int hops) Moves the focus in a specific direction.\nParameters    Name Description     element The element.   direction The direction.   hops The hops.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/uivisualizerservice/",
	"title": "UIVisualizerService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - iOS    public class UIVisualizerService : IUIVisualizerService, ViewModelServiceBase  Base types ViewModelServiceBase\nBase types\nIUIVisualizerService\nService to show modal or non-modal popup windows. All windows will have to be registered manually or are be resolved via the IViewLocator.\nFields Constructors UIVisualizerService(IViewLocator viewLocator) Initializes a new instance of the UIVisualizerService class.\nParameters    Name Description     viewLocator The view locator.    Exceptions    Name Description     ArgumentNullException The viewLocator isnull.    Methods IsRegistered(string name) Determines whether the specified name is registered.\nParameters    Name Description     name The name.    Returns true if the specified name is registered; otherwise,false.\nExceptions    Name Description     ArgumentException The name isnull or whitespace.    Register(string name, Type windowType, bool throwExceptionIfExists) Registers the specified view model and the window type. This way, Catel knowns what window to show when a specific view model window is requested.\nParameters    Name Description     name Name of the registered window.   windowType Type of the window.   throwExceptionIfExists if set totrue, this method will throw an exception when already registered.    Exceptions    Name Description     System.InvalidOperationException    ArgumentException The name isnull or whitespace.    ShowAsync(IViewModel viewModel, EventHandler completedProc) Shows a window that is registered with the specified view model in a non-modal state.\nParameters    Name Description     viewModel The view model.   completedProc The callback procedure that will be invoked as soon as the window is closed. This value can benull.    Returns true if the popup window is successfully opened; otherwisefalse.\nExceptions    Name Description     ArgumentNullException The viewModel isnull.   T:Catel.MVVM.ViewModelNotRegisteredException The viewModel is not registered by the method first.    ShowAsync(string name, object data, EventHandler completedProc) Shows a window that is registered with the specified view model in a non-modal state.\nParameters    Name Description     name The name that the window is registered with.   data The data to set as data context. Ifnull, the data context will be untouched.   completedProc The callback procedure that will be invoked as soon as the window is closed. This value can benull.    Returns true if the popup window is successfully opened; otherwisefalse.\nExceptions    Name Description     ArgumentException The name isnull or whitespace.   T:Catel.Services.WindowNotRegisteredException The name is not registered by the method first.    ShowDialogAsync(IViewModel viewModel, EventHandler completedProc) Shows a window that is registered with the specified view model in a modal state.\nParameters    Name Description     viewModel The view model.   completedProc The callback procedure that will be invoked as soon as the window is closed. This value can benull.    Returns Nullable boolean representing the dialog result.\nExceptions    Name Description     ArgumentNullException The viewModel isnull.   T:Catel.Services.WindowNotRegisteredException The viewModel is not registered by the method first.    ShowDialogAsync(string name, object data, EventHandler completedProc) Shows a window that is registered with the specified view model in a modal state.\nParameters    Name Description     name The name that the window is registered with.   data The data to set as data context. Ifnull, the data context will be untouched.   completedProc The callback procedure that will be invoked as soon as the window is closed. This value can benull.    Returns Nullable boolean representing the dialog result.\nExceptions    Name Description     ArgumentException The name isnull or whitespace.   T:Catel.Services.WindowNotRegisteredException The name is not registered by the method first.    Unregister(string name) This unregisters the specified view model.\nParameters    Name Description     name Name of the registered window.    Returns true if the view model is unregistered; otherwisefalse.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/uniqueidentifierhelper/",
	"title": "UniqueIdentifierHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class UniqueIdentifierHelper  Helper class that allows to generic unique identifiers for objects. This class internally keeps a counter per type and will increase the counter every time a new unique identifier is requested.\nFields Methods GetUniqueIdentifier(Type type) Gets a unique identifier for the specified type.\nParameters    Name Description     type The type to retrieve the unique identifier for.    Returns A new unique identifier for the type.\nExceptions    Name Description     ArgumentNullException The type isnull.    GetUniqueIdentifier() Gets the unique identifier for the specified type.\nType Parameters T The type to retrieve the unique identifier for.\nReturns A new unique identifier for the type.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/providers/unloadbehavior/",
	"title": "UnloadBehavior",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Providers   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum UnloadBehavior : Enum  Base types Enum\nAvailable unload behaviors.\nFields CancelAndCloseViewModel 2\nCancels and closes the view model.\nCloseViewModel 0\nCloses the view model.\nSaveAndCloseViewModel 1\nSaves and closes the view model.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/unsetbindingvalue/",
	"title": "UnsetBindingValue",
	"tags": [],
	"description": "",
	"content": "   Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on Portable Class Libraries, Xamarin - Android    public class UnsetBindingValue  Unset binding value class.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/apicop/rules/unusedfeatureapicoprule/",
	"title": "UnusedFeatureApiCopRule",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.ApiCop.Rules   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class UnusedFeatureApiCopRule : ApiCopRule  Base types ApiCopRule\nRule to find out unused feature counts.\nFields Constructors UnusedFeatureApiCopRule(string name, string description, ApiCopRuleLevel level, string url) Initializes a new instance of the UnusedFeatureApiCopRule class.\nParameters    Name Description     name The name.   description The description.   level The level.   url The URL.    Methods GetResultAsText(string tag) Gets the result as text.\nParameters    Name Description     tag The tag.    Returns The result as text.\nIncreaseCount(bool isUsed, string tag) Increases the count and determines whether the feature is being used at the moment.\nParameters    Name Description     isUsed if set totrue, the feature is being used.   tag The tag.    IsValid(IApiCop apiCop, string tag) Determines whether the specified ApiCop rule is valid.\nParameters    Name Description     apiCop The ApiCop.   tag The tag.    Returns true if the specified ApiCop is valid; otherwise,false.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/markup/updatablemarkupextension/",
	"title": "UpdatableMarkupExtension",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Markup   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public abstract class UpdatableMarkupExtension : MarkupExtension  Base types MarkupExtension\nMarkup extension that allows an update of the binding values.\nRemarks This class is found at http://www.thomaslevesque.com/2009/07/28/wpf-a-markup-extension-that-can-update-its-target/.\nFields Properties Methods ProvideValue(IServiceProvider serviceProvider) When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.\nParameters    Name Description     serviceProvider A service provider helper that can provide services for the markup extension.    Returns The object value to set on the property where the extension is applied.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/updatebindingbehaviorbase/",
	"title": "UpdateBindingBehaviorBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class UpdateBindingBehaviorBase\u0026lt;T\u0026gt; : BehaviorBase\u0026lt;T\u0026gt; where T : FrameworkElement  Base types BehaviorBase\nBehavior base for all behaviors that should update a binding.\nConstructors UpdateBindingBehaviorBase(string dependencyPropertyName) Initializes a new instance of the UpdateBindingOnTextChanged class.\nParameters    Name Description     dependencyPropertyName Name of the dependency property.    Exceptions    Name Description     ArgumentException The dependencyPropertyName isnull or whitespace.    Properties Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/updatebindingonpasswordchanged/",
	"title": "UpdateBindingOnPasswordChanged",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6    public class UpdateBindingOnPasswordChanged : BehaviorBase\u0026lt;PasswordBox\u0026gt;  Base types BehaviorBase\nThis behavior automatically updates the binding of a when thePasswordChanged event occurs.\nFields PasswordProperty The Password Property\nProperties Password Gets or sets the password.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/updatebindingontextchanged/",
	"title": "UpdateBindingOnTextChanged",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class UpdateBindingOnTextChanged : UpdateBindingBehaviorBase\u0026lt;TextBox\u0026gt;  Base types UpdateBindingBehaviorBase\nThis behavior automatically updates the binding of a when theTextChanged event occurs.\nFields Constructors UpdateBindingOnTextChanged() Initializes a new instance of the UpdateBindingOnTextChanged class.\nProperties UpdateDelay Gets or sets the update delay. This is the value that is used between updates in milliseconds. The binding will be updated when no new text change event is detected within the delay. The default value is250. If the value is smaller than50, the value will be ignored and there will be no delay between the key down and the binding update. If the value is higher than5000, it will be set to5000.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/uriextensions/",
	"title": "UriExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class UriExtensions  Uri extension methods.\nMethods GetSafeUriString(Uri uri) Gets the safe URI string.\nParameters    Name Description     uri The URI.    Returns The safe URI string.\nExceptions    Name Description     ArgumentNullException The uri isnull.    IsAbsoluteUrl(string url) Determines whether the specified url is an absolute url or not.\nParameters    Name Description     url The URL.    Returns true if the specified url is an absolute url; otherwise,false.\nExceptions    Name Description     ArgumentNullException The url isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/urllocator/",
	"title": "UrlLocator",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class UrlLocator : IUrlLocator, LocatorBase  Base types LocatorBase\nBase types\nIUrlLocator\nLocator for urls.\nFields Methods Register(Type viewModelType, string url) Registers the specified url in the local cache. This cache will also be used by the Boolean) method.\nParameters    Name Description     viewModelType The view model to resolve the url for.   url The resolved url.    Exceptions    Name Description     ArgumentNullException The viewModelType isnull.   ArgumentException The url isnull or whitespace.    ResolveUrl(Type viewModelType, bool ensurePageExists) Resolves an url by the view model and the registered NamingConventions.\nParameters    Name Description     viewModelType Type of the view model to resolve the url for.   ensurePageExists If set totrue, the method checks whether the page resource actually exists.    Returns The resolved url ornull if the view could not be resolved.\nExceptions    Name Description     ArgumentNullException The viewModelType isnull.    Remarks Keep in mind that all results are cached. The cache itself is not automatically cleared when the NamingConventions are changed. If the NamingConventions are changed, the cache must be cleared manually.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/controls/usercontrol/",
	"title": "UserControl",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Controls   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class UserControl : IUserControl, UserControl  Base types UserControl\nBase types\nIUserControl\nUserControl that supports MVVM by using a IViewModel typed parameter. If the user control is not constructed with the right view model by the developer, it will try to create the view model itself. It does this by keeping an eye on theDataContext property. If the property changes, the control will check the type of the DataContext and try to create the view model by using the DataContext value as the constructor. If the view model can be constructed, the DataContext of the UserControl will be replaced by the view model.\nRemarks This control suffers a lot from the bugs, or features \u0026ldquo;by design\u0026rdquo; as Microsoft likes to call it, of WPF. Below are the most common issues that this control suffers from:\nFields Constructors UserControl() Initializes a new instance of the UserControl class.\nRemarks This method is required for design time support.\nUserControl(IViewModel viewModel) Initializes a new instance of the UserControl class.\nParameters    Name Description     viewModel The view model.    Properties CloseViewModelOnUnloaded Gets or sets a value indicating whether the user control should close any existing view model when the control is unloaded from the visual tree. Set this property tofalse if a view model should be kept alive and re-used for unloading/loading instead of creating a new one. By default, this value istrue.\nCreateWarningAndErrorValidatorForViewModel Gets or sets a value indicating whether to create a WarningAndErrorValidator for the current control. If a user control does not have any InfoBarMessageControl or equivalent control, it is useless to create a WarningAndErrorValidator for the current control. The default value is determined by the DefaultCreateWarningAndErrorValidatorForViewModelValue property.\nDefaultCreateWarningAndErrorValidatorForViewModelValue Gets or sets a value for the CreateWarningAndErrorValidatorForViewModel property. This way, the behavior can be changed an entire application to prevent disabling it on every control. The default value istrue.\nDefaultSkipSearchingForInfoBarMessageControlValue Gets or sets a value for the SkipSearchingForInfoBarMessageControl property. This way, the behavior can be changed an entire application to prevent disabling it on every control. The default value isfalse.\nRemarks Internally this value uses the DefaultSkipSearchingForInfoBarMessageControlValue property.\nDefaultSupportParentViewModelContainersValue Gets or sets a value for the SupportParentViewModelContainers property. This way, the behavior can be changed an entire application to prevent disabling it on every control. The default value isfalse.\nDefaultUnloadBehaviorValue Gets or sets the default value for the UnloadBehavior property. The default value is SaveAndCloseViewModel.\nDisableWhenNoViewModel Gets or sets a value indicating whether the user control should automatically be disabled when there is no active view model.\nPreventViewModelCreation Gets or sets a value indicating whether the view model container should prevent the creation of a view model. This property is very useful when using views in transitions where the view model is no longer required.\nSkipSearchingForInfoBarMessageControl Gets or sets a value indicating whether to skip the search for an info bar message control. If not skipped, the user control will search for a the first InfoBarMessageControl that can be found. During this search, the user control will use both the visual and logical tree. If a user control does not have any InfoBarMessageControl, searching for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from happening, set this property totrue. The default value is determined by the DefaultSkipSearchingForInfoBarMessageControlValue property.\nSupportParentViewModelContainers Gets or sets a value indicating whether parent view model containers are supported. If supported, the user control will search for a that implements the IViewModelContainer interface. During this search, the user control will use both the visual and logical tree. If a user control does not have any parent control implementing the IViewModelContainer interface, searching for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from happening, set this property tofalse. The default value istrue.\nUnloadBehavior Gets or sets the unload behavior when the data context of the target control changes.\nViewModel Gets the view model that is contained by the container.\nViewModelType Gets the type of the view model that this user control uses.\nEvents PropertyChanged Occurs when a property on the container has changed.\nRemarks This event makes it possible to externally subscribe to property changes of a (mostly the container of a view model) because the .NET Framework does not allows us to.\nViewModelChanged Occurs when the ViewModel property has changed.\nViewModelPropertyChanged Occurs when a property on the ViewModel has changed.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/providers/usercontrollogic/",
	"title": "UserControlLogic",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Providers   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class UserControlLogic : LogicBase  Base types LogicBase\nMVVM Provider behavior implementation for a user control.\nFields Constructors UserControlLogic(IView targetView, Type viewModelType, IViewModel viewModel) Initializes a new instance of the UserControlLogic class.\nParameters    Name Description     targetView The target control.   viewModelType Type of the view model.   viewModel The view model.    Exceptions    Name Description     ArgumentNullException The targetView isnull.    Properties CloseViewModelOnUnloaded Gets or sets a value indicating whether the user control should close any existing view model when the control is unloaded from the visual tree. Set this property tofalse if a view model should be kept alive and re-used for unloading/loading instead of creating a new one. By default, this value istrue.\nCreateWarningAndErrorValidatorForViewModel Gets or sets a value indicating whether to create a WarningAndErrorValidator for the current control. If a user control does not have any InfoBarMessageControl or equivalent control, it is useless to create a WarningAndErrorValidator for the current control. The default value is determined by the DefaultCreateWarningAndErrorValidatorForViewModelValue property.\nDefaultCreateWarningAndErrorValidatorForViewModelValue Gets or sets a value for the CreateWarningAndErrorValidatorForViewModel property. This way, the behavior can be changed an entire application to prevent disabling it on every control. The default value istrue.\nDefaultSkipSearchingForInfoBarMessageControlValue Gets or sets a value for the SkipSearchingForInfoBarMessageControl property. This way, the behavior can be changed an entire application to prevent disabling it on every control. The default value isfalse.\nDefaultSupportParentViewModelContainersValue Gets or sets the default value for the SupportParentViewModelContainers property. The default value istrue.\nDefaultUnloadBehaviorValue Gets or sets the default value for the UnloadBehavior property. The default value is SaveAndCloseViewModel.\nDisableWhenNoViewModel Gets or sets a value indicating whether the user control should automatically be disabled when there is no active view model.\nSkipSearchingForInfoBarMessageControl Gets or sets a value indicating whether to skip the search for an info bar message control. If not skipped, the user control will search for a the first InfoBarMessageControl that can be found. During this search, the user control will use both the visual and logical tree. If a user control does not have any InfoBarMessageControl, searching for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from happening, set this property totrue. The default value is determined by the DefaultSkipSearchingForInfoBarMessageControlValue property.\nSupportParentViewModelContainers Gets or sets a value indicating whether parent view model containers are supported. If supported, the user control will search for the IViewModelContainer interface. During this search, the user control will use both the visual and logical tree. If a user control does not have any parent control implementing the IViewModelContainer interface, searching for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from happening, set this property tofalse. The default value istrue.\nUnloadBehavior Gets or sets the unload behavior when the data context of the target control changes.\nMethods OnTargetViewDataContextChanged(object sender, DataContextChangedEventArgs e) Called when theDataContext property of theTargetView has changed.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    OnTargetViewLoadedAsync(object sender, EventArgs e) Called when theTargetView has just been loaded.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    OnTargetViewUnloadedAsync(object sender, EventArgs e) Called when theTargetView has just been unloaded.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/ioc/automatic-type-registration/using-conventions/",
	"title": "Using conventions",
	"tags": [],
	"description": "",
	"content": " The ServiceLocator in Catel can be set up to automatically register types based on the conventions. The convention based registration should to be run first than the others registration methods to be sure to have all your types registered correctly.\n\rSome conventions are provided by default to allow us to register types.\nRegister using Naming Convention You can want to register all types which match with the default naming convention, means when I have a *IService *interface, I expect the convention to find and register the Service class as implementation.\nTo discover types for naming convention registration, we have to simply do :\nvar serviceLocator = new ServiceLocator(); serviceLocator.RegisterTypesUsingDefaultNamingConvention();  Register using FirstInterface Convention You can want to register all types which match with the default first interface convention, means when I have a *Service *class which implements more than one interface, I expect the convention to find the first interface and use it as service registration.\nTo discover types for first interface convention registration, we have to simply do :\nvar serviceLocator = new ServiceLocator(); serviceLocator.RegisterTypesUsingDefaultFirstInterfaceConvention();  Filter types to register You have the ability to apply filtering on the registration process to exclude for example or include some types.\nExclude all types of the namespace containing the specified type If you want to exclude all types of the namespace which belong to a particular type, just do that: var serviceLocator = new ServiceLocator(); serviceLocator.RegisterTypesUsingDefaultNamingConvention() .ExcludeAllTypesOfNamespaceContaining\u0026lt;IFooService\u0026gt;();  Here, we say to the ServiceLocator to ignore all types included into the namespace which belong to the IFooService type.\nYou can manually specify the namespace of the types to exclude using the *ExcludeAllTypesOfNamespace ***** method like this: ExcludeAllTypesOfNamespace(\u0026ldquo;MyNamespace\u0026rdquo;)\n\rExclude a specific type If you want to exclude a specific type, you can do that by using the ExcludeType method like shown below:\nvar serviceLocator = new ServiceLocator(); serviceLocator.RegisterTypesUsingDefaultNamingConvention() .ExcludeType\u0026lt;IFooService\u0026gt;();  The IFooService will be exclude on the registration process.\nExclude types using predicate You also have the possibility to filter types by using a predicate, below an example :\nvar serviceLocator = new ServiceLocator(); serviceLocator.RegisterTypesUsingDefaultNamingConvention() .ExcludeTypesWhere(type =\u0026gt; type == typeof(IFooService));  All Exclude methods have an Include version\n\r "
},
{
	"uri": "http://docs.catelproject.com/5.1/setup-deployment/code-snippets-templates/using-the-item-templates/",
	"title": "Using the item templates",
	"tags": [],
	"description": "",
	"content": " There are lots of item templates available for Catel so it is really easy to develop new views very fast.\nDifference between logic in view base or behavior As you might have noticed, there are lots of \u0026ldquo;double\u0026rdquo; item templates. However, there is a substantial difference between the item templates that implement the logic in the view base or the logic in a behavior.\nShortly said, a view with the logic in the view base is defined like this:\npublic class MyView : Catel.Windows.Controls.UserControl { // rest of the class definition }  This means that the logic for MVVM is located in the view base (in this example, the UserControl).\n An item template where the logic is located in a behavior uses regular controls and uses one of the available MVVM behaviors to implement the logic. The behaviors are extremely powerful, but we still recommend the use of logic in the view base since that takes more work out of the hands from the developer.\nView model The view model is the easiest and smallest item template available. The question is even whether a new view model should be created via an item template or by using the vm code snippet.\nUser control The user control templates create a user control deriving from UserControl. First it is very important to make a decision whether the logic should be implemented in the view base or a behavior. Then, select the appropriate template:\nThe item template will assume that a view model with the same name is already created. For example, if a view with the name PersonView is created, the template assumes that the view model name is PersonViewModel. If you prefer a different naming convention, simply change the view model type name after the item has been created.\nUnfortunately, there is a bug in the item templates system of Visual Studio so it is not possible to also set the namespace of the view models to [ProjectRootNamespace].ViewModels, so this has to be done manually\n\rWindow The window templates create a window deriving from DataWindow. First it is very important to make a decision whether the logic should be implemented in the view base or a behavior. Then, select the appropriate template:\nThe item template will assume that a view model with the same name is already created. For example, if a view with the name PersonView is created, the template assumes that the view model name is PersonViewModel. If you prefer a different naming convention, simply change the view model type name after the item has been created.\nUnfortunately, there is a bug in the item templates system of Visual Studio so it is not possible to also set the namespace of the view models to [ProjectRootNamespace].ViewModels, so this has to be done manually\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/validatablemodelbase/",
	"title": "ValidatableModelBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class ValidatableModelBase : IValidatableModel, ModelBase  Base types ModelBase\nBase types\nIValidatableModel\nModelBase implementation that supports validation.\nFields Constructors Properties DefaultValidateUsingDataAnnotationsValue Gets or sets a value indicating whether the validation should not try to process data annotations.\nHasErrors Gets a value indicating whether this object contains any field or business errors.\nHasWarnings Gets a value indicating whether this object contains any field or business warnings.\nEvents Methods SuspendValidations(bool validateOnResume) Suspends the validation until the disposable token has been disposed.\nReturns Validate(bool force) Validates the current object for field and business rule errors.\nParameters    Name Description     force If set totrue, a validation is forced. When the validation is not forced, it means that when the object is already validated, and no properties have been changed, no validation actually occurs since there is no reason for any values to have changed.    Remarks To check whether this object contains any errors, use the ValidationContext property.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/validatemodelattribute/",
	"title": "ValidateModelAttribute",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ValidateModelAttribute : Attribute  Base types Attribute\nAttribute to define custom validation at class level for all classes that derive from ModelBase. This attribute follows a naming convention. If\nConstructors ValidateModelAttribute(Type validatorType) Initializes a new instance of the ValidateModelAttribute class.\nParameters    Name Description     validatorType Type of the validator.    Exceptions    Name Description     ArgumentNullException The validatorType isnull.    Properties ValidatorType Gets the type of the validator.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/introduction/mvvm/validation-in-model-or-view-model/",
	"title": "Validation in model or view model?",
	"tags": [],
	"description": "",
	"content": "I have had lots of discussion whether the validation should take place in the model or the view model. Some people think that the validation should always occur inside the model because you don’t want to persist invalid models to the persistence store. Others say that the models itself don’t need validation, but the state the view model is in requires the validation. I think both are true, and I will tell you why.\nFirst of all, you don’t want invalid models in your persistence store. Thus, the most basic checks such as type, ranges and required fields should be validated in the model. But sometimes, it is required to restrict the user more than the model does, and that’s where validation in the view model comes in handy. Another reason why you want to implement (a part of) the validation in the view model is the state of the model inside a workflow. If you have a workflow that updates the model step by step, the model isn’t valid after the first step in the workflow. However, you already want to persist the model because the user might decide to execute the following steps at a later time. You don’t want to implement the state logic of a workflow in your model (and if you did that, get rid of it, as soon as possible). This is another feature where the view model validation comes in handy.\nThe good news is that with Catel, it doesn’t matter what you want, because it’s all possible. If you want your model to do all the validation, then this is possible using the Model and ViewModelToModel attributes which map the values of the properties and the errors directly to the model so the view model acts as a proxy between the view and the model. If you want to do all of the validation inside the view model, then you can implement the ValidateFields and ValidateBusinessRules methods in the view model. And, if you want the best of both worlds, such as me, than you can use a combination of the techniques described above.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/validation/validation-via-data-annotations/",
	"title": "Validation via data annotations",
	"tags": [],
	"description": "",
	"content": " The ViewModelBase derives from ModelBase, thus all information here also applies to the ViewModelBase\n\rData annotations are validation when the specific property is set. For example, when a property FirstName is set, all the data annotations on the FirstName property are validated.\nDecorating properties with data annotations Decorating properties is very simple. For example, to make a property mandatory, use the following definition (note the Required attribute):\n/// \u0026lt;summary\u0026gt; /// Gets or sets the middle name. /// \u0026lt;/summary\u0026gt; [Required] public string MiddleName { get { return GetValue\u0026lt;string\u0026gt;(MiddleNameProperty); } set { SetValue(MiddleNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the property so it is known in the class. /// \u0026lt;/summary\u0026gt; public readonly PropertyData MiddleNameProperty = RegisterProperty(\u0026quot;MiddleName\u0026quot;, typeof(string), string.Empty);  For more information about data annotations, read the official MSDN documentation .\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/validationcontext/",
	"title": "ValidationContext",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ValidationContext : IValidationContext  Base types\nIValidationContext\nContext containing all validation and provides several methods to gather this information.\nFields Constructors ValidationContext() Initializes a new instance of the ValidationContext class.\nValidationContext(IEnumerable fieldValidationResults, IEnumerable businessRuleValidationResults) Initializes a new instance of the ValidationContext class.\nParameters    Name Description     fieldValidationResults The field validation results. Can benull to add no field validation results.   businessRuleValidationResults The business rule validation results. Can benull to add no business rule validations.    ValidationContext(IEnumerable fieldValidationResults, IEnumerable businessRuleValidationResults, DateTime lastModified) Initializes a new instance of the ValidationContext class.\nParameters    Name Description     fieldValidationResults The field validation results. Can benull to add no field validation results.   businessRuleValidationResults The business rule validation results. Can benull to add no business rule validations.   lastModified The last modified date/time.    Properties HasErrors Gets a value indicating whether this instance contains errors.\nHasWarnings Gets a value indicating whether this instance contains warnings.\nLastModified Gets the last modified date/time. Note that this is just an informational value and should not be used for comparisons. The is not accurate enough. Use theLastModifiedTicks instead.\nLastModifiedTicks Gets the last modified ticks which is much more precise that the LastModified. Use this value to compare last modification ticks on other validation contexts. Because only full .NET provides a stopwatch, this property is only available in full .NET. All other target frameworks will return the which isnot reliable.\nMethods Add(IBusinessRuleValidationResult businessRuleValidationResult) Adds the business rule validation result.\nParameters    Name Description     businessRuleValidationResult The business rule validation result.    Exceptions    Name Description     ArgumentNullException The businessRuleValidationResult isnull.    Add(IFieldValidationResult fieldValidationResult) Adds the field validation result.\nParameters    Name Description     fieldValidationResult The field validation result.    Exceptions    Name Description     ArgumentNullException The fieldValidationResult isnull.    AddBusinessRuleValidationResult(IBusinessRuleValidationResult businessRuleValidationResult) Adds the business rule validation result.\nParameters    Name Description     businessRuleValidationResult The business rule validation result.    Exceptions    Name Description     ArgumentNullException The businessRuleValidationResult isnull.    AddFieldValidationResult(IFieldValidationResult fieldValidationResult) Adds the field validation result.\nParameters    Name Description     fieldValidationResult The field validation result.    Exceptions    Name Description     ArgumentNullException The fieldValidationResult isnull.    GetBusinessRuleErrorCount() Gets the business rule error count.\nReturns The number of business rule errors available.\nGetBusinessRuleErrorCount(object tag) Gets the business rule error count with the specified tag.\nParameters    Name Description     tag The tag.    Returns The number of business rule errors available.\nGetBusinessRuleErrors() Gets all the business rule errors.\nReturns List of IBusinessRuleValidationResult items.\nGetBusinessRuleErrors(object tag) Gets all the business rule errors with the specified tag.\nParameters    Name Description     tag The tag.    Returns List of IBusinessRuleValidationResult items.\nGetBusinessRuleValidationCount() Gets the business rule validation count.\nReturns The number of business rule validations available.\nGetBusinessRuleValidationCount(object tag) Gets the business rule validation count with the specified tag.\nParameters    Name Description     tag The tag.    Returns The number of business rule validations available.\nGetBusinessRuleValidations() Gets all the business rule validations.\nReturns List of IBusinessRuleValidationResult items.\nGetBusinessRuleValidations(object tag) Gets all the business rule validations with the specified tag.\nParameters    Name Description     tag The tag.    Returns List of IBusinessRuleValidationResult items.\nGetBusinessRuleWarningCount() Gets the business rule warning count.\nReturns The number of business rule warnings available.\nGetBusinessRuleWarningCount(object tag) Gets the business rule warning count with the specified tag.\nParameters    Name Description     tag The tag.    Returns The number of business rule warnings available.\nGetBusinessRuleWarnings() Gets all the business rule warnings.\nReturns List of IBusinessRuleValidationResult items.\nGetBusinessRuleWarnings(object tag) Gets all the business rule warnings with the specified tag.\nParameters    Name Description     tag The tag.    Returns List of IBusinessRuleValidationResult items.\nGetErrorCount() Gets the number of field and business rule errors inside this context.\nReturns The number of errors available.\nGetErrorCount(object tag) Gets the number of field and business rule errors with the specified tag inside this context.\nParameters    Name Description     tag The tag.    Returns The number of errors available.\nGetErrors() Gets all field and business rule errors.\nReturns List of IValidationResult items.\nGetErrors(object tag) Gets all field and business rule errors with the specified tag.\nParameters    Name Description     tag The tag.    Returns List of IValidationResult items.\nGetFieldErrorCount() Gets the field error count of all fields.\nReturns The number of field errors available.\nGetFieldErrorCount(object tag) Gets the field error count of all fields with the specified tag.\nParameters    Name Description     tag The tag.    Returns The number of field errors available.\nGetFieldErrors() Gets all the field errors.\nReturns List of IFieldValidationResult items.\nGetFieldErrors(object tag) Gets all the field errors with the specified tag.\nParameters    Name Description     tag The tag.    Returns List of IFieldValidationResult items.\nGetFieldErrors(string propertyName) Gets all the field errors for the specified property name.\nParameters    Name Description     propertyName Name of the property.    Returns List of IFieldValidationResult items.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    GetFieldErrors(string propertyName, object tag) Gets all the field errors for the specified property name with the specified tag.\nParameters    Name Description     propertyName Name of the property.   tag The tag.    Returns List of IFieldValidationResult items.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    GetFieldValidationCount() Gets the field validation count of all fields.\nReturns The number of field validations available.\nGetFieldValidationCount(object tag) Gets the field validation count of all fields with the specified tag.\nParameters    Name Description     tag The tag.    Returns The number of field validations available.\nGetFieldValidations() Gets all the field validations.\nReturns List of IFieldValidationResult items.\nGetFieldValidations(object tag) Gets all the field validations with the specified tag.\nParameters    Name Description     tag The tag.    Returns List of IFieldValidationResult items.\nGetFieldValidations(string propertyName) Gets all the field validations for the specified property name.\nParameters    Name Description     propertyName Name of the property.    Returns List of IFieldValidationResult items.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    GetFieldValidations(string propertyName, object tag) Gets all the field validations for the specified property name with the specified tag.\nParameters    Name Description     propertyName Name of the property.   tag The tag.    Returns List of IFieldValidationResult items.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    GetFieldWarningCount() Gets the field warning count of all fields.\nReturns The number of field warnings available.\nGetFieldWarningCount(object tag) Gets the field warning count of all fields with the specified tag.\nParameters    Name Description     tag The tag.    Returns The number of field warnings available.\nGetFieldWarnings() Gets all the field warnings.\nReturns List of IFieldValidationResult items.\nGetFieldWarnings(object tag) Gets all the field warnings with the specified tag.\nParameters    Name Description     tag The tag.    Returns List of IFieldValidationResult items.\nGetFieldWarnings(string propertyName) Gets all the field warnings for the specified property name.\nParameters    Name Description     propertyName Name of the property.    Returns List of IFieldValidationResult items.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    GetFieldWarnings(string propertyName, object tag) Gets all the field warnings for the specified property name with the specified tag.\nParameters    Name Description     propertyName Name of the property.   tag The tag.    Returns List of IFieldValidationResult items.\nExceptions    Name Description     ArgumentException The propertyName isnull or whitespace.    GetValidationCount() Gets the total validation count of all fields and business rules.\nReturns The number of validations available.\nGetValidationCount(object tag) Gets the total validation count of all fields and business rules with the specified tag.\nParameters    Name Description     tag The tag.    Returns The number of validations available.\nGetValidations() Gets all the field and business rule validations.\nReturns List of IValidationResult items.\nGetValidations(object tag) Gets all the field and business rule validations with the specified tag.\nParameters    Name Description     tag The tag.    Returns List of IValidationResult items.\nGetWarningCount() Gets the number of field and business rule warnings inside this context.\nReturns The number of warnings available.\nGetWarningCount(object tag) Gets the number of field and business rule warnings with the specified tag inside this context.\nParameters    Name Description     tag The tag.    Returns The number of warnings available.\nGetWarnings() Gets all field and business rule warnings.\nReturns List of IValidationResult items.\nGetWarnings(object tag) Gets all field and business rule warnings with the specified tag.\nParameters    Name Description     tag The tag.    Returns List of IValidationResult items.\nRemove(IBusinessRuleValidationResult businessRuleValidationResult) Removes the business rule validation result.\nParameters    Name Description     businessRuleValidationResult The business rule validation result.    Exceptions    Name Description     ArgumentNullException The businessRuleValidationResult isnull.    Remove(IFieldValidationResult fieldValidationResult) Removes the field validation result.\nParameters    Name Description     fieldValidationResult The field validation result.    Exceptions    Name Description     ArgumentNullException The fieldValidationResult isnull.    RemoveBusinessRuleValidationResult(IBusinessRuleValidationResult businessRuleValidationResult) Removes the business rule validation result.\nParameters    Name Description     businessRuleValidationResult The business rule validation result.    Exceptions    Name Description     ArgumentNullException The businessRuleValidationResult isnull.    RemoveFieldValidationResult(IFieldValidationResult fieldValidationResult) Removes the field validation result.\nParameters    Name Description     fieldValidationResult The field validation result.    Exceptions    Name Description     ArgumentNullException The fieldValidationResult isnull.    ToString() Returns a that represents this instance.\nReturns A that represents this instance.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/validationcontextchange/",
	"title": "ValidationContextChange",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ValidationContextChange  Class containing change information about an item in the validation context.\nConstructors ValidationContextChange(IValidationResult validationResult, ValidationContextChangeType changeType) Initializes a new instance of the ValidationContextChange class.\nParameters    Name Description     validationResult The validation result.   changeType Type of the change.    Exceptions    Name Description     ArgumentNullException The validationResult isnull.    Properties ChangeType Gets the type of the change.\nValidationResult Gets the validation result.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/validationcontextchangetype/",
	"title": "ValidationContextChangeType",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum ValidationContextChangeType : Enum  Base types Enum\nThe type of change that occurred to a validation context item.\nFields Added 0\nThe item was added.\nRemoved 1\nThe item was removed.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/validationcontexthelper/",
	"title": "ValidationContextHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ValidationContextHelper  Helper class for IValidationContext classes.\nMethods GetChanges(IValidationContext firstContext, IValidationContext secondContext) Gets the changes between two different validation contexts.\nParameters    Name Description     firstContext The first context.   secondContext The second context.    Returns The list of changes.\nExceptions    Name Description     ArgumentNullException The firstContext isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/controls/validationeventaction/",
	"title": "ValidationEventAction",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Controls   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public enum ValidationEventAction : Enum  Base types Enum\nValidation event action.\nFields Added 0\nAdded.\nClearAll 3\nAll validation info of the specified object should be cleared.\nRefresh 2\nRefresh the validation, don\u0026rsquo;t add or remove.\nRemoved 1\nRemoved.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/validationeventargs/",
	"title": "ValidationEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ValidationEventArgs : EventArgs  Base types EventArgs\nThe validation event args.\nConstructors ValidationEventArgs(IValidationContext validationContext) Initializes a new instance of the ValidationEventArgs class.\nParameters    Name Description     validationContext The validation context.    Properties ValidationContext Gets the validation context.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/controls/validationeventargs/",
	"title": "ValidationEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Controls   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class ValidationEventArgs : EventArgs  Base types EventArgs\nEvent arguments for event WarningAndErrorValidator Validation.\nConstructors Properties Action A action for handling event.\nMessage Gets the actual warning or error message.\nType Gets the type of the validation.\nValue Gets the value that contains the warning or error.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/validationextensions/",
	"title": "ValidationExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ValidationExtensions  Extensions for validation.\nMethods GetValidationSummary(IValidationContext validationContext, object tag) Gets the validation summary for the specified IValidationContext.\nParameters    Name Description     validationContext The validation context.   tag The tag.    Returns The IValidationSummary.\nSynchronizeWithContext(ValidationContext validationContext, IValidationContext additionalValidationContext, bool onlyAddValidation) Synchronizes the current with the specified context. This means that the current contains will become the same as the specified context.\nParameters    Name Description     validationContext The validation context.   additionalValidationContext The additional validation context.   onlyAddValidation if set totrue, validation is only added, not removed. This is great to build up summaries.    Returns The list of changes.\nExceptions    Name Description     System.ArgumentOutOfRangeException    ArgumentNullException The validationContext isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/validationresult/",
	"title": "ValidationResult",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class ValidationResult : IValidationResult  Base types\nIValidationResult\nBase class for validation results.\nConstructors Properties Message Gets or sets the validation result message.\nRemarks This value has a public setter so it is possible to customize the message in derived classes. One should be careful and know what they are doing when overwriting an error message.\nTag Gets or sets the tag that allows grouping of validations.\nValidationResultType Gets the type of the validation result.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/validationresulttype/",
	"title": "ValidationResultType",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum ValidationResultType : Enum  Base types Enum\nTypes of validation results.\nFields Error 1\nValidation result represents an error.\nWarning 0\nValidation result represents a warning.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/validationsummary/",
	"title": "ValidationSummary",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ValidationSummary : IValidationSummary  Base types\nIValidationSummary\nThe validation summary that contains a momentum of the IValidationContext.\nFields Constructors ValidationSummary(IValidationContext validationContext) Initializes a new instance of the ValidationSummary class.\nParameters    Name Description     validationContext The validation context to base the summary on.    Exceptions    Name Description     ArgumentNullException The validationContext isnull.    ValidationSummary(IValidationContext validationContext, object tag) Initializes a new instance of the ValidationSummary class and filters all the validations on the specified tag.\nParameters    Name Description     validationContext The validation context to base the summary on.   tag The tag.    Exceptions    Name Description     ArgumentNullException The validationContext isnull.    Properties BusinessRuleErrors Gets a collection of business rule errors.\nBusinessRuleWarnings Gets a collection of business rule warnings.\nFieldErrors Gets a collection of field errors.\nFieldWarnings Gets a collection of field warnings.\nHasBusinessRuleErrors Gets a value indicating whether the summary contains business rule errors.\nHasBusinessRuleWarnings Gets a value indicating whether the summary contains business rule warnings.\nHasErrors Gets a value indicating whether the summary contains errors.\nHasFieldErrors Gets a value indicating whether the summary contains field errors.\nHasFieldWarnings Gets a value indicating whether the summary contains field warnings.\nHasWarnings Gets a value indicating whether the summary contains warnings.\nLastModified Gets the last modified date/time. Note that this is just an informational value and should not be used for comparisons. The is not accurate enough. Use theLastModifiedTicks instead.\nLastModifiedTicks Gets the last modified ticks which is much more precise that the LastModified. Use this value to compare last modification ticks on other validation contexts. Because only full .NET provides a stopwatch, this property is only available in full .NET. All other target frameworks will return the which isnot reliable.\nMethods ToString() Returns a that represents this instance.\nReturns A that represents this instance.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/controls/validationtype/",
	"title": "ValidationType",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Controls   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public enum ValidationType : Enum  Base types Enum\nBusiness validation type.\nFields Error 1\nError.\nWarning 0\nWarning.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/validatorbase/",
	"title": "ValidatorBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class ValidatorBase\u0026lt;TTargetType\u0026gt; : IValidator where TTargetType : class  Base types\nIValidator\nBase class that implements the IValidator interface, but already implements dummy methods for theBefore andAfter methods, which are rarely used (but still very useful in some cases).\nType Parameters TTargetType The target type.\nMethods AfterValidateBusinessRules(object instance, List validationResults) Called just after the specified instance has validated its business rules.\nParameters    Name Description     instance The instance that has just been validated.   validationResults The validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.   NotSupportedException The instance cannot be casted to TTargetType.    AfterValidateFields(object instance, List validationResults) Called just after the specified instance has validated its fields.\nParameters    Name Description     instance The instance that has just been validated.   validationResults The validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.   NotSupportedException The instance cannot be casted to TTargetType.    AfterValidation(object instance, List fieldValidationResults, List businessRuleValidationResults) Called just after all validation has been executed.\nParameters    Name Description     instance The instance that has just been validated.   fieldValidationResults The current field validation results.   businessRuleValidationResults The current business rule validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.   NotSupportedException The instance cannot be casted to TTargetType.    BeforeValidateBusinessRules(object instance, List previousValidationResults) Called just before the specified instance is about to be validate its business rules.\nParameters    Name Description     instance The instance that is about to be validated.   previousValidationResults The validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.   NotSupportedException The instance cannot be casted to TTargetType.    BeforeValidateFields(object instance, List previousValidationResults) Called just before the specified instance is about to be validate its fields.\nParameters    Name Description     instance The instance that is about to be validated.   previousValidationResults The validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.   NotSupportedException The instance cannot be casted to TTargetType.    BeforeValidation(object instance, List previousFieldValidationResults, List previousBusinessRuleValidationResults) Called just before any validation is caused.\nParameters    Name Description     instance The instance that is about to be validated.   previousFieldValidationResults The previous field validation results.   previousBusinessRuleValidationResults The previous business rule validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.   NotSupportedException The instance cannot be casted to TTargetType.    Validate(object instance, ValidationContext validationContext) Validates the specified instance and allows the manipulation of the whole validation context. This method can be used to manipulate the whole validation context and the implementation of this is enough.\nParameters    Name Description     instance The instance to validate.   validationContext The validation context.    Exceptions    Name Description     ArgumentNullException The instance isnull.    ValidateBusinessRules(object instance, List validationResults) Validates the business rules of the specified instance. The results must be added to the list of validation results.\nParameters    Name Description     instance The instance to validate.   validationResults The validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.   NotSupportedException The instance cannot be casted to TTargetType.    ValidateFields(object instance, List validationResults) Validates the fields of the specified instance. The results must be added to the list of validation results.\nParameters    Name Description     instance The instance to validate.   validationResults The validation results.    Exceptions    Name Description     ArgumentNullException The instance isnull.   NotSupportedException The instance cannot be casted to TTargetType.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/validatorproviderbase/",
	"title": "ValidatorProviderBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class ValidatorProviderBase : IValidatorProvider  Base types\nIValidatorProvider\nBase class that implements the IValidatorProvider so only the GetValidator(Type) method has to be implemented.\nFields Constructors Properties UseCache Gets or sets a value indicating whether use cache that make faster the retrieval of the IValidator instance for the specified type.\nRemarks By default this property is set totrue.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/valueconverterbase/",
	"title": "ValueConverterBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class ValueConverterBase\u0026lt;TConvert, TConvertBack\u0026gt; : IValueConverter, MarkupExtension  Base types MarkupExtension\nBase types\nIValueConverter\nBase class for value converters which makes it compatible between .NET and WinRT.\nType Parameters TConvert The type of the convert input.\nTConvertBack The type of the convert back input.\nFields Properties BackOverrideType Gets or sets an optional value to pass to the method of this instance if the Link property is set.\nRemarks Normally this value is ignored as it is in most implementations ofConvertBack.\nLink Gets or sets the linked value converter. This way it is possible to chain up several converters.\nOverrideType Gets or sets an optional value to pass to the method of the chained converter if the Link property is set.\nRemarks Normally this value is ignored as it is in most implementations ofConvert.\nMethods Convert(object value, Type targetType, object parameter, CultureInfo culture) Modifies the source data before passing it to the target for display in the UI.\nParameters    Name Description     value The source data being passed to the target.   targetType The Type of data expected by the target dependency property.   parameter An optional parameter to be used in the converter logic.   culture The culture of the conversion.    Returns The value to be passed to the target dependency property.\nConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Modifies the target data before passing it to the source object.\nParameters    Name Description     value The target data being passed to the source.   targetType The Type of data expected by the source object.   parameter An optional parameter to be used in the converter logic.   culture The culture of the conversion.    Returns The value to be passed to the source object.\nProvideValue(IServiceProvider serviceProvider) When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension.\nParameters    Name Description     serviceProvider Object that can provide services for the markup extension.    Returns The object value to set on the property where the extension is applied.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/valueconvertergroup/",
	"title": "ValueConverterGroup",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6    public class ValueConverterGroup : IValueConverter  Base types\nIValueConverter\nA value converter which contains a list of IValueConverters and invokes their Convert or ConvertBack methods in the order that they exist in the list. The output of one converter is piped into the next converter allowing for modular value converters to be chained together. If the ConvertBack method is invoked, the value converters are executed in reverse order (highest to lowest index). Do not leave an element in the Converters property collection null, every element must reference a valid IValueConverter instance. If a value converter\u0026rsquo;s type is not decorated with the ValueConversionAttribute, an InvalidOperationException will be thrown when the converter is added to the Converters collection. Known limitations: the supplied parameter is used for ALL! converters.\nRemarks Original source: http://www.codeproject.com/KB/WPF/PipingValueConverters_WPF.aspx Original license: CPOL, compatible with the MIT license.\nFields Constructors ValueConverterGroup() Initializes a new instance of the ValueConverterGroup class.\nProperties Converters Returns the list of IValueConverters contained in this converter.\nMethods Convert(object value, Type targetType, object parameter, CultureInfo culture) Converts a value.\nParameters    Name Description     value The value produced by the binding source.   targetType The type of the binding target property.   parameter The converter parameter to use.   culture The culture to use in the converter.    Returns A converted value. If the method returns null, the valid null value is used.\nConvertBack(object value, Type targetType, object parameter, CultureInfo culture) Converts a value.\nParameters    Name Description     value The value that is produced by the binding target.   targetType The type to convert to.   parameter The converter parameter to use.   culture The culture to use in the converter.    Returns A converted value. If the method returns null, the valid null value is used.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/vibrateservice/",
	"title": "VibrateService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class VibrateService : IVibrateService  Base types\nIVibrateService\nImplementation of the IVibrateService.\nConstructors VibrateService() Constructs the vibrate service.\nMethods Start(TimeSpan duration) Starts vibration on the device.\nParameters    Name Description     duration A TimeSpan object specifying the amount of time, in seconds, for which the phone vibrates. Valid times are between 0 and 5 seconds. Values greater than 5 or less than 0 will generate an exception.    Exceptions    Name Description     ArgumentOutOfRangeException Duration is greater than the 5 seconds or duration is negative.    Stop() Stops the vibration on the device.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/viewexportservice/",
	"title": "ViewExportService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6    public class ViewExportService : IViewExportService, ServiceBase  Base types ServiceBase\nBase types\nIViewExportService\nThe ViewExportService interface.\nFields Constructors ViewExportService(IViewManager viewManager, ISaveFileService saveFileService) Initializes a new instance of the ViewExportService class.\nParameters    Name Description     viewManager The view manager.   saveFileService The save file service.    Exceptions    Name Description     ArgumentNullException The viewManager isnull.    Methods Export(IViewModel viewModel, ExportMode exportMode, double dpiX, double dpiY) Exports the viewModel \u0026rsquo;s view to the print or clipboard or file.\nParameters    Name Description     viewModel The view model.   exportMode The export mode.   dpiX The dpi X.   dpiY The dpi Y.    Exceptions    Name Description     System.InvalidOperationException    System.ArgumentNullException The viewModel isnull.    Remarks If exportMode is Print then the dpiX and dpiY argument will be ignored.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/viewextensions/",
	"title": "ViewExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ViewExtensions  Extension methods for views.\nFields Methods AutoDetectViewPropertiesToSubscribe(Type viewType) Automatically detects view properties to subscribe to by searching for dependency properties decorated with the ViewToViewModelAttribute.\nParameters    Name Description     viewType The view type.    Dispatch(IView view, Action action) Runs the specified action on the view dispatcher.\nParameters    Name Description     view The view.   action The action.    Exceptions    Name Description     ArgumentNullException The view isnull.    EnsureVisualTree(IView view) Ensures that a visual tree exists for the view.\nParameters    Name Description     view The view.    FindParentByPredicate(IView view, Predicate predicate) Finds a parent by predicate. It first tries to find the parent via theUserControl.Parent property, and if that doesn\u0026rsquo;t satisfy, it uses theUserControl.TemplatedParent property.\nParameters    Name Description     view The control.   predicate The predicate.    Returns ornull if no parent is found that matches the predicate.\nFindParentByPredicate(FrameworkElement view, Predicate predicate, int maxDepth) Finds a parent by predicate. It first tries to find the parent via theUserControl.Parent property, and if that doesn\u0026rsquo;t satisfy, it uses theUserControl.TemplatedParent property.\nParameters    Name Description     view The control.   predicate The predicate.   maxDepth The maximum number of levels to go up when searching for the parent. If smaller than 0, no maximum is used.    Returns ornull if no parent is found that matches the predicate.\nFindParentViewModelContainer(IView view) Finds the parent view model container.\nParameters    Name Description     view The view.    Returns The IViewModelContainer ornull if the container is not found.\nGetParent(IView view) Gets the parent of the specified view.\nParameters    Name Description     view The view.    Returns GetParent(FrameworkElement element) Gets the parent of the specified element.\nParameters    Name Description     element The element.    Returns The parent ornull if there is no parent.\nGetPossibleParents(FrameworkElement element) Gets the possible parents of the specified element.\nParameters    Name Description     element The element.    Returns The possible parents ornull if there is no parent.\nGetProperties(IView view) Gets the properties of the view.\nParameters    Name Description     view The view.    Returns List of properties.\nSubscribeToPropertyChanged(IView view, string propertyName, EventHandler handler) Subscribes to the property changed event.\nParameters    Name Description     view The view.   propertyName Name of the property.   handler The handler.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/viewhelper/",
	"title": "ViewHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public static class ViewHelper  View helper class for MVVM scenarios.\nFields Methods ConstructViewWithViewModel(Type viewType, object dataContext) Constructs the view with the view model. First, this method tries to inject the specified DataContext into the view. If the view does not contain a constructor with this parameter type, it will try to use the default constructor and set the DataContext manually.\nParameters    Name Description     viewType Type of the view to instantiate.   dataContext The data context to inject into the view. In most cases, this will be a view model.    Returns The constructed view ornull if it was not possible to construct the view.\nExceptions    Name Description     ArgumentNullException The viewType isnull.    ConstructViewWithViewModel(Type viewType, object dataContext) Constructs the view with the view model. First, this method tries to inject the specified DataContext into the view. If the view does not contain a constructor with this parameter type, it will try to use the default constructor and set the DataContext manually.\nType Parameters T The type of the view to return.\nParameters    Name Description     viewType Type of the view to instantiate.   dataContext The data context to inject into the view. In most cases, this will be a view model.    Returns The constructed view ornull if it was not possible to construct the view.\nExceptions    Name Description     ArgumentNullException The viewType isnull.    Remarks Internally uses the Object) method and casts the result.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/viewloadeventargs/",
	"title": "ViewLoadEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ViewLoadEventArgs : EventArgs  Base types EventArgs\nEventArgs implementation for when a IView is loaded.\nConstructors ViewLoadEventArgs(IView view) Initializes a new instance of the ViewLoadEventArgs class.\nParameters    Name Description     view The view.    Exceptions    Name Description     ArgumentNullException The view isnull.    Properties View Gets the view that has just been loaded.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/viewloadmanager/",
	"title": "ViewLoadManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ViewLoadManager : IViewLoadManager  Base types\nIViewLoadManager\nManager that handles top =\u0026gt; bottom loaded events for all views inside an application. The reason this class is built is that in non-WPF technologies, the visual tree is loaded from bottom =\u0026gt; top. However, Catel heavily relies on the order to be top =\u0026gt; bottom. This manager subscribes to both theLoaded andLayoutUpdated events. This is because in a nested scenario this will happen:```\n``` Will be executed in the following order:\nFields Constructors ViewLoadManager() Initializes a new instance of the ViewLoadManager class.\nEvents ViewLoaded Occurs when any of the subscribed views are loaded.\nViewLoading Occurs when any of the subscribed views are about to be loaded.\nViewUnloaded Occurs when any of the subscribed views are unloaded.\nViewUnloading Occurs when any of the subscribed views are about to be unloaded.\nMethods AddView(IViewLoadState viewLoadState) Adds the view load state.\nParameters    Name Description     viewLoadState The view load state.    Exceptions    Name Description     ArgumentNullException The viewLoadState isnull.    CleanUp() Cleans up the dead links.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/viewloadstateevent/",
	"title": "ViewLoadStateEvent",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum ViewLoadStateEvent : Enum  Base types Enum\nAvailable view load state events.\nFields Loaded 1\nThe view has just been loaded.\nLoading 0\nThe view is about to be loaded.\nUnloaded 3\nThe view has just been unloaded.\nUnloading 2\nThe view is about to be unloaded.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/viewlocator/",
	"title": "ViewLocator",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ViewLocator : IViewLocator, LocatorBase  Base types LocatorBase\nBase types\nIViewLocator\nResolver that will resolve view types based on the view model type. For example, if a view model with the type nameMyAssembly.ViewModels.PersonViewModel is inserted, this could result in the view typeMyAssembly.Views.PersonView.\nMethods IsCompatible(Type viewModelType, Type viewType) Determines whether the specified view model type is compatible with the view. A view model is compatible if it\u0026rsquo;s either resolved via naming conventions or registered manually.\nParameters    Name Description     viewModelType Type of the view model.   viewType Type of the view.    Returns true if the view model is compatible with the view; otherwise,false.\nRegister(Type viewModelType, Type viewType) Registers the specified view in the local cache. This cache will also be used by the ResolveView(Type) method.\nParameters    Name Description     viewModelType Type of the view model.   viewType Type of the view.    Exceptions    Name Description     ArgumentNullException The viewModelType isnull.    ResolveView(Type viewModelType) Resolves a view type by the view model and the registered NamingConventions.\nParameters    Name Description     viewModelType Type of the view model to resolve the view for.    Returns The resolved view ornull if the view could not be resolved.\nExceptions    Name Description     ArgumentNullException The viewModelType isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/viewmanager/",
	"title": "ViewManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ViewManager : IViewManager  Base types\nIViewManager\nManager that can search for views belonging to a view model.\nFields Properties ActiveViews Gets the active views presently registered.\nMethods GetFirstOrDefaultInstance(Type viewType) Gets the first or default instance of the specified view type.\nParameters    Name Description     viewType Type of the view.    Returns The IViewModel ornull if the view model is not registered.\nExceptions    Name Description     System.ArgumentException The viewType is not of type IView.    GetViewsOfViewModel(IViewModel viewModel) Gets the views of view model.\nParameters    Name Description     viewModel The view model.    Returns An array containing all the views that are linked to the view.\nExceptions    Name Description     ArgumentNullException The viewModel isnull.    RegisterView(IView view) Registers a view so it can be linked to a view model instance.\nParameters    Name Description     view The view to register.    Exceptions    Name Description     ArgumentNullException The view isnull.    UnregisterView(IView view) Unregisters a view so it can no longer be linked to a view model instance.\nParameters    Name Description     view The view to unregister.    Exceptions    Name Description     ArgumentNullException The view isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/viewmodelbase/",
	"title": "ViewModelBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class ViewModelBase : IUniqueIdentifyable, IRelationalViewModel, ValidatableModelBase  Base types ValidatableModelBase\nBase types\nIUniqueIdentifyable,IRelationalViewModel\nView model base for MVVM implementations. This class is based on the ModelBase, and supports all common interfaces used by WPF.\nRemarks This view model base does not add any services.\nFields Constructors Properties HasErrors Gets a value indicating whether this object contains any field or business errors.\nIsClosed Gets a value indicating whether this instance is closed. If a view model is closed, calling CancelViewModelAsync, SaveViewModelAsync or Boolean}) will have no effect.\nParentViewModel Gets the parent view model.\nTitle Gets the title of the view model.\nUniqueIdentifier Gets the unique identifier of the view model.\nViewModelConstructionTime Gets the view model construction time, which is used to get unique instances of view models.\nEvents CanceledAsync Occurrs when the view model is canceled.\nCancelingAsync Occurs when the view model is about to be canceled.\nClosedAsync Occurs when the view model has just been closed.\nClosingAsync Occurs when the view model is being closed.\nCommandExecutedAsync Occurs when a command on the view model has been executed.\nInitializedAsync Occurs when the view model has been initialized.\nNavigationCompleted Occurs when the navigation is completed.\nRemarks This should of course be a cleaner solution, but there is no other way to let a view-model know that navigation has completed. Another option is injection, but this would require every view-model for Windows Phone 7 to accept only the navigation context, which has actually nothing to do with the logic. It is also possible to use the OnNavigationCompleted event.\nSavedAsync Occurs when the view model is saved successfully.\nSavingAsync Occurs when the view model is about to be saved.\nMethods CancelViewModelAsync() Cancels the editing of the data.\nReturns true if successful; otherwisefalse.\nCloseViewModelAsync(Nullable result) Closes this instance. Always called after the CancelAsync of SaveAsync method.\nParameters    Name Description     result The result to pass to the view. This will, for example, be used asDialogResult.    InitializeViewModelAsync() Initializes the view model. Normally the initialization is done in the constructor, but sometimes this must be delayed to a state where the associated UI element (user control, window, \u0026hellip;) is actually loaded. This method is called as soon as the associated UI element is loaded.\nReturns The task.\nRemarks It\u0026rsquo;s not recommended to implement the initialization of properties in this method. The initialization of properties should be done in the constructor. This method should be used to start the retrieval of data from a web service or something similar. During unit tests, it is recommended to manually call this method because there is no external container calling this method.\nSaveViewModelAsync() Saves the data.\nReturns true if successful; otherwisefalse.\nToString() Converts the object to a string.\nReturns System.String.\nUpdateNavigationContext(NavigationContext navigationContext) Updates the navigation context. The navigation context provided by this class is different from the NavigationContext. Therefore, this method updates the navigation context to match it to the values of the navigationContext.\nParameters    Name Description     navigationContext The navigation context.    Validate(bool force) Validates the current object for field and business rule errors.\nParameters    Name Description     force If set totrue, a validation is forced. When the validation is not forced, it means that when the object is already validated, and no properties have been changed, no validation actually occurs since there is no reason for any values to have changed.    Remarks To check whether this object contains any errors, use the ValidationContext property.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/viewmodelclosedeventargs/",
	"title": "ViewModelClosedEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ViewModelClosedEventArgs : EventArgs  Base types EventArgs\nimplementation for the ClosedAsync event.\nConstructors ViewModelClosedEventArgs(IViewModel viewModel, Nullable result) Initializes a new instance of the ViewModelClosedEventArgs class.\nParameters    Name Description     viewModel The view model.   result The result to pass to the view. This will, for example, be used asDialogResult.    Exceptions    Name Description     ArgumentNullException The viewModel isnull.    Properties Result Gets the result to pass to the view. This will, for example, be used asDialogResult\nViewModel Gets the view model.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/viewmodelcommandmanager/",
	"title": "ViewModelCommandManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ViewModelCommandManager : IViewModelCommandManager  Base types\nIViewModelCommandManager\nCommand manager that manages the execution state of all commands of a view model.\nFields Constructors Methods AddHandler(Funchandler) Adds a new handler when a command is executed on the specified view model.\nParameters    Name Description     handler The handler to execute when a command is executed.    Exceptions    Name Description     ArgumentNullException The handler isnull.    Create(IViewModel viewModel) Registers the commands in a specific IViewModel instance. By subscribing to all commands, the CommandExecutedAsync can be intercepted. This method will automatically subscribe to the ClosedAsync event and unsubscribe all commands at that time.\nParameters    Name Description     viewModel The view model.    Exceptions    Name Description     ArgumentNullException The viewModel isnull.    InvalidateCommands(bool force) Invalidates all the commands that implement the ICatelCommand.\nParameters    Name Description     force Iftrue, the commands are re-initialized. The default value isfalse.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/viewmodelextensions/",
	"title": "ViewModelExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ViewModelExtensions  Extension methods for view model classes.\nMethods GetValidationSummary(ViewModelBase viewModel, bool includeChildViewModelValidations) Gets the validation summary for the specified viewModel and, if specified, the children as well. This method does not filter on any tag.\nParameters    Name Description     viewModel The view model.   includeChildViewModelValidations If set totrue, all validation from all child view models should be gathered as well.    Returns The validation summary.\nExceptions    Name Description     ArgumentNullException The viewModel isnull.    GetValidationSummary(ViewModelBase viewModel, bool includeChildViewModelValidations, object tag) Gets the validation summary for the specified viewModel and, if specified, the children as well. This method also filters on the specified tag.\nParameters    Name Description     viewModel The view model.   includeChildViewModelValidations If set totrue, all validation from all child view models should be gathered as well.   tag The tag.    Returns The validation summary.\nExceptions    Name Description     ArgumentNullException The viewModel isnull.    GetViewModelCommandManager(ViewModelBase viewModel) Gets the view model command manager for the specified view model.\nParameters    Name Description     viewModel The view model.    Returns IViewModelCommandManager.\nExceptions    Name Description     ArgumentNullException The viewModel isnull.    IsValidationSummaryOutdated(ViewModelBase viewModel, long lastUpdated, bool includeChildViewModelValidations) Determines whether the specified validation summary is outdated by checking the last modified date/time on the validation context.\nParameters    Name Description     viewModel The view model.   lastUpdated The last updated ticks.   includeChildViewModelValidations If set totrue, all validation from all child view models should be gathered as well.    Returns true if the validation summary is outdated; otherwise,false.\nExceptions    Name Description     ArgumentNullException The viewModel isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/viewmodelfactory/",
	"title": "ViewModelFactory",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ViewModelFactory : IViewModelFactory  Base types\nIViewModelFactory\nDefault implementation of the IViewModelFactory which allows custom instantation of view models. This way, if a view model contains a complex constructor or needs caching, this factory can be used. This default implementation will first try to inject the data context into the view model constructor. If that is not possible, it will try to call the empty or default constructor.\nFields Constructors ViewModelFactory(ITypeFactory typeFactory, IServiceLocator serviceLocator) Initializes a new instance of the ViewModelFactory class.\nParameters    Name Description     typeFactory The type factory.   serviceLocator The service locator.    Exceptions    Name Description     ArgumentNullException The typeFactory isnull.    Methods CanReuseViewModel(Type viewType, Type expectedViewModelType, Type actualViewModelType, IViewModel viewModelAsDataContext) Determines whether the specified view model as data context can be reused and allow the view to set itself as owner of the inherited view model. By default a view model is allowed to be inherited when it is of the same type as the expected view model type.\nParameters    Name Description     viewType Type of the view.   expectedViewModelType The expected view model type according to the view.   actualViewModelType The actual view model type which is the type of the viewModelAsDataContext.   viewModelAsDataContext The view model as data context which must be checked.    Returns true if the specified view model instance ben be reused by the view; otherwise,false.\nCreateViewModel(Type viewModelType, object dataContext, object tag) Creates a new view model.\nParameters    Name Description     viewModelType Type of the view model that needs to be created.   dataContext The data context of the view model.   tag The preferred tag to use when resolving dependencies.    Returns The newly created IViewModel ornull if no view model could be created.\nExceptions    Name Description     ArgumentNullException The viewModelType isnull.   ArgumentException The viewModelType does not implement the IViewModel interface.    IsViewModelWithModelInjection(Type viewModelType) Determines whether the specified view model is a view model with model inject. A view model is considered a model injection if the first parameter of one of the constructors is not registered inside the dependency resolver.\nParameters    Name Description     viewModelType Type of the view model.    Returns true if the view model is a view model with model injection; otherwise,false.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/viewmodellocator/",
	"title": "ViewModelLocator",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ViewModelLocator : IViewModelLocator, LocatorBase  Base types LocatorBase\nBase types\nIViewModelLocator\nResolver that will resolve view model types based on the view type. For example, if a view with the type nameMyAssembly.Views.PersonView is inserted, this could result in the view model typeMyAssembly.ViewModels.PersonViewModel.\nMethods IsCompatible(Type viewType, Type viewModelType) Determines whether the specified view type is compatible with the view model. A view is compatible if it\u0026rsquo;s either resolved via naming conventions or registered manually.\nParameters    Name Description     viewType Type of the view.   viewModelType Type of the view model.    Returns true if the view is compatible with the view model; otherwise,false.\nRegister(Type viewType, Type viewModelType) Registers the specified view model in the local cache. This cache will also be used by the ResolveViewModel(Type) method.\nParameters    Name Description     viewType Type of the view.   viewModelType Type of the view model.    Exceptions    Name Description     ArgumentNullException The viewType isnull.    ResolveViewModel(Type viewType) Resolves a view model type by the view and the registered NamingConventions.\nParameters    Name Description     viewType Type of the view to resolve the view model for.    Returns The resolved view model ornull if the view model could not be resolved.\nExceptions    Name Description     ArgumentNullException The viewType isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/viewmodelmanager/",
	"title": "ViewModelManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ViewModelManager : IViewModelManager  Base types\nIViewModelManager\nManager for view models. Thanks to this manager, it is possible to subscribe to other view models and be able to respond correctly to property changes in other views.\nFields Constructors ViewModelManager() Initializes a new instance of the ViewModelManager class.\nRemarks The constructor is private because this is a singleton class.\nProperties ActiveViewModels Gets the active view models presently registered.\nViewModelCount Gets the view model count.\nMethods GetChildViewModels(IViewModel parentViewModel) Gets the child view models of the specified view model.\nParameters    Name Description     parentViewModel The parent view model.    Returns The child view models.\nGetChildViewModels(int parentUniqueIdentifier) Gets the child view models of the specified view model unique identifier.\nParameters    Name Description     parentUniqueIdentifier The parent unique identifier.    Returns The child view models.\nGetFirstOrDefaultInstance(Type viewModelType) Gets the first or default instance of the specified view model.\nParameters    Name Description     viewModelType Type of the view mode.    Returns The IViewModel ornull if the view model is not registered.\nExceptions    Name Description     System.ArgumentException The viewModelType is not of type IViewModel.    GetFirstOrDefaultInstance() Gets the first or default instance of the specified view model.\nType Parameters TViewModel The type of the view model.\nReturns The IViewModel ornull if the view model is not registered.\nGetViewModel(int uniqueIdentifier) Gets the view model by its unique identifier.\nParameters    Name Description     uniqueIdentifier The unique identifier.    Returns The IViewModel ornull if the view model is not registered.\nGetViewModelsOfModel(object model) Gets the view models of a model.\nParameters    Name Description     model The model to find the linked view models for.    Returns An array containing all the view models.\nExceptions    Name Description     ArgumentNullException The model isnull.    RegisterModel(IViewModel viewModel, object model) Registers the model of a view model.\nParameters    Name Description     viewModel The view model.   model The model.    Exceptions    Name Description     ArgumentNullException The viewModel isnull.    RegisterViewModelInstance(IViewModel viewModel) Registers a view model instance with the manager. All view models must register themselves to the manager.\nParameters    Name Description     viewModel The view model to register.    Exceptions    Name Description     ArgumentNullException The viewModel isnull.    UnregisterAllModels(IViewModel viewModel) Unregisters all models of a view model.\nParameters    Name Description     viewModel The view model.    Exceptions    Name Description     ArgumentNullException The viewModel isnull.    UnregisterModel(IViewModel viewModel, object model) Unregisters the model of a view model.\nParameters    Name Description     viewModel The view model.   model The model.    Exceptions    Name Description     ArgumentNullException The viewModel isnull.    UnregisterViewModelInstance(IViewModel viewModel) Unregisters a view model instance from the manager. All view models must unregister themselves from the manager.\nParameters    Name Description     viewModel The view model to unregister.    Exceptions    Name Description     ArgumentNullException The viewModel isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/viewmodelmanagerextensions/",
	"title": "ViewModelManagerExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ViewModelManagerExtensions  Extensions for the IViewModelManager interface.\nMethods CancelAndCloseViewModelsAsync(IViewModelManager viewModelManager, Funcpredicate) Closes all view models that are currently being managed by the ViewModelManager which match the predicate.\nParameters    Name Description     viewModelManager The view model manager.   predicate The predicate.    Exceptions    Name Description     ArgumentNullException The viewModelManager isnull.    SaveAndCloseViewModelsAsync(IViewModelManager viewModelManager, Funcpredicate) Closes all view models that are currently being managed by the ViewModelManager which match the predicate.\nParameters    Name Description     viewModelManager The view model manager.   predicate The predicate.    Exceptions    Name Description     ArgumentNullException The viewModelManager isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/viewmodelnotregisteredexception/",
	"title": "ViewModelNotRegisteredException",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ViewModelNotRegisteredException : Exception  Base types Exception\nException in case a view model is not registered, but still being used.\nConstructors ViewModelNotRegisteredException(Type viewModelType) Initializes a new instance of the ViewModelNotRegisteredException class.\nParameters    Name Description     viewModelType Type of the view model.    Properties ViewModelType Gets the type of the view model.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/viewmodelservicebase/",
	"title": "ViewModelServiceBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class ViewModelServiceBase : IViewModelService, ServiceBase  Base types ServiceBase\nBase types\nIViewModelService\nBase class for all view model services.\nProperties "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/viewmodelservicehelper/",
	"title": "ViewModelServiceHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ViewModelServiceHelper  Helper class that registers all default services to a IServiceLocator.\nFields Methods RegisterDefaultViewModelServices(IServiceLocator serviceLocator) Registers the default view model services.\nParameters    Name Description     serviceLocator The service locator to add the services to.    Exceptions    Name Description     ArgumentNullException The serviceLocator isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/viewmodeltomodelattribute/",
	"title": "ViewModelToModelAttribute",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ViewModelToModelAttribute : Attribute  Base types Attribute\nAttribute to link a property in a view model to a model.\nConstructors ViewModelToModelAttribute(string model, string property) Initializes a new instance of the ViewModelToModelAttribute class.\nParameters    Name Description     model The property name that holds the model object.   property The property of the model object that should be linked to the ViewModelBase property.    Exceptions    Name Description     ArgumentNullException The model isnull.    Properties AdditionalConstructorArgs Gets or sets the additional constructor args. This args would be passed to constructor.\nAdditionalPropertiesToWatch Gets or sets the additional properties to triger converter. This args would be passed to constructor.\nConverterType Gets or sets the type of the converter. The default value is TwoWay.\nMode Gets or sets the mode of the mapping. The default value is TwoWay.\nModel Gets the property name that holds the model object. Must be a property on the ViewModelBase implementation, but is allowed to be private.\nProperty Gets the property of the model object that should be linked to the ViewModelBase property.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/viewmodeltomodelconverterbase/",
	"title": "ViewModelToModelConverterBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class ViewModelToModelConverterBase : IViewModelToModelConverter  Base types\nIViewModelToModelConverter\nBase class for view model to model converters.\nConstructors Properties PropertyNames Gets the property names.\nMethods CanConvert(Type[] types, Type outType, Type viewModelType) Determines whether this instance can convert the specified types.\nParameters    Name Description     types The types.   outType Type of the out.   viewModelType Owner VM type    Returns true if this instance can convert the specified types; otherwise,false.\nCanConvertBack(Type inType, Type[] outTypes, Type viewModelType) Determines whether this instance can convert back the specified in type.\nParameters    Name Description     inType Type of the in.   outTypes The out types.   viewModelType Type of the view model.    Returns true if this instance can convert back the specified in type; otherwise,false.\nConvert(object[] values, IViewModel viewModel) Converts the specified values.\nParameters    Name Description     values The values.   viewModel Owner VM    Returns System.Object.\nConvertBack(object value, IViewModel viewModel) Converts the specified values back.\nParameters    Name Description     value Property value   viewModel Owner VM    Returns System.Object[].\nShouldConvert(string propertyName) Determines whether the property name should be converted.\nParameters    Name Description     propertyName The name of changed property    Returns true if the property name should be converted,false otherwise.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/viewmodeltomodelmapping/",
	"title": "ViewModelToModelMapping",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ViewModelToModelMapping  Model value class to store the mapping of the View Model to a Model mapping.\nFields Constructors ViewModelToModelMapping(string viewModelProperty, ViewModelToModelAttribute attribute) Initializes a new instance of the ViewModelToModelMapping class.\nParameters    Name Description     viewModelProperty The view model property.   attribute The ViewModelToModelAttribute that was used to define the mapping.    Exceptions    Name Description     ArgumentException The viewModelProperty isnull or whitespace.    ViewModelToModelMapping(string viewModelProperty, string modelProperty, string valueProperty, ViewModelToModelMode mode, Type converterType, object[] additionalConstructorArgs, string[] additionalPropertiesToWatch) Initializes a new instance of the ViewModelToModelMapping class.\nParameters    Name Description     viewModelProperty The view model property.   modelProperty The model property.   valueProperty The value property.   mode The mode.   converterType Converter type   additionalConstructorArgs Constructor args   additionalPropertiesToWatch     Exceptions    Name Description     ArgumentException The viewModelProperty isnull or whitespace.    Properties Converter Gets the converter. The default value is TwoWay.\nConverterType Gets the type of the converter. The default value is TwoWay.\nIgnoredProperties Gets the ignored properties.\nMode Gets or sets the mode.\nModelProperty Gets the property name of the model.\nValueProperties Gets the property property name of the property in the model.\nViewModelProperty Gets the property name of the mapping of the view model.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/viewmodeltomodelmode/",
	"title": "ViewModelToModelMode",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum ViewModelToModelMode : Enum  Base types Enum\nSpecifies the different mapping modes available for the ViewModelToModelAttribute.\nFields Explicit 3\nAutomatically maps properties from the model to the view model as soon as the model is initialized. As soon as a property value changes in the model, the view model value is updated instantly. However, the mapping from the view model to model is explicit.\nOneWay 1\nAutomatically maps the property from the model to the view model if the model changes the property value. This mode does not map any values from the view model to the model, thus can also be seen as read-only mode.\nOneWayToSource 2\nAutomatically maps the property from the view model to the model if the view model changes the property value. This mode does not map any values from the model to the view model, but still keeps track of all validation that occurs in the model.\nTwoWay 0\nAutomatically maps the property from view model to model and back as soon as either one changes the property value.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/viewmodeltoviewconverter/",
	"title": "ViewModelToViewConverter",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class ViewModelToViewConverter : ValueConverterBase  Base types ValueConverterBase\nConverts a view model to a view. This converter is very useful to dynamically load view content.\nFields Constructors Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/viewmodelwrapper/",
	"title": "ViewModelWrapper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ViewModelWrapper : IViewModelWrapper  Base types\nIViewModelWrapper\nView model wrapper class.\nFields Constructors ViewModelWrapper(object contentToWrap) Initializes a new instance of the ViewModelWrapper class.\nParameters    Name Description     contentToWrap The view model wrapper object, such as a grid.    Exceptions    Name Description     ArgumentNullException The contentToWrap isnull.    Methods UpdateViewModel(IViewModel viewModel) Updates the view model.\nParameters    Name Description     viewModel The view model.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/viewmodelwrapperservice/",
	"title": "ViewModelWrapperService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ViewModelWrapperService : IViewModelWrapperService, ViewModelWrapperServiceBase  Base types ViewModelWrapperServiceBase\nBase types\nIViewModelWrapperService\nThe view model wrapper service which is responsible of ensuring the view model container layer.\nFields Methods IsWrapped(IView view) Determines whether the specified view is already wrapped.\nParameters    Name Description     view The view.    Returns true if the specified view is already wrapped; otherwise,false.\nExceptions    Name Description     ArgumentNullException The view isnull.    Wrap(IView view, object viewModelSource, WrapOptions wrapOptions) Wraps the specified view.\nParameters    Name Description     view The view.   viewModelSource The view model source containing theViewModel property.   wrapOptions The wrap options.    Returns The IViewModelWrapper.\nExceptions    Name Description     ArgumentNullException The view isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/viewmodelwrapperservicebase/",
	"title": "ViewModelWrapperServiceBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class ViewModelWrapperServiceBase  Abstract class to enable partial abstract methods.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/viewpropertyselector/",
	"title": "ViewPropertySelector",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ViewPropertySelector : IViewPropertySelector  Base types\nIViewPropertySelector\nSelector class to keep the view property selections to a minimum. Catel uses a special wrapping technology to wrap bindings to view properties to be able to add change notifications for all target platforms. Though this technology works great, it might have impact on performance and this is not always necessary. By customizing the IViewPropertySelector, developers can tweak the interesting view properties per type.\nFields Methods AddPropertyToSubscribe(string propertyName, Type targetViewType) Adds the property to subscribe to.\nParameters    Name Description     propertyName Name of the property.   targetViewType Type of the target view. Ifnull, all target views will subscribe to this property.    GetViewPropertiesToSubscribeTo(Type targetViewType) Gets the view properties to subscribe to for the specified target view type. If the MustSubscribeToAllViewProperties(Type) returnstrue for the specified target view type, this method will not be called and can return an empty list.\nParameters    Name Description     targetViewType Type of the target view.    Returns The list of view properties to subscribe to.\nMustSubscribeToAllViewProperties(Type targetViewType) Determines whether all view properties must be subscribed for this type.\nParameters    Name Description     targetViewType Type of the target view.    Returns true if all view properties must be subscribed to,false otherwise.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/viewstack/",
	"title": "ViewStack",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ViewStack  Class containing a view stack and whether the stack is currently loaded.\nFields Constructors ViewStack(IView view, bool isViewLoaded) Initializes a new instance of the ViewStack class.\nParameters    Name Description     view The view.   isViewLoaded if set totrue, the view is loaded.    Properties IsOutdated Gets or sets a value indicating whether this view stack is outdated, meaning it can be removed.\nIsViewStackLoaded Gets a value indicating whether this view stack is loaded.\nEvents ViewLoaded Occurs when the current view has been loaded.\nViewStackLoaded Occurs when one of the child views is loaded.\nViewStackUnloaded Occurs when one of the child views is loaded.\nViewUnloaded Occurs when the current view has been unloaded.\nMethods AddChild(IView view, ViewStack parentViewStack) Adds a new child to the stack.\nParameters    Name Description     view The view.   parentViewStack The parent view stack.    Returns true if added,false otherwise.\nAddChild(ViewStack viewStack, ViewStack parentViewStack) Adds a new child to the stack.\nParameters    Name Description     viewStack The view stack.   parentViewStack The parent view stack.    Returns true if added,false otherwise.\nCheckForOutdatedChildren() Checks for outdated children and removes them if necessary.\nContainsView(IView view) Determines whether this view stack contains the specified view.\nParameters    Name Description     view The view.    Returns true if this view stack contains the specified view; otherwise,false.\nDispose() Disposes this instance. Not using to prevent other auto systems from kicking in.\nMarkAsLoaded() Marks the view stack as loaded.\nMarkAsUnloaded() Marks the view stack as unloaded.\nNotifyThatParentIsReadyToAcceptLoadedMessages() Notifies the that parent is ready to accept loaded messages.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/viewstackparteventargs/",
	"title": "ViewStackPartEventArgs",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ViewStackPartEventArgs : EventArgs  Base types EventArgs\nEvent args when a part of a view stack is raises an event.\nConstructors ViewStackPartEventArgs(IView view) Initializes a new instance of the ViewStackPartEventArgs class.\nParameters    Name Description     view The view.    Properties View Gets the view that has been loaded.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/viewtoviewmodelattribute/",
	"title": "ViewToViewModelAttribute",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class ViewToViewModelAttribute : Attribute  Base types Attribute\nA mapper attribute to map a IView (such as the UserControl or the DataWindow) property to a view model property. This class is very useful when creating custom user controls that need more parameterized settings than just theDataContext property.\nConstructors ViewToViewModelAttribute(string viewModelPropertyName) Initializes a new instance of the ViewToViewModelAttribute class.\nParameters    Name Description     viewModelPropertyName Name of the view model property.    Properties MappingType Gets or sets the type of the mapping.\nViewModelPropertyName Gets or sets the view model property name.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/viewtoviewmodelmappingtype/",
	"title": "ViewToViewModelMappingType",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum ViewToViewModelMappingType : Enum  Base types Enum\nMapping types for the ViewToViewModelAttribute.\nFields TwoWayDoNothing 0\nTwo way, which means that either the view or the view model will update the values of the other party as soon as they are updated. When this value is used, nothing happens when the view model of the view changes. This way, it might be possible that the values of the view and the view model are different. The first one to update next will update the other.\nTwoWayViewModelWins 2\nTwo way, which means that either the view or the view model will update the values of the other party as soon as they are updated. When this value is used, the value of the view model is used when the view model of the view is changed, and is directly transferred to the view value.\nTwoWayViewWins 1\nTwo way, which means that either the view or the view model will update the values of the other party as soon as they are updated. When this value is used, the value of the view is used when the view model of the view is changed, and is directly transferred to the view model value.\nViewModelToView 4\nThe mapping is from the view model to the view only.\nViewToViewModel 3\nThe mapping is from the view to the view model only.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/system/windows/visibility/",
	"title": "Visibility",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace System.Windows   Available on Xamarin - Android    public enum Visibility : Enum  Base types Enum\nSpecifies the display state of an element.\nFields Collapsed Completely hidden, as if the view had not been added.\nHidden Not displayed, but taken into account during layout (space is left for it).\nVisible Visible on screen; the default value.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/converters/visibilityconverterbase/",
	"title": "VisibilityConverterBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Converters   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - Android, Xamarin - iOS    public abstract class VisibilityConverterBase : ValueConverterBase  Base types ValueConverterBase\nA base class that makes it easier to create values to visibility converters.\nConstructors Properties NotVisibleVisibility Gets the state when not visibible should be returned.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/controls/warninganderrorvalidator/",
	"title": "WarningAndErrorValidator",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Controls   Available on .NET Framework 4.5, .NET Framework 4.6, Xamarin - iOS    public class WarningAndErrorValidator : IUniqueIdentifyable, Control  Base types Control\nBase types\nIUniqueIdentifyable\nControl for adding business rule validation to the form. Assign a value or binding to source for the business object or collection of business objects to validate.\nFields AutomaticallyRegisterToInfoBarMessageControlProperty DependencyProperty definition as the backing store for AutomaticallyRegisterToInfoBarMessageControl.\nSourceProperty DependencyProperty definition as the backing store for Source.\nConstructors WarningAndErrorValidator() Initializes a new instance of the WarningAndErrorValidator class.\nProperties AutomaticallyRegisterToInfoBarMessageControl Gets or sets a value indicating whether this warning and error validator should automatically register to the first InfoBarMessageControl it can find.\nSource Source for validation. This can be an business object which implements and or an containing bussiness objects. In case of a then the content should be static or the interface.\nRemarks Wrapper for the Source dependency property.\nUniqueIdentifier Gets the unique identifier.\nEvents Validation Occurs when validation is triggered.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/weakaction/",
	"title": "WeakAction",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class WeakAction\u0026lt;TParameter\u0026gt; : IWeakAction\u0026lt;TParameter\u0026gt;, WeakActionBase  Base types WeakActionBase\nBase types\nIWeakAction\nA generic weak action which allows the invocation of a command in a weak manner. This way, actions will not cause memory leaks.\nFields Constructors WeakAction(object target, Action action) Initializes a new instance of the WeakAction class.\nParameters    Name Description     target The target.   action The action.    Exceptions    Name Description     ArgumentNullException The action isnull.   NotSupportedException The action is an anonymous delegate.    Properties Action Gets the actual delegate to invoke.\nRemarks This property is only introduced to allow action comparison on WinRT. Do not try to use this method by yourself.\nMethodName Gets the name of the method that should be executed.\nMethods Execute(TParameter parameter) Executes the action. This only happens if the action\u0026rsquo;s target is still alive.\nParameters    Name Description     parameter The parameter.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/weakactionbase/",
	"title": "WeakActionBase",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public abstract class WeakActionBase : IWeakReference  Base types\nIWeakReference\nBase class for weak actions that contain weak targets.\nFields Constructors Properties IsTargetAlive Gets a value indicating whether the event target has not yet been garbage collected.\nRemarks In case of static event handlers, this property always returnsfalse.\nTarget Gets the target ornull if the target is garbage collected.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/weakeventlistener/",
	"title": "WeakEventListener",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class WeakEventListener  Convenience implementation of the Missing:  that automatically determines the type of the event source, the event target and the event args.\nRemarks This class can only be used for non-static event sources and targets. If static events or listeners are required, use the Missing:  class.\nFields Methods SubscribeToWeakCollectionChangedEvent(object target, object source, NotifyCollectionChangedEventHandler handler, bool throwWhenSubscriptionFails, string eventName) Subscribes to a weak event by using one single method. This method also takes care of automatic unsubscription of the event. This method subscribes to the which does not follow theEventHandler{TEventArgs} convention.\nParameters    Name Description     target Instance subscribing to the event, should benull for static event handlers.   source The source of the event, should benull for static events.   handler The handler to execute when the event occurs.   throwWhenSubscriptionFails if set totrue, throw an exception when subscription fails (does not apply to argument checks).   eventName Name of the event.    Returns The created event listener.\nExceptions    Name Description     ArgumentNullException The target isnull.   ArgumentException The eventName isnull or whitespace.   InvalidOperationException The source and target are bothnull.   NotSupportedException The handler is an anonymous delegate.    Remarks This method can only be used for non-static event sources and targets. If static events or listeners are required, use the Missing:  class.\nSubscribeToWeakEvent(object target, object source, string eventName, Action handler, bool throwWhenSubscriptionFails) Subscribes to a weak event by using one single method. This method also takes care of automatic unsubscription of the event.\nParameters    Name Description     target Instance subscribing to the event, should benull for static event handlers.   source The source of the event, should benull for static events.   eventName Name of the event.   handler The handler to execute when the event occurs.   throwWhenSubscriptionFails if set totrue, throw an exception when subscription fails (does not apply to argument checks).    Returns The created event listener.\nExceptions    Name Description     ArgumentNullException The target isnull.   ArgumentException The eventName isnull or whitespace.   InvalidOperationException The source and target are bothnull.   NotSupportedException The handler is not of type, or.    Remarks This method can only be used for non-static event sources and targets. If static events or listeners are required, use the Missing:  class.\nSubscribeToWeakEvent(object target, object source, string eventName, Delegate handler, bool throwWhenSubscriptionFails) Subscribes to a weak event by using one single method. This method also takes care of automatic unsubscription of the event.\nParameters    Name Description     target Instance subscribing to the event, should benull for static event handlers.   source The source of the event, should benull for static events.   eventName Name of the event.   handler The handler to execute when the event occurs.   throwWhenSubscriptionFails if set totrue, throw an exception when subscription fails (does not apply to argument checks).    Returns The created event listener.\nExceptions    Name Description     ArgumentNullException The target isnull.   ArgumentException The eventName isnull or whitespace.   InvalidOperationException The source and target are bothnull.   NotSupportedException The handler is not of type, or.    Remarks This method can only be used for non-static event sources and targets. If static events or listeners are required, use the Missing:  class.\nSubscribeToWeakGenericEvent(object target, object source, string eventName, EventHandler handler, bool throwWhenSubscriptionFails) Subscribes to a weak event by using one single method. This method also takes care of automatic unsubscription of the event.\nType Parameters TEventArgs The type of the event args.\nParameters    Name Description     target Instance subscribing to the event, should benull for static event handlers.   source The source of the event, should benull for static events.   eventName Name of the event.   handler The handler to execute when the event occurs.   throwWhenSubscriptionFails if set totrue, throw an exception when subscription fails (does not apply to argument checks).    Returns The created event listener.\nExceptions    Name Description     ArgumentException The eventName isnull or whitespace.   ArgumentNullException The handler isnull.   InvalidOperationException The source and target are bothnull.   NotSupportedException The handler is not of type, or.    SubscribeToWeakPropertyChangedEvent(object target, object source, PropertyChangedEventHandler handler, bool throwWhenSubscriptionFails, string eventName) Subscribes to a weak event by using one single method. This method also takes care of automatic unsubscription of the event. This method subscribes to the which does not follow theEventHandler{TEventArgs} convention.\nParameters    Name Description     target Instance subscribing to the event, should benull for static event handlers.   source The source of the event, should benull for static events.   eventName Name of the event.   handler The handler to execute when the event occurs.   throwWhenSubscriptionFails if set totrue, throw an exception when subscription fails (does not apply to argument checks).    Returns The created event listener.\nExceptions    Name Description     ArgumentNullException The target isnull.   ArgumentException The eventName isnull or whitespace.   InvalidOperationException The source and target are bothnull.   NotSupportedException The handler is an anonymous delegate.    Remarks This method can only be used for non-static event sources and targets. If static events or listeners are required, use the Missing:  class.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/weakfunc/",
	"title": "WeakFunc",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class WeakFunc\u0026lt;TParameter, TResult\u0026gt; : IWeakFunc\u0026lt;TParameter, TResult\u0026gt;, WeakActionBase  Base types WeakActionBase\nBase types\nIWeakFunc\nA generic weak func which allows the invocation of a command in a weak manner. This way, funcs will not cause memory leaks.\nFields Constructors WeakFunc(object target, Funcfunc) Initializes a new instance of the WeakAction class.\nParameters    Name Description     target The target.   func The function.    Exceptions    Name Description     ArgumentNullException The func isnull.   NotSupportedException The func is an anonymous delegate.    Properties Action Gets the actual delegate to invoke.\nRemarks This property is only introduced to allow action comparison on WinRT. Do not try to use this method by yourself.\nMethodName Gets the name of the method that should be executed.\nMethods Execute(TParameter parameter, TResult result) Executes the action. This only happens if the action\u0026rsquo;s target is still alive.\nParameters    Name Description     parameter The parameter.   result The result    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/views/weakviewinfo/",
	"title": "WeakViewInfo",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Views   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class WeakViewInfo  Class containing weak events for a IView. This way it is safe to subscribe to events of a IView without causing memory leaks.\nFields Constructors WeakViewInfo(IView view, bool isViewLoaded) Initializes a new instance of the WeakViewInfo class.\nParameters    Name Description     view The view.   isViewLoaded if set totrue, the view is already loaded.    Exceptions    Name Description     ArgumentNullException The view isnull.    WeakViewInfo(IViewLoadState viewLoadState, bool isViewLoaded) Initializes a new instance of the WeakViewInfo class.\nParameters    Name Description     viewLoadState The view load state.   isViewLoaded if set totrue, the view is already loaded.    Exceptions    Name Description     ArgumentNullException The viewLoadState isnull.    Properties IsAlive Gets a value indicating whether the link to the IView is alive.\nIsLoaded Gets a value indicating whether the View is loaded.\nView Gets the view.\nEvents Loaded Occurs when the view is loaded.\nUnloaded Occurs when the view is unloaded.\nMethods OnViewLoaded(object sender, EventArgs e) Called when the view is loaded.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    OnViewLoadStateLoaded(object sender, EventArgs e) Called when the view is loaded.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    OnViewLoadStateUnloaded(object sender, EventArgs e) Called when the view is unloaded.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    OnViewUnloaded(object sender, EventArgs e) Called when the view is unloaded.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/introduction/why-catel/",
	"title": "Why Catel",
	"tags": [],
	"description": "",
	"content": "We care a lot about the freedom you need as a software developer. Most frameworks require a developer to learn its conventions, or use the whole framework or nothing at all. When we, the developers of Catel, use an external framework, we choose that framework for a specific reason, and don’t want to be bothered by all the other superb stuff it has to offer (maybe later, but not now).\nDuring the development of Catel, we tried to maintain this freedom aspect which is very important to us. Therefore, all functionality is loosely coupled. Sounds great, but everything is called loosely coupled nowadays. Catel contains a lot of different aspects, such as logging, diagnostics, reflection, MVVM, user controls, windows, etc. All these aspects are complementary to each other, but the great thing about Catel is that you decide whether to use just one, some, or maybe all aspects.\nAs an example: you have a legacy application and want to use the DataWindow to write simple entry windows, but you are not ready for MVVM yet. No problem, the DataWindow is complementary to MVVM, but does not require it. Therefore, you have all the freedom to use just what you need, whenever you need it.\nMost frameworks require a bootstrapper that completely decides how your application structure should look like. For example, your Views must have this name, your controls must have that name. Again, in Catel, we wanted to give you the freedom you would expect from a framework.\nThe great thing about this freedom is that the different aspects of Catel can be used side-by-side with other frameworks, so you as a developer can use the best framework for every aspect in your application.\nCatel offers a solution in the following fields:\n Data handling MVVM And much more which you will find out during the use of Catel!  "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/window/",
	"title": "Window",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows   Available on .NET Framework 4.5, .NET Framework 4.6    public class Window : DataWindow  Base types DataWindow\nEasy implementation of the DataWindow that adds some features to make the data window behave as a normal window.\nConstructors Window() Initializes a new instance of the Window class.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/interactivity/windoweventtocommand/",
	"title": "WindowEventToCommand",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows.Interactivity   Available on .NET Framework 4.5, .NET Framework 4.6    public class WindowEventToCommand : CommandBehaviorBase\u0026lt;FrameworkElement\u0026gt;  Base types CommandBehaviorBase\nBehavior class that catches an event from the root window element. The event is forwarded to the DataContext of the it is attached to.\nFields Constructors WindowEventToCommand() Initializes a new instance of the WindowEventToCommand class.\nWindowEventToCommand(Action action) Initializes a new instance of the WindowEventToCommand class.\nParameters    Name Description     action The action to execute on double click. This is very useful when the behavior is added via code and an action must be invoked instead of a command.    Properties EventName Gets or sets the name of the event to subscribe to.\nMethods OnEventOccurred() Called when the event occurs.\nRemarks This method is public to allow the WeakEventListener to subscribe.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/windowextensions/",
	"title": "WindowExtensions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows   Available on .NET Framework 4.5, .NET Framework 4.6    public static class WindowExtensions  Extensions for.\nFields Methods ApplyIconFromApplication(Window window) Applies the icon from the entry assembly (the application) to the window.\nParameters    Name Description     window The window.    BringWindowToTop(Window window) Brings to specified window to top.\nParameters    Name Description     window The window to bring to top.    Exceptions    Name Description     ArgumentNullException The window isnull.    GetWindowHandle(Window window) Gets the window handle of the specified window.\nParameters    Name Description     window The window.    Returns IntPtr.\nRemoveIcon(Window window) Removes the icon from the window.\nParameters    Name Description     window The window.    SetOwnerWindow(Window window, IntPtr owner, bool forceNewOwner) Sets the owner window of a specific window via the window handle.\nParameters    Name Description     window Reference to the current window.   owner New owner window.   forceNewOwner If true, the new owner will be forced. Otherwise, if the window currently has an owner, that owner will be respected (and thus not changed).    SetOwnerWindow(Window window, bool forceNewOwner, bool focusFirstControl) Sets the owner window to the main window of the current process.\nParameters    Name Description     window Reference to the current window.   forceNewOwner If true, the new owner will be forced. Otherwise, if the window currently has an owner, that owner will be respected (and thus not changed).   focusFirstControl If true, the first control will automatically be focused.    SetOwnerWindow(Window window, Window owner, bool forceNewOwner) Sets the owner window of a specific window via the Window class.\nParameters    Name Description     window Reference to the current window.   owner New owner window.   forceNewOwner If true, the new owner will be forced. Otherwise, if the window currently has an owner, that owner will be respected (and thus not changed).    SetOwnerWindowAndFocus(Window window, IntPtr owner, bool forceNewOwner) Sets the owner window of a specific window via the window handle, but also sets the focus on the first control.\nParameters    Name Description     window Reference to the current window.   owner New owner window.   forceNewOwner If true, the new owner will be forced. Otherwise, if the window currently has an owner, that owner will be respected (and thus not changed).    SetOwnerWindowAndFocus(Window window, bool forceNewOwner, bool focusFirstControl) Sets the owner window to the main window of the current process, but also sets the focus on the first control.\nParameters    Name Description     window Reference to the current window.   forceNewOwner If true, the new owner will be forced. Otherwise, if the window currently has an owner, that owner will be respected (and thus not changed).   focusFirstControl     SetOwnerWindowAndFocus(Window window, Window owner, bool forceNewOwner) Sets the owner window of a specific window via the Window class, but also sets the focus on the first control.\nParameters    Name Description     window Reference to the current window.   owner New owner window.   forceNewOwner If true, the new owner will be forced. Otherwise, if the window currently has an owner, that owner will be respected (and thus not changed).    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/providers/windowlogic/",
	"title": "WindowLogic",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM.Providers   Available on .NET Framework 4.5, .NET Framework 4.6    public class WindowLogic : LogicBase  Base types LogicBase\nMVVM Provider behavior implementation for a window.\nFields Constructors WindowLogic(IView targetWindow, Type viewModelType, IViewModel viewModel) Initializes a new instance of the WindowLogic class.\nParameters    Name Description     targetWindow The window this provider should take care of.   viewModelType Type of the view model.   viewModel The view model to inject.    Exceptions    Name Description     ArgumentNullException The targetWindow isnull.    Properties ForceCloseAfterSettingDialogResult Gets or sets a value indicating whether the logic should callClose immediately when theDialogResult is set. By default, theWindow class correctly closes the window when theDialogResult is set, but not all implementations work like this. The default value is false.\nMethods OnTargetViewUnloadedAsync(object sender, EventArgs e) Called when TargetView has just been unloaded.\nParameters    Name Description     sender The sender.   e The instance containing the event data.    OnTargetWindowClosed(object sender, EventArgs e) Called when the TargetWindow has been closed.\nRemarks Public to allow the generated ILGenerator to access this method.\nOnViewModelClosedAsync(object sender, ViewModelClosedEventArgs e) Called when the ViewModel is closed.\nParameters    Name Description     sender The sender.   e The ViewModelClosedEventArgs instance containing the event data.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/windownotregisteredexception/",
	"title": "WindowNotRegisteredException",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class WindowNotRegisteredException : Exception  Base types Exception\nException in case a window not registered, but still being used.\nConstructors WindowNotRegisteredException(string name) Initializes a new instance of the WindowNotRegisteredException class.\nParameters    Name Description     name The name of the window.    Properties Name Gets the name of the window.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/wrapcontrolhelper/",
	"title": "WrapControlHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows   Available on .NET Framework 4.5, .NET Framework 4.6    public static class WrapControlHelper  An helper to wrap controls and windows with several controls, such as the InfoBarMessageControl.\nFields ButtonsWrapPanelName The name of the wrap panel that contains the buttons.\nDefaultCancelButtonName The name of the default cancel button.\nDefaultOkButtonName The name of the default ok button.\nInfoBarMessageControlName The name of the info bar message control.\nInternalGridName The name of the internal grid. Retrieve the grid with this name to add custom controls to the inner grid.\nMainContentHolderName The name of the main content holder, used to prevent that an element is wrapped multiple times.\nWarningAndErrorValidatorName The name of the warning and error validator control.\nMethods CanBeWrapped(FrameworkElement frameworkElement) Determines whether the specified can be safely wrapped.\nParameters    Name Description     frameworkElement The framework element.    Returns true if the specified can be safely wrapped; otherwise,false.\nGetWrappedElement(Grid wrappedGrid, WrapOptions wrapOption) Gets a wrapped element mapped by the wrapOption.\nParameters    Name Description     wrappedGrid The wrapped grid.   wrapOption The wrap option that is used, which will be mapped to the control. The value All is not allowed and will throw an exception.    Returns ornull if the element is not found.\nExceptions    Name Description     ArgumentNullException The wrappedGrid isnull.   ArgumentOutOfRangeException The wrapOption is All.    GetWrappedElement(Grid wrappedGrid, string controlName) Gets a wrapped element by name.\nParameters    Name Description     wrappedGrid The wrapped grid.   controlName Name of the control.    Returns ornull if the element is not found.\nExceptions    Name Description     ArgumentNullException The wrappedGrid isnull.   ArgumentOutOfRangeException The controlName is not a valid control name.    GetWrappedElement(Grid wrappedGrid, WrapOptions wrapOption) Gets a wrapped element mapped by the wrapOption.\nType Parameters T Type of the control to return.\nParameters    Name Description     wrappedGrid The wrapped grid.   wrapOption The wrap option that is used, which will be mapped to the control. The value All is not allowed and will throw an exception.    Returns ornull if the element is not found.\nExceptions    Name Description     ArgumentNullException The wrappedGrid isnull.   ArgumentOutOfRangeException The wrapOption is All.    GetWrappedElement(Grid wrappedGrid, string controlName) Gets a wrapped element by name.\nType Parameters T Type of the control to return.\nParameters    Name Description     wrappedGrid The wrapped grid.   controlName Name of the control.    Returns ornull if the element is not found.\nExceptions    Name Description     ArgumentNullException The wrappedGrid isnull.   ArgumentOutOfRangeException The controlName is not a valid control name.    Wrap(FrameworkElement frameworkElement, WrapOptions wrapOptions, DataWindowButton[] buttons, ContentControl parentContentControl) Wraps the specified framework element.\nParameters    Name Description     frameworkElement The framework element.   wrapOptions The wrap options.   buttons The buttons to add.   parentContentControl The parent content control.    Returns that contains the wrapped content.\nRemarks The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a framework element can be wrapped by using the CanBeWrapped(FrameworkElement) method. This method will automatically handle the disconnecting of the framework element from the parent is the parentContentControl is passed.\nWrap(FrameworkElement frameworkElement, WrapOptions wrapOptions, ContentControl parentContentControl) Wraps the specified framework element without any buttons.\nParameters    Name Description     frameworkElement The framework element.   wrapOptions The wrap options.   parentContentControl The parent content control.    Returns that contains the wrapped content.\nRemarks The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a framework element can be wrapped by using the CanBeWrapped(FrameworkElement) method. This method will automatically handle the disconnecting of the framework element from the parent is the parentContentControl is passed.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/wrapcontrolservice/",
	"title": "WrapControlService",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6    public class WrapControlService : IWrapControlService  Base types\nIWrapControlService\nAn helper to wrap controls and windows with several controls, such as the InfoBarMessageControl.\nMethods CanBeWrapped(FrameworkElement frameworkElement) Determines whether the specified can be safely wrapped.\nParameters    Name Description     frameworkElement The framework element.    Returns true if the specified can be safely wrapped; otherwise,false.\nGetWrappedElement(Grid wrappedGrid, WrapControlServiceWrapOptions wrapOption) Gets a wrapped element mapped by the wrapOption.\nParameters    Name Description     wrappedGrid The wrapped grid.   wrapOption The wrap option that is used, which will be mapped to the control. The value All is not allowed and will throw an exception.    Returns ornull if the element is not found.\nExceptions    Name Description     ArgumentNullException The wrappedGrid isnull.   ArgumentOutOfRangeException The wrapOption is All.    GetWrappedElement(Grid wrappedGrid, string controlName) Gets a wrapped element by name.\nParameters    Name Description     wrappedGrid The wrapped grid.   controlName Name of the control.    Returns ornull if the element is not found.\nExceptions    Name Description     ArgumentNullException The wrappedGrid isnull.   ArgumentOutOfRangeException The controlName is not a valid control name.    GetWrappedElement(Grid wrappedGrid, WrapControlServiceWrapOptions wrapOption) Gets a wrapped element mapped by the wrapOption.\nType Parameters T Type of the control to return.\nParameters    Name Description     wrappedGrid The wrapped grid.   wrapOption The wrap option that is used, which will be mapped to the control. The value All is not allowed and will throw an exception.    Returns ornull if the element is not found.\nExceptions    Name Description     ArgumentNullException The wrappedGrid isnull.   ArgumentOutOfRangeException The wrapOption is All.    GetWrappedElement(Grid wrappedGrid, string controlName) Gets a wrapped element by name.\nType Parameters T Type of the control to return.\nParameters    Name Description     wrappedGrid The wrapped grid.   controlName Name of the control.    Returns ornull if the element is not found.\nExceptions    Name Description     ArgumentNullException The wrappedGrid isnull.   ArgumentOutOfRangeException The controlName is not a valid control name.    Wrap(FrameworkElement frameworkElement, WrapControlServiceWrapOptions wrapOptions, DataWindowButton[] buttons, ContentControl parentContentControl) Wraps the specified framework element.\nParameters    Name Description     frameworkElement The framework element.   wrapOptions The wrap options.   buttons The buttons to add.   parentContentControl The parent content control.    Returns that contains the wrapped content.\nRemarks The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a framework element can be wrapped by using the CanBeWrapped(FrameworkElement) method. This method will automatically handle the disconnecting of the framework element from the parent is the parentContentControl is passed.\nWrap(FrameworkElement frameworkElement, WrapControlServiceWrapOptions wrapOptions, ContentControl parentContentControl) Wraps the specified framework element without any buttons.\nParameters    Name Description     frameworkElement The framework element.   wrapOptions The wrap options.   parentContentControl The parent content control.    Returns that contains the wrapped content.\nRemarks The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a framework element can be wrapped by using the CanBeWrapped(FrameworkElement) method. This method will automatically handle the disconnecting of the framework element from the parent is the parentContentControl is passed.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/wrapcontrolservicecontrolnames/",
	"title": "WrapControlServiceControlNames",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6    public static class WrapControlServiceControlNames  The wrap control service control names.\nFields ButtonsWrapPanelName The name of the wrap panel that contains the buttons.\nDefaultCancelButtonName The name of the default cancel button.\nDefaultOkButtonName The name of the default ok button.\nInfoBarMessageControlName The name of the info bar message control.\nInternalGridName The name of the internal grid. Retrieve the grid with this name to add custom controls to the inner grid.\nMainContentHolderName The name of the main content holder, used to prevent that an element is wrapped multiple times.\nWarningAndErrorValidatorName The name of the warning and error validator control.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/wrapcontrolservicewrapoptions/",
	"title": "WrapControlServiceWrapOptions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6    public enum WrapControlServiceWrapOptions : Enum  Base types Enum\nAvailable wrap options that can be used in the IWrapControlService.\nFields All All available options.\nGenerateInlineInfoBarMessageControl Generates an inline InfoBarMessageControl around the element to wrap.\nGenerateOverlayInfoBarMessageControl Generates an overlay InfoBarMessageControl around the element to wrap.\nGenerateWarningAndErrorValidatorForDataContext Generates a WarningAndErrorValidator for the data context.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/services/wrapoptions/",
	"title": "WrapOptions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Services   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum WrapOptions : Enum  Base types Enum\nAvailable wrap options.\nFields CreateWarningAndErrorValidatorForViewModel Create warning and error validator for view model.\nNone No options.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/windows/wrapoptions/",
	"title": "WrapOptions",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.Windows   Available on .NET Framework 4.5, .NET Framework 4.6    public enum WrapOptions : Enum  Base types Enum\nAvailable wrap options that can be used in the WrapControlHelper.\nFields All All available options.\nGenerateInlineInfoBarMessageControl Generates an inline InfoBarMessageControl around the element to wrap.\nGenerateOverlayInfoBarMessageControl Generates an overlay InfoBarMessageControl around the element to wrap.\nGenerateWarningAndErrorValidatorForDataContext Generates a WarningAndErrorValidator for the data context.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/mvvm/wrongviewmodeltypeexception/",
	"title": "WrongViewModelTypeException",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.MVVM   Namespace Catel.MVVM   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class WrongViewModelTypeException : Exception  Base types Exception\nException in case that a wrong type is used for a view model.\nConstructors WrongViewModelTypeException(Type actualType, Type expectedType) Initializes a new instance of the WrongViewModelTypeException class.\nParameters    Name Description     actualType The actual type.   expectedType The expected type.    Properties ActualType Gets the actual type.\nExpectedType Gets the expected type.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/xml/xmlhelper/",
	"title": "XmlHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Xml   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class XmlHelper  Helper class for xml serialization.\nFields Methods ConvertToObject(XElement element, Type objectType, Func createDefaultValue) Converts the specified xml element to an object.\nParameters    Name Description     element The element.   objectType Type of the object.   createDefaultValue The create default value.    Returns The created object.\nConvertToXml(string elementName, Type objectType, object objectValue) Converts a value to an xml element.\nParameters    Name Description     elementName Name of the element.   objectType Type of the object.   objectValue The object value.    Returns The created.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/data/xmlnamemapper/",
	"title": "XmlNameMapper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Data   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class XmlNameMapper\u0026lt;T\u0026gt;  Xml name mappings from xml to properties and back.\nType Parameters T Type of the xml type to map, for example or.\nFields Constructors Methods IsPropertyNameMappedToXmlName(Type type, string propertyName) Determines whether the property name is mapped to an XML name.\nParameters    Name Description     type The type.   propertyName Name of the property.    Returns true if the XML element is mapped to a property name; otherwise,false.\nExceptions    Name Description     ArgumentNullException The type isnull.   ArgumentException The propertyName isnull or whitespace.    IsXmlNameMappedToProperty(Type type, string xmlName) Determines whether the specified XML element is mapped to a property name.\nParameters    Name Description     type The type.   xmlName Name of the XML.    Returns true if the XML element is mapped to a property name; otherwise,false.\nExceptions    Name Description     ArgumentNullException The type isnull.   ArgumentException The xmlName isnull or whitespace.    MapPropertyNameToXmlName(Type type, string propertyName) Maps the name of the property name to an XML name.\nParameters    Name Description     type The type for which to make the xml name.   propertyName Name of the property.    Returns Name of the XML element that represents the property value.\nMapXmlNameToPropertyName(Type type, string xmlName) Maps the name of the XML element to a property name.\nParameters    Name Description     type The type for which to make the xml name.   xmlName Name of the XML element.    Returns Name of the property that represents the xml value.\nExceptions    Name Description     ArgumentNullException The type isnull.   ArgumentException The xmlName isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/xml/xmlnamespace/",
	"title": "XmlNamespace",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Xml   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class XmlNamespace  Contains information about an xml namespace.\nConstructors XmlNamespace(string prefix, string uri) Initializes a new instance of the XmlNamespace class.\nParameters    Name Description     prefix The prefix.   uri The URI.    Exceptions    Name Description     ArgumentNullException The prefix isnull or whitespace.    Properties Prefix Gets the prefix.\nUri Gets the URI.\nMethods ToString() Returns a that represents this instance.\nReturns A that represents this instance.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/xml/xmlnamespacemanager/",
	"title": "XmlNamespaceManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Xml   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class XmlNamespaceManager : IXmlNamespaceManager  Base types\nIXmlNamespaceManager\nManages the namespaces based on the current serialization scope.\nRemarks Note that this class is not thread-safe. Serialization on it\u0026rsquo;s own is not thread-safe because serialization of a single object should happen on the same thread.\nFields Methods GetNamespace(Type type, string preferredPrefix) Gets the namespace for the specified type.\nParameters    Name Description     type The type.   preferredPrefix The preferred prefix.    Returns The xml namespace.\nExceptions    Name Description     ArgumentNullException The type isnull.   ArgumentException The preferredPrefix isnull or whitespace.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/xml/xmlschemahelper/",
	"title": "XmlSchemaHelper",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Xml   Available on .NET Framework 4.5, .NET Framework 4.6    public static class XmlSchemaHelper  Helper class for xml schemas.\nFields Log The log.\nXmlns Default xml schema.\nProperties Methods GetXmlSchema(Type type, XmlSchemaSet schemaSet, bool generateFlatSchema) Gets the XML schema.\nParameters    Name Description     type The type.   schemaSet The schema set.   generateFlatSchema A value indicating whether the schema should be generated as flat schema.    Returns The qualified name of the type.\nExceptions    Name Description     ArgumentNullException The schemaSet isnull.    "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/xml/xmlschemamanager/",
	"title": "XmlSchemaManager",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Xml   Available on .NET Framework 4.5, .NET Framework 4.6    public class XmlSchemaManager  Xml schema manager to create xml schemas for models in Catel.\nProperties GenerateFlatSchemas Gets or sets a value indicating whether the xml schema manager should generate flat schemas. This means that classes will be generated as is. This results in easier types, but the complex types cannot be re-used using WCF.\nMethods GetXmlSchema(Type type, XmlSchemaSet schemaSet) Gets the XML schema.\nParameters    Name Description     type The type.   schemaSet The schema set.    Returns XmlSchemaComplexType.\nExceptions    Name Description     ArgumentNullException The schemaSet isnull.    Remarks Do not move this method, it is used by Catel.Fody.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/xml/xmlserializationconfiguration/",
	"title": "XmlSerializationConfiguration",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Xml   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class XmlSerializationConfiguration : SerializationConfiguration  Base types SerializationConfiguration\nSerialization configuration with additional xml configuration.\nConstructors XmlSerializationConfiguration() Initializes a new instance of the XmlSerializationConfiguration class.\nProperties OptimalizationMode Gets or sets the optimalization mode.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/xml/xmlserializationcontextinfo/",
	"title": "XmlSerializationContextInfo",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Xml   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class XmlSerializationContextInfo : ISerializationContextInfo  Base types\nISerializationContextInfo\nClass containing all information about the binary serialization context.\nFields Constructors XmlSerializationContextInfo(XElement element, object model) Initializes a new instance of the XmlSerializationContextInfo class.\nParameters    Name Description     element The element.   model The model, is allowed to be null for value types.    Exceptions    Name Description     ArgumentNullException The element isnull.    XmlSerializationContextInfo(XmlReader xmlReader, ModelBase model) Initializes a new instance of the XmlSerializationContextInfo class.\nParameters    Name Description     xmlReader The XML reader.   model The model.    Exceptions    Name Description     ArgumentNullException The xmlReader isnull.    XmlSerializationContextInfo(string xmlContent, ModelBase model) Initializes a new instance of the XmlSerializationContextInfo class.\nParameters    Name Description     xmlContent Content of the XML.   model The model.    Exceptions    Name Description     ArgumentNullException The xmlContent isnull.    Properties Element Gets the element.\nModel Gets the model.\nMethods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/xml/xmlserializationcontextinfofactory/",
	"title": "XmlSerializationContextInfoFactory",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Xml   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class XmlSerializationContextInfoFactory : ISerializationContextInfoFactory  Base types\nISerializationContextInfoFactory\nXml serialization context factory.\nMethods GetSerializationContextInfo(ISerializer serializer, object model, object data, ISerializationConfiguration configuration) Gets the serialization context information.\nParameters    Name Description     serializer The serializer.   model The model.   data The data.   configuration The configuration.    Returns ISerializationContext.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/xml/xmlserializer/",
	"title": "XmlSerializer",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Xml   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class XmlSerializer : IXmlSerializer, SerializerBase\u0026lt;XmlSerializationContextInfo\u0026gt;  Base types SerializerBase\nBase types\nIXmlSerializer\nThe xml serializer.\nFields Constructors XmlSerializer(ISerializationManager serializationManager, IDataContractSerializerFactory dataContractSerializerFactory, IXmlNamespaceManager xmlNamespaceManager, ITypeFactory typeFactory, IObjectAdapter objectAdapter) Initializes a new instance of the XmlSerializer class.\nParameters    Name Description     serializationManager The serialization manager.   dataContractSerializerFactory The data contract serializer factory.   xmlNamespaceManager The XML namespace manager.   typeFactory The type factory.   objectAdapter The object adapter.    Exceptions    Name Description     ArgumentNullException The serializationManager isnull.    Methods "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/catel/runtime/serialization/xml/xmlserializeroptimalizationmode/",
	"title": "XmlSerializerOptimalizationMode",
	"tags": [],
	"description": "",
	"content": "    Name Value     Assembly Catel.Core   Namespace Catel.Runtime.Serialization.Xml   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public enum XmlSerializerOptimalizationMode : Enum  Base types Enum\nPossible xml serializer optimalization modes\nFields Performance 2\nIf duplicate namespaces are irrelevant, pick this for speed.\nPrettyXml 0\nIf pretty xml is required (for display reasons), pick this one.\nPrettyXmlAgressive 1\nIf pretty xml is required (for display reasons), pick this one. This will remove all namespaces instead of only the root ones.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/introduction/platform-support/caveats-in-android/",
	"title": "Caveats in Android",
	"tags": [],
	"description": "",
	"content": " Below are all caveats in Android.\n Linker settings  Know caveats? Feel free to add them!\nLinker settings When linking in release mode (or debug if you would like), the linker will remove all non-used items from the final application assembly. Since the binding system in Catel uses reflection, it might break when the linker is too aggressive when optimizing the app. To prevent optimalization, create a dummy file that uses the members of each type so the linker will not exclude them. Note that this class will never be instantiated, nor will its methods be invoked. It is purely to let the static analysis be notified of the usage.\nNote that this applies to both properties and bindings\nBelow is an example class to force the inclusion of members in Android. For each type and its members, a method is added. Then each used property is accessed and each used event is subscribed to.\npublic class LinkerInclude { public void IncludeActivity(Activity activity) { activity.Title = activity.Title = string.Empty; } public void IncludeButton(Button button) { button.Text = button.Text + string.Empty; button.Click += (sender, e) =\u0026gt; { }; } public void IncludeEditText(EditText editText) { editText.Text = editText.Text + string.Empty; editText.TextChanged += (sender, e) =\u0026gt; { }; } public void IncludeCommand(ICatelCommand command) { command.CanExecuteChanged += (sender, e) =\u0026gt; { }; } }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/setup-deployment/compiling-from-source/",
	"title": "Compiling from source",
	"tags": [],
	"description": "",
	"content": "In order to compile, the following 3rd party software is required:\n Visual Studio 2017 Xamarin (if you want to compile this part)  All other libraries required are located inside the lib folder or are retrieved via NuGet.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/logging/creating-log-listeners-via-configuration/",
	"title": "Creating log listeners via configuration",
	"tags": [],
	"description": "",
	"content": "Starting with Catel 3.8, it is possible to instantiate LogListener classes from the configuration. Below is an example on how to customize the listeners:\n\u0026lt;configSections\u0026gt; \u0026lt;sectionGroup name=\u0026quot;catel\u0026quot;\u0026gt; \u0026lt;section name=\u0026quot;logging\u0026quot; type=\u0026quot;Catel.Logging.LoggingConfigurationSection, Catel.Core\u0026quot; /\u0026gt; \u0026lt;/sectionGroup\u0026gt; \u0026lt;/configSections\u0026gt; \u0026lt;catel\u0026gt; \u0026lt;logging\u0026gt; \u0026lt;listeners\u0026gt; \u0026lt;listener type=\u0026quot;Catel.Logging.FileLogListener\u0026quot; FilePath=\u0026quot;{AppData}\\CatelLogging.txt\u0026quot; IgnoreCatelLogging=\u0026quot;true\u0026quot; IsDebugEnabled=\u0026quot;false\u0026quot; IsInfoEnabled=\u0026quot;true\u0026quot; IsWarningEnabled=\u0026quot;true\u0026quot; IsErrorEnabled=\u0026quot;true\u0026quot;/\u0026gt; \u0026lt;/listeners\u0026gt; \u0026lt;/logging\u0026gt; \u0026lt;/catel\u0026gt;  It is important to register the logging section as shown in the example above. Then the logging section in the bottom can contain an unlimited number of listeners. Each listener has to provide at least the type property which contains the type and namespace of the ILogListener which must be added:\n\u0026lt;listener type=\u0026quot;Catel.Logging.FileLogListener\u0026quot; /\u0026gt;  The other properties are fully customizable and can be defined on the fly. This means that the configuration is fully customizable for every listener that needs to be added. Below is an example to register the FileLogListener via configuration:\n\u0026lt;listener type=\u0026quot;Catel.Logging.FileLogListener\u0026quot; FilePath=\u0026quot;CatelLogging.txt\u0026quot; IgnoreCatelLogging=\u0026quot;true\u0026quot; IsDebugEnabled=\u0026quot;false\u0026quot; IsInfoEnabled=\u0026quot;true\u0026quot; IsWarningEnabled=\u0026quot;true\u0026quot; IsErrorEnabled=\u0026quot;true\u0026quot;/\u0026gt;  The *ILogListener *properties (IsDebugEnabled, IsInfoEnabled, IsWarningEnabled and IsErrorEnabled) are available to all listeners. All other properties depend on the the actual listener being registered. This allows major flexibility at runtime.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/ioc/introduction-to-components/dependencyresolver/",
	"title": "DependencyResolver and DependencyResolverManager",
	"tags": [],
	"description": "",
	"content": " Introduction to Managing different scoping of service locators and dependency injection can be hard. To aid developers with this, the IDependencyResolver and DependencyResolverManager are introduced.\nWhy the need for a DependencyResolver That\u0026rsquo;s a good question. Catel already provides the IServiceLocator which allows to resolve types. The downside is that if you want to customize the way dependencies are resolved in Catel, you will have to implement a custom version of the ServiceLocator. To make it simple to customize this behavior, the DependencyResolver is introduced.\nThe main strategy will be to use the DependencyResolver instead of ServiceLocator to resolve the types in Catel, starting with version 3.8\n\rThough in simple situations, Catel will resolve and inject all types automatically, there are a few exceptions to the rule. One of these exceptions are extension methods. These are static classes which can be used to add functionality to an object. The downside is that you cannot use dependency injection in static classes, and each object that is extended can have their own scoping of dependency resolvers. To solve this issue, Catel introduces the DependencyResolverManager. This is a manager that keeps track of all types and objects and the DependencyResolver that were used to create the object. This way it is still possible to retrieve additional dependencies in extensions methods in the same dependency resolver the type was created with.\nTo illustrate this issue, take a look at the view model below:\n// Set up a different scoping with a custom service locator var serviceLocator = new ServiceLocator(); // ... register custom services here var typeFactory = serviceLocator.ResolveType\u0026lt;ITypeFactory\u0026gt;(); var vm = typeFactory.CreateInstance\u0026lt;MyViewModel\u0026gt;();  In this example, a view model is created with a custom dependency scope. When writing an extension method for the view models, it is impossible to get to this custom scope:\npublic static class MyViewModelExtensions { public static void DoSomething(this MyViewModel myViewModel) { // You can use ServiceLocator.Default here, but that is a `different and wrong` scope var additionalDependency = ServiceLocator.Default.ResolveType\u0026lt;IAdditionalDependency\u0026gt;(); } }  One option to solve this is to create a property on the view model called DependencyResolver or ServiceLocator. However, it is not the responsibility of the view model to store this property. In fact, the view model does not know which scoping was used to create itself. The only way to solve this is to inject the IServiceLocator into the view model, but that\u0026rsquo;s not a good practice.\nBelow is a rewritten version of the extensions class which uses the DependencyResolverManager:\npublic static class MyViewModelExtensions { public static void DoSomething(this MyViewModel myViewModel) { // Get the `right` scope var dependencyResolverManager = DependencyResolverManager.Default; var dependencyResolver = dependencyResolverManager.GetDependencyResolverForInstance(myViewModel); var additionalDependency = dependencyResolver.Resolve\u0026lt;IAdditionalDependency\u0026gt;(); } }  Now you have the actual IDependencyResolver that was use to create the view model and can easily provide the right logic with the right scoping.\nNote that there will only be a single instance of a DependencyResolverManager. It is possible to customize the default instance, but there is no need for different scoping of DependencyResolverManager instances so it is valid to use the static instance\n\rManaging the dependency resolvers per instance The DependencyResolverManager can manage dependency resolvers per instance. This way it is possible to retrieve the actual dependency resolver for a specific object instance.\nRegistering a dependency resolver for an instance To register a dependency resolver for an instance, use this code:\nvar serviceLocator = new ServiceLocator(); var dependencyResolver = new CatelDependencyResolver(serviceLocator); var myObject = new MySpecialObject(); var dependencyResolverManager = DependencyResolverManager.Default; dependencyResolverManager.RegisterDependencyResolverForInstance(myObject, dependencyResolver);  Note that it is not required to register a DependencyResolver for instances created with the TypeFactory. The TypeFactory automatically registers the DependencyResolver used in the DependencyResolverManager.\n\rRetrieving a dependency resolver for an instance To retrieve the dependency resolver for a specific instance, use this code:\nvar dependencyResolverManager = DependencyResolverManager.Default; var dependencyResolver = dependencyResolverManager.GetDependencyResolverForInstance(myObject);  Below is a graph that shows how the dependency resolver of an instance is determined:\nManaging the dependency resolvers per type The DependencyResolverManager can manage dependency resolvers per type. This way it is possible to retrieve the actual dependency resolver for a specific type.\nRegistering a dependency resolver for a type To register a dependency resolver for a type, use this code:\nvar serviceLocator = new ServiceLocator(); var dependencyResolver = new CatelDependencyResolver(serviceLocator); var dependencyResolverManager = DependencyResolverManager.Default; dependencyResolverManager.RegisterDependencyResolverForType(typeof(MyClass), dependencyResolver);  Note that these registrations are type-specific. You cannot register an interface and all classes deriving from that interface will return the same DependencyResolver. All actual types must be registered separately.\n\rRetrieving a dependency resolver for a type To retrieve the dependency resolver for a specific instance, use this code:\nvar dependencyResolverManager = DependencyResolverManager.Default; var dependencyResolver = dependencyResolverManager.GetDependencyResolverForType(typeof(MyClass));  Customizing the default DependencyResolver By default, the DependencyResolverManager creates a CatelDependencyResolver that wraps the ServiceLocator.Default instance. In simple applications this is sufficient to get everything working. However sometimes it might be needed to customize the default DependencyResolver. To change the default one, use the code below:\nvar dependencyResolverManager = DependencyResolverManager.Default; dependencyResolverManager.DefaultDependencyResolver = new MyCustomDependencyResolver();  Customizing the DependencyResolverManager Customizing the DependencyResolverManager is not recommended. If you still want to do this for whatever reason, create a class implementing the IDependencyResolverManager or derive from the DependencyResolverManager:\npublic class CustomizedDependencyResolverManager : DependencyResolverManager { public override IDependencyResolver GetDependencyResolverForType(Type type) { if (type == typeof(MySpecialClass)) { return new MySpecialDependencyResolver(); } return base.GetDependencyResolverForType(type); } }  Note that there is no use to override the DependencyResolverManager as the example, but this keeps it easy to understand\n\rThen set the DependencyResolverManager.Default static property:\nDependencyResolverManager.Default = new CustomizedDependencyResolverManager();  "
},
{
	"uri": "http://docs.catelproject.com/5.1/getting-started/xamarin-forms/",
	"title": "Getting started with Xamarin.Forms",
	"tags": [],
	"description": "",
	"content": "Welcome to the *Getting started* guide for Catel and Xamarin.Forms. In this guide, a very simple application will be created with the most commonly used aspects of Catel and Xamarin.Forms.\nNote that this guide assumes that the reader has a basic understanding of XAML and Xamarin.Forms since this guide will not cover these basics\nThe source code for this example can be found at https://github.com/Catel/Catel.GettingStarted.Xamarin.Forms\nNote that this guide will recommend code snippets that can be found here. They are not required, just recommended to speed up creating Catel classes and properties.\n\rCreating the Xamarin.Forms project\r\r\rThis documentation is work in progress\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/introduction/mvvm/introduction-to-mvvm-and-models/",
	"title": "Introduction to MVVM and models",
	"tags": [],
	"description": "",
	"content": " This part of the documentation will explain all the parts of MVVM, in the order in which we think they must be built. First of all, the Models, which are the closest to the business. Then, the View Models which define what part of the Models should be visible to the user in a specific situation. This also includes validation that is specific for the functionality that the View Model represents. Last, but not least, the View itself, which is the final representation of the View Model to the end-user.\nAs you will notice (or maybe you don\u0026rsquo;t), this framework has a lot in common with other MVVM frameworks out there. This is normal because all of the frameworks are trying to implement the same pattern, which isn\u0026rsquo;t that hard to understand if you think about it long enough. Before we started writing the MVVM framework, we first investigated other frameworks because there already are enough, probably too many. However, even the better (or best) still took too much time to use, and there was too much code we had to write to create a View Model. That\u0026rsquo;s the point where we decided to write our own framework that contains lots of luxury for lazy developers such as us.\nModels The Models part is one of the three major parts of MVVM. Therefore, I want to tell you a bit about what kind of Models we use to store our data. Basically, you can use all types of objects as Models, as long as the Models implement the most commonly used interfaces.\nFor MVVM, it is very important that the following interfaces are implemented:\n INotifyPropertyChanged If this interface is not implemented, changes will not be reflected to the UI via bindings. In other words, your Model and View Model will be useless in an MVVM setting.  Finally, it is strongly recommended to have your Models implement the following interfaces as well:\n IDataErrorInfo If this interface is not implemented, errors cannot be shown to the user. IEditableObject If this interface is not implemented, a Model cannot work with “states”. This means that a user cannot start editing an object and finally cancel it (because there is no stored “state” that can be used to restore the values).  View Models View models are the classes that contain the view logic. They can be seen as a container for all models in a specific view, including the behavior to interact with these models (for example adding or removing them from a collection). It is very important that a view model also implements the INotifyPropertyChanged interfaces just like the models do.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/apicop/listeners/",
	"title": "Listeners",
	"tags": [],
	"description": "",
	"content": " Listeners are a way to get information about the cops and their rules in the framework. The *ApiCopManager* will take care of all the retrieval of the results and the registration of the cops. The registered listeners are used by the *ApiCopManager.WriteResults* method to write the output to. To add a listener and be able to see the output of the *ApiCop* feature, use the following code:\nvar apiCopListener = new ConsoleApiCopListener(); ApiCopManager.AddListener(apiCopListener);  After the listeners are added, one can call ApiCopManager.WriteResults:\nApiCopManager.WriteResults();  Customizing grouping It is possible to group the listeners. To specify the grouping, use the following code:\nvar apiCopListener = new ConsoleApiCopListener(); apiCopListener.Grouping = ApiCopListenerGrouping.Rule;  The following grouping options are available:\nGrouping name|Description -|- Cop|Sort by the name of the class in which the cop is registered. Rule|Sort by the rule name. Tag|Sort by tag, which is dependent on the rule implementation. It is recommended though to use the final class name as tag.\nCreating custom listeners Catel provides several listeners out of the box. To create custom listeners, the only requirement is to implement the IApiCopListener. To make it easier to create custom listeners (such as an HTML listener), Catel provides the following base classes which can also be used as a base for custom listeners:\n ApiCopListenerBase Gives most flexibility, but is also more work to implement  TextApiCopListenerBase Is fully prepared for all text-based listeners (such as console, text file, etc), and only requires the implementation of the WriteLine method    "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/messaging/messaging-via-attributes/",
	"title": "Messaging via attributes",
	"tags": [],
	"description": "",
	"content": " The message mediator is a great way to communicate between instances in an application. It does however require to manually subscribe to and unsubscribe from classes. This issue can be bypassed using the attribute based approach. This is an alternative for registering a method in the message mediator and not be obliged to use Register\u0026lt;T\u0026gt; method.\nSubscribing and unsubscribing  When attributes are using inside a class, it is required to call the MessageMediatorHelper.SubscripeRecipient. To unsubscribe an object, it is required to call MessageMediatorHelper.UnsubscribeRecipient.\nThere are two options to decorate methods with the attribute. Either with or without tag.\nSubscribing without a tag In this case, the mediator will send the message to all the methods that has subscribe using the attribute to receive the message and not one especially. The code below broadcasts a message without any tag. This is just regular behavior of the message mediator.\n/// \u0026lt;summary\u0026gt; /// Method to invoke when the command is executed. /// \u0026lt;/summary\u0026gt; private void OnCmdExecute() { var dependencyResolver = this.GetDependencyResolver(); var mediator = dependencyResolver.Resolve\u0026lt;IMessageMediator\u0026gt;(); mediator.SendMessage(\u0026quot;Test Value\u0026quot;); }  If a class, for example a view model, is interested in these messages, the only thing that needs to be done is to decorate a method with the MessageRecipient attribute as shown below:\n/// \u0026lt;summary\u0026gt; /// Shows the message. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;value\u0026quot;\u0026gt;The value.\u0026lt;/param\u0026gt; [MessageRecipient] private void ShowMessage(string value) { var dependencyResolver = this.GetDependencyResolver(); var messageService = dependencyResolver.Resolve\u0026lt;IMessageService\u0026gt;(); messageService.Show(value); }  Subscribing with a tag  A tag can be used to specify some sort of grouping for messages. The MessageRecipient attribute also supports this as shown in the code below. First lets take a look how to send a message and specify a tag.\n/// \u0026lt;summary\u0026gt; /// Method to invoke when the command is executed. /// \u0026lt;/summary\u0026gt; private void OnCmdExecute() { var dependencyResolver = this.GetDependencyResolver(); var mediator = dependencyResolver.Resolve\u0026lt;IMessageMediator\u0026gt;(); mediator.SendMessage(\u0026quot;Test Value\u0026quot;, \u0026quot;myTag\u0026quot;); }  The message is now sent with the tag. The attribute has to be used as shown below:\n/// \u0026lt;summary\u0026gt; /// Shows the message. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;value\u0026quot;\u0026gt;The value.\u0026lt;/param\u0026gt; [MessageRecipient(Tag = \u0026quot;myTag\u0026quot;)] private void ShowMessage(string value) { var dependencyResolver = this.GetDependencyResolver(); var messageService = dependencyResolver.Resolve\u0026lt;IMessageService\u0026gt;(); messageService.Show(value); }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/data-handling/modelbase/",
	"title": "ModelBase",
	"tags": [],
	"description": "",
	"content": " The ModelBase class is a generic base class that can be used for all your data classes.\n Fully serializable It is now really easy to store objects on disk or serialize them into memory, either binary or in XML. The data object supports this out of the box, and automatically handles the (de)serialization. Support property changed notifications The class supports the INotifyPropertyChanging and INotifyPropertyChanged interfaces so this class can easily be used in applications to reflect changes to the user. Backwards compatibility When serializing your objects to binary, it is hard to maintain the right versions. When you add a new property to a binary class, or change a namespace, the object cannot be loaded any longer. The data object base takes care of this issue and supports backwards compatibility. Backup \u0026amp; revert The class implements the IEditableObject interface which makes it possible to create a state of the object. Then all properties can be edited, and finally, the changes can be applied or cancelled.  Using the class Using the class is extremely simple. Just declare a new class that derives from ModelBase and you are ready to go:\n/// \u0026lt;summary\u0026gt; /// MyObject class which fully supports serialization, /// property changed notifications, backwards compatibility and error checking. /// \u0026lt;/summary\u0026gt; [Serializable] public class MyObject : ModelBase\u0026lt;MyObject\u0026gt; { /// \u0026lt;summary\u0026gt; /// Initializes a new object from scratch. /// \u0026lt;/summary\u0026gt; public MyObject() { } /// \u0026lt;summary\u0026gt; /// Initializes a new object based on \u0026lt;see cref=\u0026quot;SerializationInfo\u0026quot;/\u0026gt;. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;info\u0026quot;\u0026gt;\u0026lt;see cref=\u0026quot;SerializationInfo\u0026quot;/\u0026gt; // that contains the information.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026quot;context\u0026quot;\u0026gt;\u0026lt;see cref=\u0026quot;StreamingContext\u0026quot;/\u0026gt;.\u0026lt;/param\u0026gt; protected MyObject(SerializationInfo info, StreamingContext context) : base(info, context) { } }  As you can see in the code above, the MyObject class derives from ModelBase and provides an empty constructor, but also a constructor that is used for binary deserialization. The code above might look complex, but it is created using the model code snippet, and you only have to type the name of the class.\nDefining properties Defining properties for the class is very easy, and works the same like dependency properties. The advantages of this way of defining properties are:\n Properties defined like this are automatically included during serialization; no need to specify complex data contracts; You can specify a default value for a property which will be used when the class is constructed or the property is not found during deserialization (in case this property is added to an existing class); The PropertyData object can be used to retrieve property values so the compiler checks for errors; You can directly subscribe to change notifications, and all properties automatically support INotifyPropertyChanged out of the box.  Below is the code that defines a new property Name of type string:\n/// \u0026lt;summary\u0026gt; /// Gets or sets the name. /// \u0026lt;/summary\u0026gt; public string Name { get { return GetValue\u0026lt;string\u0026gt;(NameProperty); } set { SetValue(NameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Name property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData NameProperty = RegisterProperty(\u0026quot;Name\u0026quot;, typeof(string), string.Empty);  A registered property can be excluded from serialization if wanted. When the object is deserialized, the default value will be used for the property in that case.\nDefault values for reference types In lots of cases, a default value for reference types is required in the property definitions. However, and you might have noticed this behavior in for example dependency properties, using an instance as default value can result in unexpected behavior.\nBelow is an example of a \u0026ldquo;regular\u0026rdquo; property registration using a default value for a collection property:\npublic static readonly PropertyData NameProperty = RegisterProperty(\u0026quot;PersonCollection\u0026quot;, typeof(Collection\u0026lt;Person\u0026gt;), new Collection\u0026lt;Person\u0026gt;());  However, instead of creating a new collection for each new object with this property, only one collection will be created that will be used by all classes that have this property registered. One solution is to pass null as default value and create the collection in the constructor. A better solution is to use the override of RegisterProperty with the callback parameters:\npublic static readonly PropertyData NameProperty = RegisterProperty(\u0026quot;PersonCollection\u0026quot;, typeof(Collection\u0026lt;Person\u0026gt;), () =\u0026gt; new Collection\u0026lt;Person\u0026gt;());  This way, every time a new value is needed, the callback will be invoked to create the default value and you will have a true default value for reference types.\nFunctionality provided out of the box The ModelBase provides a lot of functionality out of the box. A few points I want to mention are:\nINotifyPropertyChanged\nAll properties registered using the RegisterProperty method automatically take care of change notifications.\nIEditableObject\nThe data object can automatically create an internal backup and restore it, if required, using the IEditableObject interface.\nSerialization\nAs told many times before, using the [SavableModelBase](/5.1/catel-core/data-handling/savablemodelbase/), you can simply save your file to a stream (file on disk, stream in memory, etc.).\nKeep in mind that this class is not suitable for database communication, there are much better ways to handle this (ORM mappers such as Entity Framework, NHibernate, LLBLGen Pro, etc.).\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/faq/problem-solving/",
	"title": "Problem solving",
	"tags": [],
	"description": "",
	"content": " As with every framework or toolkit, developers run into problems. This can be bugs or abuse of the API. Catel has several ways for developers to solve the problems themselves before contacting the team with the possible issue.\nEnabling the log We take logging very serious in Catel. This means that a lot of information about the internals can be be seen in the output window. To enable logging in Catel, use the following code in your application startup code:\n#if DEBUG Catel.Logging.LogManager.AddDebugListener(); #endif  Now you can see all the log messages in the output window.\nEnabling stepping through the code It\u0026rsquo;s possible to step through the Catel code to see what is happening in the internals of Catel. This gives you great insights in Catel and can help you solve the problems you are encountering. See the stepping through the code documentation.\nApiCop Catel provides a feature called ApiCop. This will give you information about the most cases where the API of Catel is abused or not used in the right way. The ApiCop feature will create an advisory report at the end of an application with tips on how to improve the feature usage in Catel. Below is an example report:\n**************************************************************** ApiCop (r) results of 'DataWindowTest.WPF' v1.0.0.0 recorded on 2014-02-19 10:06 To ignore rules, call ApiCopManager.IgnoredRules.Add([rulename]); For more information about ApiCop, visit the website: https://catelproject.atlassian.net/wiki/display/CTL/ApiCop **************************************************************** ================================================================ DATAWINDOWTEST.VIEWS.AVIEW ================================================================ Cop TargetType: Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic Rule: UserControlLogic.InfoBarMessageControl (Error) For more information about this rule, visit https://catelproject.atlassian.net/wiki/display/CTL/Performance+considerations [DataWindowTest.Views.AView] Feature used '0' of '2' times, consider turning it off by default ---------------------------------------------------------------- Cop TargetType: Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic Rule: UserControlLogic.CreateWarningAndErrorValidator (Error) For more information about this rule, visit https://catelproject.atlassian.net/wiki/display/CTL/Performance+considerations [DataWindowTest.Views.AView] Feature used '0' of '2' times, consider turning it off by default ---------------------------------------------------------------- ================================================================ DATAWINDOWTEST.VIEWS.BVIEW ================================================================ Cop TargetType: Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic Rule: UserControlLogic.InfoBarMessageControl (Error) For more information about this rule, visit https://catelproject.atlassian.net/wiki/display/CTL/Performance+considerations [DataWindowTest.Views.BView] Feature used '0' of '2' times, consider turning it off by default ---------------------------------------------------------------- Cop TargetType: Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic Rule: UserControlLogic.CreateWarningAndErrorValidator (Error) For more information about this rule, visit https://catelproject.atlassian.net/wiki/display/CTL/Performance+considerations [DataWindowTest.Views.BView] Feature used '0' of '2' times, consider turning it off by default ---------------------------------------------------------------- **************************************************************** End of ApiCop (r) results, generation took '00:00:00.137' ****************************************************************  For more information, see the ApiCop documentation.\n "
},
{
	"uri": "http://docs.catelproject.com/5.1/getting-started/wpf/serializing-data-from-to-disk/",
	"title": "Serializing data from/to disk",
	"tags": [],
	"description": "",
	"content": " In this step we will create services that will serialize the models from/to disk. Services are a great way to abstract functionality that can be used in every part of the application. This guide will also register the service in the ServiceLocator so it can be injected in view models.\nCreating the service definition The first thing to do is to create the Services folder to group the services. Below is a screenshot of how to solution will look after creating the folders:\nThen add a new interface to the Interfaces folder named IFamilyService. This will manage the families that are avaiable. Below is the interface defined:\nnamespace WPF.GettingStarted.Services { using WPF.GettingStarted.Models; public interface IFamilyService { IEnumerable\u0026lt;Family\u0026gt; LoadFamilies(); void SaveFamilies(IEnumerable\u0026lt;Family\u0026gt; families); } }  Creating the service implementation Below is the implementation of the service which will actually take care of saving and loading of the families:\nnamespace WPF.GettingStarted.Services { using System.Collections.Generic; using System.IO; using Catel.Collections; using Catel.Data; using WPF.GettingStarted.Models; public class FamilyService : IFamilyService { private readonly string _path; private readonly IXmlSerializer _xmlSerializer; public FamilyService(IXmlSerializer xmlSerializer) { Argument.IsNotNull(() =\u0026gt; xmlSerializer); _xmlSerializer = xmlSerializer; string directory = Catel.IO.Path.GetApplicationDataDirectory(\u0026quot;CatenaLogic\u0026quot;, \u0026quot;WPF.GettingStarted\u0026quot;); _path = Path.Combine(directory, \u0026quot;family.xml\u0026quot;); } public IEnumerable\u0026lt;Family\u0026gt; LoadFamilies() { if (!File.Exists(_path)) { return new Family[] { }; } using (var fileStream = File.Open(_path, FileMode.Open)) { var settings = _xmlSerializer.Deserialize\u0026lt;Settings\u0026gt;(fileStream); return settings.Families; } } public void SaveFamilies(IEnumerable\u0026lt;Family\u0026gt; families) { var settings = new Settings(); settings.Families.ReplaceRange(families); using (var fileStream = File.Open(_path, FileMode.Create)) { _xmlSerializer.Serialize(settings, fileStream); } } } }  Registering the service in the ServiceLocator Now we have created the service, it is time to register it in the ServiceLocator. In the App.xaml.cs, add the following code:\nvar serviceLocator = ServiceLocator.Default; serviceLocator.RegisterType\u0026lt;IFamilyService, FamilyService\u0026gt;();  Adding the service usage to the MainWindowViewModel Now the service is registered, it can be used anywhere in the application. A great place to load and save the families is in the MainWindowViewModel which contains all the logic of the main application window. Injecting the service via dependency injection To get an instance of the service in the view model, change the constructor to the following definition.\nprivate readonly IFamilyService _familyService; /// \u0026lt;summary\u0026gt; /// Initializes a new instance of the \u0026lt;see cref=\u0026quot;MainWindowViewModel\u0026quot;/\u0026gt; class. /// \u0026lt;/summary\u0026gt; public MainWindowViewModel(IFamilyService familyService) { Argument.IsNotNull(() =\u0026gt; familyService); _familyService = familyService; }  As you can see in the code above, a new field is created to store the dependency IFamilyService. Then the constructor ensures that the argument is not null and stores it in the field.\nCreating the Families property on the MainWindowViewModel The next thing we need is a Families property on the MainWindowViewModel to store the families in we load from disk. Below is the property definition for that:\n/// \u0026lt;summary\u0026gt; /// Gets the families. /// \u0026lt;/summary\u0026gt; public ObservableCollection\u0026lt;Family\u0026gt; Families { get { return GetValue\u0026lt;ObservableCollection\u0026lt;Family\u0026gt;\u0026gt;(FamiliesProperty); } private set { SetValue(FamiliesProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Families property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData FamiliesProperty = RegisterProperty(\u0026quot;Families\u0026quot;, typeof(ObservableCollection\u0026lt;Family\u0026gt;), null);  Loading the families at startup Now we have the IFamilyService and the Families property, it is time to combine these two. To do this, we need to override the InitializeAsync method on the view model which is automatically called as soon as the view is loaded by Catel:\nprotected override async Task InitializeAsync() { var families = _familyService.LoadFamilies(); Families = new ObservableCollection\u0026lt;Family\u0026gt;(families); }  Saving the families at shutdown To save the families at shutdown, override the CloseAsync method on the view model which is automatically called as soon as the view is closed by Catel:\nprotected override async Task CloseAsync() { _familyService.SaveFamilies(Families); }  After running the application once, a new file will be stored in the following directory:\nC:\\Users\\[yourusername]\\AppData\\Roaming\\CatenaLogic\\WPF.GettingStarted\nUp next Creating the view models\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/serialization/customizing-serialization/serializing-members-using-tostring-parse/",
	"title": "Serializing members using ToString / Parse",
	"tags": [],
	"description": "",
	"content": "Sometimes types (classes or structs) don\u0026rsquo;t implement a proper serialization mechanism. If they support proper ToString(IFormatProvider) and Parse(string, IFormatProvider) methods, there is no need to create a custom SerializerModifier to serialize these types. To let the serializers take care of this automatically, at least one of the following options must be true:\n The member is decorated using the SerializeUsingParseAndToString attribute The container class has a SerializerModifier that returns true in the ShouldSerializeMemberUsingParse method  Note that decorating a member that does not implement proper ToString(IFormatProvider) and Parse(string, IFormatProvider) methods is useless, the serialization engine will ignore these types\n\rFor example, the class below is an excellent usage example of when to use this technique:\n [Serializable, StructLayout(LayoutKind.Sequential, Pack = 1)] public struct Vector { public double X; public double Y; public double Z; public Vector(double x, double y, double z) { X = x; Y = y; Z = z; } public string ToString(IFormatProvider formatProvider) { return $\u0026quot;{X.ToString(formatProvider)} {Y.ToString(formatProvider)} {Z.ToString(formatProvider)}\u0026quot;; } public static Vector Parse(string value, IFormatProvider formatProvider) { var splitted = value.Split(new[] { \u0026quot; \u0026quot; }, StringSplitOptions.RemoveEmptyEntries); var x = double.Parse(splitted[0], formatProvider); var y = double.Parse(splitted[1], formatProvider); var z = double.Parse(splitted[2], formatProvider); var vector = new Vector(x, y, z); return vector; } }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/setup-deployment/",
	"title": "Setup, deployment &amp; projects",
	"tags": [],
	"description": "",
	"content": "\r\rGetting prerelease (beta) versions via NuGet \u0026amp; MyGet\r\r\rStepping through the code\r\r\rCompiling from source\r\r\rCode snippets \u0026amp; templates\r\r\rUpdate guides\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/introduction/platform-support/",
	"title": "Support for multiple platforms",
	"tags": [],
	"description": "",
	"content": " Catel is available on a lot of platforms.\nXaml  WPF 4.5 WPF 4.6 WPF 4.7 UWP 10.0  Android  Android 4.0+ (Xamarin)  iOS  iOS 6.0+ (Xamarin)  Fundamental differences There are some fundamental differences between platforms (such as Xaml and Android). The table below explains the differences so it is easy to understand for a developer what to use when. Note that all services are defined by interfaces and can be used on all the platforms in the same manner. The platform-specific implementations are hidden as much as possible to keep the view models very re-usable.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/serialization/supported-serializers/",
	"title": "Supported serializers",
	"tags": [],
	"description": "",
	"content": "\r\rBinary\r\r\rJson\r\r\rXml\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/setup-deployment/code-snippets-templates/using-the-project-templates/",
	"title": "Using the project templates",
	"tags": [],
	"description": "",
	"content": " There are several project templates available for Catel. The easiest way is to follow these steps.\nUsing the project templates Create a new project. Make sure that at least .NET Framework 4.0 is selected as target framework. The templates can be found under the Catel folder as shown in the image below:\nAs soon as the project is created, the only thing left to do is add references to the Catel libraries. You can either do this manually or use NuGet.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/validation/validation-via-special-model-validators/",
	"title": "Validation via special model validators",
	"tags": [],
	"description": "",
	"content": " By default, Catel registers the AttributeValidatorProvider as the IValidatorProvider. This way the ModelBase and all the classes that derive from it can easily add a custom validator by using the ValidateModelAttribute.\nNote that it is still possible to register a custom IValidatorProvider to customize this behavior. It is even possible to set the Validator property of the ModelBase on a specific instance of a model\n\rImplementing the validator The first thing that needs to be done is to write a custom implementation of the IValidator interface. You can either implement all the members yourself or derive from *ValidatorBase *as is shown below:\npublic class PersonValidator : ValidatorBase\u0026lt;PersonModel\u0026gt; { protected override void ValidateFields(PersonModel instance, List\u0026lt;IFieldValidationResult\u0026gt; validationResults) { if (string.IsNullOrWhiteSpace(instance.FirstName)) { validationResults.Add(FieldValidationResult.CreateError(PersonModel.FirstNameProperty, \u0026quot;First name is required\u0026quot;)); } if (string.IsNullOrWhiteSpace(instance.LastName)) { validationResults.Add(FieldValidationResult.CreateError(PersonModel.FirstNameProperty, \u0026quot;First name is required\u0026quot;)); } } protected override void ValidateBusinessRules(PersonModel instance, List\u0026lt;IBusinessRuleValidationResult\u0026gt; validationResults) { // No business rules validations yet } }  Decorating a model with the attribute\nOnce a validator is available, the only thing that needs to be done is to decorate the model with the ValidateModelAttribute:\n[ValidateModel(typeof(PersonValidator))] public class PersonModel : ModelBase { public string FirstName { get { return GetValue\u0026lt;string\u0026gt;(FirstNameProperty); } set { SetValue(FirstNameProperty, value); } } public static readonly PropertyData FirstNameProperty = RegisterProperty(\u0026quot;FirstName\u0026quot;, typeof(string), string.Empty); public string LastName { get { return GetValue\u0026lt;string\u0026gt;(LastNameProperty); } set { SetValue(LastNameProperty, value); } } public static readonly PropertyData LastNameProperty = RegisterProperty(\u0026quot;LastName\u0026quot;, typeof(string), string.Empty); }  The custom validator will now automatically be called.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/introduction/platform-support/caveats-in-ios/",
	"title": "Caveats in iOS",
	"tags": [],
	"description": "",
	"content": "Below are all caveats in iOS.\nKnow caveats? Feel free to add them!\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/setup-deployment/code-snippets-templates/",
	"title": "Code snippets &amp; templates",
	"tags": [],
	"description": "",
	"content": " The latest code snippets and templates are available on the official website. When downloaded, follow the steps below to install them.\nInstalling the code snippets Extract the zip file to the following directory: %MyDocuments%\\Visual Studio 2xxx\\Code Snippets\nInstalling the item and project templates C#\nExtract the zip\\C#\\ItemTemplates to the following directory: %MyDocuments%\\Visual Studio 2xxx\\Templates\\ItemTemplates\\Visual C#\n*Extract the *zip\\C#\\ProjectTemplates to the following directory: %MyDocuments%\\Visual Studio 2xxx\\Templates\\ProjectTemplates\\Visual C#**\n** **\nIt\u0026rsquo;s possible that you need to restart Visual Studio for it to recognize the templates\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/getting-started/wpf/creating-the-view-models/",
	"title": "Creating the view models",
	"tags": [],
	"description": "",
	"content": " In this step we will create the view models. Since this is a very simple application, just a few view models are required. A view model in essence is nothing more than a class that derives from the ViewModelBase class\nThe vm code snippet is available to create view models. There is also an on-line item template available for Catel view models\n\rCreating the PersonViewModel Below is the class definition of the PersonViewModel. This view model will be used to show the details of a Person model.\nnamespace WPF.GettingStarted.ViewModels { using Catel.MVVM; public class PersonViewModel : ViewModelBase { } }  Enabling model injection In hierarchy views, it is important to manage the state of views and view models based on the actual context where the view (thus view model) is located. Catel does this by allowing model injection. The view models will only be created when the model is available within the context of the view.\npublic class PersonViewModel : ViewModelBase { public PersonViewModel(Person person) { Argument.IsNotNull(() =\u0026gt; person); Person = person; } /// \u0026lt;summary\u0026gt; /// Gets or sets the person. /// \u0026lt;/summary\u0026gt; [Model] public Person Person { get { return GetValue\u0026lt;Person\u0026gt;(PersonProperty); } set { SetValue(PersonProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Person property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData PersonProperty = RegisterProperty(\u0026quot;Person\u0026quot;, typeof(Person), null); }  Note that the Person property is decorated with the Model attribute. This automatically makes sure that if a view model is saved, the IEditableObject.EndEdit is called. When the view model is canceled, the IEditableObject.CancelEdit is called and all changes on the model will be reverted.\n\rExposing properties of a model One very powerful feature of Catel is that it can automatically map properties from a model to a view model. This way the user does not have to write repetitive code to map the properties from the model to the view model at startup and map the properties from view model to model when the view model is closed. Catel will take care of this all automatically.\n/// \u0026lt;summary\u0026gt; /// Gets or sets the first name. /// \u0026lt;/summary\u0026gt; [ViewModelToModel(\u0026quot;Person\u0026quot;)] public string FirstName { get { return GetValue\u0026lt;string\u0026gt;(FirstNameProperty); } set { SetValue(FirstNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the FirstName property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData FirstNameProperty = RegisterProperty(\u0026quot;FirstName\u0026quot;, typeof(string), null); /// \u0026lt;summary\u0026gt; /// Gets or sets the last name. /// \u0026lt;/summary\u0026gt; [ViewModelToModel(\u0026quot;Person\u0026quot;)] public string LastName { get { return GetValue\u0026lt;string\u0026gt;(LastNameProperty); } set { SetValue(LastNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the LastName property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData LastNameProperty = RegisterProperty(\u0026quot;LastName\u0026quot;, typeof(string), null);  Note that the properties are decorated with the ViewModelToModel attribute which enables the automatic mappings feature in Catel.\n\rCreating the FamilyViewModel The FamilyViewModel must be set up the same way as the PersonViewModel above.\nnamespace WPF.GettingStarted.ViewModels { using System.Collections.ObjectModel; using Catel; using Catel.Data; using Catel.MVVM; using WPF.GettingStarted.Models; public class FamilyViewModel : ViewModelBase { public FamilyViewModel(Family family) { Argument.IsNotNull(() =\u0026gt; family); Family = family; } /// \u0026lt;summary\u0026gt; /// Gets the family. /// \u0026lt;/summary\u0026gt; [Model] public Family Family { get { return GetValue\u0026lt;Family\u0026gt;(FamilyProperty); } private set { SetValue(FamilyProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Family property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData FamilyProperty = RegisterProperty(\u0026quot;Family\u0026quot;, typeof(Family), null); /// \u0026lt;summary\u0026gt; /// Gets the family members. /// \u0026lt;/summary\u0026gt; [ViewModelToModel(\u0026quot;Family\u0026quot;)] public ObservableCollection\u0026lt;Person\u0026gt; Persons { get { return GetValue\u0026lt;ObservableCollection\u0026lt;Person\u0026gt;\u0026gt;(PersonsProperty); } private set { SetValue(PersonsProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Persons property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData PersonsProperty = RegisterProperty(\u0026quot;Persons\u0026quot;, typeof(ObservableCollection\u0026lt;Person\u0026gt;), null); /// \u0026lt;summary\u0026gt; /// Gets or sets the family name. /// \u0026lt;/summary\u0026gt; [ViewModelToModel(\u0026quot;Family\u0026quot;)] public string FamilyName { get { return GetValue\u0026lt;string\u0026gt;(FamilyNameProperty); } set { SetValue(FamilyNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the FamilyName property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData FamilyNameProperty = RegisterProperty(\u0026quot;FamilyName\u0026quot;, typeof(string)); } }  Up next Creating the views (user controls)\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/introduction/mvvm/creating-view-models-with-catel/",
	"title": "Creating view models with Catel",
	"tags": [],
	"description": "",
	"content": " The View Models in Catel are very easy to write, and give the end-user a great flexibility in how to approach the Models. This part of the article will explain the classes that make it possible to easily create View Models.\nThe ViewModelBase class is the most important class of all in the MVVM Framework of Catel. Of course, it can\u0026rsquo;t do anything useful without the other classes, but all the View Models that are created using Catel derive of this class. ViewModelBase is based on the ModelBase class that ships with Catel. Thanks to the existence of that class, the MVVM framework was set up very quickly (although “very quickly” is relative). Below is a class diagram that shows the class tree:\nThe class diagram above shows how many default interfaces of the .NET Framework are supported in the ModelBase class. Since most of these interfaces are used by WPF as well, the ViewModelBase class itself can take huge advantage of the implementation of ModelBase.\nBecause ViewModelBase derives from ModelBase, you can declare properties exactly the same way. Even better, you can simply use ModelBase (or the extended SavableModelBase) to create (and save) your Models, and use ViewModelBase as the base for all the View Models.\nCreating a view model To declare a View Model, use the following code snippet:\n vm - defines a new view model   When using the vm code snippet, this is the result:\n/// \u0026lt;summary\u0026gt; /// $name$ view model. /// \u0026lt;/summary\u0026gt; public class $name$ViewModel : ViewModelBase { #region Fields #endregion #region Constructors /// \u0026lt;summary\u0026gt; /// Initializes a new instance of the \u0026lt;see cref=\u0026quot;$name$ViewModel\u0026quot;/\u0026gt; class. /// \u0026lt;/summary\u0026gt; public $name$ViewModel () { } #endregion #region Properties /// \u0026lt;summary\u0026gt; /// Gets the title of the view model. /// \u0026lt;/summary\u0026gt; /// \u0026lt;value\u0026gt;The title.\u0026lt;/value\u0026gt; public override string Title { get { return \u0026quot;View model title\u0026quot;; } } // TODO: Register models with the vmpropmodel codesnippet // TODO: Register view model properties with the vmprop or vmpropviewmodeltomodel codesnippets #endregion #region Commands // TODO: Register commands with the vmcommand or vmcommandwithcanexecute codesnippets #endregion #region Methods #endregion }  Declaring properties Note that declaring properties works exactly the same as declaring properties for the ModelBase\nThere are several code snippets available to create View Model properties:\n vmprop - Defines a simple View Model property. vmpropmodel - Defines a View Model property with ModelAttribute. The property is also made private by default. vmpropviewmodeltomodel - Defines a View Model property with ViewModelToModelAttribute.  When using the vmprop code snippet, this is the result:\n/// \u0026lt;summary\u0026gt; /// Gets or sets the name. /// \u0026lt;/summary\u0026gt; public string Name { get { return GetValue\u0026lt;string\u0026gt;(NameProperty); } set { SetValue(NameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Name property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData NameProperty = RegisterProperty(\u0026quot;Name\u0026quot;, typeof(string));  In the View, it is now possible to bind to the Name property of the View Model, as long as DataContext is set to an instance of the View Model.\nDeclaring commands There are several code snippets available to create View Model commands:\n vmcommand - Defines a command that is always executable. vmcommandwithcanexecute - Defines a command that implements a CanExecute method to determine whether the command can be invoked on the View Model in its current state.  When using the vmcommandwithcanexecute code snippet, this is the result:\n/// \u0026lt;summary\u0026gt; /// Gets the Add command. /// \u0026lt;/summary\u0026gt; public Command\u0026lt;object, object\u0026gt; Add { get; private set; } // TODO: Move code below to constructor Add = new Command\u0026lt;object, object\u0026gt;(OnAddExecute, OnAddCanExecute); // TODO: Move code above to constructor /// \u0026lt;summary\u0026gt; /// Method to check whether the Add command can be executed. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;parameter\u0026quot;\u0026gt;The parameter of the command.\u0026lt;/param\u0026gt; private bool OnAddCanExecute(object parameter) { return true; } /// \u0026lt;summary\u0026gt; /// Method to invoke when the Add command is executed. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;parameter\u0026quot;\u0026gt;The parameter of the command.\u0026lt;/param\u0026gt; private void OnAddExecute(object parameter) { // TODO: Handle command logic here }  The only thing left to do now is to move the creation of the command to the constructor (as the comments already instructs you to).\nIn the View, it is now possible to bind any Command property (such as the Command property of a Button) to the Add property of the View Model, as long as DataContext is set to an instance of the View Model.\nAdding validation Because the ViewModelBase class derives from ModelBase, it provides the same power of validation that the ModelBase class has to offer. ModelBase (and thus ViewModelBase) offers the following types of validation:\n Field warnings Business warnings Field errors Business errors  ViewModelBase uses smart validation. This means that if the object is already validated, the object is not validated again to make sure that the View Models don\u0026rsquo;t hit too much on the performance. Only when a property on the View Model changes, validation will be invoked. Of course, if required, it is still possible to force validation when the View Model must be validated, even when no properties have changed.\nTo implement field or business rule validation, you only have to override ValidateFields and/or the ValidateBusinessRules method:\n/// \u0026lt;summary\u0026gt; /// Validates the field values of this object. Override this method to enable /// validation of field values. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;validationResults\u0026quot;\u0026gt;The validation results, add additional results to this list.\u0026lt;/param\u0026gt; protected override void ValidateFields(List\u0026lt;FieldValidationResult\u0026gt; validationResults) { if (!string.IsNullOrEmpty(FirstName)) { validationResults.Add(FieldValidationResult.CreateError(FirstNameProperty, \u0026quot;First name cannot be empty\u0026quot;)); } } /// \u0026lt;summary\u0026gt; /// Validates the field values of this object. Override this method to enable /// validation of field values. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;validationResults\u0026quot;\u0026gt;The validation results, add additional results to this list.\u0026lt;/param\u0026gt; protected override void ValidateBusinessRules(List\u0026lt;BusinessRuleValidationResult\u0026gt; validationResults) { if (SomeBusinessErrorOccurs) { validationResults.Add(BusinessRuleValidationResult.CreateError(\u0026quot;A business error occurred\u0026quot;)); } }  Note that it is also possible to re-use validation in a model using ModelToViewModel mappings or even external validation such as FluentValidation\n\rThere are also other ways to add validation to a data object:\n Validation via data annotations - attributes such as the RequiredAttribute Validation via IValidator - custom validation such as FluentValidation  The great thing is that Catel will gather all validation results from all different mappings and combine these into the ValidationContext. This context can be used to query all sorts of validation info about an object.\nInteraction with models One of the most important reasons why a View Model is created is because it serves as the glue between a View and the Model. The communication between the View and the View Model is fully taken care of by WPF in the form of Bindings. The problem is that most of the time, a View Model is used to show a subset of a Model (which is, for example, a database entity).\nMost MVVM frameworks (actually, I haven\u0026rsquo;t seen anyone not requiring manual updating) require manual updating, which brings us back to the stone age (remember the WinForms time setting the controls at startup, and reading the values at the end?). Catel solves this issue by providing convenience attributes that take care of this dumb getting/setting story between the View Model and the Model. Catel fully supports getting/setting the values from/to the Model, but believe me: you will love the attributes that are described next.\nModelAttribute To be able to map values from/to a Model, it is important to know the actual Model. So, to let the View Model know what property represents the Model, ModelAttribute can be used like shown below:\n/// \u0026lt;summary\u0026gt; /// Gets or sets the person. /// \u0026lt;/summary\u0026gt; [Model] public Person Person { get { return GetValue\u0026lt;Person\u0026gt;(PersonProperty); } private set { SetValue(PersonProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Person property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData PersonProperty = RegisterProperty(\u0026quot;Person\u0026quot;, typeof(Person));  A Model setter is normally written as private (you normally don\u0026rsquo;t want a UI to be able to change a Model), but the getter is public because you might want to read info from it.\nNote that you should use the vmpropmodel code snippet to create Model properties\n\rModels in Catel are handled as very, very special objects. This means that as soon as a Model is set, Catel tries to call the IEditableObject.BeginEdit method. Then, as soon as the Model is changed without being saved, or if the View Model is canceled, the Model is correctly canceled via IEditableObject.CancelEdit. If the Model is saved, the active Models will be committed via IEditableObject.EndEdit. I will leave the rest of the magic out of this article, but if you have any questions about it, don\u0026rsquo;t hesitate to contact us!\nViewModelToModelAttribute Now that we know how to declare a property as a Model, it is time to learn how we can communicate with it. Normally, you would have to watch the Model to make sure it is synchronized correctly when the Model is updated. With Catel, this is not necessary any longer. Simply use ViewModelToModelAttribute, and you will get the following advantages:\n Models are automatically being watched for changes, thus if a mapped property changes, the View Model is updated accordingly; When a View Model is changed, this property is automatically mapped to the Model; When the Model changes, the View Model is initialized automatically with the values of the new Model; When a Model has an error or warning (business or field), the warnings are mapped to the View Model so you can “re-use” the validation of the Model inside your View Model.  So, you get all of this for free? No, you will have to decorate your property with ViewModelToModelAttribute, like shown below:\n/// \u0026lt;summary\u0026gt; /// Gets or sets the first name. /// \u0026lt;/summary\u0026gt; [ViewModelToModel(\u0026quot;Person\u0026quot;)] public string FirstName { get { return GetValue\u0026lt;string\u0026gt;(FirstNameProperty); } set { SetValue(FirstNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the FirstName property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData FirstNameProperty = RegisterProperty(\u0026quot;FirstName\u0026quot;, typeof(string));  The code example is the easiest usage of the attribute that is available. It only provides the name of the Model property. This is required because it is possible (but not likely) to have multiple Models. But what if the property on your Model has a different name than your View Model? No problem, use the overload of the attribute as shown below:\n[ViewModelToModel(\u0026quot;Person\u0026quot;, \u0026quot;RealFirstName\u0026quot;)] public string FirstName ///... (remaining code left out for the sake of simplicity)  The code above will map the FirstName property of the View Model to the RealFirstName property of the Person model.\nExposeAttribute The ViewModelToModelAttribute is a great way to map properties between the model and the view model. However, sometimes the mappings are not required for manual coding and should only be exposed from inside the view model to the view. The ExposeAttribute is great way to simplify this process. The code below is the same as declaring a model property named Person and 3 additional properties using the ViewModelToModelAttribute:\n/// \u0026lt;summary\u0026gt; /// Gets or sets the person. /// \u0026lt;/summary\u0026gt; [Model] [Expose(\u0026quot;FirstName\u0026quot;)] [Expose(\u0026quot;MiddleName\u0026quot;)] [Expose(\u0026quot;LastName\u0026quot;)] private Person Person { get { return GetValue\u0026lt;Person\u0026gt;(PersonProperty); } set { SetValue(PersonProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Person property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData PersonProperty = RegisterProperty(\u0026quot;Person\u0026quot;, typeof(Person));  Interaction with other view models Now that we\u0026rsquo;ve seen how easy it is to communicate between the View Model and the Model, you want more, right? I know how it is: “You let \u0026lsquo;em have one finger, they take your whole hand”. No worries, you can have my right hand, as long as I can keep my left one. Anyway, the developers of Catel are prepared for this. So, let\u0026rsquo;s talk about the interaction with other View Models.\nSay, you have a multiple document interface (MDI as it was called in the old days). If you are following MVVM principles, every document (or tab) has its own View Model. Then, you want to be aware of updates of a single type of View Model. Say, for example, that there is a View Model representing a family called FamilyViewModel. This View Model is probably interested in changes in the PersonViewModel.\nViewModelManager Let\u0026rsquo;s start with the basics. As we have learned earlier in this article, all View Models created with the help of Catel derive from the ViewModelBase class. One of the things that this class does is that it registers itself with the ViewModelManager class when it is being created, and it unregisters itself again when it is closed. So, simply said, ViewModelManager is a class that holds a reference to all existing View Models at the moment.\nInterestedInAttribute Now that we know about the ViewModelManager class, and know that there is a repository that holds all of the live instances of all View Model classes, it should be fairly easy to communicate with other View Models. It actually is; you just have to decorate a View Model with InterestedInAttribute, as shown below:\n[InterestedIn(typeof(FamilyViewModel))] public class PersonViewModel : ViewModelBase  A View Model can have multiple InterestedInAttribute instances, so it is possible to subscribe to multiple View Model types at the same time. Once a View Model is decorated with InterestedInAttribute, the View Model will receive all changes (and of course, the View Model that caused the change) via the OnViewModelPropertyChanged method, as shown below:\n/// \u0026lt;summary\u0026gt; /// Called when a property has changed for a view model type that the current view model is interested in. This can /// be accomplished by decorating the view model with the \u0026lt;see cref=\u0026quot;InterestedInAttribute\u0026quot;/\u0026gt;. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;viewModel\u0026quot;\u0026gt;The view model.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026quot;propertyName\u0026quot;\u0026gt;Name of the property.\u0026lt;/param\u0026gt; protected override void OnViewModelPropertyChanged(IViewModel viewModel, string propertyName) { // You can now do something with the changed property }  Note that it is also possible to get notified of commands that are being executed on other view models\n\rMessageMediator Catel also offers a solution to the message mediator pattern in the form of the MessageMediator class. This is all described in the next section \u0026ldquo;Message mediator\u0026rdquo;.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/ioc/introduction-to-components/ensuring-integrity/",
	"title": "Ensuring integrity of the ServiceLocator",
	"tags": [],
	"description": "",
	"content": " Starting with Catel 3.6, a very useful feature has been added to the ServiceLocator and TypeFactory. This features is called \u0026ldquo;integrity checker\u0026rdquo; and will ensure you with useful information about type registration paths. This protection mechanism is very useful in complex applications. When people start building services, sometimes they accidentally inject other services that via injection to other services cause a stack overflow. Debugging and determining which type is causing the issue can be very time-consuming. To make the example a bit more simple, below are a few classes which demonstrate a common issue in enterprises.\npublic class X { public X(Y y) { } } public class Y { public Y(Z z) { } } public class Z { public Z(X x) { } }  Note how a round-trip of dependencies is created which will result in a StackOverflowException somewhere in your code. Below is a graphical example what happens. Note that the dotted line is showing the circular dependency causing the StackOverflowException.\nTypeRequestInfo The first step for the integrity checker is to make sure that it knows what types are being requested from the ServiceLocator (which will be instantiated by the TypeFactory if required). This class contains all the information about a type being created by the TypeFactory:\n Type Tag (optional, can be used to differentiate different instances of the same type registration)  TypeRequestPath Now we have detailed information about the types being constructed, it is very important to keep track of the types which are being created by the TypeFactory. During the construction of a type, the TypeFactory will request the ServiceLocator for a type, which will ask the TypeFactory to construct the type again. Each time the TypeFactory starts constructing a type (and currently has a TypeRequestPath), it will create a new instance of the TypeRequestInfo and add it to the TypeRequestPath. The diagram below shows how the TypeRequestPath will evolve.\nOnce the TypeRequestPath will contain a duplicate instance of a TypeRequestInfo, it will become invalid (which means there is a circular type dependency).\nNote that this is a very simple example, but normally a type will have several services injected which can have dependencies on their own as well which can cause a very complex type request path\n\rChecking the integrity of the type request To resolve and construct a type, a lot of communication will happen between the TypeFactory and the ServiceLocator. This flow is show in the diagram below.\nAs you can see, there is a lot of communication between the ServiceLocator and TypeFactory. In the TypeRequestPath example we already saw how the path will become invalid when it contains a duplicate instance of the TypeRequestInfo. The TypeRequestPath will then throw a CircularDependencyException with all the necessary information to solve the issue:\nNow you will find the issue in no-time and save yourself a lot of your valuable time!\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/getting-started/",
	"title": "Getting started",
	"tags": [],
	"description": "",
	"content": "\r\rQuick introduction for developers\r\r\rGetting started with WPF\r\r\rGetting started with Xamarin.Forms\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/logging/integration-with-external-loggers/",
	"title": "Integration with external logging",
	"tags": [],
	"description": "",
	"content": "\r\rLog4net\r\r\rNLog\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/introduction/introduction-data-objects/",
	"title": "Introduction to data objects",
	"tags": [],
	"description": "",
	"content": " It is very important to understand the data objects in Catel because they form the base pillar of all components used by the MVVM framework.\nThe ObservableObject class Very basic class implementing the System.ComponentModel.INotifyPropertyChanging and T:System.ComponentModel.INotifyPropertyChanged interfaces as well as Catels Catel.Data.IAdvancedNotifyPropertyChanging and Catels Catel.Data.IAdvancedNotifyPropertyChanged.\nThe ModelBase class The ModelBase(previously known as the DataObjectBase) class is a generic base class that can be used for all your data classes. This comes fully supporting serialization, property changed notifications, backwards compatibility and error checking.\nCreating your first data object First of all, it is very important to realize that you shouldn\u0026rsquo;t bore yourself with writing all the code below yourself. Catel contains lots of code snippets that allow you to create data objects very easily in a short amount of time.\nThis example shows the simplest way to declare a data object using the ModelBase class. By using a code snippet, the class is created in just 10 seconds.\nCode snippets\n model - Declares a data object based on the ModelBase class  Steps\n Create a new class file called FirstModel.cs. Inside the namespace, use the model codesnippet and fill in the name of the class, in this case FirstModel.  Code\n/// \u0026lt;summary\u0026gt; /// FirstModel class which fully supports serialization, property changed notifications, /// backwards compatibility and error checking. /// \u0026lt;/summary\u0026gt; [Serializable] public class FirstModel : ModelBase { #region Fields #endregion #region Constructors /// \u0026lt;summary\u0026gt; /// Initializes a new object from scratch. /// \u0026lt;/summary\u0026gt; public FirstModel() { } /// \u0026lt;summary\u0026gt; /// Initializes a new object based on \u0026lt;see cref=\u0026quot;SerializationInfo\u0026quot;/\u0026gt;. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;info\u0026quot;\u0026gt;\u0026lt;see cref=\u0026quot;SerializationInfo\u0026quot;/\u0026gt; that contains the information. /// \u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026quot;context\u0026quot;\u0026gt;\u0026lt;see cref=\u0026quot;StreamingContext\u0026quot;/\u0026gt;.\u0026lt;/param\u0026gt; protected FirstModel(SerializationInfo info, StreamingContext context) : base(info, context) { } #endregion #region Properties // TODO: Define your custom properties here using the propdata code snippet #endregion #region Methods /// \u0026lt;summary\u0026gt; /// Validates the field values of this object. Override this method to enable /// validation of field values. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;validationResults\u0026quot;\u0026gt;The validation results, add additional results to this list.\u0026lt;/param\u0026gt; protected override void ValidateFields(List\u0026lt;FieldValidationResult\u0026gt; validationResults) { } /// \u0026lt;summary\u0026gt; /// Validates the field values of this object. Override this method to enable /// validation of field values. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;validationResults\u0026quot;\u0026gt;The validation results, add additional results to this list.\u0026lt;/param\u0026gt; protected override void ValidateBusinessRules(List\u0026lt;BusinessRuleValidationResult\u0026gt; validationResults) { } #endregion }  Declaring properties The next step to learn on the ModelBase class is how to declare properties. There are several types of properties, and they will all be handled in this part of the documentation.\nThe ModelBase class uses a dependency property a-like notation of properties.\nSimple properties This example shows how to declare the simplest property. In this example, a string property with a default value will be declared with the use of a code snippet.\nCode snippets\n modelprop - Declares a simple property on a model  Steps\n Open FirstModel.cs created in the previous step. In the Properties region, use the code snippet modelprop, and use the following values:     Code snippet item Value     description Gets or sets the simple property   type string   name SimpleProperty   defaultvalue \u0026ldquo;Simple property\u0026rdquo;    Code\n/// \u0026lt;summary\u0026gt; /// Gets or sets the simple property. /// \u0026lt;/summary\u0026gt; public string SimpleProperty { get { return GetValue\u0026lt;string\u0026gt;(SimplePropertyProperty); } set { SetValue(SimplePropertyProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the SimpleProperty property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyDataSimplePropertyProperty = RegisterProperty(\u0026quot;SimpleProperty\u0026quot;, typeof(string), \u0026quot;Simple property\u0026quot;);  Properties with property change callback Code snippets\n modelpropchanged - Declares a simple property on a model with a property changed callback  Steps\n Open FirstModel.cs created in the previous step. In the Properties region, use the code snippet modelpropchanged, and use the following values:     Code snippet item Value     description Gets or sets the callback property   type string   name CallbackProperty   defaultvalue \u0026ldquo;Callback property\u0026rdquo;    Code\n/// \u0026lt;summary\u0026gt; /// Gets or sets the callback property. /// \u0026lt;/summary\u0026gt; public string CallbackProperty { get { return GetValue\u0026lt;string\u0026gt;(CallbackPropertyProperty); } set { SetValue(CallbackPropertyProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the CallbackProperty property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyDataCallbackPropertyProperty = RegisterProperty(\u0026quot;CallbackProperty\u0026quot;, typeof(string), \u0026quot;Callback property\u0026quot;, (sender, e) =\u0026gt; ((FirstDataObject)sender).OnCallbackPropertyChanged()); /// \u0026lt;summary\u0026gt; /// Called when the CallbackProperty property has changed. /// \u0026lt;/summary\u0026gt; private void OnCallbackPropertyChanged() { // TODO: Implement logic }  Adding validation It is very easy to add validation to a class (both the ModelBase and ViewModelBase). There are several ways, but this getting started guide will handle only the most simple one.\nTo enable validation, you must override at least one of the following methods:\n/// \u0026lt;summary\u0026gt; /// Validates the field values of this object. Override this method to enable /// validation of field values. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;validationResults\u0026quot;\u0026gt;The validation results, add additional results to this list.\u0026lt;/param\u0026gt; protected override void ValidateFields(List\u0026lt;FieldValidationResult\u0026gt; validationResults) { if (string.IsNullOrEmpty(FirstName)) { validationResults.Add(FieldValidationResult.CreateError(FirstNameProperty, \u0026quot;First name cannot be empty\u0026quot;)); } } /// \u0026lt;summary\u0026gt; /// Validates the field values of this object. Override this method to enable /// validation of field values. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;validationResults\u0026quot;\u0026gt;The validation results, add additional results to this list.\u0026lt;/param\u0026gt; protected override void ValidateBusinessRules(List\u0026lt;BusinessRuleValidationResult\u0026gt; validationResults) { if (SomeBusinessErrorOccurs) { validationResults.Add(BusinessRuleValidationResult.CreateError(\u0026quot;A business error occurred\u0026quot;)); } }  After the validation is implemented into the object, the validation will occur every time a property on the object changes. It is also possible to manually validate by calling the Validate method.\nThere are also other ways to add validation to a data object:\n Validation via data annotations - attributes such as the RequiredAttribute Validation via IValidator - custom validation such as FluentValidation  The great thing is that Catel will gather all validation results from all different mappings and combine these into the ValidationContext. This context can be used to query all sorts of validation info about an object.\nNote that this is just an introduction, more information about validation can be found in other parts of the documentation\n\rSaving objects Saving and loading objects out of the box has never been so easy. SavableModelBase can automatically save/load objects in several ways, such as memory, file in different modes (binary and XML). This example shows that making your objects savable is very easy and does not take any time!\nCode snippets\n model - Declare a model based on the ModelBase class modelprop - Declare a simple property on a model  Steps\n Create a new class file called Person.cs. Inside the namespace, use the model codesnippet and fill in the name of the class, in this case Person. Change the base class from ModelBase to SavableModelBase. In the Properties region, use the code snippet modelprop, and use the following values:     Code snippet item Value     description Gets or sets the name   type string   name Name   defaultvalue \u0026ldquo;MyName\u0026rdquo;    Code\n/// \u0026lt;summary\u0026gt; /// Person class which fully supports serialization, property changed notifications, /// backwards compatibility and error checking. /// \u0026lt;/summary\u0026gt; [Serializable] public class Person : SavableModelBase\u0026lt;Person\u0026gt; { #region Fields #endregion #region Constructors /// \u0026lt;summary\u0026gt; /// Initializes a new object from scratch. /// \u0026lt;/summary\u0026gt; public Person() { } /// \u0026lt;summary\u0026gt; /// Initializes a new object based on \u0026lt;see cref=\u0026quot;SerializationInfo\u0026quot;/\u0026gt;. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;info\u0026quot;\u0026gt;\u0026lt;see /// cref=\u0026quot;SerializationInfo\u0026quot;/\u0026gt; that contains the information. /// \u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026quot;context\u0026quot;\u0026gt;\u0026lt;see // cref=\u0026quot;StreamingContext\u0026quot;/\u0026gt;.\u0026lt;/param\u0026gt; protected Person(SerializationInfo info, StreamingContext context) : base(info, context) { } #endregion #region Properties /// \u0026lt;summary\u0026gt; /// Gets or sets the name. /// \u0026lt;/summary\u0026gt; public string Name { get { return GetValue\u0026lt;string\u0026gt;(NameProperty); } set { SetValue(NameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Name property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData NameProperty = RegisterProperty(\u0026quot;Name\u0026quot;, typeof(string), \u0026quot;MyName\u0026quot;); #endregion #region Methods #endregion }  Loading an object Loading an object is really simple once the class has been created. It is important to use the static method on the class:\nvar person = Person.Load(@\u0026quot;c:\\person.dob\u0026quot;);  Saving an object To save an object, an instance is required. Then simply call the Save method.\nvar person = new Person(); person.Name = \u0026quot;John Doe\u0026quot;; person.Save(@\u0026quot;c:\\person.dob\u0026quot;);  "
},
{
	"uri": "http://docs.catelproject.com/5.1/faq/performance-considerations/",
	"title": "Performance considerations",
	"tags": [],
	"description": "",
	"content": " While developing software, it is very important to keep an eye on the performance. Catel itself does perform very well, but there are some caveats that you should be aware of. If you have the feeling that the application is laggy or slow, or if you want to make sure to squeeze the best performance out of Catel, consider taking a closer look at the checklist below.\nUse the ApiCop feature to get a detailed advisory report on your software\n\rGeneral Disable the call to LogManager.AddDebugListener The DebugListener is a very useful class while developing an application. It throws all the logging of Catel to the output window of Visual Studio which allows you to view exactly what happens behind the scenes. However, writing all these logs to the output window is very expensive and might cause an application to perform badly.\nTherefore, it is important to disable any call to LogManager.AddDebugListener when releasing an application or while performance testing.\nBest way to deal with this is to wrap it inside the DEBUG define:\n#if DEBUG LogManager.AddDebugListener(); #endif  Preloading assemblies into the AppDomain Preloading assemblies might result in a slower startup time, but will not cause slow downs for reflection or assembly loading during the actual application execution. To preload assemblies using Catel, simply call this extension method:\n** **\nWPF application\nIn App.xaml.cs, add the following code\nvar directory = typeof(MainWindow).Assembly.GetDirectory(); AppDomain.CurrentDomain.PreloadAssemblies(directory);  ASP.NET application\nIn global.asax, add the following code:\nvar directory = Server.MapPath(\u0026quot;~/bin\u0026quot;); AppDomain.Current.PreloadAssemblies(directory);  Warming up the serializers To improve performance for serialization, warm up the serializers.\nMVVM Set SkipSearchingForInfoBarMessageControl on UserControl to true By default, Catel assumes that an InfoBarMessageControl is located on any window. However, it might be that this control is not located on a window that contains an instance of the UserControl class. This might decrease the performance, especially when lots of user controls are used in a hierarchical way. The cause is that the UserControlLogic searches for an InfoBarMessageControl to register the view model to.\n If no *InfoBarMessageControl* is located on a container, make sure to set *SkipSearchingForInfoBarMessageControl* to true.\n// Use when not using styles and transitions Catel.Windows.Controls.UserControl.DefaultTransferStylesAndTransitionsToViewModelGridValue = false; // Use when not using any validation controls Catel.Windows.Controls.UserControl.DefaultSkipSearchingForInfoBarMessageControlValue = true; Catel.Windows.Controls.UserControl.DefaultCreateWarningAndErrorValidatorForViewModelValue = false;  Use the FastObservableCollection The FastObservableCollection does not raise events for every item, but only invokes events for the complete range of items added to or removed from the collection.\nWhen modifying a large collection of items, it is not required to raise change events for each added / removed value. Therefore the FastObservableCollection will disable change notifications until the full collection modification is done and then raise the change events just once.\nSpecify throttling on the ViewModelBase The ViewModelBase allows the specify the throttling of the property change notifications. In normal situations it is best to directly raise property change notifications. However, when a lot of properties change a lot within a very short timeframe, it might be interesting to enable throttling. By using throttling, the change notifications are not directly sent to the UI but instead added to a dictionary. Then each time the ThottlingRate is reached, the change notifications are sent in batches to the view. If the same property has changed several times in a specific time frame, it will only be raised once which might give a performance boost in very specific situations.\nBy default, throttling is disabled but can be enabled by setting the ThrottlingRate property:\nThrottlingRate = new TimeSpan(0, 0, 0, 0, 200);  The AdvancedDemo example contains a demo that shows the impact of throttling\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/ioc/setting-up-using-configuration/",
	"title": "Setting up the ServiceLocator using configuration",
	"tags": [],
	"description": "",
	"content": " The ServiceLocator in Catel can be set up from configuration file.\n/**/ Importing IoC configuration section Configuring a service locator from the default configuration Configuring a service locator from a named configuration\nImporting IoC configuration section The first step to setup the service locator from the configuration file is import the custom section type Catel.IoC.IoCConfigurationSection from Catel.Core. The following example shows how to import this configuration section and make it available for the configuration file as ioc:\n\u0026lt;configuration\u0026gt; \u0026lt;configSections\u0026gt; \u0026lt;sectionGroup name=\u0026quot;catel\u0026quot;\u0026gt; \u0026lt;section name=\u0026quot;ioc\u0026quot; type=\u0026quot;Catel.IoC.IoCConfigurationSection, Catel.Core\u0026quot; /\u0026gt; \u0026lt;/sectionGroup\u0026gt; \u0026lt;/configSections\u0026gt; ... \u0026lt;/configuration\u0026gt;  In the example above we also create a section group named catel to group all Catel related configuration sections.\n\rConfiguring a service locator from the default configuration It\u0026rsquo;s possible add more than one service locator configuration to the configuration file but you must specify an unique name. If a name of a service locator configuration is not specified then the name default is assigned. By default such configuration supports dependency injection.\n\u0026lt;configuration\u0026gt; \u0026lt;configSections\u0026gt; \u0026lt;sectionGroup name=\u0026quot;catel\u0026quot;\u0026gt; \u0026lt;section name=\u0026quot;ioc\u0026quot; type=\u0026quot;Catel.IoC.IoCConfigurationSection, Catel.Core\u0026quot; /\u0026gt; \u0026lt;/sectionGroup\u0026gt; \u0026lt;/configSections\u0026gt; \u0026lt;catel\u0026gt; \u0026lt;ioc\u0026gt; \u0026lt;serviceLocatorConfigurations\u0026gt; \u0026lt;serviceLocatorConfiguration [name=\u0026quot;default\u0026quot;]\u0026gt; \u0026lt;register interfaceType=\u0026quot;Catel.MVVM.Services.IUIVisualizerService\u0026quot; implementationType=\u0026quot;Catel.MVVM.Services.UIVisualizerService\u0026quot; /\u0026gt; \u0026lt;register interfaceType=\u0026quot;Catel.MVVM.Services.IProcessService\u0026quot; implementationType=\u0026quot;Catel.MVVM.Services.ProcessService\u0026quot; /\u0026gt; \u0026lt;/serviceLocatorConfiguration\u0026gt; \u0026lt;/serviceLocatorConfigurations\u0026gt; \u0026lt;/ioc\u0026gt; \u0026lt;/catel\u0026gt; \u0026lt;/configuration\u0026gt;   To configure a service locator from the default service locator configuration use the following code:\n var serviceLocator = ServiceLocator.Default; Configuration configuration = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None); var ioc = configuration.GetSection\u0026lt;IoCConfigurationSection\u0026gt;(\u0026quot;ioc\u0026quot;, \u0026quot;catel\u0026quot;); ioc.DefaultServiceLocatorConfiguration.Configure(serviceLocator);   Configuring a service locator from a named configuration The following configuration file is a full example on how write more than one service locator configuration:\n\u0026lt;configuration\u0026gt; \u0026lt;configSections\u0026gt; \u0026lt;sectionGroup name=\u0026quot;catel\u0026quot;\u0026gt; \u0026lt;section name=\u0026quot;ioc\u0026quot; type=\u0026quot;Catel.IoC.IoCConfigurationSection, Catel.Core\u0026quot; /\u0026gt; \u0026lt;/sectionGroup\u0026gt; \u0026lt;/configSections\u0026gt; \u0026lt;catel\u0026gt; \u0026lt;ioc\u0026gt; \u0026lt;serviceLocatorConfigurations\u0026gt; \u0026lt;serviceLocatorConfiguration\u0026gt; \u0026lt;register interfaceType=\u0026quot;Catel.MVVM.Services.IUIVisualizerService\u0026quot; implementationType=\u0026quot;Catel.MVVM.Services.UIVisualizerService\u0026quot; /\u0026gt; \u0026lt;register interfaceType=\u0026quot;Catel.MVVM.Services.IProcessService\u0026quot; implementationType=\u0026quot;Catel.MVVM.Services.ProcessService\u0026quot; /\u0026gt; \u0026lt;/serviceLocatorConfiguration\u0026gt; \u0026lt;serviceLocatorConfiguration name=\u0026quot;test\u0026quot; supportDependencyInjection=\u0026quot;false\u0026quot;\u0026gt; \u0026lt;register interfaceType=\u0026quot;Catel.MVVM.Services.IUIVisualizerService\u0026quot; implementationType=\u0026quot;Catel.MVVM.Services.Test.UIVisualizerService\u0026quot; registrationType=\u0026quot;Transient\u0026quot;/\u0026gt; \u0026lt;register interfaceType=\u0026quot;Catel.MVVM.Services.IProcessService\u0026quot; implementationType=\u0026quot;Catel.MVVM.Services.Test.ProcessService\u0026quot; tag=\u0026quot;test\u0026quot;/\u0026gt; \u0026lt;/serviceLocatorConfiguration\u0026gt; \u0026lt;/serviceLocatorConfigurations\u0026gt; \u0026lt;/ioc\u0026gt; \u0026lt;/catel\u0026gt; \u0026lt;/configuration\u0026gt;  To configure a service locator from a named configuration use the following code:\nvar serviceLocator = ServiceLocator.Default; Configuration configuration = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None); var ioc = configuration.GetSection\u0026lt;IoCConfigurationSection\u0026gt;(\u0026quot;ioc\u0026quot;, \u0026quot;catel\u0026quot;); ioc.GetServiceLocatorConfiguration(\u0026quot;test\u0026quot;).Configure(serviceLocator);  You should also note the options setup if the container in order to support dependency injection and the registration type (a.k.a instantiation style) and the tag for each registration.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/serialization/customizing-serialization/taking-full-control-of-serialization/",
	"title": "Taking full control of serialization",
	"tags": [],
	"description": "",
	"content": " It\u0026rsquo;s possible that full control is needed (either for performance or custom serialization formats). To ensure the best performance possible, this is implemented with a special interface for each serialization engine. If one of the engines detects such a special interface, it will skip all the plumbing and directly call the interface with the right context.\nBinary serialization Custom binary serialization is not (yet) supported\n\rXml serialization To gain the best performance possible using the xml serializer, a model should implement the ICustomXmlSerializable interface.\npublic class CustomXmlSerializationModel : ModelBase, ICustomXmlSerializable { public string FirstName { get { return GetValue\u0026lt;string\u0026gt;(FirstNameProperty); } set { SetValue(FirstNameProperty, value); } } public static readonly PropertyData FirstNameProperty = RegisterProperty(\u0026quot;FirstName\u0026quot;, typeof(string), null); void ICustomXmlSerializable.Serialize(XElement xmlElement) { xmlElement.Add(new XElement(\u0026quot;FirstName\u0026quot;) { Value = FirstName }); } void ICustomXmlSerializable.Deserialize(XElement xmlElement) { FirstName = xmlElement.Element(\u0026quot;FirstName\u0026quot;).Value; } }  Json serialization To gain the best performance possible using the json serializer, a model should implement the ICustomJsonSerializable interface.\npublic class CustomJsonSerializationModel : ModelBase, ICustomJsonSerializable { public string FirstName { get { return GetValue\u0026lt;string\u0026gt;(FirstNameProperty); } set { SetValue(FirstNameProperty, value); } } public static readonly PropertyData FirstNameProperty = RegisterProperty(\u0026quot;FirstName\u0026quot;, typeof(string), null); void ICustomJsonSerializable.Serialize(JsonWriter jsonWriter) { jsonWriter.WriteStartObject(); jsonWriter.WritePropertyName(\u0026quot;FirstName\u0026quot;); jsonWriter.WriteValue(FirstName); jsonWriter.WriteEndObject(); } void ICustomJsonSerializable.Deserialize(JsonReader jsonReader) { // Note: this is probably not the fastest way to deserialize, but it's used to show the possibilities of the engine var jsonObject = JObject.Load(jsonReader); var jsonProperties = jsonObject.Properties().ToDictionary(x =\u0026gt; x.Name, x =\u0026gt; x); FirstName = (string)jsonProperties[\u0026quot;FirstName\u0026quot;].Value; } }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/data-handling/validatablemodelbase/",
	"title": "ValidatableModelBase",
	"tags": [],
	"description": "",
	"content": "The ValidatableModelBase class extends the [ModelBase](/5.1/catel-core/data-handling/modelbase/) class with functionality to validate the model. The class implements the IDataErrorInfo interface so it is possible to validate the data object and check the errors. This way, no custom validation code needs to be written outside the data class.\nMore documentation should be written in the future\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/validation/validation-via-ivalidator/",
	"title": "Validation via IValidator",
	"tags": [],
	"description": "",
	"content": " The ViewModelBase derives from ModelBase, thus all information here also applies to the ViewModelBase\n\rThe validation in Catel is extremely flexible, but sometimes it is just not enough or you are forced to use external validators. For such cases, Catel provides the IValidatorProvider and IValidator interfaces. These allow very flexible injection or external validators into data objects and view models of Catel.\nImplementing the IValidatorProvider The IValidatorProvider is responsible to return the right IValidator for a specific type. There is a convenience implementation named ValidatorProviderBase which only requires the implementation of one single method. Below is an example of an implementation of the IValidatorProvider.\npublic class ValidatorProvider : ValidatorProviderBase { /// \u0026lt;summary\u0026gt; /// Gets a validator for the specified target type. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;targetType\u0026quot;\u0026gt;The target type.\u0026lt;/param\u0026gt; /// \u0026lt;returns\u0026gt; /// The \u0026lt;see cref=\u0026quot;T:Catel.Data.IValidator\u0026quot;/\u0026gt; for the specified type or \u0026lt;c\u0026gt;null\u0026lt;/c\u0026gt; if no validator is available for the specified type. /// \u0026lt;/returns\u0026gt; /// \u0026lt;exception cref=\u0026quot;T:System.ArgumentNullException\u0026quot;\u0026gt;The \u0026lt;paramref name=\u0026quot;targetType\u0026quot;/\u0026gt; is \u0026lt;c\u0026gt;null\u0026lt;/c\u0026gt;.\u0026lt;/exception\u0026gt; public override IValidator GetValidator(Type targetType) { if (targetType == typeof(ValidationInIValidatorViewModel)) { return new Validator(); } // No validator available for other types return null; } }  Implementing the IValidator The IValidator exposes lots of methods to gain the as much freedom as possible. However, most of the methods that are exposed by the interface are hardly used. Therefore there is a convenience base class named ValidatorBase. To create a basic validator, derive from the class and override the methods required for validation.\npublic class Validator : ValidatorBase\u0026lt;TargetClass\u0026gt; { /// \u0026lt;summary\u0026gt; /// Validates the fields of the specified instance. The results must be added to the list of validation /// results. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;instance\u0026quot;\u0026gt;The instance to validate.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026quot;validationResults\u0026quot;\u0026gt;The validation results.\u0026lt;/param\u0026gt; /// \u0026lt;exception cref=\u0026quot;T:System.ArgumentNullException\u0026quot;\u0026gt;The \u0026lt;paramref name=\u0026quot;instance\u0026quot;/\u0026gt; is \u0026lt;c\u0026gt;null\u0026lt;/c\u0026gt;.\u0026lt;/exception\u0026gt; /// \u0026lt;exception cref=\u0026quot;T:System.ArgumentNullException\u0026quot;\u0026gt;The \u0026lt;paramref name=\u0026quot;validationResults\u0026quot;/\u0026gt; is \u0026lt;c\u0026gt;null\u0026lt;/c\u0026gt;.\u0026lt;/exception\u0026gt; public override void ValidateFields(TargetClass instance, List\u0026lt;IFieldValidationResult\u0026gt; validationResults) { if (string.IsNullOrEmpty(instance.FirstName)) { validationResults.Add(FieldValidationResult.CreateError(TargetClass.FirstNameProperty, \u0026quot;First name cannot be empty\u0026quot;)); } if (string.IsNullOrEmpty(instance.LastName)) { validationResults.Add(FieldValidationResult.CreateError(TargetClass.LastNameProperty, \u0026quot;Last name cannot be empty\u0026quot;)); } } /// \u0026lt;summary\u0026gt; /// Validates the business rules of the specified instance. The results must be added to the list of validation /// results. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;instance\u0026quot;\u0026gt;The instance to validate.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026quot;validationResults\u0026quot;\u0026gt;The validation results.\u0026lt;/param\u0026gt; /// \u0026lt;exception cref=\u0026quot;T:System.ArgumentNullException\u0026quot;\u0026gt;The \u0026lt;paramref name=\u0026quot;instance\u0026quot;/\u0026gt; is \u0026lt;c\u0026gt;null\u0026lt;/c\u0026gt;.\u0026lt;/exception\u0026gt; /// \u0026lt;exception cref=\u0026quot;T:System.ArgumentNullException\u0026quot;\u0026gt;The \u0026lt;paramref name=\u0026quot;validationResults\u0026quot;/\u0026gt; is \u0026lt;c\u0026gt;null\u0026lt;/c\u0026gt;.\u0026lt;/exception\u0026gt; public override void ValidateBusinessRules(TargetClass instance, List\u0026lt;IBusinessRuleValidationResult\u0026gt; validationResults) { // No business rules (yet) } }  Setting the validator in ModelBase To register an IValidator instance on a ModelBase, use the following code:\nvar modelValidation = myModel as IModelValidation; if (modelValidation != null) { modelValidation .Validator = new MyValidator(); }  If an IValidatorProvider instance is available, the following code can be used to allow a more generic approach. This code assumes that the IValidatorProvider is registered in the ServiceLocator.\nvar validatorProvider = ServiceLocator.Instance.ResolveType\u0026lt;IValidatorProvider\u0026gt;(); myObject.Validator = validatorProvider.GetValidator(myObject.GetType());  If the IValidatorProvider returns null (which is allowed), no custom validator will be used.\nSetting the validator in ViewModelBase The ViewModelBase has it\u0026rsquo;s own ServiceLocator. The easiest way to support a validator is to register an IValidatorProvider instance in the ServiceLocator:\nServiceLocator.Instance.RegisterType\u0026lt;IValidatorProvider, MyValidatorProvider\u0026gt;();  The ViewModelBase will automatically retrieve the right IValidator for the view model. If no IValidatorProvider is registered in the ServiceLocator, no validator will be set automatically. It is also possible to set the Validator property manually, but it is recommended to use an IValidatorProvider and register it.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/logging/anotar-catel-fody/",
	"title": "Anotar.Catel.Fody",
	"tags": [],
	"description": "",
	"content": " Logging is a very important part of an application. It provides detailed information about the application workflow, even when an application is already deployed to several clients. That’s the reason that logging is a first class citizen in the Catel framework.\nIn general, logging works by defining an ILog instance on a class:\nprivate static readonly ILog Log = LogManager.GetCurrentClassLogger();  Then in any method, logging can be added like this:\nLog.Info(“This is a logging with a format ‘{0}’”, “test”);  Writing the Log definition can be boring and repetitive. Luckily Simon Cropp came up with a solution for that, namely Anotar.Catel.Fody. With the Anotar implementation, a reference will be added to the solution. Then after compilation the assembly will be removed and all calls to the LogTo class will be replaced by actual calls to the Catel logging classes.\nHow to use Anotar Using Anotar is really easy, just call the static methods on the LogTo class as you can see below:\nLogTo.Info(\u0026quot;This is a logging with a format ‘{0}’\u0026quot;, “test”);  Note that it is no longer required to define the Log field, it will be added automatically by Anotar.\nBesides that it is really easy to use, another benefit is a very small performance improvement. The GetCurrentClassLogger uses reflection to determine the current class. This is a very slight hit on performance the first time a class is used (only once, the field is static). Anotar directly replaces the call by an implementation like this:\nprivate static readonly ILog Log = LogManager.GetLogger(typeof(MyClass));  Additional options Disabling method names and line numbers By default Anotar also logs the method and line number:\n03:58:11:858 =\u0026gt; [DEBUG] [AnotarDemo.Program] Method: 'Void Main(String[])'. Line: ~19. this is a test  If you don\u0026rsquo;t want such output, add this attribute on assembly level:\n[assembly: LogMinimalMessage]  Then the output will look like this:\n03:59:36:344 =\u0026gt; [DEBUG] [AnotarDemo1.Program] this is a test  Logging exceptions automatically It is possible to automatically log exceptions inside a method. To accomplish this, decorate the method with the LogTo[LogLevel]OnException attribute:\n[LogToDebugOnException] public static void ExceptionalMethod() { throw new Exception(\u0026quot;This will be logged automatically\u0026quot;); }  Then the output will be as follows:\n04:01:48:331 =\u0026gt; [DEBUG] [AnotarDemo.Program] Exception occurred in 'Void ExceptionalMethod()'. | [Exception] System.Exception: This will be logged automatically at AnotarDemo.Program.ExceptionalMethod() in c:\\Source\\AnotarDemo\\AnotarDemo\\Program.cs:line 27  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/data-handling/comparablemodelbase/",
	"title": "ComparableModelBase",
	"tags": [],
	"description": "",
	"content": "The ComparableModelBase class extends the [ModelBase](/5.1/catel-core/data-handling/modelbase/) class with default equality comparer members. This logic has been moved to a separate class to improve the out-of-the-box performance of the ModelBase class.\nMore documentation should be written in the future\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/getting-started/wpf/creating-the-user-controls/",
	"title": "Creating the views (user controls)",
	"tags": [],
	"description": "",
	"content": " In this step we will create the views for the application. There are several views that will be created and both user controls and windows will be handled in this part of the guide. Catel makes it very easy to create views as user controls with their own view models. In the previous step we already created the view models.\nPerson view To create a new view, right-click the Views folder in the solution =\u0026gt; Add =\u0026gt; New item\u0026hellip; =\u0026gt; On-line =\u0026gt; and search for Catel as you can see in the screen below:\nGive the new view the name PersonView. The view will be added to the Views folder.\nCatel will automatically link the PersonViewModel and PersonView together by naming convention\n\rNow we only need to modify the view itself, the code-behind can stay untouched. Since xaml isn\u0026rsquo;t very interesting for this guide, simply copy/paste the xaml below and set it as content of the view:\n\u0026lt;catel:StackGrid\u0026gt; \u0026lt;catel:StackGrid.RowDefinitions\u0026gt; \u0026lt;RowDefinition Height=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;RowDefinition Height=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;/catel:StackGrid.RowDefinitions\u0026gt; \u0026lt;catel:StackGrid.ColumnDefinitions\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;*\u0026quot; /\u0026gt; \u0026lt;/catel:StackGrid.ColumnDefinitions\u0026gt; \u0026lt;Label Content=\u0026quot;First name\u0026quot; /\u0026gt; \u0026lt;Label Content=\u0026quot;{Binding FirstName}\u0026quot; /\u0026gt; \u0026lt;Label Content=\u0026quot;Last name\u0026quot; /\u0026gt; \u0026lt;Label Content=\u0026quot;{Binding LastName}\u0026quot; /\u0026gt; \u0026lt;/catel:StackGrid\u0026gt;  Family view The FamilyView must be created exactly the same way as the PersonView. Use the following xaml as content:\n\u0026lt;catel:StackGrid\u0026gt; \u0026lt;catel:StackGrid.RowDefinitions\u0026gt; \u0026lt;RowDefinition Height=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;RowDefinition Height=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;RowDefinition Height=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;/catel:StackGrid.RowDefinitions\u0026gt; \u0026lt;catel:StackGrid.ColumnDefinitions\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;*\u0026quot; /\u0026gt; \u0026lt;/catel:StackGrid.ColumnDefinitions\u0026gt; \u0026lt;Label Content=\u0026quot;Family name\u0026quot; /\u0026gt; \u0026lt;Label Content=\u0026quot;{Binding FamilyName}\u0026quot; /\u0026gt; \u0026lt;Label Grid.ColumnSpan=\u0026quot;2\u0026quot; Content=\u0026quot;Persons\u0026quot; /\u0026gt; \u0026lt;ItemsControl Grid.ColumnSpan=\u0026quot;2\u0026quot; ItemsSource=\u0026quot;{Binding Persons}\u0026quot;\u0026gt; \u0026lt;ItemsControl.ItemTemplate\u0026gt; \u0026lt;DataTemplate\u0026gt; \u0026lt;views:PersonView DataContext=\u0026quot;{Binding}\u0026quot; /\u0026gt; \u0026lt;/DataTemplate\u0026gt; \u0026lt;/ItemsControl.ItemTemplate\u0026gt; \u0026lt;/ItemsControl\u0026gt; \u0026lt;/catel:StackGrid\u0026gt;  Since this view uses the PersonView, it must be defined as a namespace at the top of the file:\nxmlns:views=\u0026quot;clr-namespace:WPF.GettingStarted.Views\u0026quot;  The thing that is important to notice in the FamilyView is how it uses the PersonView and injects the Person models into the PersonView data context.\nUp next Creating the views (windows)\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/examples/",
	"title": "Examples",
	"tags": [],
	"description": "",
	"content": "We will write documentation about examples here.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/introduction/mvvm/",
	"title": "Introduction to MVVM",
	"tags": [],
	"description": "",
	"content": "\r\rDifferent interpretations of MVVM\r\r\rValidation in model or view model?\r\r\rIntroduction to MVVM and models\r\r\rCreating view models with Catel\r\r\rIntroduction to services\r\r\rIntroduction to the nested user controls problem\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/introduction/mvvm/introduction-to-services/",
	"title": "Introduction to services",
	"tags": [],
	"description": "",
	"content": " Services are very important in MVVM. They define a way to interact with the user without using fixed controls such as MessageBox or SaveFileDialog. The interfaces defined in Catel only define generic functionality of what to expect from a specific service. Using services is a great way to abstract away all specific functionality from a view model into a service that can be mocked during unit testing and can be used by other view models as well.\nServiceLocator The key behind services is the ServiceLocator. The ServiceLocator is the IoC (Inversion of Control) container that Catel provides. This is a container that contains all registrations and service instances available throughout the application. Retrieving services from the default ServiceLocator in Catel is very simple:\nvar dependencyResolver = this.GetDependencyResolver(); var messageService = dependencyResolver.Resolve\u0026lt;IMessageService\u0026gt;();  It is also possible to get services injected into the constructor, which is the recommended approach\nDependency injection A slightly better way to manage dependencies is to use dependency injection. The reason is that to instantiate a class, you always have to provide all the dependencies. This way, all dependencies are always known to the caller making it a bit complicated and encouraging high coupling. Using dependency injection however makes it a bit easier to control than having to know what services are being used by a component (such as a view model).\nCatel fully supports dependency on view models. This means that a view model can have a constructor with several services. Catel will automatically inject the services via the constructor. An example is below:\npublic class PersonViewModel : ViewModelBase { private readonly IMessageService _messageService; private readonly IPleaseWaitService _pleaseWaitService; public PersonViewModel(IMessageService messageService, IPleaseWaitService pleaseWaitService) { _messageService = messageService; _pleaseWaitService = pleaseWaitService; } }  Overview of services The services below are available in Catel:\nName\nDescription\nIAccelerometerService\nAllows a developer to access the accelerometer of a Windows Phone device.\nICameraService\nAllows a developer to use the PhotoCamera class in an MVVM manner.\nICompassService\nAllows a developer to access the compass of a Windows Phone device.\nIGyroscopeService\nAllows a developer to access the compass of a Windows Phone device.\nILocationService\nAllows a developer to use GPS devices inside a view model.\nIMessageService\nAllows a developer to show message boxes from a view model.\nINavigationService\nAllows a developer to navigate to other pages inside an application using view models only.\nIOpenFileService\nAllows a developer to let the user choose a file from inside a view model.\nIPleaseWaitService\nAllows a developer to show a please wait message (a.k.a. busy indicator) from a view model.\nIProcessService\nAllows a developer to run processes from inside a view model.\nISaveFileService\nAllows a developer to let the user choose a file from inside a view model.\nIUIVisualizerService\nAllows a developer to show (modal) windows or dialogs without actually referencing a specific view.\nIVibrateService\nAllows a developer to start and stop vibration of the device via a service.\nNote that this section is not always fully up-to-date, Catel might provide more services than listed here\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/ioc/replacing-default-components/",
	"title": "Replacing the default components",
	"tags": [],
	"description": "",
	"content": " By default, Catel provides very fast and functional implementations of the component interfaces. It is possible though that one needs to use a different container than the specified ones.\nNote that when any component is replaced, it must be registered with the other instances that are already running. Catel cannot do this automatically because it is not aware how other (customized) components interact or require registration.\n\rReplacing default components Starting with Catel 3.9, it is very easy to customize the components. This can be achieved by customizing the factory methods that are available on the IoCConfiguration class.\nNote that the customization of the IoCConfiguration is the **first **** thing that must be done at application start up\n\rTo replace any component, first create a custom implementation of the specific component, for example the IServiceLocator. Then update the factory and call UpdateDefaultComponents:\nCatel.IoC.IoCFactory.CreateServiceLocatorFunc = () =\u0026gt; new MyCustomServiceLocator(); Catel.IoC.IoCFactory.CreateTypeFactoryFunc = () =\u0026gt; new MyCustomTypeFactory(); Catel.IoC.IoCConfiguration.UpdateDefaultComponents();  At this moment, Catel will fully replace the components (in this case the IServiceLocator and ITypeFactory), but will keep using the default implementation of the IDependencyResolver.\nCreating IoC components in code It is best to respect the customization of the IoC components in the code. Therefore it is wise to always use the IoCFactory to create a ServiceLocator when a new instance is needed:\nvar serviceLocator = IoCFactory.CreateServiceLocator();  Catel will automatically create the right IDependencyResolver and ITypeFactory and register them in the newly created IServiceLocator.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/setup-deployment/update-guides/",
	"title": "Update guides",
	"tags": [],
	"description": "",
	"content": "\r\rCatel 4.0\r\r\rCatel 4.1\r\r\rCatel 5.0\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/validation/using-validation-context/",
	"title": "Using the validation context",
	"tags": [],
	"description": "",
	"content": " The ViewModelBase derives from ModelBase, thus all information here also applies to the ViewModelBase\n\rSometimes detailed information about validation is required. This is possible in Catel thanks to the ValidationContext class. The ValidationContext serves as the container for all validation results that are gathered via the available validation methods. The ValidationContext has lots of methods that all return lists of either IFieldValidationResult or IBusinessRuleValidationResult.\nThe examples below are shown a starter examples, but you can gather every type of validation result by using the ValidationContext. To retrieve the validation context of an object, use the following code:\nvar modelValidation = new MyViewModel() as IModelValidation; var validationContext = modelValidation.ValidationContext;  Getting the number of or warnings and errors  To retrieve the total number of warnings and errors, use the following code:\nint count = validationContext.GetValidationCount();  Getting all the field errors To retrieve all the field errors, use the following code:\nvar fieldErrors = validationContext.GetFieldErrors();  Getting all the field errors of a specific property  To retrieve all the field errors of a specific property, use the following code:\nvar fieldErrors = validationContext.GetFieldErrors(\u0026quot;MyProperty\u0026quot;);  Getting all the business rule warnings To retrieve all the business rule warnings:\nvar businessRuleWarnings = validationContext.GetBusinessRuleWarnings();  Getting all the business rule errors with a specific tag To retrieve all the business rule errors with a specific tag, use the following code:\nvar businessRuleErrors = validationContext.GetBusinessRuleErrors(\u0026quot;myTag\u0026quot;);  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/",
	"title": "Catel.Core",
	"tags": [],
	"description": "",
	"content": "\r\rApiCop\r\r\rArgument checking\r\r\rCaching\r\r\rConfiguration\r\r\rData handling\r\r\rException handling\r\r\rIoC (ServiceLocator and TypeFactory)\r\r\rLogging\r\r\rMessaging\r\r\rMultilingual / Localization\r\r\rParallel invocation and tasks\r\r\rPooling\r\r\rPreventing memory leaks\r\r\rReflection\r\r\rScoping\r\r\rSerialization\r\r\rValidation\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/getting-started/wpf/creating-the-windows/",
	"title": "Creating the views (windows)",
	"tags": [],
	"description": "",
	"content": " In this step we will create the windows for the application. In the previous step we already created the user controls. Windows are a great way to show in an edit-context. Catel provides great edit-windows in the form of the DataWindow. This is a window that automatically adds *OK* and *Cancel* buttons (but of course allows customization of the buttons and behavior).\nPerson window It is very important that the window derives from one of the Catel windows. This is required to make the binding system work (same as UserControl). Make sure that the window definition in the xaml is either catel:Window or catel:DataWindow\n\rTo add a new DataWindow, right-click the *Views* folder in the solution =\u0026gt; *Add* =\u0026gt; *New item\u0026hellip;* =\u0026gt; *On-line* =\u0026gt; and search for Catel as you can see in the screen below:\nGive the new view the name PersonWindow. The view will be added to the *Views* folder.\nNote that we can use the PersonViewModel for both the PersonView (user control) and PersonWindow. Both views represent the same models and view models, just a different context. To make sure that the IUIVisualizerService knows what view to pick first, register the PersonWindow in the IUIVisualizerService at application startup:\nvar uiVisualizerService = serviceLocator.ResolveType\u0026lt;IUIVisualizerService\u0026gt;(); uiVisualizerService.Register(typeof(PersonViewModel), typeof(PersonWindow));  \rThe template will also create a constructor to inject a view model into the window. Please make sure that the constructor takes a view model of the type PersonViewModel instead of the generated PersonWindowModel. Then replace the content of the view with the xaml below:\n\u0026lt;catel:StackGrid\u0026gt; \u0026lt;catel:StackGrid.RowDefinitions\u0026gt; \u0026lt;RowDefinition Height=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;RowDefinition Height=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;/catel:StackGrid.RowDefinitions\u0026gt; \u0026lt;catel:StackGrid.ColumnDefinitions\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;*\u0026quot; /\u0026gt; \u0026lt;/catel:StackGrid.ColumnDefinitions\u0026gt; \u0026lt;Label Content=\u0026quot;First name\u0026quot; /\u0026gt; \u0026lt;TextBox Text=\u0026quot;{Binding FirstName, ValidatesOnDataErrors=True, NotifyOnValidationError=True}\u0026quot; /\u0026gt; \u0026lt;Label Content=\u0026quot;Last name\u0026quot; /\u0026gt; \u0026lt;TextBox Text=\u0026quot;{Binding LastName, ValidatesOnDataErrors=True, NotifyOnValidationError=True}\u0026quot; /\u0026gt; \u0026lt;/catel:StackGrid\u0026gt;  Family window The *FamilyWindow* is a bit different because we want additional logic in this window. We want to create add / edit / remove buttons for the family members. Therefore we need to create a separate view model which contains this logic. Creating the FamilyWindowViewModel Since the FamilyWindowViewModel will look a lot like the FamilyViewModel, just copy/paste the FamilyViewModel and rename the copy to FamilyWindowViewModel.\nNote that the FamilyWindowViewModel needs additional logic, but that will be handled in the next part of this getting started guide\n\rCreating the FamilyWindow Once the FamilyWindowViewModel is created, the *FamilyWindow *must be created exactly the same way as the PersonWindow. Again make sure to use the right view model (FamilyWindowViewModel) in the constructor of the window in the code-behind. Then use the following xaml:\n\u0026lt;catel:StackGrid\u0026gt; \u0026lt;catel:StackGrid.RowDefinitions\u0026gt; \u0026lt;RowDefinition Height=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;RowDefinition Height=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;RowDefinition Height=\u0026quot;*\u0026quot; /\u0026gt; \u0026lt;/catel:StackGrid.RowDefinitions\u0026gt; \u0026lt;catel:StackGrid.ColumnDefinitions\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;*\u0026quot; /\u0026gt; \u0026lt;/catel:StackGrid.ColumnDefinitions\u0026gt; \u0026lt;Label Content=\u0026quot;Family name\u0026quot; /\u0026gt; \u0026lt;TextBox Text=\u0026quot;{Binding FamilyName, NotifyOnValidationError=True, ValidatesOnDataErrors=True}\u0026quot; /\u0026gt; \u0026lt;Label Grid.ColumnSpan=\u0026quot;2\u0026quot; Content=\u0026quot;Persons\u0026quot; /\u0026gt; \u0026lt;catel:StackGrid Grid.ColumnSpan=\u0026quot;2\u0026quot;\u0026gt; \u0026lt;catel:StackGrid.ColumnDefinitions\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;*\u0026quot; /\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;/catel:StackGrid.ColumnDefinitions\u0026gt; \u0026lt;ListBox ItemsSource=\u0026quot;{Binding Persons}\u0026quot; SelectedItem=\u0026quot;{Binding SelectedPerson}\u0026quot;\u0026gt; \u0026lt;ListBox.ItemTemplate\u0026gt; \u0026lt;DataTemplate\u0026gt; \u0026lt;views:PersonView DataContext=\u0026quot;{Binding}\u0026quot; /\u0026gt; \u0026lt;/DataTemplate\u0026gt; \u0026lt;/ListBox.ItemTemplate\u0026gt; \u0026lt;/ListBox\u0026gt; \u0026lt;StackPanel\u0026gt; \u0026lt;Button Command=\u0026quot;{Binding AddPerson}\u0026quot; Content=\u0026quot;Add...\u0026quot; /\u0026gt; \u0026lt;Button Command=\u0026quot;{Binding EditPerson}\u0026quot; Content=\u0026quot;Edit...\u0026quot; /\u0026gt; \u0026lt;Button Command=\u0026quot;{Binding RemovePerson}\u0026quot; Content=\u0026quot;Remove\u0026quot; /\u0026gt; \u0026lt;/StackPanel\u0026gt; \u0026lt;/catel:StackGrid\u0026gt; \u0026lt;/catel:StackGrid\u0026gt;  Up next Hooking up everything together\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/validation/getting-summary-of-validation-results/",
	"title": "Getting a summary of validation results",
	"tags": [],
	"description": "",
	"content": " Sometimes you just need to get a summary of all warnings and errors of an object. All validation is gathered in the IValidationContext and available on that class. However, there are some convenience classes that allow a developer to create a summary based on a specific tag. This convenience class is IValidationSummary, which gathers the right information from an instance of IValidationContext.\nCreating a summary of all validations  To retrieve a summary of all validations from a IValidationContext, use the following code:\nvar validationSummary = validationContext.GetValidationSummary();  Creating a summary of all validations with a specific tag To retrieve a summary of all validations with a specific tag from a IValidationContext, use the following code:\nvar validationSummary = validationContext.GetValidationSummary(\u0026quot;tag\u0026quot;);  Using the ValidationToViewModel attribute The ValidationToViewModel attribute allows a developer to gather a summary of an object easily. For example, to get all the person related validation into the PersonValidationSummary property, use the property definition below:\n[ValidationToViewModel(Tag = \u0026quot;PersonValidation\u0026quot;)] public IValidationSummary PersonValidationSummary { get; set; }  All validation results that have the tag PersonValidation will automatically be gathered into the PersonValidationSummary property after each validation sequence.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/introduction/mvvm/introduction-to-nested-user-controls-problem/",
	"title": "Introduction to the nested user controls problem",
	"tags": [],
	"description": "",
	"content": "One of the issues most users of MVVM face is that “nested user controls” problem. The problem is that most (actually all that we’ve seen) MVVM Frameworks only support one view model for a window (or if you’re lucky, a user control). However, the “nested user controls” problem raises lots of questions:\n What if the requirements are to build a dynamic UI where the nested user controls are loaded dynamically when they are required? What about validation in nested user controls? When should the nested user control view models be saved?  Most MVVM developers just answer: “Put all the properties of the nested user controls on the main view model”. Say that again? Are you kidding me? That’s not a real world solution for a real world problem. So, we as developers of Catel offer you a real world solution for the “nested user controls” problem in the form of the UserControl.\nThe real power of the UserControl class lays in the fact that it is able to construct view models dynamically based on its data context. So, the only thing the developers have to take care of is to set the right data context. Below is a graphical presentation of the “nested user controls” problem:\nAs the images above show, the method that Catel uses to solve the problem is much more professional. Below are a few reasons:\n Separation of concerns (each control has a view model only containing the information for itself, not for children); User controls are built so they can be re-used. Without the user controls to be able to have their own view models, how should one actually use user controls with MVVM?  The idea behind the user control is pretty complex, especially because XAML frameworks aren\u0026rsquo;t very good at runtime data context type changing. However, with a few workarounds (very well described in the source code of UserControl), it is possible to dynamically construct view models. The user control constructs the view model with or without a constructor as described earlier in this article. When the view model is constructed, the user control tries to find a (logical or visual) parent that implements the IViewModelContainer interface. Thanks to this interface, a view model can subscribe itself to a parent view model and the validation chain is created as shown below:\nAs the image above shows, all children in the chain are validated, and when the last child is validated, the view model reports the result of its children and itself back to its parent. This way, it is still possible to disable a command when one of the nested user control view models has an error.\nSaving a chain of nested view models works exactly the same as the validation. First, the view model saves all children, then itself and finally reports back its result to the parent.\nNow, let’s go to some “real-life” example. I don’t want to make it too complex, but not too easy as well, but don’t want to put the focus on the content of the data, but on the user control and view model creation. Therefore, I have chosen for the data model below:\nThe image shows that we have a house. In that house, we have multiple rooms. In each room, there can be several tables with chairs and beds. This shows a “complex” UI tree with lots of different user controls (each object has its own representation and thus user control). Now our goal is to create user controls that can be used in the window that shows the full house, but also in “sub-parts” and we want to be fully independent of the HouseWindowViewModel (which is the only view model that would be created in a regular MVVM Framework).\nThe example below shows only the Room control and the corresponding view model. The full source code of this article is provided in the source code repository of Catel, so the whole example is available if you are interested or need a more complete example.\nFirst, we start with a simple model. For the model, we use the ModelBase class. By using the provided code snippets, this model is setup within a minute:\n/// \u0026lt;summary\u0026gt; /// Bed class which fully supports serialization, property changed notifications, /// backwards compatibility and error checking. /// \u0026lt;/summary\u0026gt; [Serializable] public class Room : ModelBase\u0026lt;Room\u0026gt; { #region Constructor \u0026amp; destructor /// \u0026lt;summary\u0026gt; /// Initializes a new object from scratch. /// \u0026lt;/summary\u0026gt; public Room() : this(NameProperty.GetDefaultValue\u0026lt;string\u0026gt;()) { } /// \u0026lt;summary\u0026gt; /// Initializes a new instance of the \u0026lt;see cref=\u0026quot;Room\u0026quot;/\u0026gt; class. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;name\u0026quot;\u0026gt;The name.\u0026lt;/param\u0026gt; public Room(string name) { // Create collections Tables = new ObservableCollection\u0026lt;Table\u0026gt;(); Beds = new ObservableCollection\u0026lt;Bed\u0026gt;(); // Store values Name = name; } /// \u0026lt;summary\u0026gt; /// Initializes a new object based on \u0026lt;see cref=\u0026quot;SerializationInfo\u0026quot;/\u0026gt;. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;info\u0026quot;\u0026gt;\u0026lt;see cref=\u0026quot;SerializationInfo\u0026quot;/\u0026gt; that contains the information.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026quot;context\u0026quot;\u0026gt;\u0026lt;see cref=\u0026quot;StreamingContext\u0026quot;/\u0026gt;.\u0026lt;/param\u0026gt; protected Room(SerializationInfo info, StreamingContext context) : base(info, context) { } #endregion #region Properties /// \u0026lt;summary\u0026gt; /// Gets or sets the name. /// \u0026lt;/summary\u0026gt; public string Name { get { return GetValue\u0026lt;string\u0026gt;(NameProperty); } set { SetValue(NameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Name property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData NameProperty = RegisterProperty(\u0026quot;Name\u0026quot;, typeof(string), \u0026quot;Room\u0026quot;); /// \u0026lt;summary\u0026gt; /// Gets or sets the table collection. /// \u0026lt;/summary\u0026gt; public ObservableCollection\u0026lt;Table\u0026gt; Tables { get { return GetValue\u0026lt;ObservableCollection\u0026lt;Table\u0026gt;\u0026gt;(TablesProperty); } set { SetValue(TablesProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Tables property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData TablesProperty = RegisterProperty(\u0026quot;Tables\u0026quot;, typeof(ObservableCollection\u0026lt;Table\u0026gt;)); /// \u0026lt;summary\u0026gt; /// Gets or sets the bed collection. /// \u0026lt;/summary\u0026gt; public ObservableCollection\u0026lt;Bed\u0026gt; Beds { get { return GetValue\u0026lt;ObservableCollection\u0026lt;Bed\u0026gt;\u0026gt;(BedsProperty); } set { SetValue(BedsProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Beds property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData BedsProperty = RegisterProperty(\u0026quot;Beds\u0026quot;, typeof(ObservableCollection\u0026lt;Bed\u0026gt;)); #endregion }  Next, we are going to create the view model. Again, by the use of code snippets explained earlier in this article, the view model is set up within a few minutes:\n/// \u0026lt;summary\u0026gt; /// Room view model. /// \u0026lt;/summary\u0026gt; public class RoomViewModel : ViewModelBase { #region Variables private int _bedIndex = 1; private int _tableIndex = 1; #endregion #region Constructor \u0026amp; destructor /// \u0026lt;summary\u0026gt; /// Initializes a new instance of the \u0026lt;see cref=\u0026quot;RoomViewModel\u0026quot;/\u0026gt; class. /// \u0026lt;/summary\u0026gt; public RoomViewModel(Models.Room room) { // Store values Room = room; // Create commands AddTable = new Command(OnAddTableExecuted); AddBed = new Command(OnAddBedExecuted); } #endregion #region Properties /// \u0026lt;summary\u0026gt; /// Gets the title of the view model. /// \u0026lt;/summary\u0026gt; /// \u0026lt;value\u0026gt;The title.\u0026lt;/value\u0026gt; public override string Title { get { return \u0026quot;Room\u0026quot;; } } #region Models /// \u0026lt;summary\u0026gt; /// Gets or sets the room. /// \u0026lt;/summary\u0026gt; [Model] public Models.Room Room { get { return GetValue\u0026lt;Models.Room\u0026gt;(RoomProperty); } private set { SetValue(RoomProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Room property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData RoomProperty = RegisterProperty(\u0026quot;Room\u0026quot;, typeof(Models.Room)); #endregion #region View model /// \u0026lt;summary\u0026gt; /// Gets or sets the name. /// \u0026lt;/summary\u0026gt; [ViewModelToModel(\u0026quot;Room\u0026quot;)] public string Name { get { return GetValue\u0026lt;string\u0026gt;(NameProperty); } set { SetValue(NameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Name property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData NameProperty = RegisterProperty(\u0026quot;Name\u0026quot;, typeof(string)); /// \u0026lt;summary\u0026gt; /// Gets or sets the table collection. /// \u0026lt;/summary\u0026gt; [ViewModelToModel(\u0026quot;Room\u0026quot;)] public ObservableCollection\u0026lt;Models.Table\u0026gt; Tables { get { return GetValue\u0026lt;ObservableCollection\u0026lt;Models.Table\u0026gt;\u0026gt;(TablesProperty); } set { SetValue(TablesProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Tables property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData TablesProperty = RegisterProperty(\u0026quot;Tables\u0026quot;, typeof(ObservableCollection\u0026lt;Models.Table\u0026gt;)); /// \u0026lt;summary\u0026gt; /// Gets or sets the bed collection. /// \u0026lt;/summary\u0026gt; [ViewModelToModel(\u0026quot;Room\u0026quot;)] public ObservableCollection\u0026lt;Models.Bed\u0026gt; Beds { get { return GetValue\u0026lt;ObservableCollection\u0026lt;Models.Bed\u0026gt;\u0026gt;(BedsProperty); } set { SetValue(BedsProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Beds property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData BedsProperty = RegisterProperty(\u0026quot;Beds\u0026quot;, typeof(ObservableCollection\u0026lt;Models.Bed\u0026gt;)); #endregion #endregion #region Commands /// \u0026lt;summary\u0026gt; /// Gets the AddTable command. /// \u0026lt;/summary\u0026gt; public Command AddTable { get; private set; } /// \u0026lt;summary\u0026gt; /// Method to invoke when the AddTable command is executed. /// \u0026lt;/summary\u0026gt; private void OnAddTableExecuted() { Tables.Add(new Models.Table(string.Format(\u0026quot;Table {0}\u0026quot;, _tableIndex++))); } /// \u0026lt;summary\u0026gt; /// Gets the AddBed command. /// \u0026lt;/summary\u0026gt; public Command AddBed { get; private set; } /// \u0026lt;summary\u0026gt; /// Method to invoke when the AddBed command is executed. /// \u0026lt;/summary\u0026gt; private void OnAddBedExecuted() { Beds.Add(new Models.Bed(string.Format(\u0026quot;Bed {0}\u0026quot;, _bedIndex++))); } #endregion }  As you can see, the view model can only be constructed by passing a Room model object. It is very important to be aware of this construction. The reason that there is no empty constructor is because there is no support for views that do not represent a Room model.\nIn the view model, the properties of the Room model are mapped by the use of the Model attribute and the ViewModelToModel attribute. Last but not least, commands are defined to be able to add new tables and beds to the Room model.\nAnother way to add a new user control is to use the item templates\nNow the model and the view model are fully set up, the last thing to do is to create the actual view. To accomplish this, add a new WPF user control to the project. First thing to do is to implement the code-behind, since that is the easiest to do:\n\u0026lt;summary\u0026gt; /// Interaction logic for Room.xaml /// \u0026lt;/summary\u0026gt; public partial class Room : UserControl { /// \u0026lt;summary\u0026gt; /// Initializes a new instance of the \u0026lt;see cref=\u0026quot;Room\u0026quot;/\u0026gt; class. /// \u0026lt;/summary\u0026gt; public Room() { // Initialize component InitializeComponent(); } }  The only thing we changed from the default user control template is that the user control now derives from Catel.Windows.Controls.UserControl control instead of the default System.Windows.Controls.UserControl control. This is it for the code-behind, let’s move up to the view.\nThe last thing to do now is the actual xaml view. For the sake of simplicity, the actual content is left out (it’s just a grid with a textbox and itemscontrols for the children):\n\u0026lt;catel:UserControl x:Class=\u0026quot;Catel.Articles._03___MVVM.Examples.NestedUserControls.Room\u0026quot; xmlns=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation\u0026quot; xmlns:x=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot; xmlns:NestedUserControls=\u0026quot;clr-namespace:Catel.Articles._03___MVVM.Examples.NestedUserControls\u0026quot;\u0026gt; \u0026lt;!-- For the sake of simplicity, the content is left out --\u0026gt; \u0026lt;/catel:UserControl\u0026gt;  A few things are very important to notice in the xaml code shown above. The first thing to notice is that (like the code-behind), the base class is now catel:UserControl instead of UserControl.\nThat’s all that can be learned about solving the “nested user control” problem. We have set up the model, view model and finally the view. Now, let’s take a look at how it looks in a screenshot (and notice the construction time of the view model, they are really constructed on-demand):\nThe red border is the control that we just created. It shows the name of the room, the view model construction time and the child objects (inside expanders).\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/data-handling/savablemodelbase/",
	"title": "SavableModelBase",
	"tags": [],
	"description": "",
	"content": "The SavableModelBase class extends the [ModelBase](/5.1/catel-core/data-handling/modelbase/) class with functionality to save the model to a persistence store.\nNote that the SavableModelBase is just a convenience implementation. The ModelBase can be serialized by any ISerializer implementation as well.\n\rMore documentation should be written in the future\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/",
	"title": "Catel.MVVM",
	"tags": [],
	"description": "",
	"content": "The last few years, MVVM has become the number one pattern to write applications using WPF and other XAML related platforms. The actual pattern is very simple, but there are some flaws and questions lots of MVVM users have, such as:\n How to show modal dialogs or message boxes inside a View-Model? How to run processes inside a View-Model? How to let the user select a file inside a View-Model?  In my opinion, this is where the good frameworks separate themselves from the bad ones. For example, people actually calling MessageBox.Show inside a View-Model are using the pattern wrong. If you are one of the developers that directly call a MessageBox inside a View-Model, ask yourself this: who is going to click the button during a unit test?\nBefore we actually started developing Catel, we did lots of investigations to make sure that the MVVM pattern was really useful in Line of Business (LoB) applications and does not miss the finishing touch. Thanks to this investigation and research, we created a solid MVVM framework which solves all the known problems of the MVVM pattern.\nThis part of the documentation explains all about the MVVM framework included with Catel. The MVVM framework that ships with Catel has the following characteristics and features:\n Very easy to use, a view model is created within 10 minutes Direct pass-through of view model properties to Models Validation mapping from model to view model and back Solves the nested user controls problem  \rAuditing\r\r\rBehaviors \u0026amp; triggers\r\r\rBindings\r\r\rCommands \u0026amp; events\r\r\rConverters\r\r\rDesigners\r\r\rLocators \u0026amp; naming conventions\r\r\rServices\r\r\rView models\r\r\rViews\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/data-handling/childawaremodelbase/",
	"title": "ChildAwareModelBase",
	"tags": [],
	"description": "",
	"content": "The ChildAwareModelBase class extends the [ModelBase](/5.1/catel-core/data-handling/modelbase/) class with functionality to get change notifications of child objects of the model. The class uses the ChangeNotificationWrapper to subscribe to all child objects using weak events.\nMore documentation should be written in the future\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/validation/deferring-validation/",
	"title": "Deferring validation",
	"tags": [],
	"description": "",
	"content": " The opinions about validation differ from person to person. Some people think it is best practice to immediately show the errors to the users. Others want to defer it to the moment where the user clicks the Save or OK button. Catel supports both \u0026ldquo;best practices\u0026rdquo;.\nSuspending validation for a batch of changes Sometimes you need to change a batch of properties and don\u0026rsquo;t want validation to be called after every property change. This can be accomplished by using the following code inside a ModelBase class:\nSuspendValidation = true; // change several properties here SuspendValidation = false; // Now force validation Validate(true);  Deferring validation in view models Below is a table of properties that can be used to affect the validation deferring.\nProperty|Validate immediately|Defer to a later moment -|-|- DeferValidationUntilFirstSaveCall|false|true ValidateModelsOnInitialization|true|false\nIf the DeferValidationUntilFirstSaveCall property, is used, it must be set as first property in the view model because the validation kicks in immediately when properties change.\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/getting-started/wpf/hooking-up-everything-together/",
	"title": "Hooking up everything together",
	"tags": [],
	"description": "",
	"content": " In this step we will hook everything together and add additional logic to the remaining view models.\nHooking up the view models We now have most of the application ready. However we need some logic in the view models to hook up everything together.\nAdding additional logic to FamilyWindowViewModel The first thing we are going to do is to finalize the FamilyWindowViewModel we created in the previous step. To do this, we are going to add a few properties and commands to the view model.\nAdding additional dependencies being injected Since we will be using additional services inside the FamilyWindowViewModel, it is important to add them as dependency via the constructor. The updated constructor will look like this:\npublic FamilyWindowViewModel(Family family, IUIVisualizerService uiVisualizerService, IMessageService messageService) { Argument.IsNotNull(() =\u0026gt; family); Argument.IsNotNull(() =\u0026gt; uiVisualizerService); Argument.IsNotNull(() =\u0026gt; messageService); Family = family; _uiVisualizerService = uiVisualizerService; _messageService = messageService; }  Don\u0026rsquo;t forget to create the right backing fields _uiVisualizerService and _messageService\n\rAdding the properties We need a property representing the currently selected person in edit mode of a family. Below is the property definition which needs to be added to the view model:\n/// \u0026lt;summary\u0026gt; /// Gets or sets the selected person. /// \u0026lt;/summary\u0026gt; public Person SelectedPerson { get { return GetValue\u0026lt;Person\u0026gt;(SelectedPersonProperty); } set { SetValue(SelectedPersonProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the SelectedPerson property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData SelectedPersonProperty = RegisterProperty(\u0026quot;SelectedPerson\u0026quot;, typeof(Person), null);  Adding the commands Note that we recommend that you use the vmcommand and vmcommandwithcanexecute code snippets available here\n\rBelow is the code which comes in two parts.\n1. Add this code to the constructor:\nAddPerson = new TaskCommand(OnAddPersonExecuteAsync); EditPerson = new TaskCommand(OnEditPersonExecuteAsync, OnEditPersonCanExecute); RemovePerson = new TaskCommand(OnRemovePersonExecuteAsync, OnRemovePersonCanExecute);   You must import Catel.IoC namespace since it contains ViewModelBase\u0026rsquo;s GetTypeFactory() extension method used below.  using Catel.IoC;   Add this code to the view model itself:   /// \u0026lt;summary\u0026gt; /// Gets the AddPerson command. /// \u0026lt;/summary\u0026gt; public TaskCommand AddPerson { get; private set; } /// \u0026lt;summary\u0026gt; /// Method to invoke when the AddPerson command is executed. /// \u0026lt;/summary\u0026gt; private async Task OnAddPersonExecuteAsync() { var person = new Person(); person.LastName = FamilyName; // Note that we use the type factory here because it will automatically take care of any dependencies // that the PersonViewModel will add in the future var typeFactory = this.GetTypeFactory(); var personViewModel = typeFactory.CreateInstanceWithParametersAndAutoCompletion\u0026lt;PersonViewModel\u0026gt;(person); if (await _uiVisualizerService.ShowDialogAsync(personViewModel) ?? false) { Persons.Add(person); } } /// \u0026lt;summary\u0026gt; /// Gets the EditPerson command. /// \u0026lt;/summary\u0026gt; public TaskCommand EditPerson { get; private set; } /// \u0026lt;summary\u0026gt; /// Method to check whether the EditPerson command can be executed. /// \u0026lt;/summary\u0026gt; /// \u0026lt;returns\u0026gt;\u0026lt;c\u0026gt;true\u0026lt;/c\u0026gt; if the command can be executed; otherwise \u0026lt;c\u0026gt;false\u0026lt;/c\u0026gt;\u0026lt;/returns\u0026gt; private bool OnEditPersonCanExecute() { return SelectedPerson != null; } /// \u0026lt;summary\u0026gt; /// Method to invoke when the EditPerson command is executed. /// \u0026lt;/summary\u0026gt; private async Task OnEditPersonExecuteAsync() { // Note that we use the type factory here because it will automatically take care of any dependencies // that the PersonViewModel will add in the future var typeFactory = this.GetTypeFactory(); var personViewModel = typeFactory.CreateInstanceWithParametersAndAutoCompletion\u0026lt;PersonViewModel\u0026gt;(SelectedPerson); await _uiVisualizerService.ShowDialogAsync(personViewModel); } /// \u0026lt;summary\u0026gt; /// Gets the RemovePerson command. /// \u0026lt;/summary\u0026gt; public TaskCommand RemovePerson { get; private set; } /// \u0026lt;summary\u0026gt; /// Method to check whether the RemovePerson command can be executed. /// \u0026lt;/summary\u0026gt; /// \u0026lt;returns\u0026gt;\u0026lt;c\u0026gt;true\u0026lt;/c\u0026gt; if the command can be executed; otherwise \u0026lt;c\u0026gt;false\u0026lt;/c\u0026gt;\u0026lt;/returns\u0026gt; private bool OnRemovePersonCanExecute() { return SelectedPerson != null; } /// \u0026lt;summary\u0026gt; /// Method to invoke when the RemovePerson command is executed. /// \u0026lt;/summary\u0026gt; private async Task OnRemovePersonExecuteAsync() { if (await _messageService.ShowAsync(string.Format(\u0026quot;Are you sure you want to delete the person '{0}'?\u0026quot;, SelectedPerson), \u0026quot;Are you sure?\u0026quot;, MessageButton.YesNo, MessageImage.Question) == MessageResult.Yes) { Persons.Remove(SelectedPerson); SelectedPerson = null; } }  Adding additional logic to the MainWindowViewModel The same edit functionality we added to the FamilyWindowViewModel must be added to the MainWindowViewModel. The difference is that instead of adding / editing / removing persons, the MainWindowViewModel will do this for families.\nAdding additional dependencies being injected We will again need additional dependencies. Below is the updated constructor for the MainWindowViewModel:\npublic MainWindowViewModel(IFamilyService familyService, IUIVisualizerService uiVisualizerService, IMessageService messageService) { Argument.IsNotNull(() =\u0026gt; familyService); Argument.IsNotNull(() =\u0026gt; uiVisualizerService); Argument.IsNotNull(() =\u0026gt; messageService); _familyService = familyService; _uiVisualizerService = uiVisualizerService; _messageService = messageService; }  Adding the properties We will again need a property to handle the selected family:\n/// \u0026lt;summary\u0026gt; /// Gets or sets the selected family. /// \u0026lt;/summary\u0026gt; public Family SelectedFamily { get { return GetValue\u0026lt;Family\u0026gt;(SelectedFamilyProperty); } set { SetValue(SelectedFamilyProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the SelectedFamily property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData SelectedFamilyProperty = RegisterProperty(\u0026quot;SelectedFamily\u0026quot;, typeof(Family), null);  Adding the commands Last but not least, we will also add the commands to the *MainWindowViewModel *to handle the logic.\n1. Add this code to the constructor:\nAddFamily = new TaskCommand (OnAddFamilyExecuteAsync); EditFamily = new TaskCommand (OnEditFamilyExecuteAsync, OnEditFamilyCanExecute); RemoveFamily = new TaskCommand (OnRemoveFamilyExecuteAsync, OnRemoveFamilyCanExecute);   Add this code to the view model itself:  /// \u0026lt;summary\u0026gt; /// Gets the AddFamily command. /// \u0026lt;/summary\u0026gt; public TaskCommand AddFamily { get; private set; } /// \u0026lt;summary\u0026gt; /// Method to invoke when the AddFamily command is executed. /// \u0026lt;/summary\u0026gt; private async Task OnAddFamilyExecuteAsync() { var family = new Family(); // Note that we use the type factory here because it will automatically take care of any dependencies // that the FamilyWindowViewModel will add in the future var typeFactory = this.GetTypeFactory(); var familyWindowViewModel = typeFactory.CreateInstanceWithParametersAndAutoCompletion\u0026lt;FamilyWindowViewModel\u0026gt;(family); if (await _uiVisualizerService.ShowDialogAsync(familyWindowViewModel) ?? false) { Families.Add(family); } } /// \u0026lt;summary\u0026gt; /// Gets the EditFamily command. /// \u0026lt;/summary\u0026gt; public TaskCommand EditFamily { get; private set; } /// \u0026lt;summary\u0026gt; /// Method to check whether the EditFamily command can be executed. /// \u0026lt;/summary\u0026gt; /// \u0026lt;returns\u0026gt;\u0026lt;c\u0026gt;true\u0026lt;/c\u0026gt; if the command can be executed; otherwise \u0026lt;c\u0026gt;false\u0026lt;/c\u0026gt;\u0026lt;/returns\u0026gt; private bool OnEditFamilyCanExecute() { return SelectedFamily != null; } /// \u0026lt;summary\u0026gt; /// Method to invoke when the EditFamily command is executed. /// \u0026lt;/summary\u0026gt; private async Task OnEditFamilyExecuteAsync() { // Note that we use the type factory here because it will automatically take care of any dependencies // that the PersonViewModel will add in the future var typeFactory = this.GetTypeFactory(); var familyWindowViewModel = typeFactory.CreateInstanceWithParametersAndAutoCompletion\u0026lt;FamilyWindowViewModel\u0026gt;(SelectedFamily); await _uiVisualizerService.ShowDialogAsync(familyWindowViewModel); } /// \u0026lt;summary\u0026gt; /// Gets the RemoveFamily command. /// \u0026lt;/summary\u0026gt; public TaskCommand RemoveFamily { get; private set; } /// \u0026lt;summary\u0026gt; /// Method to check whether the RemoveFamily command can be executed. /// \u0026lt;/summary\u0026gt; /// \u0026lt;returns\u0026gt;\u0026lt;c\u0026gt;true\u0026lt;/c\u0026gt; if the command can be executed; otherwise \u0026lt;c\u0026gt;false\u0026lt;/c\u0026gt;\u0026lt;/returns\u0026gt; private bool OnRemoveFamilyCanExecute() { return SelectedFamily != null; } /// \u0026lt;summary\u0026gt; /// Method to invoke when the RemoveFamily command is executed. /// \u0026lt;/summary\u0026gt; private async Task OnRemoveFamilyExecuteAsync() { if (await _messageService.ShowAsync(string.Format(\u0026quot;Are you sure you want to delete the family '{0}'?\u0026quot;, SelectedFamily), \u0026quot;Are you sure?\u0026quot;, MessageButton.YesNo, MessageImage.Question) == MessageResult.Yes) { Families.Remove(SelectedFamily); SelectedFamily = null; } }  Hooking up the views We now have all the views ready, but we don\u0026rsquo;t see anything yet. The reason for this is that we haven\u0026rsquo;t modified the MainWindow view yet. To do so, replace the xaml content with the xaml below:\n \u0026lt;catel:StackGrid\u0026gt; \u0026lt;catel:StackGrid.ColumnDefinitions\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;*\u0026quot; /\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;100\u0026quot; /\u0026gt; \u0026lt;/catel:StackGrid.ColumnDefinitions\u0026gt; \u0026lt;ListBox ItemsSource=\u0026quot;{Binding Families}\u0026quot; SelectedItem=\u0026quot;{Binding SelectedFamily}\u0026quot;\u0026gt; \u0026lt;ListBox.ItemTemplate\u0026gt; \u0026lt;DataTemplate\u0026gt; \u0026lt;views:FamilyView DataContext=\u0026quot;{Binding}\u0026quot; /\u0026gt; \u0026lt;/DataTemplate\u0026gt; \u0026lt;/ListBox.ItemTemplate\u0026gt; \u0026lt;/ListBox\u0026gt; \u0026lt;StackPanel\u0026gt; \u0026lt;Button Command=\u0026quot;{Binding AddFamily}\u0026quot; Content=\u0026quot;Add...\u0026quot; /\u0026gt; \u0026lt;Button Command=\u0026quot;{Binding EditFamily}\u0026quot; Content=\u0026quot;Edit...\u0026quot; /\u0026gt; \u0026lt;Button Command=\u0026quot;{Binding RemoveFamily}\u0026quot; Content=\u0026quot;Remove\u0026quot; /\u0026gt; \u0026lt;/StackPanel\u0026gt; \u0026lt;/catel:StackGrid\u0026gt;  Now run the application and you should see your fully functional family management application.\nUp next Finalizing the application\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-fody/",
	"title": "Catel.Fody",
	"tags": [],
	"description": "",
	"content": " Catel.Fody is an addin for Fody (see https://github.com/Fody/Fody), which is an extensible tool for weaving .net assemblies. This addin will rewrite simple properties to the dependency-property alike properties that are used inside Catel.\nIt will rewrite all properties on the ModelBase and ViewModelBase. So, a property that is written as this:\npublic string FirstName { get; set; }  will be weaved into\npublic string FirstName { get { return GetValue\u0026lt;string\u0026gt;(FirstNameProperty); } set { SetValue(FirstNameProperty, value); } } public static readonly PropertyData FirstNameProperty = RegisterProperty(\u0026quot;FirstName\u0026quot;, typeof(string));  but if a readonly computed property like this one exists:\npublic string FullName { get { return string.Format(\u0026quot;{0} {1}\u0026quot;, FirstName, LastName).Trim(); } }  the OnPropertyChanged method will be also weaved into\nprotected override void OnPropertyChanged(AdvancedPropertyChangedEventArgs e) { base.OnPropertyChanged(e); if (e.PropertyName.Equals(\u0026quot;FirstName\u0026quot;)) { base.RaisePropertyChanged(\u0026quot;FullName\u0026quot;); } if (e.PropertyName.Equals(\u0026quot;LastName\u0026quot;)) { base.RaisePropertyChanged(\u0026quot;FullName\u0026quot;); } }  Enabling Catel.Fody To enable Catel.Fody to weave assemblies, you need to perform the following steps:\n Install the Catel.Fody NuGet package Update FodyWeavers.xml and make sure it contains    Note that the FodyWeavers.xml should be updated automatically when\n Disabling weaving for specific types or properties To disable the weaving of types or properties of a type, decorate it with the *NoWeaving* attribute as shown in the example below:\n[NoWeaving] public class MyClass : ModelBase { ... }  Configuring Catel.Fody Though we recommend to leave the default settings (great for most people), it is possible to configure the weaver. Below is a list of options that can be configured.\nTo configure an option, modify FodyWeavers.xml by adding the property and value to the Catel element. For example, the example below will disable argument and logging weaving:\n\u0026lt;Catel WeaveArguments=\u0026quot;false\u0026quot; WeaveLogging=\u0026quot;false\u0026quot; /\u0026gt;  WeaveProperties Weave all regular properties on classes that inherit (directly or indirectly) from Catel.Data.ModelBase into Catel properties.\n Default value is true\n WeaveExposedProperties Weave all Catel properties decorated with both the Catel.MVVM.Model attribute and Fody.Expose attribute as automatic mappings,\n Default value is true\n WeaveArguments Weave all Argument check attributes into actual argument checks.\n Default value is true\n WeaveLogging Weave all calls to LogManager.GetCurrentClassLogger() into LogManager.GetLogger(typeof(classname)).\n Default value is true\n GenerateXmlSchemas Generate xml schemas for all classes that inherit (directly or indirectly) from Catel.Data.ModelBase.\n Default value is false\n Weaving properties The PropertyChanged.Fody plugin for Fody already supports Catel out of the box, but only for property change notifications. However, with the Catel.Fody plugin, it is possible to automatically weave a simple property into a Catel property.\nThe following property definition:\npublic string Name { get; set; }  will be weaved into:\npublic string Name { get { return GetValue\u0026lt;string\u0026gt;(NameProperty); } set { SetValue(NameProperty, value); } } public static readonly PropertyData NameProperty = RegisterProperty(\u0026quot;Name\u0026quot;, typeof(string));  Support for computed properties If a computed property like this one exists:\npublic string FullName { get { return string.Format(\u0026quot;{0} {1}\u0026quot;, FirstName, LastName).Trim(); } }  the OnPropertyChanged method will be also weaved into\nprotected override void OnPropertyChanged(AdvancedPropertyChangedEventArgs e) { base.OnPropertyChanged(e); if (e.PropertyName.Equals(\u0026quot;FirstName\u0026quot;)) { base.RaisePropertyChanged(\u0026quot;FullName\u0026quot;); } if (e.PropertyName.Equals(\u0026quot;LastName\u0026quot;)) { base.RaisePropertyChanged(\u0026quot;FullName\u0026quot;); } }  In order to avoid this behavior, you can use the NoWeavingAttribute on the computed property, just like this:\n[NoWeaving] public string FullName { get { return string.Format(\u0026quot;{0} {1}\u0026quot;, FirstName, LastName).Trim(); } }  In the background, Catel.Fody will handle the following workflow:\n Find all types in the assembly deriving from ModelBase (thus also ViewModelBase) Check if the type has an automatic property backing field (only those properties are weaved) Add the PropertyData field for the property Instantiate the PropertyData field in the static constructor of the type Replace the content of the getter and setter with the appropriate calls to GetValue and SetValue Note that this feature is automatically disabled for classes that already override the OnPropertyChanged method. It is too complex to determine where the logic should be added so the end-developer is responsible for implementing this feature when overriding OnPropertyChanged\n\r  Automatically excluded properties By default, Catel.Fody ignores the following properties and types by default because they shouldn\u0026rsquo;t be weaved:\n All properties of type ICommand Properties without an automatically generated backing field  Specifying default values for weaved properties By default, Catel uses null as default values for reference types. For value types, it will use default(T). To specify the default value of a weaved property, use the DefaultValue attribute as shown in the example below:\npublic class Person : ModelBase { [DefaultValue(\u0026quot;Geert\u0026quot;)] public string FirstName { get; set; } public string LastName { get; set; } }  This will be weaved into:\npublic class Person : ModelBase { public string FirstName { get { return GetValue\u0026lt;string\u0026gt;(FirstNameProperty); } set { SetValue(FirstNameProperty, value); } } public static readonly PropertyData FirstNameProperty = RegisterProperty(\u0026quot;FirstName\u0026quot;, typeof(string), \u0026quot;Geert\u0026quot;); public string LastName { get { return GetValue\u0026lt;string\u0026gt;(LastNameProperty); } set { SetValue(LastNameProperty, value); } } public static readonly PropertyData LastNameProperty = RegisterProperty(\u0026quot;LastName\u0026quot;, typeof(string), null); }  How to get automatic change notifications The Fody plugin for Catel automatically searches for the On[PropertyName]Changed methods. If a method is found, it will automatically be called when the property has changed. For example, the OnNameChanged is automatically called when the Name property is changed in the example below:\npublic string Name { get; set; } private void OnNameChanged() { // this method is automatically called when the Name property changes }  Weaving argument checks With the Catel.Fody plugin, it is possible to automatically weave a method implementation with its own argument check operations declared via attributes.\nAutomatic performance improvements The latest version of Catel.Fody automatically converts all expression argument checks to faster calls. For example, the code below:\nArgument.IsNotNull(() =\u0026gt; myString);  Will automatically be weaved into this:\nArgument.IsNotNull(\u0026quot;myString\u0026quot;, myString);  This is much faster because the expression doesn\u0026rsquo;t have to be parsed at runtime. This is a very noticeable performance boost if the expression check is used more than 50 times per second.\nWhen using the latest version of Catel.Fody, the team recommends using expressions above the regular argument checks (with name and value specified separately) because it will result in cleaner code. With this feature, there is no longer a performance penalty for using the expressions version\n\rArgument checking via attributes The following method definition:\npublic void DoSomething([NotNullOrEmpty] string myString. [NotNull] object myObject) { }  Will be weaved into:\npublic void DoSomething(string myString, object myObject) { Argument.IsNotNullOrEmpty(\u0026quot;myString\u0026quot;, myString); Argument.IsNotNull(\u0026quot;myObject\u0026quot;, myObject); }  In the background, Catel.Fody will handle the following workflow:\n Find all types in the assembly Find all method of each type Find all annotated method parameter of each method Insert as first instructions of the method body the calls to Argument check corresponding methods.  Available argument check Catel.Fody attributes  NotNull =\u0026gt; Argument.IsNotNull NotNullOrEmptyArray =\u0026gt; Argument.IsNotNullOrEmptyArray NotNullOrEmpty =\u0026gt; Argument.IsNotNullOrEmpty NotNullOrWhitespace =\u0026gt; Argument.IsNotNullOrWhitespace Match =\u0026gt; Argument.IsMatch NotMatch =\u0026gt; Argument.IsNotMatch NotOutOfRange =\u0026gt; Argument.IsNotOutOfRange Maximum =\u0026gt; Argument.IsMaximum Minimal =\u0026gt; Argument.IsMinimal OfType =\u0026gt; Argument.IsOfType ImplementsInterface =\u0026gt; Argument.ImplementsInterface InheritsFrom =\u0026gt; Argument.InheritsFrom  Exposing properties on view models The way to expose properties of a model to the view model in Catel is the ViewModelToModelAttribute. The goal of these attributes is to easily map properties from a model to the view model so as much of the plumbing (setting/getting properties, rechecking validation, etc) is done automatically for the developer.\nUsing the ViewModelToModelAttribute, this is the syntax to map properties automatically:\n/// \u0026lt;summary\u0026gt; /// Gets or sets the person. /// \u0026lt;/summary\u0026gt; [Model] public Person Person { get { return GetValue\u0026lt;Person\u0026gt;(PersonProperty); } private set { SetValue(PersonProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Person property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData PersonProperty = RegisterProperty(\u0026quot;Person\u0026quot;, typeof(Person)); /// \u0026lt;summary\u0026gt; /// Gets or sets the first name. /// \u0026lt;/summary\u0026gt; [ViewModelToModel(\u0026quot;Person\u0026quot;)] public string FirstName { get { return GetValue\u0026lt;string\u0026gt;(FirstNameProperty); } set { SetValue(FirstNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the FirstName property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData FirstNameProperty = RegisterProperty(\u0026quot;FirstName\u0026quot;, typeof(string));  However, if you only define the FirstName property just to protect your model, then why should you define the whole property? This is where the ExposeAttribute property comes in very handy. This attribute internally registers a new dynamic property on the view model, and then uses the same technique as the ViewModelToModelAttribute.\nBelow is the new way you can easily expose properties of a model and protect other properties of the model from the view:\n/// \u0026lt;summary\u0026gt; /// Gets or sets the person. /// \u0026lt;/summary\u0026gt; [Model] [Expose(\u0026quot;FirstName\u0026quot;)] [Expose(\u0026quot;MiddleName\u0026quot;)] [Expose(\u0026quot;LastName\u0026quot;)] private Person Person { get { return GetValue\u0026lt;Person\u0026gt;(PersonProperty); } set { SetValue(PersonProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Person property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData PersonProperty = RegisterProperty(\u0026quot;Person\u0026quot;, typeof(Person));  This is a very cool feature that allows you to protect your model without having to re-define all the properties on the view model. Also, the validation in the model is automatically synchronized with the view model when you use this attribute.\nIn combination with the automatic property weaving, this could be written as clean as the code below:\n[Model] [Expose(\u0026quot;FirstName\u0026quot;)] [Expose(\u0026quot;MiddleName\u0026quot;)] [Expose(\u0026quot;LastName\u0026quot;)] private Person Person { get; set; }  XmlSchema generation to start of metadata\nThe .NET framework supports XmlSchema attributes to allow static members to define a custom schema method required for WCF serialization. Unfortunately this cannot be implemented in Catel itself because it would required too much reflection and the method is static. Therefore this feature included in Catel.Fody.\nStarting with Catel.Fody 2.0, this feature is disabled by default. To enabled it, use the following option in FodyWeavers.xml:\n\u0026lt;Catel GenerateXmlSchemas=\u0026quot;true\u0026quot; /\u0026gt;  When the XmlSchemaProvider is available on the target platform where Catel is used, the changes will be made to classes deriving from ModelBase:\n1. Decorate the class with XmlSchemaProvider attribute:\n[XmlSchemaProvider(\u0026quot;GetXmlSchemaForCatelFodyTestAssemblyInheritedClass\u0026quot;)] public class InheritedClass : BaseClass { // rest of the class definition }  2. Implement the class specific GetXmlSchema method:\n[CompilerGenerated] public static XmlQualifiedName GetXmlSchemaForCatelFodyTestAssemblyInheritedClass(XmlSchemaSet xmlSchemaSet) { Type type = typeof(InheritedClass); return XmlSchemaManager.GetXmlSchema(type, xmlSchemaSet); }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/getting-started/wpf/finalizing-the-application/",
	"title": "Finalizing the application",
	"tags": [],
	"description": "",
	"content": " The application we have created so far is fully functional, but misses a bit of the \u0026ldquo;magic\u0026rdquo;. Below are some additional steps that might make your application more appealing and more user friendly. Of course you can go as far as you want by creating custom animations and such, but this guide focuses purely on making the basics more appealing.\nAdding validation Adding validation with Catel is extremely easy. There are two flavors to pick from, but they work exactly the same (since both the models and view models internally derive from ModelBase). To add validation to the Person model, use this code:\nprotected override void ValidateFields(List\u0026lt;IFieldValidationResult\u0026gt; validationResults) { if (string.IsNullOrWhiteSpace(FirstName)) { validationResults.Add(FieldValidationResult.CreateError(FirstNameProperty, \u0026quot;The first name is required\u0026quot;)); } if (string.IsNullOrWhiteSpace(LastName)) { validationResults.Add(FieldValidationResult.CreateError(LastNameProperty, \u0026quot;The last name is required\u0026quot;)); } }  The validation for the Family model is very easy as well:\nprotected override void ValidateFields(List\u0026lt;IFieldValidationResult\u0026gt; validationResults) { if (string.IsNullOrWhiteSpace(FamilyName)) { validationResults.Add(FieldValidationResult.CreateError(FamilyNameProperty, \u0026quot;The family name is required\u0026quot;)); } }  Note that this validation code can be used in both the model and/or the view models\n\rAdding behaviors to enable double-click on the list boxes The user must manually click the Edit buttons in the editable views to edit a specific model. To make it easier for the user, we can enable double click to command behaviors. To do so, navigate to the MainWindow and add this to the ListBox definition:\n\u0026lt;ListBox x:Name=\u0026quot;listBox\u0026quot; ItemsSource=\u0026quot;{Binding Families}\u0026quot; SelectedItem=\u0026quot;{Binding SelectedFamily}\u0026quot;\u0026gt; \u0026lt;ListBox.ItemTemplate\u0026gt; \u0026lt;DataTemplate\u0026gt; \u0026lt;Grid\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:DoubleClickToCommand Command=\u0026quot;{Binding ElementName=listBox, Path=DataContext.EditFamily}\u0026quot; /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;views:FamilyView DataContext=\u0026quot;{Binding}\u0026quot; /\u0026gt; \u0026lt;/Grid\u0026gt; \u0026lt;/DataTemplate\u0026gt; \u0026lt;/ListBox.ItemTemplate\u0026gt; \u0026lt;/ListBox\u0026gt;  The same goes for the FamilyWindow:\n\u0026lt;ListBox x:Name=\u0026quot;listBox\u0026quot; ItemsSource=\u0026quot;{Binding Persons}\u0026quot; SelectedItem=\u0026quot;{Binding SelectedPerson}\u0026quot;\u0026gt; \u0026lt;ListBox.ItemTemplate\u0026gt; \u0026lt;DataTemplate\u0026gt; \u0026lt;Grid\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:DoubleClickToCommand Command=\u0026quot;{Binding ElementName=listBox, Path=DataContext.EditPerson}\u0026quot; /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;views:PersonView DataContext=\u0026quot;{Binding}\u0026quot; /\u0026gt; \u0026lt;/Grid\u0026gt; \u0026lt;/DataTemplate\u0026gt; \u0026lt;/ListBox.ItemTemplate\u0026gt; \u0026lt;/ListBox\u0026gt;  Note that the xmlns:i=\u0026ldquo;http://schemas.microsoft.com/expression/2010/interactivity\u0026quot; must be added in order for the code above to compile\n\rAdding search functionality to the main window A functionality that is needed in a lot of applications is search functionality. To implement this we will need to modify the MainWindowViewModel. Below are the steps required to implement search functionality.\nAdding additional properties to the view model Lets start by adding the additional properties required to implement searching in the MainWindowViewModel:\n/// \u0026lt;summary\u0026gt; /// Gets the filtered families. /// \u0026lt;/summary\u0026gt; public ObservableCollection\u0026lt;Family\u0026gt; FilteredFamilies { get { return GetValue\u0026lt;ObservableCollection\u0026lt;Family\u0026gt;\u0026gt;(FilteredFamiliesProperty); } private set { SetValue(FilteredFamiliesProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the FilteredFamilies property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData FilteredFamiliesProperty = RegisterProperty(\u0026quot;FilteredFamilies\u0026quot;, typeof(ObservableCollection\u0026lt;Family\u0026gt;)); /// \u0026lt;summary\u0026gt; /// Gets or sets the search filter. /// \u0026lt;/summary\u0026gt; public string SearchFilter { get { return GetValue\u0026lt;string\u0026gt;(SearchFilterProperty); } set { SetValue(SearchFilterProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the SearchFilter property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData SearchFilterProperty = RegisterProperty(\u0026quot;SearchFilter\u0026quot;, typeof(string), null, (sender, e) =\u0026gt; ((MainWindowViewModel)sender).UpdateSearchFilter());  Note that this property contains an additional change callback function which will be called when the property has changed.\n\rAdd the following import to the view model. You will needed because native ObservableCollection class does not support ReplaceRange()\nusing Catel.Collections;  Add this method to the view model:\n/// \u0026lt;summary\u0026gt; /// Updates the filtered items. /// \u0026lt;/summary\u0026gt; private void UpdateSearchFilter() { if (FilteredFamilies == null) { FilteredFamilies = new ObservableCollection\u0026lt;Family\u0026gt;(); } if (string.IsNullOrWhiteSpace(SearchFilter)) { FilteredFamilies.ReplaceRange(Families); } else { var lowerSearchFilter = SearchFilter.ToLower(); FilteredFamilies.ReplaceRange(from family in Families where !string.IsNullOrWhiteSpace(family.FamilyName) \u0026amp;\u0026amp; family.FamilyName.ToLower().Contains(lowerSearchFilter) select family); } }  Then, add this code to the OnAddFamilyExecute function:\nprivate async void OnAddFamilyExecute() { var family = new Family(); // Note that we use the type factory here because it will automatically take care of any dependencies // that the FamilyWindowViewModel will add in the future var typeFactory = this.GetTypeFactory(); var familyWindowViewModel = typeFactory.CreateInstanceWithParametersAndAutoCompletion\u0026lt;FamilyWindowViewModel\u0026gt;(family); if (await _uiVisualizerService.ShowDialog(familyWindowViewModel) ?? false) { Families.Add(family); UpdateSearchFilter(); } }  Last but not least, add this to the *InitializeAsync* method after the *Families* is set from the IFamilyService\nprotected override async Task InitializeAsync() { var families = _familyService.LoadFamilies(); Families = new ObservableCollection\u0026lt;Family\u0026gt;(families); UpdateSearchFilter(); }  Adding the search functionality to the view Replace the xaml of the main window by the following content:\n \u0026lt;catel:StackGrid\u0026gt; \u0026lt;catel:StackGrid.RowDefinitions\u0026gt; \u0026lt;RowDefinition Height=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;RowDefinition Height=\u0026quot;*\u0026quot; /\u0026gt; \u0026lt;/catel:StackGrid.RowDefinitions\u0026gt; \u0026lt;catel:StackGrid.ColumnDefinitions\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;*\u0026quot; /\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;100\u0026quot; /\u0026gt; \u0026lt;/catel:StackGrid.ColumnDefinitions\u0026gt; \u0026lt;catel:StackGrid Grid.ColumnSpan=\u0026quot;2\u0026quot;\u0026gt; \u0026lt;catel:StackGrid.ColumnDefinitions\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;Auto\u0026quot; /\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;*\u0026quot; /\u0026gt; \u0026lt;/catel:StackGrid.ColumnDefinitions\u0026gt; \u0026lt;Label Content=\u0026quot;Filter:\u0026quot; /\u0026gt; \u0026lt;TextBox Text=\u0026quot;{Binding SearchFilter}\u0026quot;\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:UpdateBindingOnTextChanged UpdateDelay=\u0026quot;500\u0026quot; /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;/TextBox\u0026gt; \u0026lt;/catel:StackGrid\u0026gt; \u0026lt;ListBox x:Name=\u0026quot;listBox\u0026quot; ItemsSource=\u0026quot;{Binding FilteredFamilies}\u0026quot; SelectedItem=\u0026quot;{Binding SelectedFamily}\u0026quot;\u0026gt; \u0026lt;ListBox.ItemTemplate\u0026gt; \u0026lt;DataTemplate\u0026gt; \u0026lt;Grid\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:DoubleClickToCommand Command=\u0026quot;{Binding ElementName=listBox, Path=DataContext.EditFamily}\u0026quot; /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;views:FamilyView DataContext=\u0026quot;{Binding}\u0026quot; /\u0026gt; \u0026lt;/Grid\u0026gt; \u0026lt;/DataTemplate\u0026gt; \u0026lt;/ListBox.ItemTemplate\u0026gt; \u0026lt;/ListBox\u0026gt; \u0026lt;StackPanel\u0026gt; \u0026lt;Button Command=\u0026quot;{Binding AddFamily}\u0026quot; Content=\u0026quot;Add...\u0026quot; /\u0026gt; \u0026lt;Button Command=\u0026quot;{Binding EditFamily}\u0026quot; Content=\u0026quot;Edit...\u0026quot; /\u0026gt; \u0026lt;Button Command=\u0026quot;{Binding RemoveFamily}\u0026quot; Content=\u0026quot;Remove\u0026quot; /\u0026gt; \u0026lt;/StackPanel\u0026gt; \u0026lt;/catel:StackGrid\u0026gt;  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/data-handling/using-modelbase-as-base-for-entities/",
	"title": "Using ModelBase as base for entities",
	"tags": [],
	"description": "",
	"content": " It is possible to use the ModelBase as base class when using EF or any other OR mapper.\nSetting up ModelBase as base class There are a few caveats when using the ModelBase as base class for your entities. One of them is that IsDirty is always true because the properties from the persistence store are set after the constructor. This guide will explain how to work past that problem.\n Create a class named EntityBase with the following code:  public class EntityBase : ModelBase { protected EntityBase() { } protected EntityBase(SerializationInfo info, StreamingContext context) : base(info, context) { } internal void ClearDirtyFlag() { IsDirty = false; } }   Derive from EntityBase instead of ModelBase so the layer that loads the data can clear the IsDirty flag.\n When loading the data from the database and setting the initial values, use this code:\n  var company = new DTO.Company() { Address = domainEntity.Address, City = domainEntity.City, CompanyID = domainEntity.CompanyID, CompanyName = domainEntity.CompanyName, PostalCode = domainEntity.PostalCode, PostalCodeAndCity = domainEntity.PostalCodeAndCity }; company.ClearDirtyFlag(); return company;  Note the ClearDirtyFlag call, which is very important to make the IsDirty property behave correctly.\n Check the IsDirty of the model, not the view model when checking whether the model is dirty inside a view model.  Ignoring default Catel properties in models It is possible to ignore the default Catel properties in the models for EF code-first. To accomplish this, use the following code:\nprotected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Types().Configure(c =\u0026gt; c.Ignore(\u0026quot;IsDirty\u0026quot;)); modelBuilder.Types().Configure(c =\u0026gt; c.Ignore(\u0026quot;IsReadOnly\u0026quot;)); base.OnModelCreating(modelBuilder); }  Or, if you only want to do this for classes inheriting Modelbase, use the following code:\nprotected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Types().Where(t =\u0026gt; t.IsSubclassOf(typeof(ModelBase))).Configure(c =\u0026gt; c.Ignore(\u0026quot;IsDirty\u0026quot;)); modelBuilder.Types().Where(t =\u0026gt; t.IsSubclassOf(typeof(ModelBase))).Configure(c =\u0026gt; c.Ignore(\u0026quot;IsReadOnly\u0026quot;)); base.OnModelCreating(modelBuilder); }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/data-handling/advanced-property-change-notifications/",
	"title": "Advanced property change notifications",
	"tags": [],
	"description": "",
	"content": " Sometimes the old value is needed in case of property change event. However, the INotifyPropertyChanged interface does not provide any of this. To support this behavior, a new version of the PropertyChangedEventArgs is created called AdvancedPropertyChangedEventArgs. This class derives from PropertyChangedEventArgs so the interfaces are not broken, but it does add additional functionality to the software system.\nGetting old value automatically When using the ModelBase or ViewModelBase classes, the old and new value of a property are automatically provided on a property change. There are two ways to get more information about a property change event.\nGetting more information from the inside The easiest way to get more information on the inside is to override the OnPropertyChanged method. It automatically provides an instance of the AdvancedPropertyChangedEventArgs:\nprotected override void OnPropertyChanged(AdvancedPropertyChangedEventArgs e) { }  Getting mode information from the outside Getting the information from outside the objects is a bit more work. This is because the PropertyChanged event still provides a value of the PropertyChangedEventArgs class. Therefore, it is required to cast the value:\nprivate void OnObjectPropertyChanged(PropertyChangedEventArgs e) { var advancedArgs = e as AdvancedPropertyChangedEventArgs; if (advancedArgs != null) { // a value of AdvancedPropertyChangedEventArgs is now available } }  Providing old value manually When using the dependency property a-like property registration, the old and new value are automatically provided by the classes. However, when using the ObservableObject, the old and new value are not automatically provided. Therefore, it is possible to provide these values manually:\nprivate string _firstName; public string FirstName { get { return _firstName; } set { var oldValue = _firstName; _firstName = value; RaisePropertyChanged(() =\u0026gt; FirstName, oldValue, value); } }  When the values are not provided, the old and new value are set to null.\nSome sidenotes As you might have noticed, the AdvancedPropertyChangedEventArgs also provide the IsOldValueMeaningful and the IsNewValueMeaningful. These are introduced because it is not always possible to determine the old or new value (for example, when the property name is string.Empty, there is no old value or new value). Therefore, the OldValue and NewValue properties are null, but doesn\u0026rsquo;t mean that those are the actual old and new values.\nIt is always required to check whether the values are meaningful before actually handing them:\nprotected override void OnPropertyChanged(AdvancedPropertyChangedEventArgs e) { if (e.IsOldValueMeaningful) { // Handle old value } if (e.IsNewValueMeaningful) { // Handle new value } }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-resharper/",
	"title": "Catel.ReSharper",
	"tags": [],
	"description": "",
	"content": " Catel.ReSharper is a ReSharper plugin that helps with development in the following fields:\n Make classes to inherits from ModelBase or ViewModelBase Convert automatic properties to Catel properties Expose view model properties as view model ones Check for arguments using the Argument class  Basically convert this:\n/// \u0026lt;summary\u0026gt; /// The person model. /// \u0026lt;/summary\u0026gt; public class Person { #region Public Properties /// \u0026lt;summary\u0026gt; /// Gets or sets the first name. /// \u0026lt;/summary\u0026gt; public string FirstName { get; set; } /// \u0026lt;summary\u0026gt; /// Gets or sets the last name. /// \u0026lt;/summary\u0026gt; public string LastName { get; set; } /// \u0026lt;summary\u0026gt; /// Gets or sets the age. /// \u0026lt;/summary\u0026gt; public int Age { get; set; } #endregion }  into this:\n/// \u0026lt;summary\u0026gt; /// The person model. /// \u0026lt;/summary\u0026gt; public class Person : ModelBase { #region Static Fields /// \u0026lt;summary\u0026gt;Register the FirstName property so it is known in the class.\u0026lt;/summary\u0026gt; public static readonly PropertyData FirstNameProperty = RegisterProperty\u0026lt;Person, string\u0026gt;(model =\u0026gt; model.FirstName); /// \u0026lt;summary\u0026gt;Register the LastName property so it is known in the class.\u0026lt;/summary\u0026gt; public static readonly PropertyData LastNameProperty = RegisterProperty\u0026lt;Person, string\u0026gt;(model =\u0026gt; model.LastName, default(string), (s, e) =\u0026gt; s.OnLastNameChanged()); /// \u0026lt;summary\u0026gt;Register the Age property so it is known in the class.\u0026lt;/summary\u0026gt; public static readonly PropertyData AgeProperty = RegisterProperty\u0026lt;Person, int\u0026gt;(model =\u0026gt; model.Age, default(int), (s, e) =\u0026gt; s.OnAgeChanged(e)); #endregion #region Public Properties /// \u0026lt;summary\u0026gt; /// Gets or sets the first name. /// \u0026lt;/summary\u0026gt; public string FirstName { get { return this.GetValue\u0026lt;string\u0026gt;(FirstNameProperty); } set { this.SetValue(FirstNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Gets or sets the last name. /// \u0026lt;/summary\u0026gt; public string LastName { get { return this.GetValue\u0026lt;string\u0026gt;(LastNameProperty); } set { this.SetValue(LastNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Gets or sets the age. /// \u0026lt;/summary\u0026gt; public int Age { get { return this.GetValue\u0026lt;int\u0026gt;(AgeProperty); } set { this.SetValue(AgeProperty, value); } } #endregion #region Methods /// \u0026lt;summary\u0026gt; /// Occurs when the value of the Age property is changed. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;e\u0026quot;\u0026gt; /// The event argument /// \u0026lt;/param\u0026gt; private void OnAgeChanged(AdvancedPropertyChangedEventArgs e) { throw new NotImplementedException(); } /// \u0026lt;summary\u0026gt; /// Occurs when the value of the LastName property is changed. /// \u0026lt;/summary\u0026gt; private void OnLastNameChanged() { throw new NotImplementedException(); } #endregion }  with pleasure!\nChecking arguments of a method If you are not using the Argument class, you are definitely missing something! It allows you to check for a method input and make sure it is valid. So, instead of writing this:\npublic void DoSomething(string myInput) { if (string.IsNullOrWhitespace(myInput) { Log.Error(\u0026quot;Argument 'myInput' cannot be null or whitespace\u0026quot;); throw new ArgumentException(\u0026quot;Argument 'myInput' cannot be null or whitespace\u0026quot;, \u0026quot;myInput\u0026quot;); } // custom logic }  You can write this:\npublic void DoSomething(string myInput) { Argument.IsNotNullOrWhitespace(() =\u0026gt; myInput); // custom logic }  However, when you are writing lots of code, then even this piece of code can be too much. Thanks to the* Catel.Resharper* plugin, it is possible to select the argument (in this case myInput), hit ALT + Enter and generate the code.\nConverting regular properties into Catel properties to start of metadata\nCatel is extremely powerful, but sometimes the property definitions are lots of work to write down. The code snippets already make your life much easier, but with the Catel.Resharper plugin it might be even easier. You can simply write this code:\npublic class Person : ModelBase { public string FirstName { get; set; } public string MiddleName { get; set; } public string LastName { get; set; } }  Then hit ALT + Enter and turn properties into Catel properties, which will result in this class:\npublic class Person : ModelBase { /// \u0026lt;summary\u0026gt; /// Gets or sets the first name. /// \u0026lt;/summary\u0026gt; public string FirstName { get { return GetValue\u0026lt;string\u0026gt;(FirstNameProperty); } set { SetValue(FirstNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the FirstName property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData FirstNameProperty = RegisterProperty\u0026lt;Person, string\u0026gt;(model =\u0026gt; model.FirstName); /// \u0026lt;summary\u0026gt; /// Gets or sets the middle name. /// \u0026lt;/summary\u0026gt; public string MiddleName { get { return GetValue\u0026lt;string\u0026gt;(MiddleNameProperty); } set { SetValue(MiddleNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the MiddleName property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData MiddleNameProperty = RegisterProperty\u0026lt;Person, string\u0026gt;(model =\u0026gt; model.MiddleName); /// \u0026lt;summary\u0026gt; /// Gets or sets the last name. /// \u0026lt;/summary\u0026gt; public string LastName { get { return GetValue\u0026lt;string\u0026gt;(LastNameProperty); } set { SetValue(LastNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the LastName property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData LastNameProperty = RegisterProperty\u0026lt;Person, string\u0026gt;(model =\u0026gt; model.LastName); }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/tips-tricks/",
	"title": "Tips &amp; tricks",
	"tags": [],
	"description": "",
	"content": "\r\rTips \u0026amp; tricks - Core\r\r\rTips \u0026amp; tricks - MVVM\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/",
	"title": "API reference",
	"tags": [],
	"description": "",
	"content": "\r\rCatel.Core\r\r\rCatel.MVVM\r\r\rCatel.Serialization.Json\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/setup-deployment/update-guides/catel-4.0/",
	"title": "Catel 4.0",
	"tags": [],
	"description": "",
	"content": " This guide describes how to update your code to be fully compatible with Catel 4.0.\nRenaming classes Some classes in Catel have been renamed.\n Catel.Environment =\u0026gt; CatelEnvironment IDependencyPropertySelector =\u0026gt; IViewPropertySelector  Renaming namespaces Some namespaces in Catel have been changed to match the functionality. For example, all services are now in Catel.Service instead of Catel.MVVM.Services because they can be used without MVVM.\nBelow is a list of changed namespaces:\n Catel.MVVM.Services =\u0026gt; Catel.Services Catel.Windows.Data.Converters =\u0026gt; Catel.MVVM.Converters\n Catel.Windows.Controls.MVVMProviders.Logic =\u0026gt; Catel.MVVM.Providers\n  Some interfaces were moved (but not all classes in the namespace):\n Catel.Windows =\u0026gt; Catel.MVVM.Views  Simplied ModelBase external interfacing The ModelBase class exposed a lot of properties for validation such as HasErrors, HasFieldErrors, HasBusinessRuleErrors, etc. These all these properties are now explicitly implemented into interfaces to make models using ModelBase cleaner to use for end-developers. Below is a list of properties that are now implemented as explicit interface implementations:\nMember name\nExplicit interface implementation\nMember type\nBusinessRuleErrorCount\nIModelValidation.BusinessRuleErrorCount\nproperty\nBusinessRuleWarningCount\nIModelValidation.BusinessRuleWarningCount\nproperty\nDeserialized\nIModelSerialization.Deserialized\nevent\nErrorsChanged\nINotifyDataErrorInfo.ErrorsChanged\nevent\nFieldErrorCount\nIModelValidation.FieldErrorCount\nproperty\nFieldWarningCount\nIModelValidation.FieldWarningCount\nproperty\nHasErrors\nINotifyDataErrorInfo.HasErrors\nproperty\nHasWarnings\nINotifyDataWarningInfo.HasWarnings\nproperty\nValidationContext\nIModelValidation.ValidationContext\nproperty\nValidator\nIModelValidation.Validator\nproperty\nWarningsChanged\nINotifyDataWarningInfo.WarningsChanged\nevent\nRenamed LoadTabItemsBehavior The LoadTabItemsBehavior has been refactored with new names. The old names will be removed in v5, but will error in v4. Below are the renames:\n Single =\u0026gt; LazyLoading SingleUnloadOthers =\u0026gt; LazyLoadingUnloadOthers AllOnStartup =\u0026gt; EagerLoading  AllOnFirstUse =\u0026gt; EagerLoadingOnFirstUse   Add additional members to custom IView implementations To support Xamarin, the IView interface has been extended with new members. Make sure to implement the new members.\nUsing FastViewPropertySelector by default for major performance improvement When not using the ViewToViewModel attributes, it is not required to subscribe to all dependency properties in the UserControlLogic. Starting from Catel 4.0, Catel uses the FastViewPropertySelector by default which subscribes to no properties by default. This is a breaking change for users using the ViewToViewModel attribute.\nTo get back the behavior, there are 2 ways:\nManually add interesting properties (recommended) It is best to let Catel only subscribe to the properties that it should (for the best performance). To do so, use the IViewPropertySelector.AddPropertyToSubscribe method to add properties:\nvar serviceLocator = ServiceLocator.Default; var viewPropertySelector = serviceLocator.ResolveType\u0026lt;IViewPropertySelector\u0026gt;(); viewPropertySelector.AddPropertyToSubscribe(\u0026quot;MyProperty\u0026quot;, typeof(MyView));  In most cases, the only reason to subscribe to property changes is because of the *ViewToViewModel *attribute. If that is the case, it is best to use the extension method AutoDetectViewPropertiesToSubscribe in the static constructor of the view:\nstatic MyView() { typeof(MyView).AutoDetectViewPropertiesToSubscribe(); }  Register the ViewPropertySelector The default implementation of the ViewPropertySelector subscribes to all properties by default. By registering it in the ServiceLocator will ensure Catel subscribes to all dependency properties:\nvar serviceLocator = ServiceLocator.Default; serviceLocator.RegisterType\u0026lt;IViewPropertySelector, ViewPropertySelector\u0026gt;();  Full support for asynchronous (async/await) IViewModel The IViewModel interface now returns tasks instead of direct values to support async/await.\nUpdating Initialize method public override void Initialize() { base.Initialize(); }  Must be changed in:\npublic override async Task Initialize() { await base.Initialize(); }  Updating Save method public override bool Save() { return base.Save(); }  Must be changed in:\npublic override async Task\u0026lt;bool?\u0026gt; Save() { return await base.Save(); }  Updating Close method public override void Close() { base.Close(); }  Must be changed in:\npublic override async Task Close() { await base.Close(); }  IMessageService The use of await or Task.ContinueWith to await the result is now necessary or use the code below:\nif (await messageService.ShowInfo(\u0026quot;message\u0026quot;, other parameters...) == MessageBoxResult.Yes) { // Handle yes here }  IUIVisualizerService The use of *await* or *Task.ContinueWith* to await the result is now necessary or use the code below:\nawait uiVisualizerService.ShowDialog\u0026lt;MyViewModel\u0026gt;(); // Window is closed here thanks to the await keyword  Optimizing views (especially 3rd party) Catel 4.0 introduces a much simpler way to use Catel on 3rd party controls. This means that the following changes have been applied and might be breaking:\n Removed GetViewModelType() from view base classes. Instead use the IViewModelLocator to ensure Catel can find the view models. Note that it is possible to manually register a custom view with a view model in case the view / view model don\u0026rsquo;t match any naming convention. Removed GetViewModelInstance() from view base classes. Customize the IViewModelFactory instead. Removed ValidateData, DiscardChanges and ApplyChanges from all views except DataWindow Merged ViewLoaded and Loaded events on IViewModelContainer and IView interfaces Renamed *ViewLoading* and *ViewUnloading *events on *IViewModelContainer *to Loading and Unloading Renamed *IViewLoadedManager *to IViewLoadManager  Removed IServiceLocator.RemoveInstance methods The IServiceLocator.Remove[x] methods are removed. Use the RemoveType methods instead.\nChanged CompositeCommand The composite command will always allow execution, even when commands don\u0026rsquo;t allow it. Therefore the *AllowPartialExecution *is now set to *false *by default.\nIf there is a requirement to allow partial invocation, set this property to true.\nAdded time to all log calls The time parameter has been added to all log calls. This is a breaking change for all classes implementing ILogListener.\nBehavior changes To improve multiple platforms support, all parameters of the following methods on BehaviorBase have been removed:\nOnAssociatedObjectLoaded(object sender, EventArgs e) =\u0026gt; OnAssociatedObjectLoaded() OnAssociatedObjectUnloaded(object sender, EventArgs e) =\u0026gt; OnAssociatedObjectUnloaded()    "
},
{
	"uri": "http://docs.catelproject.com/5.1/setup-deployment/update-guides/catel-4.1/",
	"title": "Catel 4.1",
	"tags": [],
	"description": "",
	"content": " This guide describes how to update your code to be fully compatible with Catel 4.1.\nThis guide assumes that you are coming from Catel 4.0. If not, please read that guide first.\n\rIUIVisualizerService We have reverted the change to force you to use async code on the IUIVisualizerService. There are now 2 options:\n Synchronous:\nvar result = uiVisualizerService.ShowDialog\u0026lt;MyViewModel\u0026gt;(); // Window is closed here (synchronous behavior)  Asynchronous:\nvar result = await uiVisualizerService.ShowDialogAsync\u0026lt;MyViewModel\u0026gt;(); // Window is closed here thanks to the await keyword    "
},
{
	"uri": "http://docs.catelproject.com/5.1/setup-deployment/update-guides/catel-5.0/",
	"title": "Catel 5.0",
	"tags": [],
	"description": "",
	"content": " This guide describes how to update your code to be fully compatible with Catel 5.0.\nCatel v5 contains a lot of breaking changes, not all of them cause compiler errors but change core behavior. It\u0026rsquo;s important to check out the guide below before updating to Catel v5.\n\rThis guide assumes that you are coming from Catel 4.5. If not, please read that guide first.\n\rEncountered issues while upgrading to this version? Add them here to help out others!\nPlatform support changes Added support for the following platforms:\n .NET 4.7  Removed support for the following platforms:\n .NET 4.0 Silverlight 5 Windows Phone 8.0 (Silverlight) Windows Phone 8.1 (Silverlight) Windows Phone 8.1 (Runtime) Windows 8.1 (Runtime)  Moved extensions The following extensions have been moved to a new repository:\n Catel.Extensions.Controls (moved to Orc.Controls \u0026amp; Orchestra) Catel.Extensions.DynamicObjects (moved to Orc.DynamicObjects) Catel.Extensions.EntityFramework (moved to Orc.EntityFramework) Catel.Extensions.FluentValidation (moved to Orc.FluentValidation) Catel.Extensions.Memento (moved to Orc.Memento) Catel.Extensions.Prism5 (moved to Orc.Prism) Catel.Extensions.Prism6 (moved to Orc.Prism)  Removed extensions The following extensions have been removed:\n Catel.Extensions.CSLA Catel.Extensions.Data Catel.Extensions.Interception Catel.Extensions.MVC4 Catel.Extensions.MVC5 Catel.Extensions.Prism4 Catel.Extensions.Wcf.Server  Catel.Fody Note that if you are using Catel.Fody, you must update to at least 2.17 to support Catel 5.\n\rCatel.Core CommandLineHelper CommandLineHelper has been removed. Use Orc.CommandLine instead.\nDynamicEventListener DynamicEventListener has been removed. Use WeakEventListener instead.\nModelBase The ModelBase has been greatly simplified to decrease the memory print and improve performance. The class is split up into separate classes:\n ModelBase =\u0026gt; takes care of basic serialization and property bag registrations ValidatableModelBase =\u0026gt; adds validation ChildAwareModelBase =\u0026gt; contains the child event subscriptions logic (which is very costly) SavableModelBase =\u0026gt; adds Save and Load methods ComparableModelBase =\u0026gt; contains the equality comparer members. This means the ModelBase itself does no longer support equality checks based on the property values  Catel.MVVM XAML namespace changes The xaml namespace has changed from http://catel.codeplex.com to http://schemas.catelproject.com\nCountCollapsedConverter CountCollapsedConverter has been removed. Use CollectionToVisibilityConverter instead.\nEffectsHelper EffectsHelper has been removed. No replacement is available.\nViewModelBase The ViewModelBase has been simplified. It now derives from ValidatingModelBase (so still supports validation). The following features / members have been removed:\n HasDirtyModels has been removed Validation summaries (use the ValidationContext instead)  VisualTargetPresentationSource VisualTargetPresentationSource has been removed. No replacement is available.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/",
	"title": "Catel Documentation",
	"tags": [],
	"description": "",
	"content": " Catel Welcome to the documentation of Catel.\nPlease pick on the following subjects:\n\rIntroduction\r\r\rFAQ\r\r\rSetup, deployment \u0026amp; projects\r\r\rGetting started\r\r\rExamples\r\r\rCatel.Core\r\r\rCatel.MVVM\r\r\rCatel.Fody\r\r\rCatel.ReSharper\r\r\rTips \u0026amp; tricks\r\r\rAPI reference\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/_header/",
	"title": "header",
	"tags": [],
	"description": "",
	"content": "Catel Documentation\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/behaviors-triggers/focus-first-control/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " FocusFirstControl The Focus behavior is very powerful, but sometimes you just need to focus the first control on a window or control. This can be done by using the FocusFirstControl behavior instead. This behavior will focus the first control on a window or control and has only one property: FocusParentFirst.\nAdd the following XML namespaces:\nxmlns:i=\u0026quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot;  Focus when the control is loaded The easiest and default method is to focus the first control. The parent is also focused by default (just in case if it doesn\u0026rsquo;t have any focus):\n\u0026lt;Window ...\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:FocusFirstControl /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;/Window\u0026gt;  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/behaviors-triggers/focus-on-key-press/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " FocusOnKeyPress Sometimes you need to handle a key press and then set the focus on an element.\n1) Add the following XML namespaces:\nxmlns:i=\u0026quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot;  2) Use the following definition:\n\u0026lt;TextBox x:Name=\u0026quot;textBox\u0026quot;\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:FocusOnKeyPress Key=\u0026quot;F\u0026quot; Modifiers=\u0026quot;Ctrl\u0026quot; /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;/ListBox\u0026gt;  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/views/xamarin-android/activities-pages/",
	"title": "Activities (pages)",
	"tags": [],
	"description": "",
	"content": " The user controls in Android are called fragments. This means that if a user control must be created, it must derive from the Fragment class. Catel provides a base implementation of this class to ensure full compatibility with the MVVM framework that ships with Catel.\nCreating the view model The view model can be created (or added as a linked file from another project) just like any platform using Catel (they are all equal on all platforms).\nCreating the view Make sure that a Views folder exists in the project so the views and view models can automatically be hooked together by Catel. Then create a new class to the views folder, in this case MainActivity:\n[Activity(MainLauncher = true)] public class MainActivity : Catel.Android.App.Activity { protected override void OnCreate(Bundle bundle) { base.OnCreate(bundle); // Set our view from the \u0026quot;main\u0026quot; layout resource SetContentView(Resource.Layout.Page_Main); } }  Note that the class derives from Catel.Android.App.Activity\n\rDesigning the view To create the actual user interface of the fragment, add a new xaml file to the Resources/layout folder, in your case Page\\_Main (but you can name it whatever you want). Then use the following source:\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;LinearLayout xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot; android:orientation=\u0026quot;vertical\u0026quot; android:layout_width=\u0026quot;fill_parent\u0026quot; android:layout_height=\u0026quot;fill_parent\u0026quot;\u0026gt; \u0026lt;Button android:id=\u0026quot;@+id/MyButton\u0026quot; android:layout_width=\u0026quot;fill_parent\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:text=\u0026quot;@string/Hello\u0026quot; /\u0026gt; \u0026lt;/LinearLayout\u0026gt;  Setting up synchronization In Android it is required to manually synchronize the values between the view and view model. Below is the fully extended MainActivity class containing these mapping functionality:\n[Activity(MainLauncher = true)] public class MainActivity : Catel.Android.App.Activity { private Button _testButton; protected override void OnCreate(Bundle bundle) { base.OnCreate(bundle); // Set our view from the \u0026quot;main\u0026quot; layout resource SetContentView(Resource.Layout.Page_Main); // Note: at this stage the visual tree is guaranteed in Android _testButton = FindViewById\u0026lt;Button\u0026gt;(Resource.Id.MyButton); _testButton.Click += delegate { GetViewModel\u0026lt;MainViewModel\u0026gt;().RunCommand.Execute(); }; } protected override void SyncViewModel() { var vm = GetViewModel\u0026lt;MainViewModel\u0026gt;(); if (vm == null) { return; } Title = vm.Title; _testButton.Text = string.Format(\u0026quot;{0} clicks!\u0026quot;, vm.Counter); } }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/android/",
	"title": "Android",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/apicop/",
	"title": "ApiCop",
	"tags": [],
	"description": "",
	"content": " Introduction ApiCop is a unique feature in Catel that helps developers make sure the users are using the Api of frameworks the right way. This functionality has been evolved from experience that users want logical advice including links to documentation when and why they are not using an Api in its full potential.\nThe advantage of ApiCop is that it will only execute any code to trace the application when a debugger is attached. If no debugger is attached, the feature will be fully disabled to prevent an impact of performance when running the software without debuggers.\nUsage for end-users (developers) As an end-user (developers that use a framework that supports ApiCop), the usage is really simply. Whenever you need a report (for example, when closing an application when the debugger is attached), use the ApiCopManager to write the results. Below is an example of a WPF application in the App.xaml.cs:\nprotected override void OnExit(ExitEventArgs e) { #if DEBUG var apiCopListener = new ConsoleApiCopListener(); ApiCopManager.AddListener(apiCopListener); ApiCopManager.WriteResults(); #endif base.OnExit(e); }  The code above writes the results of the ApiCop feature to the console, which will look like this:\n**************************************************************** ApiCop (r) results of 'DataWindowTest.WPF' v1.0.0.0 recorded on 2014-02-19 10:06 To ignore rules, call ApiCopManager.IgnoredRules.Add([rulename]); For more information about ApiCop, visit the website: http://docs.catelproject.com/vnext/ApiCop.htm **************************************************************** ================================================================ DATAWINDOWTEST.VIEWS.AVIEW ================================================================ Cop TargetType: Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic Rule: UserControlLogic.InfoBarMessageControl (Error) For more information about this rule, visit ... [DataWindowTest.Views.AView] Feature used '0' of '2' times, consider turning it off by default ---------------------------------------------------------------- Cop TargetType: Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic Rule: UserControlLogic.CreateWarningAndErrorValidator (Error) For more information about this rule, visit ... [DataWindowTest.Views.AView] Feature used '0' of '2' times, consider turning it off by default ---------------------------------------------------------------- ================================================================ DATAWINDOWTEST.VIEWS.BVIEW ================================================================ Cop TargetType: Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic Rule: UserControlLogic.InfoBarMessageControl (Error) For more information about this rule, visit ... [DataWindowTest.Views.BView] Feature used '0' of '2' times, consider turning it off by default ---------------------------------------------------------------- Cop TargetType: Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic Rule: UserControlLogic.CreateWarningAndErrorValidator (Error) For more information about this rule, visit ... [DataWindowTest.Views.BView] Feature used '0' of '2' times, consider turning it off by default ---------------------------------------------------------------- **************************************************************** End of ApiCop (r) results, generation took '00:00:00.137' ****************************************************************  Architecture ApiCop provides a set of components that help developers of frameworks to aid developers during the usage of their frameworks. Below is a graphical presentation of the components.\nThe green parts are the only components that end-users will use. The blue parts are components for Api developers.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/argument-checking/",
	"title": "Argument checking",
	"tags": [],
	"description": "",
	"content": "It is best practice to always check if the input to a method is correct. If not, an exception should be thrown. Most people do not check for exceptions correctly and lots of null reference exceptions inside a deep stacktrace are hard to solve. Catel does check the input on every method. Normally, a check would look like this:\npublic void CheckForException(object obj) { if (obj == null) { throw new ArgumentNullException(\u0026quot;obj\u0026quot;); } }  However, Catel extensively logs all behavior, thus all the checks started to look like this:\npublic void CheckForException(object obj) { if (obj == null) { Log.Debug(\u0026quot;Argument 'obj' is null in CheckForException\u0026quot;); throw new ArgumentNullException(\u0026quot;obj\u0026quot;); } }  Handling input correctly in such a case takes a lot of space and repetitive code. Therefore the Argument class is developed. This way, it is very simple to check for arguments:\npublic void CheckForException(object obj) { Argument.IsNotNull(\u0026quot;obj\u0026quot;, obj); }  Or, if a range should be checked:\npublic void CheckForException(int myInt) { Argument.IsNotOutOfRange(\u0026quot;myInt\u0026quot;, myInt, 0, 10); }  A final example is to check whether a type implements a specific interface:\npublic void CheckForException(object obj) { Argument.ImplementsInterface(\u0026quot;obj\u0026quot;, obj, typeof(INotifyPropertyChanged)); }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/commands-events/asynchronous-commands/",
	"title": "Asynchronous commands",
	"tags": [],
	"description": "",
	"content": " Commands in MVVM are a very precious good. Actually, MVVM can\u0026rsquo;t exist without them because they allow a developer to bind to a method (that\u0026rsquo;s actually all an ICommand implementation is). However, sometimes it is required to create asynchronous commands. Starting with Catel 3.1, the AsynchronousCommand is introduced.\nWith the AsynchronousCommand, it is possible to create a command that executes a method in the background without blocking the UI thread. It is possible to report progress to the UI thread.\nWant to use async methods? Use the TaskCommand\n\rCreating the command The AsynchronousCommand can be used the same as the the regular Command class. The command must be constructed like this:\nCancelableAsyncCommand = new AsynchronousCommand(OnCancelableAsyncCommand, () =\u0026gt; !CancelableAsyncCommand.IsExecuting);  The second parameter is the CanExecute delegate, and this example does not allow multiple executions of the same command at the same time.\nRunning the command Running the command is the same as the regular Command class. The view can simply bind to the command like the code below:\n\u0026lt;Button Command=\u0026quot;{Binding CancelableAsyncCommand}\u0026quot; Content=\u0026quot;Execute Command\u0026quot; /\u0026gt;  Canceling the command Last but not least, the cool thing about the AsynchronousCommand is that it can complete in two ways. It either completes the method by itself, or it is canceled from the outside. To cancel a running command, two steps must be accomplished:\n1. Bind to the CancelCommand property of the AsynchronousCommand:\n\u0026lt;Button Command=\u0026quot;{Binding CancelableAsyncCommand.CancelCommand}\u0026quot; Content=\u0026quot;Cancel Command\u0026quot; /\u0026gt;  2. Make sure the execute action checks the ShouldCancel property like in the example below:\nprivate void OnCancelableAsyncCommand() { for (var i = 1; i \u0026lt;= 100; i++) { if (CancelableAsyncCommand.ShouldCancel) { // If we should cancel, break out of the loop break; } Thread.Sleep(100); } }  Note that this example looks stupid and you should not use Thread.Sleep, but this is just for the sake of simplicity and the example\n\rReporting progress During the execution of a command, it is possible to report progress back to the main thread. This can done by using the ReportProgress method. All code inside the ReportProgress will be executed in the UI thread:\nprivate void OnCancelableAsyncCommand() { for (var i = 1; i \u0026lt;= 100; i++) { if (CancelableAsyncCommand.ShouldCancel) { // If we should cancel, break out of the loop break; } var i1 = i; CancelableAsyncCommand.ReportProgress(() =\u0026gt; Messages.Add(i1.ToString(CultureInfo.InvariantCulture))); Thread.Sleep(100); } }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/auditing/",
	"title": "Auditing",
	"tags": [],
	"description": "",
	"content": " There are lots of lightweight MVVM frameworks out there, which work great for the basics. However, if you are writing larger enterprise applications, notifying the UI of changed properties isn\u0026rsquo;t enough. For example, did you think about Command Authentication? Or what about sensor emulation for Windows Phone 7 (that Microsoft don’t provide)?\nWhy auditing  There are many reasons why auditing should be added to an application. Most developers only add auditing to the database, but below are several reasons to add auditing to the client as well:\n Logging (what user did what on specific moments) Gather statistics (which views (view models) are used most) See what features of your software are being used by checking if anyone is actually invoking specific commands Measure performance (how long does it take to update specific properties or why is a specific view-model so slow?)  With the auditing capabilities of Catel, you can create and register custom auditors that can handled changes and events of view models. This way, you can gather a lot of statistics or any information that you want to gather about the user experience. Below is a list of events that can be handled:\n OnViewModelCreating OnViewModelCreated OnPropertyChanging OnPropertyChanged OnCommandExecuting OnViewModelSaving OnViewModelSaved OnViewModelCanceling OnViewModelCanceled OnViewModelClosing OnViewModelClosed  The developer has all the freedom to handle one or more methods in an auditor. Of course multiple auditors are possible as well.\nCreating an auditor Creating a new auditor is very simple. Create a new class, derive from AuditorBase and override the methods you are interested in. The class example tracks the event to a fake analytics framework.\n/// \u0026lt;summary\u0026gt; /// Logs all commands to a custom analytics service. /// \u0026lt;/summary\u0026gt; public class CommandAuditor : AuditorBase { private Analytics _analytics = new Analytics(); /// \u0026lt;summary\u0026gt; /// Called when a command of a view model has just been executed. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;viewModel\u0026quot;\u0026gt;The view model.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026quot;commandName\u0026quot;\u0026gt;Name of the command, which is the name of the command property.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026quot;command\u0026quot;\u0026gt;The command that has been executed.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026quot;commandParameter\u0026quot;\u0026gt;The command parameter.\u0026lt;/param\u0026gt; public override void OnCommandExecuted(IViewModel viewModel, string commandName, ICatelCommand command, object commandParameter) { _analytics.TrackEvent(viewModel.GetType(), \u0026quot;commandName\u0026quot;); } }  Registering an auditor  Registering a new auditor is extremely easy as you can see in the code below:\nAuditingManager.RegisterAuditor(new CommandAuditor());  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/behaviors-triggers/authentication/",
	"title": "Authentication",
	"tags": [],
	"description": "",
	"content": "The Authentication behavior is able to hide, collapse or disable UI elements based on the current user state. The behavior uses the registered IAuthenticationProvider instances to determine whether the user has access to the specified UI element.\n1) Creating an authentication provider:\n/// \u0026lt;summary\u0026gt; /// Example implementation of the \u0026lt;see cref=\u0026quot;AuthenticationProvider\u0026quot;/\u0026gt;. This class is not really implemented /// like it should, because it shouldn't be this easy to set the current role. However, for the sake of simplicity, /// this class has a simple property with the role of the user. /// \u0026lt;/summary\u0026gt; public class AuthenticationProvider : IAuthenticationProvider { /// \u0026lt;summary\u0026gt; /// Gets or sets the role the user is currently in. /// \u0026lt;/summary\u0026gt; /// \u0026lt;value\u0026gt;The role.\u0026lt;/value\u0026gt; public string Role { get; set; } public bool CanCommandBeExecuted(ICatelCommand command, object commandParameter) { return true; } public bool HasAccessToUIElement(FrameworkElement element, object tag, object authenticationTag) { var authenticationTagAsString = authenticationTag as string; if (authenticationTagAsString != null) { if (string.Compare(authenticationTagAsString, Role, true) == 0) { return true; } } return false; } }  2) Register the authentication provider in the ServiceLocator:\nCatel.IoC.ServiceLocator.Instance.RegisterType\u0026lt;IAuthenticationProvider, AuthenticationProvider\u0026gt;();  3) Add the following XML namespaces to your view:\nxmlns:i=\u0026quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot;  4) Add the behavior. As you can see, it is possible to provide a custom AuthenticationTag, which is passed to the IAuthenticationProvider:\n\u0026lt;TextBox\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:Authentication AuthenticationTag=\u0026quot;Administrator\u0026quot; Action=\u0026quot;Disable\u0026quot; /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;/TextBox\u0026gt;  5) Below are screenshots of the example applications:\nLogged in as administrator:\nLogged in as read-only user:\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/behaviors-triggers/autocompletion/",
	"title": "AutoCompletionBehavior",
	"tags": [],
	"description": "",
	"content": " To enable auto completion features, once can use the services and behaviors provided by Catel. There are two components required for auto completion:\n AutoCompletionService =\u0026gt; takes care of the actual filtering AutoCompletionBehavior =\u0026gt; can be attached to a TextBox to support a dropdown with recommended values  The auto completion features looks like the screenshot below:\nAutoCompletion service The default implementation automatically filters the collection specified. If there is no filter yet, it will filter the top 10 occurrences from the collection. When a filter is available, it will do the same but with the filter applied.\nAutoCompletion behavior The behavior can be used as follows:\n\u0026lt;catel:AutoCompletionBehavior PropertyName=\u0026quot;{Binding PropertyName, Mode=OneWay}\u0026quot; ItemsSource=\u0026quot;{Binding RawCollection}\u0026quot; IsEnabled=\u0026quot;{Binding EnableAutoCompletion}\u0026quot;/\u0026gt;  If the PropertyName is null or whitespace, the ItemsSource will be treated as collection of strings to be filtered directly\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/behaviors-triggers/autoscroll/",
	"title": "AutoScroll",
	"tags": [],
	"description": "",
	"content": "The AutoScroll behavior automatically scrolls to a specific direction when the ItemsSource of an ItemsControl changes.\n1) Add the following XML namespaces:\nxmlns:i=\u0026quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot;  2) Add behavior\n\u0026lt;ListBox ItemsSource=\u0026quot;{Binding LogEntries}\u0026quot;\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:AutoScroll ScrollDirection=\u0026quot;Bottom\u0026quot; ScrollTreshold=\u0026quot;10\u0026quot; /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;/ListBox\u0026gt;  The ScrollDirection determines the direction (Top or Bottom).\nThe ScrollTreshold allows the treshold of the real offset (to determine whether auto scroll should be enabled). For example, when the user is manually scrolling, this behavior will pause.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/logging/log-listeners/batch-log-listeners/",
	"title": "Batch log listeners",
	"tags": [],
	"description": "",
	"content": " A batch log listener is a class implementing the IBatchLogListener interface (and most probably deriving from BatchLogListenerBase). This interface adds a Flush method which allows a listener to be flushed. The advantage is that when a log listener writes to a slower persistence store, it will not have to access this expensive resource for every log event, but by batches.\nFlushing all listeners When using batch log listeners, it is very important to flush the log listeners at important events such as application unhandled exceptions or when the application exits. The reason is that otherwise important log events that are currently in the batch that hasn\u0026rsquo;t been written to the persistence store are lost.\nTo flush all flushable listeners, use the following method:\nLogManager.FlushAll();  Implementing a custom IBatchLogListener When implementing a custom batch log listener, it is very wise to derive from the BatchLogListenerBase class. This brings the following advantages:\n The BatchLogListenerBase is thread-safe The BatchLogListenerBase automatically flushes the listener every 5 seconds You only need to implement the WriteBatch which actually writes the entries to the persistence store  Below is an example batch log listener:\npublic class FileLogListener : BatchLogListenerBase { private readonly string _filePath; private readonly int _maxSizeInKiloBytes; public FileLogListener(string filePath, int maxSizeInKiloBytes) { Argument.IsNotNullOrWhitespace(() =\u0026gt; filePath); _filePath = filePath; _maxSizeInKiloBytes = maxSizeInKiloBytes; } protected override void WriteBatch(System.Collections.Generic.List\u0026lt;LogBatchEntry\u0026gt; batchEntries) { try { var fileInfo = new FileInfo(_filePath); if (fileInfo.Exists \u0026amp;\u0026amp; (fileInfo.Length / 1024 \u0026gt;= _maxSizeInKiloBytes)) { CreateCopyOfCurrentLogFile(_filePath); } using (var fileStream = new FileStream(_filePath, FileMode.Append, FileAccess.Write, FileShare.Read)) { using (var writer = new StreamWriter(fileStream)) { foreach (var batchEntry in batchEntries) { var message = FormatLogEvent(batchEntry.Log, batchEntry.Message, batchEntry.LogEvent, batchEntry.ExtraData); writer.WriteLine(message); } } } } catch (Exception) { // Swallow } } private void CreateCopyOfCurrentLogFile(string filePath) { for (int i = 1; i \u0026lt; 999; i++) { var possibleFilePath = string.Format(\u0026quot;{0}.{1:000}\u0026quot;, filePath, i); if (!File.Exists(possibleFilePath)) { File.Move(filePath, possibleFilePath); } } } }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/behaviors-triggers/",
	"title": "Behaviors &amp; triggers",
	"tags": [],
	"description": "",
	"content": " Behaviors and triggers are very important to correctly separate the view from the view model. For example, to respond to an event in a view model, you cannot simply subscribe to the events in the view. The EventToCommand behavior is a great example to solve this problem.\nCatel offers lots of behaviors out of the box, so it is definitely worth taking a look at the behaviors.\nManaging interactivity classes Starting with Catel 4.0, it is possible to manage interactivity classes such as behaviors from the InteractivityManager class. This allows a developer to get notified when a behavior or trigger is loaded or unloaded.\nNote that the InteractivityManager is only compatible with behaviors and triggers using one of the Catel base classes\n\rThe manager contains both events and methods to retrieve information about triggers. For example, if one is interested in all the Focus triggers, one could do the following:\npublic class FocusWatcher { private static readonly ILog Log = LogManager.GetCurrentClassLogger(); private readonly IInteractivityManager _interactivityManager; public FocusWatcher(IInteractivityManager interactivityManager) { Argument.IsNotNull(() =\u0026gt; interactivityManager); _interactivityManager = interactivityManager; _interactivityManager.BehaviorLoaded += OnBehaviorLoaded; _interactivityManager.BehaviorUnloaded += OnBehaviorUnloaded; } private void OnBehaviorLoaded(object sender, BehaviorEventArgs e) { var focus = e.Behavior as Focus; if (focus != null) { Log.Info(\u0026quot;Focus behavior loaded\u0026quot;); } } private void OnBehaviorUnloaded(object sender, BehaviorEventArgs e) { var focus = e.Behavior as Focus; if (focus != null) { Log.Info(\u0026quot;Focus behavior unloaded\u0026quot;); } } }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/serialization/supported-serializers/binary/",
	"title": "Binary",
	"tags": [],
	"description": "",
	"content": "The binary serializer uses the .NET binary serializer formatters to serialize the objects.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/bindings/",
	"title": "Bindings",
	"tags": [],
	"description": "",
	"content": " By default, all XAML technologies support binding out of the box. However other platforms (such as Xamarin.Android and Xamarin.iOS) don\u0026rsquo;t. Catel provides a binding system for these platforms, which is described in this topic.\nNote that although the binding system in Catel is very powerful, it will never be as flexible / powerful as the native XAML binding system. We do try to support as many features as possible though.\n\rFor examples, check out the following pages:\n Property bindings Command bindings  Binding system explained The binding system consists of several classes. Below is an architectural overview.\nAs the image shows, each view will have their own BindingContext. A BindingContext contains all the bindings currently available in the view and allows adding / removing bindings dynamically when required. As soon as a major change occurs (such as a new view model), a new BindingContext will be created and the old one will be cleaned up. The views in Catel will automatically take care of the BindingContext initialization and lifetime management.\nEach Binding is a mapping from source to target. It also allows the specification of a converter like available in the XAML platforms. Each Binding also contains several BindingParty objects. The default value for BindingMode is BindingMode.TwoWay.\nA BindingParty is an object that will take care of watching the source or target of the binding and inform the binding when a value has been changed. The binding parties are considered equal and contain the same logic for both the source and target of the binding.\nAll bindings must be initialized in the AddBindings method that is available on all views provided by Catel. "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/caching/",
	"title": "Caching",
	"tags": [],
	"description": "",
	"content": " Caching is about improving applications performance. The most expensive performance costs of the applications are related with data retrieving, typically when this data requires to be moved across the network or loaded from disk. But some data have a slow changing behavior (a.k.a non-volatile) and doesn\u0026rsquo;t require to be re-read with the same frequency of the volatile data.\nSo, to improve your application\u0026rsquo;s performance and handling this \u0026ldquo;nonvolatile\u0026rdquo; data from a pretty clean approach, Catel comes with a CacheStorage class. Notice that the first generic parameter is the type of the key and the second the type of the value the will be stored, just like a Dictionary but CacheStorage isn\u0026rsquo;t it just a Dictionary. This class allows you to retrieve data and store it into the cache with single statement and also helps you to handle expiration policy if you need it.\nInitializing a cache storage To initialize a cache storage field into your class use the following code:\nprivate readonly CacheStorage\u0026lt;string, Person\u0026gt; _personCache = new CacheStorage\u0026lt;string, Person\u0026gt;(storeNullValues: true);  Retrieving data and storing into cache with single statement To retrieve data and store into a cache with a single statement use the following code:\nvar person = _personCache.GetFromCacheOrFetch(Id, () =\u0026gt; service.FindPersonById(Id));  When this statement is executed with the same key more than once , the value will be retrieved from the cache storage instead of the service call. The service call will be executed just the first time or if the item is removed from the cache manually or automatically due to the expiration policy.\nUsing cache expiration policies The cache expiration policies add a removal behavior to the cache storage items. A policy signals that an item is expired to make that cache storage remove the item automatically.\nA default cache expiration policy initialization code can be specified during cache storage initialization constructor:\nCacheStorage\u0026lt;string, Person\u0026gt; _personCache = new CacheStorage\u0026lt;string, Person\u0026gt;(() =\u0026gt; ExpirationPolicy.Duration(TimeSpan.FromMinutes(5)), true);  You can specify a specific expiration policy for an item when it\u0026rsquo;s storing:\n_personCache.GetFromCacheOrFetch(id, () =\u0026gt; service.GetPersonById(id), ExpirationPolicy.Duration(TimeSpan.FromMinutes(10)));  The default cache policy specified at cache storage initialization will be used if the item storing the expiration policy is not specified.\nBuild-in expiration policies Catel comes with build-in expiration policies. They are listed in the follow table:\nExpiration policy|Type|Description|Initialization code sample -|-|-|- AbsoluteExpirationPolicy|Time-base|The cache item will expire on the absolute expiration DateTime|ExpirationPolicy.Absolute(new DateTime(21, 12, 2012)) DurationExpirationPolicy|Time-base|The cache item will expire using the duration TimeSpan to calculate the absolute expiration from DateTime.Now|ExpirationPolicy.Duration(TimeSpan.FromMinutes(5)) SlidingExpirationPolicy|Time-base|The cache item will expire using the duration TimeSpan to calculate the absolute expiration from DateTime.Now, but everytime the item is requested, it is expanded again with the specified TimeSpan|ExpirationPolicy.Sliding(TimeSpan.FromMinutes(5)) CustomExpirationPolicy|Custom|The cache item will expire using the expire function and execute the reset action if specified. The example shows how to create a sliding expiration policy with a custom expiration policy.|var startDateTime = DateTime.Now;var duration = TimeSpan.FromMinutes(5);ExpirationPolicy.Custom(() =\u0026gt; DateTime.Now \u0026gt; startDateTime.Add(duration), () =\u0026gt; startDateTime = DateTime.Now); CompositeExpirationPolicy|Custom|Combines several expiration policy into a single one. It can be configured to expire when any policy expires or when all policies expire.|new CompositeExpirationPolicy().Add(ExpirationPolicy.Sliding(TimeSpan.FromMinutes(5))).Add(ExpirationPolicy.Custom(()=\u0026gt;...))\nImplementing your own expiration cache policy\nIf the CustomExpirationPolicy is not enough, you can implement you own expiration policy to make that cache item expire triggered from a custom event. You are also able to add some code to reset the expiration policy if the item is read from the cache before it expires (just like SlidingExpirationPolicy does).\nTo implement an expiration cache policy use the following code template:\npublic class MyExpirationPolicy : ExpirationPolicy { public MyExpirationPolicy():base(true) { } public override bool IsExpired { get { // Add your custom expiration code to detect if the item expires } } public override void OnReset() { // Add your custom code to reset the policy if the item is read. } }  The base constructor has a parameter to indicate if the policy can be reset. Therefore, if you call the base constructor with false then the OnReset method will never called.\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/",
	"title": "Catel",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.serialization.json/catel/",
	"title": "Catel",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/",
	"title": "Catel.Core",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/",
	"title": "Catel.MVVM",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.serialization.json/",
	"title": "Catel.Serialization.Json",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/preventing-memory-leaks/change-notification-wrapper/",
	"title": "Change notification wrapper",
	"tags": [],
	"description": "",
	"content": " Subscribing to change notifications of objects mostly results in large statements such as the one below:\nvar itemAsPropertyChanged = obj as INotifyPropertyChanged; if (itemAsPropertyChanged != null) { itemAsPropertyChanged.PropertyChanged += OnPropertyChanged; }  However, using this code one must be aware that if not unsubscribed, there might be a potential memory leak here. In Catel, there is a solution for such cases that can raise change notifications using weak events called the ChangeNotificationWrapper. It allows the subscription of both the INotifyPropertyChanged and INotifyCollectionChanged interfaces.\nSubscribing to events of an observable object Using the code below, one can subscribe to the PropertyChanged event of an object:\nvar wrapper = new ChangeNotificationWrapper(obj); wrapper.PropertyChanged += OnPropertyChanged;  Note that it is not required to check whether the object implements INotifyPropertyChanged, the wrapper does it automatically\n\rSubscribing to events of an observable collection Using the code below, one can subscribe to the CollectionChanged event of an object:\nvar wrapper = new ChangeNotificationWrapper(observableCollection); wrapper.CollectionChanged += OnCollectionChanged;  Note that it is not required to check whether the object implements INotifyCollectionChanged, the wrapper does it automatically\n\rAdvanced scenario with observable collections Sometimes it is required to watch both changes inside a collection, but also the items inside a collection. For example, there is a list of customers and you are also interested in changes of customers inside a collection. This is fully supported by the ChangeNotificationWrapper using the code below:\nvar wrapper = new ChangeNotificationWrapper(observableCustomerCollection); wrapper.CollectionChanged += OnCollectionChanged; wrapper.CollectionItemPropertyChanged += OnCollectionItemPropertyChanged;  All subscriptions are automatically managed by the ChangeNotificationWrapper when items are added or removed from the collection.\nUnsubscribing from events When you are no longer interested in events from the source object, there are two options:\n Just leave them coming, as soon as the objects are no longer used, they will be garbage collected  Unsubscribe using the following code:  wrapper.UnsubscribeFromAllEvents();  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/bindings/command-bindings/",
	"title": "Command bindings",
	"tags": [],
	"description": "",
	"content": " Catel will automatically hook up the CanExecute of the command to the Enabled property of the element it is bound to. A command binding is always bound to an event of a specific element as shown below.\nAndroid protected override void AddBindings(BindingContext bindingContext, IViewModel viewModel) { var vm = (MainViewModel) viewModel; bindingContext.AddCommandBinding(_testButton, \u0026quot;Click\u0026quot;, vm.RunCommand); }  iOS iOS not yet documented\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/commands-events/application-wide-commands/",
	"title": "CommandManager and command containers (Application-wide commands)",
	"tags": [],
	"description": "",
	"content": " Most commands are registered per view and available per view model. Some commands (such as commands on a Ribbon or Toolbar) are application-wide. Catel supports both types, and this part of the documentation explains how to use the ICommandManager to work with application-wide commands such as Refresh with a key bound to F5.\nCommandManager There is no generic way to specify application-wide commands in XAML platforms. To overcome this issue, Catel introduces the CommandManager. This manager allows to create commands which are hosted by the CommandManager. The commands on the command manager can be created with input gestures. Once a view model wants to hook into a specific command, it only has to register the view model command with the application-wide command.\nNote that application-wide commands by default are only available on the main window of an application. To support this on other windows, add the following code in the constructor of a window:\npublic class SomeWindow { private readonly CommandManagerWrapper _commandManagerWrapper; public SomeWindow() { InitializeComponent(); _commandManagerWrapper = new CommandManagerWrapper(this); } }  \rCreating application-wide commands To create application-wide commands, one must resolve the ICommandManager from the *DependencyResolver *and create the command:\nvar dependencyResolver = IoCConfiguration.DefaultDependencyResolver; var commandManager = dependencyResolver.Resolve\u0026lt;ICommandManager\u0026gt;(); commandManager.CreateCommand(\u0026quot;Refresh\u0026quot;, new InputGesture(Key.F5));  It is recommended to put all the command creation in a single place so they are easily manageable.\n\rRegistering a custom command When a view model wants to use application-wide specific commands, the only thing it has to do is register the command in the CommandManager.\npublic class CommandSubscribingViewModel : ViewModelBase { private readonly IMessageService _messageService; public CommandSubscribingViewModel(ICommandManager commandManager, IMessageService messageService) { Argument.IsNotNull(() =\u0026gt; commandManager); Argument.IsNotNull(() =\u0026gt; messageService); _messageService = messageService; ExampleCommand = new Command(OnExampleCommandExecute); commandManager.RegisterCommand(\u0026quot;Refresh\u0026quot;, ExampleCommand, this); } public Command ExampleCommand { get; private set; } private void OnExampleCommandExecute() { _messageService.Show(\u0026quot;Application-wide command executed\u0026quot;); } }  Using application-wide commands in xaml To make it easy to bind to application-wide commands, Catel provides the *CommandManagerBinding *markup extension. To bind to commands in xaml, use the following code:\n\u0026lt;Ribbon catel:StackGrid.ColumnSpan=\u0026quot;4\u0026quot;\u0026gt; \u0026lt;RibbonTab Header=\u0026quot;Home\u0026quot; KeyTip=\u0026quot;H\u0026quot; \u0026gt; \u0026lt;RibbonGroup Header=\u0026quot;Example commands\u0026quot;\u0026gt; \u0026lt;RibbonButton Command=\u0026quot;{catel:CommandManagerBinding Refresh}\u0026quot; LargeImageSource=\u0026quot;..\\Resources\\Images\\Refresh.png\u0026quot; Label=\u0026quot;Refresh\u0026quot; KeyTip=\u0026quot;F5\u0026quot; /\u0026gt; \u0026lt;/RibbonGroup\u0026gt; \u0026lt;/RibbonTab\u0026gt; \u0026lt;/Ribbon\u0026gt;  As the code shows, the CommandManagerBinding extension automatically resolves the Refresh command from the CommandManager.\nCommand containers When implementing a ribbon or any menu structure inside an application can result in a very complex view model containing all the commands. Catel solves this issue by implementing so-called command containers. These are containers that have only 1 purpose: contain a command so the logic can easily be viewed / edited and the commands will be available during the whole lifetime of the app. Internally command containers use the ICommandManager to register commands, so the ICommandManager is still responsible for the commands.\nCreating a command container Creating a command container is very simple. It can be done by creating a class deriving from CommandContainerBase as shown in the example below:\npublic class ApplicationAboutCommandContainer : CommandContainerBase { private readonly IAboutService _aboutService; public ApplicationAboutCommandContainer(ICommandManager commandManager, IAboutService aboutService) : base(Commands.Application.About, commandManager) { Argument.IsNotNull(() =\u0026gt; aboutService); _aboutService = aboutService; } protected override Execute(object parameter) { _aboutService.ShowAbout(); } }  As you can see the implementation is very clean and won\u0026rsquo;t pollute any other view models.\nRegistering a command container If you don\u0026rsquo;t use the extension methods below, you must register the command container inside the service locator and register the command inside the ICommandManager. To make this process easier, use a definition file and the code below.\nCommand definitions To make it very easy to register new commands, Catel uses naming conventions and extension methods. The name of the command (for example, About must be a constant on the command definitions class). If the command definition also contains a \u0026lt;CommandName\u0026gt;InputGesture, in this case AboutInputGesture, it will use that input gesture as a default to register the command with.\npublic static class Commands { public static class Application { public const string Exit = \u0026quot;Application.Exit\u0026quot;; public static readonly InputGesture ExitInputGesture = new InputGesture(Key.F4, ModifierKeys.Alt); public const string About = \u0026quot;Application.About\u0026quot;; public static readonly InputGesture AboutInputGesture = new InputGesture(Key.F1); } public static class OtherPartOfApplication { public const string SomeCommand = \u0026quot;OtherPartOfApplication.SomeCommand\u0026quot;; public static readonly InputGesture SomeCommandInputGesture = null; } }  It is recommended to keep a well formed structure for your command definitions to keep them manageable, even in very large applications\n\rRegistering the command container Once you have the command container and the command definition (command name and the input gesture), it is time to register the command container:\nvar commandManager = ServiceLocator.Default.ResolveType\u0026lt;ICommandManager\u0026gt;(); commandManager.CreateCommandWithGesture(typeof(Commands.Application), \u0026quot;About\u0026quot;);  This will keep the command registration very readable and maintainable when using a lot of commands:\nvar commandManager = ServiceLocator.Default.ResolveType\u0026lt;ICommandManager\u0026gt;(); commandManager.CreateCommandWithGesture(typeof(AppCommands.Application), \u0026quot;Exit\u0026quot;); commandManager.CreateCommandWithGesture(typeof(AppCommands.Application), \u0026quot;About\u0026quot;); commandManager.CreateCommandWithGesture(typeof(Commands.Project), \u0026quot;Open\u0026quot;); commandManager.CreateCommandWithGesture(typeof(Commands.Project), \u0026quot;Save\u0026quot;); commandManager.CreateCommandWithGesture(typeof(Commands.Project), \u0026quot;SaveAs\u0026quot;); commandManager.CreateCommandWithGesture(typeof(Commands.Project), \u0026quot;Refresh\u0026quot;); commandManager.CreateCommandWithGesture(typeof(AppCommands.Settings), \u0026quot;ToggleTooltips\u0026quot;); commandManager.CreateCommandWithGesture(typeof(AppCommands.Settings), \u0026quot;ToggleQuickFilters\u0026quot;); commandManager.CreateCommandWithGesture(typeof(ExtensibilityCommands.Application), \u0026quot;Extensions\u0026quot;); commandManager.CreateCommandWithGesture(typeof(ExtensibilityCommands.Application), \u0026quot;ExtensionsSettings\u0026quot;);  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/commands-events/commands/",
	"title": "Commands",
	"tags": [],
	"description": "",
	"content": " Commands are supported in Catel. The base class for commands is Command.\nCode snippets  vmcommand - declare a command on a view model vmcommandwithcanexecute - declare a command with support for CanExecute on a view model  Explanation To implement commands, and still be able to unit test the view models, a separate command is introduced. This command allows a developer to implement a command that can be invoked both via code (unit testing) and UI.\nThere is one real Command class: Command\\\u0026lt;TCanExecuteParameter, TExecuteParameter\\\u0026gt;\nThe TCanExecuteParameter is the parameter that is passed to the CanExecute of the command, ands saves the developer from casting the object (as in the interface ICommand to a typed object). The same goes for TExecuteParameter which makes the Execute of the command typed.\nThere are also several wrappers available in case object is used as type parameter:\n Command\\\u0026lt;TExecuteParameter\\\u0026gt; (wraps Command\\\u0026lt;TCanExecuteParameter, TExecuteParameter\\\u0026gt; with object for TCanExecuteParameter) Command (wraps Command\\\u0026lt;TExecuteParameter\\\u0026gt; with object for TExecuteParameter)  Examples Code:\nprivate readonly IMessageService _messageService; public void MyViewModel(IMessageService messageService) { Argument.IsNotNull(() =\u0026gt; messageService); _messageService = messageService; // Add commands MyAction = new Command(MyAction_Execute); } /// \u0026lt;summary\u0026gt; /// Gets the MyAction command. /// \u0026lt;/summary\u0026gt; public Command MyAction { get; private set; } /// \u0026lt;summary\u0026gt; /// Method to invoke when the MyAction command is executed. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;parameter\u0026quot;\u0026gt;The parameter of the command.\u0026lt;/param\u0026gt; private void MyAction_Execute(object parameter) { // Show message box _messageService.ShowInfo(\u0026quot;My action in MVVM\u0026quot;); }  Xaml (assuming that the view model is set as datacontext):\n\u0026lt;Button Content=\u0026quot;Click me\u0026quot; Command=\u0026quot;{Binding MyCommand}\u0026quot; /\u0026gt;  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/commands-events/",
	"title": "Commands &amp; events",
	"tags": [],
	"description": "",
	"content": "Commanding is supported by Catel. Catel supports Command classes, which is also known as RelayCommand or DelegateCommand in other frameworks. Defining a command on a view model is very easy, as you can see in the code below:\n// TODO: Move code below to constructor Edit = new Command(OnEditExecute, OnEditCanExecute); // TODO: Move code above to constructor /// \u0026lt;summary\u0026gt; /// Gets the Edit command. /// \u0026lt;/summary\u0026gt; public Command Edit { get; private set; } /// \u0026lt;summary\u0026gt; /// Method to check whether the Edit command can be executed. /// \u0026lt;/summary\u0026gt; private bool OnEditCanExecute() { return true; } /// \u0026lt;summary\u0026gt; /// Method to invoke when the Edit command is executed. /// \u0026lt;/summary\u0026gt; private void OnEditExecute() { // TODO: Handle command logic here }  There are some people who don’t like the ICommand implementations. For example, Caliburn (Micro) uses convention and does not require the creation of a command. There are a few downsides for that:\n It requires you to make sure the name of the control is the same as the method; It is not clear that it is actually a command if you are not fully familiar with the conventions; The methods need to be public (otherwise, how are you going to invoke the commands during unit tests?), which make them freely available (and that’s not something we like); You will always have to invoke CanExecute yourself again in Execute, because you have no guarantee that the source of Execute is actually the convention mapping; There is no way to manually refresh the CanExecute state on the bound controls.  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/commands-events/authentication/",
	"title": "Commands authentication",
	"tags": [],
	"description": "",
	"content": " One of the questions an MVVM developer faces is how to control the executation state of a command by role or user authentication method. Catel offers an out-of-the-box solution for this problem to check the CanExecute state of the commands in the UI. It is very important that this way of disabling commands is only used to easy the development of consistent user interfaces. It cannot replace the actual check whether a user can or cannot modify data. The actual and final responsibility still lays at the business layer.\nTagging your commands To know whether a specific user can execute a command, you need to be able to distinguish one command from another. The ICatelCommand interface (which derives from ICommand) providers a Tag property that allows you to tag the command with any object that fits your needs. In one application, commands might be distinguished using strings, other applications use integer ID\u0026rsquo;s.\nA tag must be set in the constructor of a command and cannot be changed:\nEdit = new Command(OnEditExecute, OnEditCanExecute, \u0026quot;editCommand\u0026quot;);  IAuthenticationProvider The IAuthenticationProvider is a provider that needs to be implemented per application and must be registered in the IoC container. Below is the interface definition:\n/// \u0026lt;summary\u0026gt; /// Interface to allow an authentication mechanism to control the CanExecute state of a command. /// \u0026lt;/summary\u0026gt; public interface IAuthenticationProvider { /// \u0026lt;summary\u0026gt; /// Determines whether the specified \u0026lt;paramref name=\u0026quot;command\u0026quot;/\u0026gt; can be executed. The class implementing this interface /// can use any required method to check the command. /// \u0026lt;para /\u0026gt; /// It is recommended to use the \u0026lt;see cref=\u0026quot;ICatelCommand.Tag\u0026quot;/\u0026gt; property to identify a command. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;command\u0026quot;\u0026gt;The command that is requested.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026quot;commandParameter\u0026quot;\u0026gt;The command parameter.\u0026lt;/param\u0026gt; /// \u0026lt;returns\u0026gt; /// \u0026lt;c\u0026gt;true\u0026lt;/c\u0026gt; if this instance [can command be executed] the specified command; otherwise, \u0026lt;c\u0026gt;false\u0026lt;/c\u0026gt;. /// \u0026lt;/returns\u0026gt; /// \u0026lt;remarks\u0026gt; /// The \u0026lt;c\u0026gt;CanExecute\u0026lt;/c\u0026gt; state of a command is queried a lot. The command itself does not cache any results because /// it is not aware of role or identity changes. If caching is required, this must be implemented in the class implementing /// the \u0026lt;see cref=\u0026quot;ICommandAuthenticationProvider\u0026quot;/\u0026gt; interface. /// \u0026lt;/remarks\u0026gt; bool CanCommandBeExecuted(ICatelCommand command, object commandParameter); }  To register a custom implementation of the command authentication provider, use the code below:\nCatel.IoC.ServiceLocator.Instance.RegisterType\u0026lt;IAuthenticationProvider, RoleAuthenticationProvider\u0026gt;();  The code above registers a custom made command authentication provider that checks whether a specific role can execute the command.\nCatel checks whether an IAuthenticationProvider is registered. If not, the way commands are handled is not affected in any way. If there is an IAuthenticationProvider available, the CanExecute state is checked, even when there is no custom CanExecute implemented.\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": " Catel makes it very easy to use configurations on all supported platforms. Below is a table to explain what technology is used per platform to retrieve and store configuration values.\nPlatform|Technology -|- .NET|ConfigurationManager.AppSettings UWP|ApplicationData.Current.LocalSettings PCL|Not supported\nGetting values from the configuration To retrieve values from the configuration, use the following code:\nvar configurationService = new ConfigurationService(); var mySetting = configurationService.GetValue\u0026lt;int\u0026gt;(\u0026quot;mySetting\u0026quot;, 42);  The code above will retrieve the values from the configuration. If the configuration value does not exist, it will return 42 as default value.\nIt\u0026rsquo;s best to retrieve the service from the dependency resolver or let it be injected into the classes using it\n\rSetting values to the configuration To store values in the configuration, use the following code:\nvar configurationService = new ConfigurationService(); configurationService.SetValue(\u0026quot;mySetting\u0026quot;, 42);  It\u0026rsquo;s best to retrieve the service from the dependency resolver or let it be injected into the classes using it\n\rCustomizing the way values are stored The ConfigurationService is written with extensibility in mind. Though it defaults to the .NET local storage system, it is very easy to create a customized configuration service. Below is an example on how to customize the service so it reads and writes values from/to a database.\npublic class DbConfigurationService : ConfigurationService { protected override bool ValueExists(string key) { using (var context = new ConfigurationContext()) { return (from config in context.Configurations where config.Key == key select config).Any(); } } protected override string GetValueFromStore(string key) { using (var context = new ConfigurationContext()) { return (from config in context.Configurations where config.Key == key select config.Value).First(); } } protected override void SetValueToStore(string key, string value) { using (var context = new ConfigurationContext()) { var configuration (from config in context.Configurations where config.Key == key select config).FirstOrDefault(); if (configuration == null) { configuration = context.CreateObject\u0026lt;Configuration\u0026gt;(); configuration.Key = key; } configuration.Value = value; context.SaveChanges(); } } }  Don\u0026rsquo;t forget to register the customized ConfigurationService in the ServiceLocator\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/logging/log-listeners/console-log-listener/",
	"title": "ConsoleLogListener",
	"tags": [],
	"description": "",
	"content": "The ConsoleLogListener writes messages to the console with automatic colors:\nTo add it, use the code below:\nvar logListener = new ConsoleLogListener(); logListener.IgnoreCatelLogging = true; // TODO: Customize options LogManager.AddListener(logListener);  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/view-models/advanced/controlling-instantiation-of-view-models/",
	"title": "Controlling the instantiation of view models",
	"tags": [],
	"description": "",
	"content": " Starting with Catel 3.1, it is possible to take control of the view model instantiation of a view dynamically at runtime. This feature can be used when the construction of a view model is more complex than injecting the datacontext as model, or when the view model instance in a custom repository should be re-used.\nHow to control the view model instantiation using the IViewModelFactory The IViewModelFactory is the best way to customize the instantiation of view models in Catel. This allows full control for all view models because the factory will be used to create all view models, except when any other methods described below are used.\nIf customization of the view model instantiation is required, it is best the derive from the default ViewModelFactory class to be able to fall back to the default behavior in non-special cases.\npublic class CustomViewModelFactory : ViewModelFactory { public override IViewModel CreateViewModel(Type viewModelType, object dataContext) { if (viewModelType == typeof(MySpecialViewModel)) { // Use custom constructor with dependency injection return new MySpecialViewModel(dep1, dep2, dep3, dataContext); } // Fall back to default behavior return base.CreateViewModel(viewModelType, dataContext); } }  When a custom factory is used, it is important to register it in the ServiceLocator:\nServiceLocator.Default.RegisterType\u0026lt;IViewModelFactory, CustomViewModelFactory\u0026gt;();  How to control the view model instantiation using a UserControl Note that it is best to use the IViewModelFactory for view model instantation because it is a more generic solution\n\rControlling the instantiation of the view model dynamically when using the UserControl is extremely easy. You can override the GetViewModelInstance(object) method like this:\nprotected override IViewModel GetViewModelInstance(object dataContext) { if (dataContext is Rectangle) { return new RectangleViewModel((Rectangle)dataContext); } return null; }  When the method returns null, the logic will try to construct the view model by itself.\nHow to control the view model instantiation using a behavior Note that it is best to use the IViewModelFactory for view model instantation because it is a more generic solution\n\rControlling the instantiation of the view model dynamically when using behaviors must be done via the DetermineViewModelInstance event like this:\nmvvmBehavior.DetermineViewModelInstance += (sender, e) =\u0026gt; { var dataContext = e.DataContext; if (dataContext is Rectangle) { e.ViewModel = new RectangleViewModel((Rectangle)dataContext); } };  There is no need to set the e.ViewModel to null because that is the default value.\nPreventing the logic to create a view model by itself When using the behavior, it is possible to prevent the logic to instantiate a view model. In this case, it is really possible to have full control over view model instantiation. To prevent the logic to create a view model, use this code:\nmvvmBehavior.DetermineViewModelInstance += (sender, e) =\u0026gt; { var dataContext = e.DataContext; if (dataContext is Rectangle) { e.ViewModel = new RectangleViewModel((Rectangle)dataContext); } e.DoNotCreateViewModel = true; };  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/converters/",
	"title": "Converters",
	"tags": [],
	"description": "",
	"content": " In MVVM, there will be some point where you will need to use converters. Most of these converters are used in any project, so we have decided to add them to Catel. Below is a list of converters and a short description what they are used for.\nNote that the behavior of most converters can be inverted by using the ConverterParameter\n\rLinking converters It is possible to link converters. To link converters, simply set the Link property in xaml:\n\u0026lt;catel:NullableValueConverter x:Key=\u0026quot;NullableValueConverter\u0026quot; /\u0026gt; \u0026lt;catel:BooleanToVisibilityConverter\u0026gt; \u0026lt;catel:BooleanToVisibilityConverter.Link\u0026gt; \u0026lt;code:NullToBoolConverter Link=\u0026quot;{StaticResource NullableValueConverter}\u0026quot; /\u0026gt; \u0026lt;/catel:BooleanToVisibilityConverter.Link\u0026gt; \u0026lt;/catel:BooleanToVisibilityConverter\u0026gt;  Available converters Name\nDescription\nAreEqualMultiValueConverter\nConverts the comparison of 2 values to a boolean\nBooleanToCollapsingVisibilityConverter\nConvert from bool to Visibility and back.\nBooleanToHidingVisibilityConverter\nConvert from bool to Visibility and back.\nBooleanToGrayscaleConverter\nConverts a boolean to a grayscale saturation value. If the input is false, this converter will return 0, otherwise 1.\nBooleanToOppositeBooleanConverter\nConvert a boolean to it\u0026rsquo;s inverted value.\nBooleanToTextConverter\nConverts a boolean value to text, for example \u0026ldquo;yes\u0026rdquo; and \u0026ldquo;no\u0026rdquo;, or \u0026ldquo;x\u0026rdquo; and \u0026ldquo; \u0026ldquo;.\nBooleanToCollapsingVisibilityConverter\nConvert from bool to Visibility and back. True returns Visibility.Visible, False returns Visibility.Collapsed.\nBooleanToHidingVisibilityConverter\nConvert from bool to Visibility and back. True returns Visibility.Visible, False returns Visibility.Hidden.\nColorToBrushConverter\nConverts a color value to a brush and vice versa.\nContainsItemsConverter\nConvert the count of an ICollection or IEnumerable to true or false, depending on whether the instance contains items.\nFor an instance which implements ICollection, check Count \u0026gt; 0\nFor an instance which implements IEnumerable, if the instance can be Enumerated.\nCountCollapsedConverter\nConverts the \u0026lsquo;count\u0026rsquo; of ICollection, string, long, int or short to Visibility.Visible or Visibility.Collapsed\nVisible means: ICollection.Count \u0026gt; 0, String.Length \u0026gt; 0 or long, int, short \u0026gt; 0.\nCountHiddenConverter\nConverts the \u0026lsquo;count\u0026rsquo; of ICollection, string, long, int or short to Visibility.Visible or Visibility.Hidden\nVisible means: ICollection.Count \u0026gt; 0, String.Length \u0026gt; 0 or long, int, short \u0026gt; 0.\nEmptyStringToCollapsingVisibilityConverter\nConverts a string to Visibility. If the string is empty, it will return Visibility.Collapsed.\nEmptyStringToHidingVisibilityConverter\nConverts a string to Visibility. If the string is empty, it will return Visibility.Hidden.\nEnumToCollapsingVisibilityConverter\nConverts an enum to Visibility. The allowed values must be defined inside the ConverterParameter as shown below (element will be visible when MyEnumValue is Enum1 or Enum3):\n\u0026lt;TextBlock Visibility=\u0026quot;{Binding MyEnumValue, Converter={converters:EnumToCollapsingVisibilityConverter}, ConverterParameter=Enum1|Enum3}\u0026quot;/\u0026gt;  If the ConverterParameter starts with !, the element will not be visible for the specified enum values\nEnumToHidingVisibilityConverter\nConverts an enum to Visibility. The allowed values must be defined inside the ConverterParameter as shown below (element will be visible when MyEnumValue is Enum1 or Enum3):\n\u0026lt;TextBlock Visibility=\u0026quot;{Binding MyEnumValue, Converter={converters:EnumToHidingVisibilityConverter}, ConverterParameter=Enum1|Enum3}\u0026quot;/\u0026gt;  If the ConverterParameter starts with !, the element will not be visible for the specified enum values\nFormattingConverter\nFormats the value using the format string provided in the ConverterParameter\nIsSelectedConverter\nConverts a selected value to either true of false.\nIsSelectedValueConverter\nConverts a selected value to either true of false.\nGetFirstValidationErrorConverter\nConverts a collection containing ValidationError objects to return the first error or an empty string in case there are no errors.\nIsSelectedConverter\nConverts a selected value to either true or false. Useful whena mutually exclusive selection must be made.\nIntToStringConverter\nConverts an inteteger to a string and back.\nLanguageConverter\nConverts the string (value) to a translated value using the ILanguageService. The parameter can be specified, then it should be a CultureInfo.\nMethodToValueConverter\nConverts the result of a method to a value. This makes it possible to bind to a method. See Source\nMultiplyConverter\nCalculates the product of given value and factor in parameter.\nNullableValueConverter\nConverts a value to a representive value for nullable.\nObjectToDisplayNameConverter\nConverts any value to a display name. Uses the DisplayNameAttribute to handle the tough work.\nPlatformToBooleanConverter\nConverts a value of KnownPlatforms to a boolean based on the current platform. This makes it possible to enable / disable functionality in shared projects based on the target platform.\nReferenceToBooleanConverter\nConverts a reference to a boolean. If the reference is null, it will return false.\nReferenceToCollapsingVisibilityConverter\nConverts a reference to Visibility. If the reference is null, it will return Visibility.Collapsed.\nReferenceToHidingVisibilityConverter\nConverts a reference to Visibility. If the reference is null, it will return Visibility.Hidden.\nShortDateFormattingConverter\nConverts a date to a short date and back.\nStringToIntConverter\nConverts string to an integer and back.\nViewModelToViewConverter\nConverts a view model to a view. Great way to locate a view based on a view model inside xaml.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/view-models/creating-basic-view-model/",
	"title": "Creating a basic view model",
	"tags": [],
	"description": "",
	"content": " This example shows how to create a view model without a model. This is useful when a UI item should simply acknowledge a step that doesn\u0026rsquo;t need to be persisted to a persistence store. The view model does include validation.\nCode snippets  vm - declare a view model vmprop - declare a property on a view model  Explanation When implementing a simple view model without a model, only one property has to be implemented that represents the checkbox that needs to be checked. The example view model declares a single property using the vmprop code snippet. Then, a field error is set if the user has not agreed in the ValidateFields method.\nCode C#\n/// \u0026lt;summary\u0026gt; /// Simple view model. /// \u0026lt;/summary\u0026gt; public class SimpleViewModel : ViewModelBase { /// \u0026lt;summary\u0026gt; /// Gets the title of the view model. /// \u0026lt;/summary\u0026gt; /// \u0026lt;value\u0026gt;The title.\u0026lt;/value\u0026gt; public override string Title { get { return \u0026quot;Just acknowledge\u0026quot;; } } /// \u0026lt;summary\u0026gt; /// Gets or sets whether the user has agreed to continue. /// \u0026lt;/summary\u0026gt; public bool UserAgreedToContinue { get { return GetValue\u0026lt;bool\u0026gt;(UserAgreedToContinueProperty); } set { SetValue(UserAgreedToContinueProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the UserAgreedToContinue property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData UserAgreedToContinueProperty = RegisterProperty(\u0026quot;UserAgreedToContinue\u0026quot;, typeof(bool)); /// \u0026lt;summary\u0026gt; /// Validates the fields. /// \u0026lt;/summary\u0026gt; protected override void ValidateFields(List\u0026lt;FieldValidationResult\u0026gt; validationResults) { // Check if the user agrees to continue if (!UserAgreedToContinue) { validationResults.Add(FieldValidationResult.CreateError(UserAgreedToContinueProperty, \u0026quot;User must agree to continue\u0026quot;); } } }   **XAML (assuming that the view model is set as datacontext) **\n\u0026lt;CheckBox Content=\u0026quot;Check me to continue\u0026quot; IsChecked=\u0026quot;{Binding UserAgreedToContinue, NotifyOnValidationError=True, ValidatesOnDataErrors=True}\u0026quot; /\u0026gt;  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/view-models/creating-view-model-with-model/",
	"title": "Creating a view model with a model",
	"tags": [],
	"description": "",
	"content": " This example shows how to create a \u0026ldquo;classical\u0026rdquo; view model without any Catel specific MVVM features such as data pass-through. Although it is recommended to use the pass-through features, some people want to have custom validation on the view model, or want to be fully in control.\nCode snippets  vm - declare a view model vmprop - declare a property on a view model  Explanation To be in full control, the only thing required is to create a basic view model with the vm code snippet. Then, the following methods should be implemented:\n Constructor - initialize the properties on the view model ValidateFields - check for field errors in the view model ValidateBusinessRules - check for business rules in the view model Save - save the view model data to the model and then save the model  Code C#\n/// \u0026lt;summary\u0026gt; /// Classical view model. /// \u0026lt;/summary\u0026gt; public class ClassicalViewModel : ViewModelBase { #region Properties /// \u0026lt;summary\u0026gt; /// Gets or sets the Person. /// \u0026lt;/summary\u0026gt; private Person Person { get { return GetValue\u0026lt;Person\u0026gt;(PersonProperty); } set { SetValue(PersonProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Person property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData PersonProperty = RegisterProperty(\u0026quot;Person\u0026quot;, typeof(Person)); /// \u0026lt;summary\u0026gt; /// Gets or sets the first name. /// \u0026lt;/summary\u0026gt; public string FirstName { get { return GetValue\u0026lt;string\u0026gt;(FirstNameProperty); } set { SetValue(FirstNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the FirstName property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData FirstNameProperty = RegisterProperty(\u0026quot;FirstName\u0026quot;, typeof(string)); /// \u0026lt;summary\u0026gt; /// Gets or sets the last name. /// \u0026lt;/summary\u0026gt; public string LastName { get { return GetValue\u0026lt;string\u0026gt;(LastNameProperty); } set { SetValue(LastNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the LastName property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData LastNameProperty = RegisterProperty(\u0026quot;LastName\u0026quot;, typeof(string)); #endregion #region Methods /// \u0026lt;summary\u0026gt; /// Initializes the object by setting default values. /// \u0026lt;/summary\u0026gt; protected override void Initialize() { // Get the person from (in this case) a magical context Person = Context.CurrentPerson; // Load the data manually to the view model FirstName = Person.FirstName; LastName = Person.LastName; } /// \u0026lt;summary\u0026gt; /// Validates the field values of this object. Override this method to enable /// validation of field values. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;validationResults\u0026quot;\u0026gt;The validation results, add additional results to this list.\u0026lt;/param\u0026gt; protected override void ValidateFields(List\u0026lt;FieldValidationResult\u0026gt; validationResults) { if (string.IsNullOrWhiteSpace(FirstName)) { validationResults.Add(FieldValidationResult.CreateError(FirstNameProperty, \u0026quot;First name is required\u0026quot;)); } if (string.IsNullOrWhiteSpace(LastName)) { validationResults.Add(FieldValidationResult.CreateError(LastNameProperty, \u0026quot;Last name is required\u0026quot;)); } } /// \u0026lt;summary\u0026gt; /// Saves the data. /// \u0026lt;/summary\u0026gt; /// \u0026lt;returns\u0026gt; /// \u0026lt;c\u0026gt;true\u0026lt;/c\u0026gt; if successful; otherwise \u0026lt;c\u0026gt;false\u0026lt;/c\u0026gt;. /// \u0026lt;/returns\u0026gt; protected override Task\u0026lt;bool\u0026gt; Save() { return Task.Factory.StartNew(() =\u0026gt; { // Save the data manually to the model Person.FirstName = FirstName; Person.LastName = LastName; // Save the model return Person.Save(); }); } #endregion }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/view-models/creating-view-model-with-model-and-mappings/",
	"title": "Creating a view model with a model and mappings",
	"tags": [],
	"description": "",
	"content": " During of the use of the MVVM pattern, we noticed that lots and lots of developers have a model, and map the values of the model to all properties of the view model. When the UI closes, the developers map all the properties back to the model. All this redundant code is not necessary when using the view models of Catel.\nIn Catel, we have created attributes that allow you to define a property as a model. A model is a property that a part of the view model represents to the user. A view model might have multiple models if it is a combination of several models.\nTo use the mapping features, the following attributes are very important:\n ModelAttribute - declare a model in a view model ViewModelToModelAttribute - declare a mapping from a view model property to a model property  In Catel 4.0 a new mapping mechanism is introduced that makes it possible to convert types of properties of the mappings between the Model and ViewModel. It is also possible to map to a collection of properties to a single property as result (like MultiBinding and Converter in WPF).\nTo use new mechanism you should declare this attributes:\n ConverterType - declare a type of converter that converts properties, converter should implement IViewModelToModelConverter. It is recommended to use ViewModelToModelConverterBase as base class for custom converters. The default converter used is DefaultViewModelToModelMappingConverter that provides basic 1:1 mappings between the model and view model. AdditionalConstructorArgs - declare a arguments witch would be passed to converter constructor via reflection AdditionalPropertiesToWatch - declare properties, which changes would trigger the converter  Code snippets  vm - declare a view model vmpropmodel - declare a property as model on a view model vmpropviewmodeltomodel - declare a property as a pass-through property on a view model\u0026rdquo;  Explanation Defining a model is very simple, you only have to decorate your property with the ModelAttribute:\n/// \u0026lt;summary\u0026gt; /// Gets or sets the person. /// \u0026lt;/summary\u0026gt; [Model] public IPerson Person { get { return GetValue\u0026lt;IPerson\u0026gt;(PersonProperty ); } private set { SetValue(PersonProperty , value); } } /// \u0026lt;summary\u0026gt; /// Register the Person property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData PersonProperty = RegisterProperty(\u0026quot;Person\u0026quot;, typeof(IPerson));  Using the ModelAttribute is very powerful. Basically, this is the extended functionality in the view model. If the model supports IEditableObject, BeginEdit is automatically called in the initialization of the view model. When the view model is canceled, the CancelEdit is called so the changes are undone.\nWhen a model is defined, it is possible to use the ViewModelToModelAttribute, as you can see in the code below:\n/// \u0026lt;summary\u0026gt; /// Gets or sets the FirstName of the person. /// \u0026lt;/summary\u0026gt; [ViewModelToModel(\u0026quot;Person\u0026quot;)] public string FirstName { get { return GetValue\u0026lt;string\u0026gt;(FirstNameProperty); } set { SetValue(FirstNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the FirstName property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData FirstNameProperty = RegisterProperty(\u0026quot;FirstName\u0026quot;, typeof(string)); /// \u0026lt;summary\u0026gt; /// Gets or sets the LastName of the person. /// \u0026lt;/summary\u0026gt; [ViewModelToModel(\u0026quot;Person\u0026quot;)] public string LastName { get { return GetValue\u0026lt;string\u0026gt;(LastNameProperty); } set { SetValue(LastNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the LastName property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData LastNameProperty = RegisterProperty(\u0026quot;LastName\u0026quot;, typeof(string));  If there is a single model on a view model, the name of the model in the ViewModelToModel can be ommitted as shown in the code below:\n[ViewModelToModel] public string FirstName { get { return GetValue\u0026lt;string\u0026gt;(FirstNameProperty); } set { SetValue(FirstNameProperty, value); } } public static readonly PropertyData FirstNameProperty = RegisterProperty(\u0026quot;FirstName\u0026quot;, typeof(string));  \rThe ViewModelToModelAttribute in the code example above automatically maps the view model FirstName and LastName properties to the Person.FirstName and Person.LastName properties. This way, you don’t have to manually map the values from and to the model. Another nice effect is that the view model automatically validates all objects defined using the ModelAttribute, and all field and business errors mapped are automatically mapped to the view model.\nSometimes you need the full name of a person, you can easily acquire it by creating a custom converter:\n public class CollapsMappingConverter : DefaultViewModelToModelMappingConverter { #region Fields private readonly char _separator; #endregion #region Constructors public CollapsMappingConverter(string[] propertyNames) : this(propertyNames, ' ') { } public CollapsMappingConverter(string[] propertyNames, char separator = ' ') : base(propertyNames) { _separator = separator; } #endregion #region Properties public char Separator { get { return _separator; } } #endregion #region Methods public override bool CanConvert(Type[] types, Type outType, Type viewModelType) { return types.All(x =\u0026gt; x == typeof (string)) \u0026amp;\u0026amp; outType == typeof (string); //check that all input and output values are strings } public override object Convert(object[] values, IViewModel viewModel) { return string.Join(Separator.ToString(), values.Where(x =\u0026gt; !string.IsNullOrWhiteSpace((string) x))); } public override bool CanConvertBack(Type inType, Type[] outTypes, Type viewModelType) { return outTypes.All(x =\u0026gt; x == typeof (string)) \u0026amp;\u0026amp; inType == typeof (string); //check that all input and output values are strings } public override object[] ConvertBack(object value, IViewModel viewModel) { return ((string) value).Split(Separator); } #endregion }  Now, when we created the converter we should define it in mapping like this:\n/// \u0026lt;summary\u0026gt; /// Gets or sets the FullName of the person. /// \u0026lt;/summary\u0026gt; [ViewModelToModel(\u0026quot;Person\u0026quot;, \u0026quot;FirstName\u0026quot;, AdditionalPropertiesToWatch = new[] { \u0026quot;LastName\u0026quot; }, ConverterType = typeof(CollapsMappingConverter))] public string FullName { get { return GetValue\u0026lt;string\u0026gt;(FullNameProperty); } set { SetValue(FullNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the LastName property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData FullNameProperty = RegisterProperty(\u0026quot;FullName\u0026quot;, typeof(string));  The ViewModelToModelAttribute in the code example above automatically maps the view model FullName property to the Person.FirstName and Person.LastName properties and converts them with CollapsMappingConverter. This way, you don’t have to manually map the values from the model and update FullName property when FirstName or LastName property changed.\nSummarized, the Model and ViewModelToModel attributes make sure no duplicate validation and no manual mappings are required.\n "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/views/xaml/customizing-datacontext-subscription-behavior/",
	"title": "Customizing DataContext subscription behavior",
	"tags": [],
	"description": "",
	"content": " Starting with Catel 4.0, the views watch both the direct and inherited DataContext. Starting with Catel 4.1, it is possible to mimick the pre 4.0 DataContext subscription behavior.\nCustomizing the behavior for all views To mimick pre Catel 4.0, use the following code:\nvar dependencyResolver = this.GetDependencyResolver(); var dataContextSubscriptionService = dependencyResolver.Resolve\u0026lt;IDataContextSubscriptionService\u0026gt;(); dataContextSubscriptionService.DefaultDataContextSubscriptionMode = DataContextSubscriptionMode.DirectDataContext;  Customizing the behavior per view It is also customize the behavior per view. This allows very customized fine tuning of the behavior. To use this feature, one needs to create a custom implementation of the IDataContextSubscriptionService.\npublic class CustomDataContextSubscriptionService : DataContextSubscriptionService { public override DataContextSubscriptionMode GetDataContextSubscriptionMode(Type viewType) { // TODO: Add logic here return base.GetDataContextSubscriptionMode(viewType); } }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/data-handling/",
	"title": "Data handling",
	"tags": [],
	"description": "",
	"content": "This part of the documentation is all about data handling the way it should that is available via Catel. Some parts are based on the article on Code Project, but this documentation is more up-to-date.\nThe first thing that is important is that lots of developers lose way too much time writing custom serializable objects. Serialization is a field of expertise, and only a handful of developers I know really master the serialization of objects (think of version changes of the assembly, class changes (new or removed properties), etc.). Most developers think they master serialization by creating a BinaryFormatter object like the code belows show:\nvar serializer = new BinaryFormatter(); var myObject = (MyObject)serializer.Deserialize(stream);  Most developers don’t know that reflection breaks when:\n You change the version number of your assembly; You add or remove a property or field; You add or remove an event.  And even if you know, it takes a lot of knowledge and courage to start beating the beast of burden. Like every developer, I also encountered this and was writing backwards compatibility code until I had enough of it and decided to master the field of serialization. The result is the ModelBase class, which can be used as a base class for all data objects that need to be held in memory and maybe serialized to disk (or a stream, or XML, or \u0026hellip;).\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/views/xaml/advanced/datawindow-under-the-hood/",
	"title": "DataWindow - under the hood",
	"tags": [],
	"description": "",
	"content": "This documentation has to be written in the future\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/logging/log-listeners/debug-log-listener/",
	"title": "DebugLogListener",
	"tags": [],
	"description": "",
	"content": "The DebugLogListener is the best debugging tool there is during development. It shows you insight in your application in the output window of Visual Studio, even from messages generated by Catel. To use it, use this:\n#if DEBUG LogManager.AddDebugListener(); #endif  For some platforms (like UWP), Catel uses Debug.WriteLine which gets removed in a release build. For such platforms, it is recommended to create a customer log listener as shown below.\n\rpublic class DebugLogListener : LogListenerBase { protected override void Write(ILog log, string message, LogEvent logEvent, object extraData, LogData logData, DateTime time) { if (log.IsCatelLogging \u0026amp;\u0026amp; IgnoreCatelLogging) { return; } var consoleMessage = FormatLogEvent(log, message, logEvent, extraData, logData, time); System.Diagnostics.Debug.WriteLine(consoleMessage); } }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/behaviors-triggers/delay-binding-update/",
	"title": "DelayBindingUpdate",
	"tags": [],
	"description": "",
	"content": "Sometimes, a binding update should be delayed for performance reasons. This is possible using the DelayBindingUpdate behavior. This behavior modifies the binding mode to explicit and internally watches for property changes. If the bound dependency property changes, the behavior will wait for the time to pass and then update. If the value changes again within the timeframe, the timer is reset (so you won\u0026rsquo;t get \u0026ldquo;double\u0026rdquo; updates).\n1) Add the following XML namespaces:\nxmlns:i=\u0026quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot;  2) Use the following definition. This example will delay the update of the SelectedItem binding with 100 milliseconds:\n\u0026lt;ListBox x:Name=\u0026quot;listBox\u0026quot; ItemsSource=\u0026quot;{Binding PersonCollection}\u0026quot; SelectedItem=\u0026quot;{Binding SelectedPerson}\u0026quot;\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:DelayBindingUpdate PropertyName=\u0026quot;SelectedItem\u0026quot; UpdateDelay=\u0026quot;100\u0026quot; /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;/ListBox\u0026gt;  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/designers/design-time-view-models/",
	"title": "Design-time view models",
	"tags": [],
	"description": "",
	"content": "Lots of developers are using designers such as the built-in designer in Visual Studio or Expression Blend to design their xaml based applications. Although you should use designers with lots of care, we strive to fully support all designers.\nSince Catel 1.3, it is possible to create design-time versions of a view model. This way, you can preview the UserControl or DataWindow implementations using example data.\nTo create design-time support for a data window, use the following steps:\n1. Create a design time view model. Normally, this can easily be achieved by deriving a new class from the actual view-model and inject the model. Below is an example of a design time version of a person view model:\n/// \u0026lt;summary\u0026gt; /// Design time version of the \u0026lt;see cref=\u0026quot;PersonViewModel\u0026quot;/\u0026gt;. /// \u0026lt;/summary\u0026gt; public class DesignPersonViewModel : PersonViewModel { /// \u0026lt;summary\u0026gt; /// Initializes a new instance of the \u0026lt;see cref=\u0026quot;DesignPersonViewModel\u0026quot;/\u0026gt; class. /// \u0026lt;/summary\u0026gt; public DesignPersonViewModel() : base(new Person { FirstName = \u0026quot;Geert\u0026quot;, MiddleName = \u0026quot;van\u0026quot;, LastName = \u0026quot;Horrik\u0026quot;, Gender = Gender.Male }) { } }  2. Define the type of the design time view model.\nd:DataContext=\u0026quot;{d:DesignInstance ViewModels:DesignPersonViewModel}\u0026quot;  If you want it to actually show demo data (instead of allowing to configure bindings), use IsDesignTimeCreatable:\nd:DataContext=\u0026quot;{d:DesignInstance ViewModels:DesignPersonViewModel, IsDesignTimeCreatable=True}\u0026quot;  Full DataWindow declaration:\n\u0026lt;catel:DataWindow x:Class=\u0026quot;Catel.Examples.PersonApplication.UI.Windows.PersonWindow\u0026quot; xmlns=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation\u0026quot; xmlns:x=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml\u0026quot; xmlns:d=\u0026quot;http://schemas.microsoft.com/expression/blend/2008\u0026quot; xmlns:mc=\u0026quot;http://schemas.openxmlformats.org/markup-compatibility/2006\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot; xmlns:ViewModels=\u0026quot;clr-namespace:Catel.Examples.PersonApplication.ViewModels\u0026quot; xmlns:Converters=\u0026quot;clr-namespace:Catel.Examples.PersonApplication.Data.Converters\u0026quot; xmlns:Models=\u0026quot;clr-namespace:Catel.Examples.Models;assembly=Catel.Examples.Models\u0026quot; mc:Ignorable=\u0026quot;d\u0026quot; d:DataContext=\u0026quot;{d:DesignInstance ViewModels:DesignPersonViewModel, IsDesignTimeCreatable=True}\u0026quot;\u0026gt;   Example of design time data support:  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/designers/",
	"title": "Designers",
	"tags": [],
	"description": "",
	"content": "\r\rDesign-time view models\r\r\rRunning code at design-time\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/multilingual/displayattribute/",
	"title": "DisplayAttribute",
	"tags": [],
	"description": "",
	"content": " Catel implements a custom implementation of the DisplayAttribute known in the DataAnnotations namespace of .NET. This attribute uses the ILanguageService so you can easily have all translations in a single location when using Catel.\nNote that this is still work in progress, we would love to support this, but MS sealed the class so we cannot derive from it (at the moment)\n\rUsing the attribute Using the attribute is really easy. Just put the attribute on top of any method, property, field or parameter like this:\npublic enum Condition { [DisplayName(\u0026quot;Contains\u0026quot;)] Contains, [Display(\u0026quot;StartsWith\u0026quot;)] StartsWith, [Display(\u0026quot;EndsWith\u0026quot;)] EndsWith, [Display(\u0026quot;EqualTo\u0026quot;)] EqualTo, [Display(\u0026quot;NotEqualTo\u0026quot;)] NotEqualTo, [Display(\u0026quot;GreaterThan\u0026quot;)] GreaterThan, [Display(\u0026quot;LessThan\u0026quot;)] LessThan, [Display(\u0026quot;GreaterThanOrEqualTo\u0026quot;)] GreaterThanOrEqualTo, [Display(\u0026quot;LessThanOrEqualTo\u0026quot;)] LessThanOrEqualTo, [Display(\u0026quot;IsEmpty\u0026quot;)] IsEmpty, [Display(\u0026quot;NotIsEmpty\u0026quot;)] NotIsEmpty, [Display(\u0026quot;IsNull\u0026quot;)] IsNull, [Display(\u0026quot;NotIsNull\u0026quot;)] NotIsNull }  Using the ILanguageService By default, the attribute uses the ILanguageService to resolve the values to show. The DisplayAttribute uses conventions to resolve the different values from the resources.\nProperty|ResourceName used when resolving|Fallback value -|- ShortName|[ResourceName]_ShortName|Name Name|[ResourceName]_Name|No fallback value, will return empty value Description|[ResourceName]_Description|No fallback value, will return empty value Prompt|[ResourceName]_Prompt|No fallback value, will return empty value GroupName|[ResourceName]_GroupName|No fallback value, will return empty value\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/multilingual/displaynameattribute/",
	"title": "DisplayNameAttribute",
	"tags": [],
	"description": "",
	"content": " Catel implements a custom implementation of the DisplayNameAttribute known in the DataAnnotations namespace of .NET. This attribute uses the *ILanguageService* so you can easily have all translations in a single location when using Catel.\nUsing the attribute Using the attribute is really easy. Just put the attribute on top of any method, property, field or parameter like this:\npublic enum Condition { [DisplayName(\u0026quot;Contains\u0026quot;)] Contains, [Display(\u0026quot;StartsWith\u0026quot;)] StartsWith, [Display(\u0026quot;EndsWith\u0026quot;)] EndsWith, [Display(\u0026quot;EqualTo\u0026quot;)] EqualTo, [Display(\u0026quot;NotEqualTo\u0026quot;)] NotEqualTo, [Display(\u0026quot;GreaterThan\u0026quot;)] GreaterThan, [Display(\u0026quot;LessThan\u0026quot;)] LessThan, [Display(\u0026quot;GreaterThanOrEqualTo\u0026quot;)] GreaterThanOrEqualTo, [Display(\u0026quot;LessThanOrEqualTo\u0026quot;)] LessThanOrEqualTo, [Display(\u0026quot;IsEmpty\u0026quot;)] IsEmpty, [Display(\u0026quot;NotIsEmpty\u0026quot;)] NotIsEmpty, [Display(\u0026quot;IsNull\u0026quot;)] IsNull, [Display(\u0026quot;NotIsNull\u0026quot;)] NotIsNull }  Using the ILanguageService By default, the attribute uses the ILanguageService to resolve the values to show. The resource name that is passed into the constructor of the attribute will be used to resolve the localized value.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/behaviors-triggers/double-click-to-command/",
	"title": "DoubleClickToCommand",
	"tags": [],
	"description": "",
	"content": "Lots of times, a developer needs to handle a double click event. This trigger allows a developer to track a double click on any FrameworkElement and respond to that using a command.\n1) Add the following XML namespaces:\nxmlns:i=\u0026quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot;  2) Use the following definition. This example will invoke the Edit command of the view model when the item is double clicked):\n\u0026lt;ListBox x:Name=\u0026quot;listBox\u0026quot; ItemsSource=\u0026quot;{Binding PersonCollection}\u0026quot; SelectedItem=\u0026quot;{Binding SelectedPerson}\u0026quot;\u0026gt; \u0026lt;ListBox.ItemTemplate\u0026gt; \u0026lt;DataTemplate\u0026gt; \u0026lt;Grid\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:DoubleClickToCommand Command=\u0026quot;{Binding ElementName=listBox, Path=DataContext.Edit}\u0026quot; /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;StackPanel Orientation=\u0026quot;Horizontal\u0026quot;\u0026gt; \u0026lt;Label Content=\u0026quot;{Binding FirstName}\u0026quot; /\u0026gt; \u0026lt;Label Content=\u0026quot;{Binding MiddleName}\u0026quot; /\u0026gt; \u0026lt;Label Content=\u0026quot;{Binding LastName}\u0026quot; /\u0026gt; \u0026lt;/StackPanel\u0026gt; \u0026lt;/Grid\u0026gt; \u0026lt;/DataTemplate\u0026gt; \u0026lt;/ListBox.ItemTemplate\u0026gt; \u0026lt;/ListBox\u0026gt;  The trigger contains an additional property AutoFixListBoxItemTemplate which is set to true by default to easily allow the addition of a double click event to a ListBox. The item template must contain a grid as a base like shown above.\nThis behavior also supports a constructor that accepts an Action. This way, an anonymous delegate can be executed when the behavior is created in code\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/logging/log-listeners/event-tracing-for-windows/",
	"title": "Event Tracing for Windows (ETW)",
	"tags": [],
	"description": "",
	"content": "Starting with version 4.0.0, Catel supports Event Tracking for Windows (ETW) out of the box. To add a log listener, use the code below:\nvar logListener = new EtwLogListener(); logListener.IgnoreCatelLogging = true; // TODO: Customize options LogManager.AddListener(logListener);  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/logging/log-listeners/event-log-listener/",
	"title": "EventLogListener",
	"tags": [],
	"description": "",
	"content": "The EventLogListener allow to write log data to the system event log. To add it, use the code below:\nvar logListener = new EventLogListener(); logListener.IgnoreCatelLogging = true; // TODO: Customize options LogManager.AddListener(logListener);  This log listener is currently available only for the full .net framework\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/behaviors-triggers/event-to-command/",
	"title": "EventToCommand",
	"tags": [],
	"description": "",
	"content": "Almost every respectable MVVM framework supports the EventToCommand trigger. It is a trigger that allows a an event to be turned into a command. This way, you never have to manually add event handlers, search for the view model in the code-behind and then call the right command.\nThe usage is really simple, but requires the System.Windows.Interactivity.dll reference (ships with Catel). The example below shows how to add a trigger for the double click of a ListBox.\n 1) Add the following XML namespaces:\nxmlns:i=\u0026quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot;  2) Use the following definition. This example will invoke the Edit command of the view model):\n\u0026lt;ListBox ItemsSource=\u0026quot;{Binding PersonCollection}\u0026quot; SelectedItem=\u0026quot;{Binding SelectedPerson}\u0026quot;\u0026gt; \u0026lt;i:Interaction.Triggers\u0026gt; \u0026lt;i:EventTrigger EventName=\u0026quot;MouseDoubleClick\u0026quot;\u0026gt; \u0026lt;catel:EventToCommand Command=\u0026quot;{Binding Edit}\u0026quot; DisableAssociatedObjectOnCannotExecute=\u0026quot;False\u0026quot; /\u0026gt; \u0026lt;/i:EventTrigger\u0026gt; \u0026lt;/i:Interaction.Triggers\u0026gt; \u0026lt;ListBox.ItemTemplate\u0026gt; \u0026lt;DataTemplate\u0026gt; \u0026lt;StackPanel Orientation=\u0026quot;Horizontal\u0026quot;\u0026gt; \u0026lt;Label Content=\u0026quot;{Binding FirstName}\u0026quot; /\u0026gt; \u0026lt;Label Content=\u0026quot;{Binding MiddleName}\u0026quot; /\u0026gt; \u0026lt;Label Content=\u0026quot;{Binding LastName}\u0026quot; /\u0026gt; \u0026lt;/StackPanel\u0026gt; \u0026lt;/DataTemplate\u0026gt; \u0026lt;/ListBox.ItemTemplate\u0026gt; \u0026lt;/ListBox\u0026gt;  If you want to use parameters (in the case of this example, get the MouseDoubleClick event args, set PassEventArgsToCommand to true:\n\u0026lt;Commands:EventToCommand Command=\u0026quot;{Binding Edit}\u0026quot; DisableAssociatedObjectOnCannotExecute=\u0026quot;False\u0026quot; PassEventArgsToCommand=\u0026quot;True\u0026quot; /\u0026gt;  Then, in the view model, you can even make the command \u0026ldquo;type-safe\u0026rdquo;:\n/// \u0026lt;summary\u0026gt; /// Gets the Edit command. /// \u0026lt;/summary\u0026gt; public Command\u0026lt;MouseEventArgs\u0026gt; Edit { get; private set; } // TODO: Move code below to constructor Edit = new Command\u0026lt;MouseEventArgs\u0026gt;(OnEditExecute, OnEditCanExecute); // TODO: Move code above to constructor /// \u0026lt;summary\u0026gt; /// Method to check whether the Edit command can be executed. /// \u0026lt;/summary\u0026gt; private bool OnEditCanExecute(MouseEventArgs e) { return true; } /// \u0026lt;summary\u0026gt; /// Method to invoke when the Edit command is executed. /// \u0026lt;/summary\u0026gt; private void OnEditExecute(MouseEventArgs e) { // TODO: Handle command logic here }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/exception-handling/",
	"title": "Exception handling",
	"tags": [],
	"description": "",
	"content": " With exception handling in Catel, it is possible to create an exception handling policy and execute code in a safe way without have to check all the exception types manually. Catel exposes this technique via the IExceptionService.\n/**/ Setting up the IExceptionService Executing code using the IExceptionService Executing an action Executing a function Use the retry capabilities Retry Immediately Retry defined Process with retry Subscribe to the retry events Handling exceptions manually Unregistering exceptions Buffering Define the way to buffer Subscribe to the buffering events Determine if an exception type are registered for handling Get a specific exception handler\nAlso see\nWPF implementation for exception handling\nSetting up the IExceptionService It is important to register an exception in the service and let Catel know how it should be handled. The service handles exceptions in the way they are added to the IExceptionService.\nThe example below registers several exceptions and how they should be handled. When a FileNotFoundException occurs, it will show a message to the user. For any other exception, it will log the exception and show a message that the user should contact the developers.\nvar dependencyResolver = this.GetDependencyResolver(); var exceptionService = dependencyResolver .Resolve\u0026lt;IExceptionService\u0026gt;(); exceptionService.Register\u0026lt;FileNotFoundException\u0026gt;(exception =\u0026gt; dependencyResolver.Resolve\u0026lt;IMessageService\u0026gt;().Show(exception.Message)); exceptionService.Register\u0026lt;Exception\u0026gt;(exception =\u0026gt; { Log.Error(exception); dependencyResolver.Resolve\u0026lt;IMessageService\u0026gt;().Show(\u0026quot;An unknown exception occurred, please contact the developers\u0026quot;); });  The IExceptionService checks for type hierarchy. For example, when an exception as type Exception is registered, this handler will handle all exceptions\n\rExecuting code using the IExceptionService The Process method is responsible to keep track of all exceptions which might occur and will handle them if they are registered. If one of your registered exceptions is thrown by the code, the Process method will handle it and perform the action defined while the registration operation (for example, by showing a message box).\nThe Process method comes in two flavors: as action and as function.\nExecuting an action var dependencyResolver = this.GetDependencyResolver(); var exceptionService = dependencyResolver.Resolve\u0026lt;IExceptionService\u0026gt;(); exceptionService.Process(() =\u0026gt; { throw new ArgumentOutOfRangeException(); });  Executing a function var dependencyResolver = this.GetDependencyResolver(); var exceptionService = dependencyResolver.Resolve\u0026lt;IExceptionService\u0026gt;(); var result = exceptionService.Process\u0026lt;int\u0026gt;(() =\u0026gt; 1 + 1);  You can process yours actions asynchronously by using the ProcessAsync method.\n\rUse the retry capabilities In some cases, you can want to have possibility to retry an action a certain number of times before finally handle your exception. Let see how the IExceptionService allows us to handle this kind of cases.\nFirstly, you need to define how the IExceptionService will retry your action in case of error, two possibilities are provided for that.\nRetry Immediately When you setting up your exceptions on IExceptionService, you have to additionnally use the OnErrorRetryImmediately method like shown below :\nvar dependencyResolver = this.GetDependencyResolver(); var exceptionService = dependencyResolver.Resolve\u0026lt;IExceptionService\u0026gt;(); exceptionService.Register\u0026lt;ArgumentNullException\u0026gt;(exception =\u0026gt; { /* Do something */ }) .OnErrorRetryImmediately();  This method will say to the IExceptionService to retry the action each times this one throw an exception until it succeed and without to wait before the next retry.\nYou can also specify the number of times you want the IExceptionService to retry immediately like this for example : OnErrorRetryImmediately(5)\nRetry defined You have also the possibility to define more deeply the way you want your actions to be retried by using the OnErrorRetry method like shown below.\nvar dependencyResolver = this.GetDependencyResolver(); var exceptionService = dependencyResolver.Resolve\u0026lt;IExceptionService\u0026gt;(); exceptionService.Register\u0026lt;ArgumentNullException\u0026gt;(exception =\u0026gt; { /* Do something */ }) .OnErrorRetry(5, TimeSpan.FromMinutes(2));  Where 5 represents the nombre of times the action will be retried and TimeSpan.FromMinutes(2) the interval between the retries.\nProcess with retry If you have provided a retry policy, you can use the ProcessWithRetry method to expect have your policy applied on error. Below an example :\nvar dependencyResolver = this.GetDependencyResolver(); var exceptionService = dependencyResolver.Resolve\u0026lt;IExceptionService\u0026gt;(); exceptionService.ProcessWithRetry(() =\u0026gt; { /* Do something */ });  Subscribe to the retry events Can you subscribe to the events which are thown each time an action is retried like this :\nvar dependencyResolver = this.GetDependencyResolver(); var exceptionService = dependencyResolver.Resolve\u0026lt;IExceptionService\u0026gt;(); exceptionService.RetryingAction += (sender, eventArgs) =\u0026gt; Console.WriteLine(\u0026quot;The '{0}' have caused retrying action for the '{1}' times.\u0026quot;, eventArgs.LastException, eventArgs.CurrentRetryCount);  Handling exceptions manually It is possible to manually handle exceptions using the service. This is useful when you don\u0026rsquo;t want to wrap code in the Process method, but still want to be able to create a generic exception handling policy.\nvar dependencyResolver = this.GetDependencyResolver(); var exceptionService = dependencyResolver.Resolve\u0026lt;IExceptionService\u0026gt;(); try { var value = 150/0; } catch (DivideByZeroException exception) { exceptionService.HandleException(exception); }  If the exception can be handled, the registered action will be executed, but your code can safely continue. If the exception (in this case DivideByZeroException) is not registered, the HandleException method will rethrow the exception.\nUnregistering exceptions Although it will probably hardly used, it is possible to unregister exceptions again using the code below:\nvar exceptionService = dependencyResolver.Resolve\u0026lt;IExceptionService\u0026gt;(); exceptionService.Unregister\u0026lt;ArgumentException\u0026gt;();  Buffering Define the way to buffer You can want to throttle down the number of exceptions you receive when a production process goes awry for example. You can do it through the UsingTolerance extension method as shown below :\nvar dependencyResolver = this.GetDependencyResolver(); var exceptionService = dependencyResolver.Resolve\u0026lt;IExceptionService\u0026gt;(); exceptionService.Register\u0026lt;DivideByZeroException\u0026gt;(exception =\u0026gt; { }) .UsingTolerance(9, TimeSpan.FromSeconds(10.0));  Here, the idea is to only receive the 10th exception message.\nSubscribe to the buffering events Can you subscribe to the events which are thown each time an exception is buffered like this :\nvar dependencyResolver = this.GetDependencyResolver(); var exceptionService = dependencyResolver.Resolve\u0026lt;IExceptionService\u0026gt;(); exceptionService.ExceptionBuffered += (sender, eventArgs) =\u0026gt; Console.WriteLine(\u0026quot;The '{0}' is buffered for at '{1}'.\u0026quot;, eventArgs.BufferedException, eventArgs.DateTime);  Determine if an exception type are registered for handling If you want to know if an exception type have its policy registered on the IExceptionService, you can do this by using the IsExceptionRegistered method like shown below :\nvar dependencyResolver = this.GetDependencyResolver(); var exceptionService = dependencyResolver.Resolve\u0026lt;IExceptionService\u0026gt;(); if (exceptionService.IsExceptionRegistered\u0026lt;ArgumentNullException\u0026gt;()) { //Do something }  Get a specific exception handler If you want to retrieve the registered exception handler for an exception type, you have to use the GetHandler method like shown below :\nvar dependencyResolver = this.GetDependencyResolver(); var exceptionService = dependencyResolver.Resolve\u0026lt;IExceptionService\u0026gt;(); var exceptionHandler = exceptionService.GetHandler\u0026lt;ArgumentException\u0026gt;();  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/view-models/advanced/exposing-properties-of-model-automatically/",
	"title": "Exposing properties of a model automatically",
	"tags": [],
	"description": "",
	"content": "See Catel.Fody for more information.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/logging/log-listeners/file-log-listener/",
	"title": "FileLogListener",
	"tags": [],
	"description": "",
	"content": " Catel also supports very lightweight listeners to allow external logging libraries to hook on. To create a listener, first create a new class that implements the ILogListener interface. Next, register it in the LogManager using the LogManager.AddListener method.\nThe ILogListener has a separate method for each LogEvent, but also has a shared method that is called for each log event. For example, if a debug message is written to the log, both the Write and Debug methods are invoked on the ILogListener.\nFor an example which writes to disk in batches, see the batch log event listeners\n\rNote that Catel already contains a FileLogListener and there is no need to reproduce this class. It only acts as an example that is easy to understand\n\rSpecifying the path The default FileLogListener that ships with Catel allows the customization of the file name and the size of the log file. If no size is specified, the max log file size will default to 10 MB. There are several constants inside the file name that can be used:\n{AppData}\nThe application data directory that is used by all users.\nBased on the entry assembly. For example %ProgramData%\\[company]\\[product]\\.\n*Note: Currently this writes to %ProgramData% only if HttpContext.Current evaluates to an object (e.g. a web app); otherwise it uses %AppData%. *\n{AppDataLocal}\nThe local application data directory that is used by the current, non-roaming user.\nBased on the entry assembly. For example %LocalAppData%\\[company]\\product]\\.\n{AppDataRoaming}\nThe roaming application data directory that is used by the current roaming user.\nBased on the entry assembly. For example %AppData%\\[company]\\[product]\\.\n{AppDataMachine}\nThe application data directory that is used by all users.\nBased on the entry assembly. For example %ProgramData%\\[company]\\[product]\\.\n{AppDir}\nThe directory of the current application (i.e. AppDomain.CurrentDomain.BaseDirectory).\n{AssemblyCompany}\nThe assembly company.\n{AssemblyName}\nThe assembly name.\n{AssemblyProduct}\nThe assembly product.\n{AutoLogFileName}\nCreates a log file with the following format: {AssemblyName}_{Date}_{Time}_{ProcessId}.\n{Date}\nThe date as yyyy-MM-dd.\n{Time}\nThe time as HHmmss.\n{ProcessId}\nThe process id.\n{WorkDir}\nThe application execution directory. Calls Directory.GetCurrentDirectory(), internally.\nA good example would be:\nvar fileLogListener = new FileLogListener(); fileLogListener.FilePath = \u0026quot;{AppDir}\\{AutoLogFileName}\u0026quot;; LogManager.AddListener(fileLogListener);  Note that the default path of the FileLogListener is {AppData}\\{AutoLogFileName}\n\rCreating a custom listener A listener can be created by creating a new class deriving from LogListenerBase.\npublic class FileLogListener : LogListenerBase { private readonly TextWriter _textWriter; public FileLogListener(string fileName) { Argument.IsNotNullOrWhitespace(\u0026quot;fileName\u0026quot;, fileName); FileName = fileName; _textWriter = new StreamWriter(fileName, true); } public string FileName { get; private set; } public override void Write(ILog log, string message, LogEvent logEvent) { _textWriter.WriteLine(message); } }  Registering the listener  Last but not least, it is important to register the listener:\nLogManager.AddListener(new FileLogListener(\u0026quot;\u0026lt;log_file_path\u0026gt;\u0026quot;));  "
},
{
	"uri": "http://docs.catelproject.com/5.1/tips-tricks/mvvm/finding-view-of-view-model/",
	"title": "Finding the view of a view model",
	"tags": [],
	"description": "",
	"content": " Sometimes it is required to find the view of a view model. For example, this comes in handy when implementing drag and drop where you only want to support code via view models.\nInternally, Catel uses with the IViewManager for this. As soon as a view is loaded (via the Loaded event), the view is registered to the view manager. The view manager will keep an eye on the events of the view and notice view model changes.\nA view is removed from the manager as soon as it is unloaded (via the Unloaded event). From this moment on, it is no longer possible to retrieve a view via its view model.\nRemember that only view classes implementing IView are supported by the IViewManager\n\rRetrieving the view of a view model To find the view of a view model, use the steps below:\n1) Resolve the view from IViewManager from the ServiceLocator:\nvar viewManager = ServiceLocator.Default.ResolveType\u0026lt;IViewManager\u0026gt;();  2) Resolve the view:\nvar views = viewManager.GetViewsOfViewModel(myViewModel);  Note that it is possible that multiple views are linked to the same view model\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/behaviors-triggers/focus/",
	"title": "Focus",
	"tags": [],
	"description": "",
	"content": " To set the focus on a UI element, one must write code in the code-behind. With the Focus behavior, this is no longer necessary. This behavior sets the focus only once on the first time the associated object is loaded.\nAdd the following XML namespaces:\nxmlns:i=\u0026quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot;  Focus when the control is loaded The easiest and default method is to set the focus when the associated control is loaded. In WPF, this is immediately when the control is focused.\n\u0026lt;ListBox ItemsSource=\u0026quot;{Binding PersonCollection}\u0026quot; SelectedItem=\u0026quot;{Binding SelectedPerson}\u0026quot;\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:Focus /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;/ListBox\u0026gt;  Focus when an event occurs It is possible to set the focus when a specific event occurs. For example, when the layout root gets a MouseEnter event, the focus must be set on a specific control. This can be done via the following code:\n\u0026lt;ListBox ItemsSource=\u0026quot;{Binding PersonCollection}\u0026quot; SelectedItem=\u0026quot;{Binding SelectedPerson}\u0026quot;\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:Focus FocusMoment=\u0026quot;Event\u0026quot; Source=\u0026quot;{Binding ElementName=layoutRoot}\u0026quot; EventName=\u0026quot;MouseEnter\u0026quot; /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;/ListBox\u0026gt;  Focus when a property changes It is possible to set the focus when a specific property changes. For example, when a value is set, the focus must move on to a new control. This can be done via the following code:\n\u0026lt;ListBox ItemsSource=\u0026quot;{Binding PersonCollection}\u0026quot; SelectedItem=\u0026quot;{Binding SelectedPerson}\u0026quot;\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:Focus FocusMoment=\u0026quot;PropertyChanged\u0026quot; Source=\u0026quot;{Binding }\u0026quot; PropertyName=\u0026quot;MyProperty\u0026quot; /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;/ListBox\u0026gt;  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/views/xamarin-android/fragments-user-controls/",
	"title": "Fragments (user controls)",
	"tags": [],
	"description": "",
	"content": " The user controls in Android are called fragments. This means that if a user control must be created, it must derive from the Fragment class. Catel provides a base implementation of this class to ensure full compatibility with the MVVM framework that ships with Catel.\nCreating the view model The view model can be created (or added as a linked file from another project) just like any platform using Catel (they are all equal on all platforms).\nCreating the view Make sure that a Views folder exists in the project so the views and view models can automatically be hooked together by Catel. Then create a new class to the views folder, in this case PersonView:\npublic class PersonView : Catel.Android.App.Fragment { public override View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { var inflateResult = inflater.Inflate(Resource.Layout.Fragment_Person, container, false); return inflateResult; } }  Note that the class derives from Catel.Android.App.Fragment\n\rDesigning the view To create the actual user interface of the fragment, add a new xaml file to the Resources/layout folder, in your case Fragment\\_Person (but you can name it whatever you want). Then use the following source:\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;LinearLayout xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot; android:orientation=\u0026quot;vertical\u0026quot; android:layout_width=\u0026quot;fill_parent\u0026quot; android:layout_height=\u0026quot;fill_parent\u0026quot;\u0026gt; \u0026lt;TextView android:text=\u0026quot;First name\u0026quot; android:textAppearance=\u0026quot;?android:attr/textAppearanceMedium\u0026quot; android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:id=\u0026quot;@+id/textView1\u0026quot; /\u0026gt; \u0026lt;EditText android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:id=\u0026quot;@+id/firstNameText\u0026quot; /\u0026gt; \u0026lt;TextView android:text=\u0026quot;Last name\u0026quot; android:textAppearance=\u0026quot;?android:attr/textAppearanceMedium\u0026quot; android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:id=\u0026quot;@+id/textView2\u0026quot; /\u0026gt; \u0026lt;EditText android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:id=\u0026quot;@+id/lastNameText\u0026quot; /\u0026gt; \u0026lt;/LinearLayout\u0026gt;  Setting up synchronization In Android it is required to manually synchronize the values between the view and view model. Below is the fully extended PersonView class containing these mapping functionality:\npublic class PersonView : Catel.Android.App.Fragment { public override View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { var inflateResult = inflater.Inflate(Resource.Layout.Fragment_Person, container, false); return inflateResult; } public override void OnActivityCreated(Bundle savedInstanceState) { base.OnActivityCreated(savedInstanceState); // Note: at this stage the visual tree is guaranteed in Android _firstNameEditText = Activity.FindViewById\u0026lt;EditText\u0026gt;(Resource.Id.firstNameText); _lastNameEditText = Activity.FindViewById\u0026lt;EditText\u0026gt;(Resource.Id.lastNameText); } protected override void SyncViewModel() { var vm = GetViewModel\u0026lt;PersonViewModel\u0026gt;(); if (vm == null) { return; } _firstNameEditText.Text = vm.FirstName; _lastNameEditText.Text = vm.LastName; } }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/behaviors-triggers/hide-until-view-model-loaded/",
	"title": "HideUntilViewModelLoaded",
	"tags": [],
	"description": "",
	"content": " The HideUntilViewModelLoaded hides (Visibility.Collapsed) any view model container (IViewModelContainer) when it does not have a valid view model. This is a great way to hide lazy-loaded views that should only be visible when they contain an actual view model.\nAdd the following XML namespaces:\nxmlns:i=\u0026quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot;  Focus when the control is loaded The easiest and default method is to focus the first control. The parent is also focused by default (just in case if it doesn\u0026rsquo;t have any focus):\n\u0026lt;local:MyUserControl ...\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:HideUntilViewModelLoaded /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;/local:MyUserControl\u0026gt;  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/commands-events/hooking-command-to-validation/",
	"title": "Hooking a command to validation automatically",
	"tags": [],
	"description": "",
	"content": "It is possible to hook the CanExecute of a Command to the IValidationSummary automatically. This way, there is no need to check for errors manually in the CanExecute method. The example below first adds a validation summary to a view model to get the validation result. Then, it uses this validation summary to automatically determine whether a command can be executed.\n1. Add validation to a person view model (note how the validation adds the tag PersonValidation to a validation):\n/// \u0026lt;summary\u0026gt; /// Validates the field values of this object. Override this method to enable /// validation of field values. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;validationResults\u0026quot;\u0026gt;The validation results, add additional results to this list.\u0026lt;/param\u0026gt; protected override void ValidateFields(System.Collections.Generic.List\u0026lt;IFieldValidationResult\u0026gt; validationResults) { if (string.IsNullOrEmpty(FirstName)) { validationResults.Add(FieldValidationResult.CreateErrorWithTag(FirstNameProperty, \u0026quot;First name cannot be empty\u0026quot;, \u0026quot;PersonValidation\u0026quot;)); } if (string.IsNullOrEmpty(LastName)) { validationResults.Add(FieldValidationResult.CreateErrorWithTag(LastNameProperty, \u0026quot;Last name cannot be empty\u0026quot;, \u0026quot;PersonValidation\u0026quot;)); } }  2. Add a property to the view model containing the validation summary using the ValidationToViewModel attribute.\n[ValidationToViewModel(Tag = \u0026quot;PersonValidation\u0026quot;)] public IValidationSummary PersonValidationSummary { get; set; }   Define a command on the view model:  /// \u0026lt;summary\u0026gt; /// Gets the Save command. /// \u0026lt;/summary\u0026gt; public Command Save { get; private set; } /// \u0026lt;summary\u0026gt; /// Method to invoke when the Save command is executed. /// \u0026lt;/summary\u0026gt; private void OnSaveExecute() { // TODO: Handle command logic here }   Create the command that automatically uses the validation summary using the CommandHelper class:  Save = CommandHelper.CreateCommand(OnSaveExecute, () =\u0026gt; PersonValidationSummary);  With this example, the Save command on the view model can only be executed when there are no errors with the PersonValidation tag.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/views/xaml/improving-performance-by-defining-view-model-grid-manually/",
	"title": "Improving performance by defining the view model grid manually",
	"tags": [],
	"description": "",
	"content": " Catel wraps the content of each user control in a grid. This grid is the actual view model container as can be read in the advanced documentation. This wrapper is very convenient, but does have (little) impact on the performance and visual state management. To prevent Catel to wrap the control for you, there are a few things you can do.\nCreating the grid manually The easiest way is to create the grid manually. The default implementation of the IViewModelWrapperService checks if the direct child control is a grid and has a specific name __catelInnerWrapper. To prevent Catel from creating the wrapper, simply specify the name on the root grid.\nNote that Catel will override the DataContext binding of this grid to reflect the view model.\nCustomizing the IViewModelWrapperService Another way to prevent Catel from wrapping the grids is to implement the IViewModelWrapperService yourself.\nNote that we recommend to create the grid manually since that is highly likely to have less side-effects\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/ioc/",
	"title": "IoC (ServiceLocator and TypeFactory)",
	"tags": [],
	"description": "",
	"content": " Before Catel 2.0, the IoC container used internally was Unity. However, this forced all users to use and configure Unity as the IoC container in their apps and required the shipping of the libraries as well. Since Catel 2.0, a different technique is used which allows the end-developer to use the IoC container technique of their choice.\nDifferent components in IoC There are several different components that are very important for the IoC in Catel:\n ServiceLocator Component that is responsible for the registrations of all types. This is the actual IoC container. TypeFactory Component that is responsible to create types. This uses the *IServiceLocator *to retrieve the types which are required to instantiate a type. DependencyResolver Light-weight implementation of the IServiceLocator which does not expose any register methods, but only allows to resolve types.** **  Getting components for any object In every object, it is possible to use the Default properties to retrieve the instances of each component. This will cause problems when different scoping is used. To always be sure to get the right component for the object you are working with, it is recommended to use the following extension methods:\nusing Catel.IoC; // Contains ObjectExtensions which allow use of below extension methods public class MyService { public void SomeMethod() { // If you need to create a type with the current scope type factory var typeFactory = this.GetTypeFactory(); // If you need to register a type with the current scope service locator var serviceLocator = this.GetServiceLocator(); // If you need to resolve a type with the current scope and the type is not injected via dependency injection var dependencyResolver = this.GetDependencyResolver(); } }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/serialization/supported-serializers/json/",
	"title": "Json",
	"tags": [],
	"description": "",
	"content": " The JsonSerializer is implemented in a separate assembly because it uses Json.Net under the hood.\nCustomizing configuration The JsonSerializationConfiguration enables support for customizing the configuration used while (de)serializing. Below is an example\nUsing Bson instead of Json To use Bson instead of Json, use the JsonSerializationConfiguration class:\nvar configuration = new JsonSerializationConfiguration { UseBson = true }; jsonSerializer.Serialize(myObject, configuration);  Specifying the culture to use during (de)serialization To specify the culture to use during (de)serialization, set the Culture property on the configuration class:\nvar configuration = new SerializationConfiguration { Culture = new CultureInfo(\u0026quot;nl-NL\u0026quot;) }; jsonSerializer.Serialize(myObject, configuration);  Preserve references (and support circular references) By default the JsonSerializer supports circular references. It does so by adding additional property values to the json. Below is a json object with support for circular references:\n{ \u0026quot;$graphid\u0026quot;:1, \u0026quot;Name\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;CircularModel\u0026quot;:{ \u0026quot;$graphid\u0026quot;:2, \u0026quot;Name\u0026quot;:\u0026quot;2\u0026quot;, \u0026quot;CircularModel\u0026quot;:{ \u0026quot;$graphrefid\u0026quot;:1 } } }  or\n{ \u0026quot;$graphid\u0026quot;: 1, \u0026quot;Collection1\u0026quot;: [1, 2, 3, 4, 5], \u0026quot;$Collection1_$graphid\u0026quot;: 2, \u0026quot;Collection2\u0026quot;: [1, 2, 3, 4, 5], \u0026quot;$Collection2_$graphrefid\u0026quot;: 2 }  To disable the support for reference preservation, use the code below:\nvar jsonSerializer = dependencyResolver.Resolve\u0026lt;IJsonSerializer\u0026gt;(); jsonSerializer.PreserveReferences = false;  Support complex dynamic types Catel can support complex dynamic types. For this to be supported in json, the objects need additional type information in order to restore the type info again during deserialization. Below is a json object with the type information stored inside the json:\n{ \u0026quot;$typename\u0026quot;:\u0026quot;Catel.Test.Data.IniFile\u0026quot;, \u0026quot;FileName\u0026quot;:\u0026quot;MyIniFile\u0026quot;, \u0026quot;IniEntryCollection\u0026quot;:[ { \u0026quot;$typename\u0026quot;:\u0026quot;Catel.Test.Data.IniEntry\u0026quot;, \u0026quot;Group\u0026quot;:\u0026quot;Group 0\u0026quot;, \u0026quot;Key\u0026quot;:\u0026quot;Key 0\u0026quot;, \u0026quot;Value\u0026quot;:\u0026quot;Value 0\u0026quot;, \u0026quot;IniEntryType\u0026quot;:0 }, { \u0026quot;$typename\u0026quot;:\u0026quot;Catel.Test.Data.IniEntry\u0026quot;, \u0026quot;Group\u0026quot;:\u0026quot;Group 1\u0026quot;, \u0026quot;Key\u0026quot;:\u0026quot;Key 1\u0026quot;, \u0026quot;Value\u0026quot;:\u0026quot;Value 1\u0026quot;, \u0026quot;IniEntryType\u0026quot;:1 }, { \u0026quot;$typename\u0026quot;:\u0026quot;Catel.Test.Data.IniEntry\u0026quot;, \u0026quot;Group\u0026quot;:\u0026quot;Group 2\u0026quot;, \u0026quot;Key\u0026quot;:\u0026quot;Key 2\u0026quot;, \u0026quot;Value\u0026quot;:\u0026quot;Value 2\u0026quot;, \u0026quot;IniEntryType\u0026quot;:0 } ] }  To disable the type information in json, use the code below:\nvar jsonSerializer = dependencyResolver.Resolve\u0026lt;IJsonSerializer\u0026gt;(); jsonSerializer.WriteTypeInfo = false;  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/view-models/advanced/keeping-view-models-alive/",
	"title": "Keeping view models alive",
	"tags": [],
	"description": "",
	"content": "In Catel, view models are automatically closed when the UserControl is unloaded from the visual tree. This is because there is no guarantee that the control will be loaded again. This works great in most of the cases, but sometimes you need more control about the lifetime of the view model. One good example is the use of the TabControl. When a tab control contains a user control with a view model, every time a new tab is selected, the controls on the previously selected tab are unloaded (and thus the view models are closed).\nIt is possible to have more control about the lifetime of view models. To keep a view model alive, even when the view is unloaded, set the CloseViewModelOnUnloaded property of the UserControl to false in the constructor of the view:\nCloseViewModelOnUnloaded = false;  The view model will now be re-used when the view is loaded into the visual tree again.\nKeep in mind that the developer is responsible for actually closing the view model\n\rOrc.Controls contains an implementation of a TabControl that gives more control over the lifetime of the tabs\n\rThe Catel Examples repository contains an example demonstrating controlling the lifetime of view models\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/behaviors-triggers/key-press-to-command/",
	"title": "KeyPressToCommand",
	"tags": [],
	"description": "",
	"content": "Sometimes you need to handle a key press and convert it to a command. An excellent example is a ListBox that should respond to an Ctrl + Enter key press.\n1) Add the following XML namespaces:\nxmlns:i=\u0026quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot;  2) Use the following definition:\n\u0026lt;ListBox x:Name=\u0026quot;listBox\u0026quot; ItemsSource=\u0026quot;{Binding PersonCollection}\u0026quot; SelectedItem=\u0026quot;{Binding SelectedPerson}\u0026quot;\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:KeyPressToCommand Command=\u0026quot;{Binding MyCommand}\u0026quot; Key=\u0026quot;Enter\u0026quot; Modifiers=\u0026quot;Ctrl\u0026quot; /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;/ListBox\u0026gt;  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/services/location-service/",
	"title": "LocationService",
	"tags": [],
	"description": "",
	"content": " The ILocationService allows a developer to use GPS devices inside a view model.\nIt is important that the service must be started and stopped to retrieve values\n\rStarting the service The GPS service needs to be started and stopped. To start the GPS service, use the following code:\nvar dependencyResolver = this.GetDependencyResolver(); var locationService = dependencyResolver.Resolve\u0026lt;ILocationService\u0026gt;(); locationService.LocationChanged += OnCurrentLocationChanged; locationService.Start();  The service will raise the LocationChanged event when a new location becomes available.\nStopping the service It is required to stop the service when it is no longer needed. The service can be stopped using the following code:\nvar dependencyResolver = this.GetDependencyResolver(); var locationService = dependencyResolver.Resolve\u0026lt;ILocationService\u0026gt;(); locationService.LocationChanged -= OnCurrentLocationChanged; locationService.Stop();  Emulating GPS without device It is possible to emulate GPS without actually owning a device or emulate data in the emulator. To accomplish this, it is required to use the Catel.MVVM.Services.Test.LocationService class. This class can be used in the following way:\nvar dependencyResolver = this.GetDependencyResolver(); Test.LocationService service = (Test.LocationService)dependencyResolver.Resolve\u0026lt;ILocationService\u0026gt;(); // Queue the next location (and then wait 5 seconds) var locationTestData = new LocationTestData(new Location(100d, 100d), new TimeSpan(0, 0, 0, 5))); service.ExpectedLocations.Add(locationTestData); // Go to the next location manually service.ProceedToNextLocation();  It is also possible to enqueue lots of coordinates with a time span and emulate a path.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/locators-naming-conventions/",
	"title": "Locators &amp; naming conventions",
	"tags": [],
	"description": "",
	"content": "\r\rNaming conventions\r\r\rUrlLocator\r\r\rViewLocator\r\r\rViewModelLocator\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/logging/integration-with-external-loggers/log4net/",
	"title": "Log4net",
	"tags": [],
	"description": "",
	"content": " The example below provides an ILogListener for Log4net, but any external logging library can be used.\nCreating the listener A listener can be created by creating a new class deriving from LogListenerBase.\npublic class Log4netListener : LogListenerBase { protected override void Debug(ILog log, string message, object extraData) { var finalLog = log4net.LogManager.GetLogger(log.TargetType); finalLog.Debug(message); } protected override void Info(ILog log, string message, object extraData) { var finalLog = log4net.LogManager.GetLogger(log.TargetType); finalLog.Info(message); } protected override void Warning(ILog log, string message, object extraData) { var finalLog = log4net.LogManager.GetLogger(log.TargetType); finalLog.Warn(message); } protected override void Error(ILog log, string message, object extraData) { var finalLog = log4net.LogManager.GetLogger(log.TargetType); finalLog.Error(message); } }  Registering the listener Last but not least, it is important to register the listener:\nLogManager.AddListener(new Log4netListener());  Configuring log4net Note that this is just a sample configuration. Please use the log4net documentation for all options\n Add reference to log4net Add [assembly: log4net.Config.XmlConfigurator(Watch = true)] to AssemblyInfo.cs Configure log4net in your app.config to configure the actual data  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/logging/",
	"title": "Logging",
	"tags": [],
	"description": "",
	"content": " Starting with version 2.2, Catel uses a custom internal logging system. This way, the reference to log4net could be removed. The idea behind this move is not to force the user to use log4net. Also, log4net seems deprecated (no new releases for a long time), and other logging systems such as NLog seem to grow in popularity.\nThe new logging system only allows very basic logging. This way, the logging is kept very simple and the real logging can be implemented by the end-developer if he/she feels the need for it.\nLog and ILog All logging is available via the ILog interface. This interface is registered automatically on all objects in Catel as Log field. This way, every object can log any information by calling methods on the Log field.\nIn Catel, there is only one implementation of the ILog interface, which is the Log class. This class makes sure that the log messages are formatted correctly and the LogMessage event is invoked when a message is written to the log.\nCatel internally creates a separate log per type. This way, there will be lots of logs and it should be easy to filter the information the end-developer is really interested in.\nLogManager The LogManager is the class where it all comes together. This class is responsible for creating new logs for types, but also keeps track of all logs and log listeners. To retrieve the log for a specific class, use the following code:\nprivate static readonly ILog Log = LogManager.GetCurrentClassLogger();  Logging in code To log in code, the ILog interface implements some basic methods to log information with an option for extra data. There are however lots of extension methods available to log exceptions, string formats and more. Below is an example of logging in code:\nLog.Warning(\u0026quot;Customer '{0}' does not exist\u0026quot;, customerId);  Or, if an exception is available, this can written to the log as well.\nLog.Error(ex, \u0026quot;Failed to delete file '{0}'\u0026quot;, fileName);  Logging in code with additional data Sometimes additional data is required (for example, the thread id, or anything else like this). The logging is extensible and contains on the the bare minimum required for logging. To pass in additional information, use the [Level]WithData methods (such as DebugWithData):\nLog.Debug(\u0026quot;This is a message from a specific thread\u0026quot;, new LogData { { \u0026quot;ThreadId\u0026quot;, threadId } });  Then the log data will be available in the LogData of the LogEntry:\nvar logData = logEntry.LogData; var threadId = logData[\u0026quot;ThreadId\u0026quot;];  Logging to the output window or console By default, Catel does not add any listeners. However, it contains a ready-to-use implementation that writes all logs to the output window or console, which is the DebugLogListener. To register this listener, call this at any time:\n#if DEBUG LogManager.AddDebugListener(); #endif  Overriding global log level flags Start with Catel 3.8, it is possible to override the global log level flags for all listeners. To do this, set the corresponding flag on the LogManager to a value. For example, to force debug logging on all log listeners, use the code below:\nLogManager.IsDebugEnabled = true;  To reset the override, set the value back to null:\nLogManager.IsDebugEnabled = null;  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/view-models/mapping-properties-from-view-to-view-model/",
	"title": "Mapping properties from view to view model",
	"tags": [],
	"description": "",
	"content": " Sometimes a view (for example, a user control) contains additional properties besides the DataContext to interact with the view model. By default, it is hard to implement this in an MVVM sccenario, but Catel solves this issue using the ViewToViewModel attribute.\nThis attribute automatically keeps track of changes in both the view and the view model and this way, a control can have several properties and still implement MVVM.\nExample implementation The example below shows how the MapCenter is a dependency property on the control. It automatically maps the property to the ViewModel.MapCenter property.\npublic partial class MyControl : UserControl { static MyControl() { typeof(MyControl).AutoDetectViewPropertiesToSubscribe(); } public MyControl() { InitializeComponent(); } [ViewToViewModel(MappingType = ViewToViewModelMappingType.ViewModelToView)] public GeoCoordinate MapCenter { get { return (GeoCoordinate) GetValue(MapCenterProperty); } set { SetValue(MapCenterProperty, value); } } // Using a DependencyProperty as the backing store for MapCenter. This enables animation, styling, binding, etc... public static readonly DependencyProperty MapCenterProperty = DependencyProperty.Register(\u0026quot;MapCenter\u0026quot;, typeof (GeoCoordinate), typeof (MyControl), new PropertyMetadata(null, (sender, e) =\u0026gt; ((MyControl) sender).UpdateMapCenter())); private void UpdateMapCenter() { map.SetView(ViewModel.MapCenter, ViewModel.ZoomLevel); } public new MainPageViewModel ViewModel { get { return base.ViewModel as MainPageViewModel; } } }  Important note starting with Catel 4.0 Starting with 4.0, Catel no longer subscribes to dependency properties automatically. It is best to let Catel only subscribe to the properties that it should (for the best performance). To do so, use the IViewPropertySelector.AddPropertyToSubscribe method to add properties:\nvar serviceLocator = ServiceLocator.Default; var viewPropertySelector = serviceLocator.ResolveType\u0026lt;IViewPropertySelector\u0026gt;(); viewPropertySelector.AddPropertyToSubscribe(\u0026quot;MyProperty\u0026quot;, typeof(MyView));  In most cases, the only reason to subscribe to property changes is because of the ViewToViewModel attribute. If that is the case, it is best to use the extension method AutoDetectViewPropertiesToSubscribe in the static constructor of the view:\nstatic MyView() { typeof(MyView).AutoDetectViewPropertiesToSubscribe(); }  Mapping types Catel supports the following mapping types using the ViewToViewModelMappingType enum.\nType\nDescription\nTwoWayDoNothing\nTwo way, which means that either the view or the view model will update the values of the other party as soon as they are updated.\nWhen this value is used, nothing happens when the view model of the view changes. This way, it might be possible that the values of the view and the view model are different. The first one to update next will update the other.\nTwoWayViewWins\nTwo way, which means that either the view or the view model will update the values of the other party as soon as they are updated.\nWhen this value is used, the value of the view is used when the view model of the view is changed, and is directly transferred to the view model value\nTwoWayViewModelWins\nTwo way, which means that either the view or the view model will update the values of the other party as soon as they are updated.\nWhen this value is used, the value of the view model is used when the view model of the view is changed, and is directly transferred to the view value.\nViewToViewModel\nThe mapping is from the view to the view model only.\nViewModelToView\nThe mapping is from the view model to the view only.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/services/message-service/",
	"title": "MessageService",
	"tags": [],
	"description": "",
	"content": " The IMessageService allows a developer to show message boxes from a view model.\nShowing a message To show a message from a view model, use the following code:\nvar dependencyResolver = this.GetDependencyResolver(); var messageService = dependencyResolver.Resolve\u0026lt;IMessageService\u0026gt;(); await messageService.Show(\u0026quot;My first message via the service\u0026quot;);  Showing an error Showing a warning or error is very easy. Use the following code:\nvar dependencyResolver = this.GetDependencyResolver(); var messageService = dependencyResolver.Resolve\u0026lt;IMessageService\u0026gt;(); await messageService.ShowError(\u0026quot;Whoops, something went wrong\u0026quot;);  Requesting confirmation It is also possible to request confirmation from the user. The number of possibilities depends on the target platform (for example, not all platforms support YesNo).\nThe following code must be used to request confirmation:\nvar dependencyResolver = this.GetDependencyResolver(); var messageService = dependencyResolver.Resolve\u0026lt;IMessageService\u0026gt;(); if (await messageService.Show(\u0026quot;Are you sure you want to do this?\u0026quot;, \u0026quot;Are you sure?\u0026quot;, MessageButton.YesNo) == MessageResult.Yes) { // Do it! }  Asynchronous confirmation var dependencyResolver = this.GetDependencyResolver(); var messageService = dependencyResolver.Resolve\u0026lt;IMessageService\u0026gt;(); await messageService.Show(\u0026quot;Are you sure you want to do this?\u0026quot;, \u0026quot;Are you sure?\u0026quot;, MessageButton.YesNo, OnMessageServiceComplete);  There are two possible callbacks, one with a result of type Func\\\u0026lt;MessageResult\\\u0026gt; or one without a result of type Action.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/messaging/",
	"title": "Messaging",
	"tags": [],
	"description": "",
	"content": "\r\rMessageBase\r\r\rMessage mediator\r\r\rMessaging via attributes\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/behaviors-triggers/mouse-info/",
	"title": "MouseInfo",
	"tags": [],
	"description": "",
	"content": "1) Add the following XML namespaces:\nxmlns:i=\u0026quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot;  2) Use the following definition:\n\u0026lt;ListBox ItemsSource=\u0026quot;{Binding PersonCollection}\u0026quot; SelectedItem=\u0026quot;{Binding SelectedPerson}\u0026quot;\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:MouseInfo x:Name=\u0026quot;personCollectionMouseInfo\u0026quot; /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;/ListBox\u0026gt;  3) Now, it is easy to bind to the mouse information like this (textblock will become visible when the listbox is hovered):\n\u0026lt;TextBlock Visibility=\u0026quot;{Binding ElementName=personCollectionMouseInfo, Path=IsMouseOver, Converter={StaticResource BooleanToCollapsingVisibilityConverter}, ConverterParameter=false}\u0026quot; Text=\u0026quot;Hovering listbox\u0026quot; /\u0026gt;  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/multilingual/",
	"title": "Multilingual / Localization",
	"tags": [],
	"description": "",
	"content": " Making an application multilingual is a very common feature request nowadays. Therefore Catel provides the resources in several languages and provides the LanguageService to give the developers full control over the translation process in their applications.\nSetting up the LanguageService Setting cultures By default the LanguageService will use the current UI culture to retrieve the right language values. These can easily be customized:\nvar dependencyResolver = this.GetDependencyResolver(); var languageService = dependencyResolver.Resolve\u0026lt;ILanguageService\u0026gt;(); languageService.PreferredCulture = new CultureInfo(\u0026quot;nl-NL\u0026quot;); languageService.FallbackCulture = new CultureInfo(\u0026quot;en-US\u0026quot;);  Registering custom language sources In order to customize the language sources, custom language sources can be registered via the *RegisterLanguageSource* method.\nThe code below shows how to add a new *LanguageResourceSource* which represents a resource file in a specific assembly:\nvar dependencyResolver = this.GetDependencyResolver(); var languageService = dependencyResolver.Resolve\u0026lt;ILanguageService\u0026gt;(); // Create source for assembly MyApplication where the Resources.resx is located in the Properties folder var resourcesSource = new LanguageResourceSource(\u0026quot;MyApplication\u0026quot;, \u0026quot;MyApplication.Properties\u0026quot;, \u0026quot;Resources\u0026quot;); languageService.RegisterLanguageSource(resourcesSource ); // Create source for assembly MyApplication where the Exceptions.resx is located in the Properties folder var exceptionsSource = new LanguageResourceSource(\u0026quot;MyApplication\u0026quot;, \u0026quot;MyApplication.Properties\u0026quot;, \u0026quot;Exceptions\u0026quot;); languageService.RegisterLanguageSource(exceptionsSource );  The *LanguageService* will now automatically query these sources for the translations.\nUsing the LanguageService To use the LanguageService, retrieve it via the DependencyResolver (or let it be injected) and use the provided methods. The example below retrieves the *WarningTitle *resource string in the PreferredCulture. If the resource cannot be found in the PreferredCulture, it will be retrieved for the FallbackCulture. If that cannot be found, it will return null.\nvar dependencyResolver = this.GetDependencyResolver(); var languageService = dependencyResolver.Resolve\u0026lt;ILanguageService\u0026gt;(); var warningTitle = languageService.GetString(\u0026quot;WarningTitle\u0026quot;);  Using the LanguageService in XAML To use the *LanguageService *in XAML, Catel provides the markup extensions.\nUsing the LanguageBinding in To use the LanguageBinding markup extension, use the following code:\n\u0026lt;TextBlock Text=\u0026quot;{markup:LanguageBinding WarningTitle}\u0026quot; /\u0026gt;  Using the LanguageBinding in Windows Phone Since Windows Phone does not support markup extensions, a custom MarkupExtension implementation is used in Catel. This requires a little difference in the usage of the markup extension:\n\u0026lt;TextBlock Text=\u0026quot;{markup:LanguageBinding ResourceName=WarningTitle}\u0026quot; /\u0026gt;  Implementing custom LanguageService (from database) Implementing a custom LanguageService consists of several steps which are described below.\nNote that this implementation queries the database for each translation. It is best to read all translations into memory at once to improve performance\n\rCreating a custom ILanguageSource implementation First of all, we need to implement a customized language source to allow the custom service to know what source to read for translations:\npublic class DbLanguageSource : ILanguageSource { public DbLanguageSource(string connectionString) { Argument.IsNotNullOrWhitespace(() =\u0026gt; connectionString); ConnectionString = connectionString; } public string ConnectionString { get; private set; } public string GetSource() { return ConnectionString; } }  Creating a custom DbLanguageService Below is a custom implementation of the LanguageService. Note that we only have to derive a single method to fully customize the implementation:\npublic class DbLanguageService : LanguageService { protected override string GetString(ILanguageSource languageSource, string resourceName, CultureInfo cultureInfo) { var connectionString = languageSource.GetSource(); using (var dbConnection = new SqlConnection(connectionString)) { dbConnection.Open(); var sqlCommand = dbConnection.CreateCommand(); sqlCommand.CommandType = CommandType.Text; sqlCommand.CommandText = @\u0026quot;SELECT [Name] FROM [Translations] WHERE [ResourceName] = @ResourceName AND [CultureName] = @CultureName\u0026quot;; sqlCommand.Parameters.Add(new SqlParameter(\u0026quot;ResourceName\u0026quot;, resourceName)); sqlCommand.Parameters.Add(new SqlParameter(\u0026quot;CultureName\u0026quot;, cultureInfo.ThreeLetterISOLanguageName)); var translation = sqlCommand.ExecuteScalar() as string; if (!string.IsNullOrWhiteSpace(translation)) { return translation; } } // Resource not found, fall back to base if you like, or simply return null return base.GetString(languageSource, resourceName, cultureInfo); } }  Enabling the custom DbLanguageService To enable the custom DbLanguageService, it must be registered in the ServiceLocator:\nvar serviceLocator = ServiceLocator.Default; var dbLanguageService = new DbLanguageService(); var dbLanguageSource = new DbLanguageSource(\u0026quot;myConnectionString\u0026quot;); dbLanguageService.RegisterLanguageSource(dbLanguageSource); serviceLocator.RegisterInstance\u0026lt;ILanguageService\u0026gt;(dbLanguageService);  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/logging/integration-with-external-loggers/nlog/",
	"title": "NLog",
	"tags": [],
	"description": "",
	"content": " NLog The example below provides an ILogListener for NLog, but any external logging library can be used.\nCreating the listener A listener can be created by creating a new class deriving from LogListenerBase.\npublic class NLogListener : LogListenerBase { protected override void Debug(ILog log, string message, object extraData) { var finalLog = NLog.LogManager.GetLogger(log.TargetType.ToString()); finalLog.Debug(message); } protected override void Info(ILog log, string message, object extraData) { var finalLog = NLog.LogManager.GetLogger(log.TargetType.ToString()); finalLog.Info(message); } protected override void Warning(ILog log, string message, object extraData) { var finalLog = NLog.LogManager.GetLogger(log.TargetType.ToString()); finalLog.Warn(message); } protected override void Error(ILog log, string message, object extraData) { var finalLog = NLog.LogManager.GetLogger(log.TargetType.ToString()); finalLog.Error(message); } }  Registering the listener Last but not least, it is important to register the listener:\nLogManager.AddListener(new NLogListener());  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/locators-naming-conventions/naming-conventions/",
	"title": "Naming conventions",
	"tags": [],
	"description": "",
	"content": " Some services in Catel support naming conventions. For example, the IViewLocator and IViewModelLocator allow naming conventions to prevent a user from having to register all views and view models. Internally, the naming conventions are resolved using the NamingConvention helper class. This part of the documentation explains the possible constants in naming conventions.\n[AS] constant The [AS] constant will be replaced by the assembly name. For example, the following naming convention:\n[AS].Views  in assembly Catel.Examples will be resolved as:\nCatel.Examples.Views  [VM] constant The [VM] constant will be replaced by the name of the view model without the ViewModel postfix. For example, the following naming convention:\n[AS].ViewModels.[VW]ViewModel  in assembly Catel.Examples and for type Catel.Examples.ViewModels.MyViewModel will be resolved as:\nCatel.Examples.ViewModels.MyViewModel  [VW] constant The [VW] constant will be replaced by the name of the view without the View, Control, Page or Window postfixes. For example, the following naming convention:\n[AS].Views.[VM]View  in assembly Catel.Examples and for type Catel.Examples.Views.MyView will be resolved as:\nCatel.Examples.Views.MyView  [UP] constant Sometimes it is not possible to use the [AS] constant because the assembly name is not used in the namespace. For example, for an application called PersonApplication where the client assembly is PersonApplication.Client, the root namespace will still be PersonApplication. Therefore, it is recommend to use the [UP] constant for this situation.\nThe [UP] constant will move the namespaces up by one step. It automatically detects the right separator (\\ (backslash), / (slash), . (dot) and | (pipe) are supported).\nThe following naming convention:\n[UP].Views.[VM]View  for type Catel.Examples.ViewModels.MyViewModel will be resolved as:\nCatel.Examples.Views.MyView  [CURRENT] constant Some people prefer to put classes into the same namespace (such as views and view models).\nThe [CURRENT] constant will use the same namespace.\nThe following naming convention:\n[CURRENT].[VM]View  for type *Catel.Examples.MyViewModel* will be resolved as:\nCatel.Examples.MyView  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/behaviors-triggers/navigate/",
	"title": "Navigate",
	"tags": [],
	"description": "",
	"content": "Note that this behavior is only available for WPF\n\rThe Hyperlink control in WPF is very powerful, but it is hard to make them work outside pages.\nAdd the following XML namespaces:\nxmlns:i=\u0026quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot;  To execute the NavigateUrl, simply use the behavior as shown below:\n\u0026lt;TextBlock\u0026gt; \u0026lt;Hyperlink NavigateUri=\u0026quot;http://schemas.catelproject.com\u0026quot;\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:Navigate /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;TextBlock Text=\u0026quot;The best MVVM Framework\u0026quot; /\u0026gt; \u0026lt;/Hyperlink\u0026gt; \u0026lt;/TextBlock\u0026gt;  Another alternative is to use the LinkLabel control from Orc.Controls\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/services/navigation-service/",
	"title": "NavigationService",
	"tags": [],
	"description": "",
	"content": " The INavigationService allows a developer to navigate to other pages inside an application using view models only.\nAll pages will have to be registered manually or following the right naming convention.\nClosing an application It is possible to close an application using the following code:\nvar dependencyResolver = this.GetDependencyResolver(); var navigationService = dependencyResolver.Resolve\u0026lt;INavigationService\u0026gt;(); navigationService.CloseApplication();  Preventing an application to be closed To prevent an application to be closed, one can subscribe to the ApplicationClosing event:\nvar dependencyResolver = this.GetDependencyResolver(); var navigationService = dependencyResolver.Resolve\u0026lt;INavigationService\u0026gt;(); navigationService.ApplicationClosing += (sender, e) =\u0026gt; { e.Cancel = true; };  Navigating to a new view To navigate to a new page, use the following code:\nvar dependencyResolver = this.GetDependencyResolver(); var navigationService = dependencyResolver.Resolve\u0026lt;INavigationService\u0026gt;(); navigationService.Navigate\u0026lt;EmployeeViewModel\u0026gt;();  Navigating with parameters It is very easy to navigate to a new page with parameters. Use the following code:\nvar parameters = new Dictionary\u0026lt;string, object\u0026gt;(); parameters.Add(\u0026quot;id\u0026quot;, employee.EmployeeID); var dependencyResolver = this.GetDependencyResolver(); var navigationService = dependencyResolver.Resolve\u0026lt;INavigationService\u0026gt;(); navigationService.Navigate\u0026lt;EmployeeViewModel\u0026gt;(parameters);  To read the navigation parameters in the receiving view model, use the OnNavigationCompleted method.\nNavigating back and forward The service also supports navigating back and forward:\nvar dependencyResolver = this.GetDependencyResolver(); var navigationService = dependencyResolver.Resolve\u0026lt;INavigationService\u0026gt;(); navigationService.GoBack(); // navigates to the previous page, obviously navigationService.GoForward(); // navigates to the next page, obviously  Navigating to a custom Uri To navigate to a custom uri without a view model type, use the following code. Of course it\u0026rsquo;s also possible to pass parameters using the right method overload.\nvar dependencyResolver = this.GetDependencyResolver(); var navigationService = dependencyResolver.Resolve\u0026lt;INavigationService\u0026gt;(); navigationService.Navigate(\u0026quot;/UI/Pages/EmployeePage.xaml\u0026quot;);  Registering custom views To register custom views, use the following code:\nvar dependencyResolver = this.GetDependencyResolver(); var navigationService = dependencyResolver.Resolve\u0026lt;INavigationService\u0026gt;(); navigationService.Register(typeof(EmployeeViewModel), typeof(EmployeeDetailsPage));  Using naming conventions to find pages If you use a consistent naming convention for views, it is possible to apply this naming convention to the service. This saves a lot of custom registration. When a page is not registered, the Show method will try to find the view using the naming convention.\nTo add a naming convention, use the following code:\nvar dependencyResolver = this.GetDependencyResolver(); var navigationService = dependencyResolver.Resolve\u0026lt;INavigationService\u0026gt;(); navigationService.NamingConventions.Add(string.Format(\u0026quot;/Views/My{0}View\u0026quot;, NamingConvention.ViewModelName));  The above naming convention will use the following combination:\nInput: MyAssembly.UI.ViewModels.EmployeeViewModel\nOutput: MyAssembly.UI.Windows.EmployeeWindow\nBy default, the following naming conventions will be used:\n /Views/[VM].xaml  /Views/[VM]View.xaml  /Views/[VM]Control.xaml  /Views/[VM]Page.xaml  /Views/[VM]Window.xaml  /Controls/[VM].xaml  /Controls/[VM]Control.xaml  /Pages/[VM].xaml  /Pages/[VM]Page.xaml  /Windows/[VM].xaml  /Windows/[VM]Window.xaml  /UI/Views/[VM].xaml  /UI/Views/[VM]View.xaml  /UI/Views/[VM]Control.xaml  /UI/Views/[VM]Page.xaml  /UI/Views/[VM]Window.xaml  /UI/Controls/[VM].xaml  /UI/Controls/[VM]Control.xaml  /UI/Pages/[VM].xaml  /UI/Pages/[VM]Page.xaml  /UI/Windows/[VM].xaml  /UI/Windows/[VM]Window.xaml   "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/view-models/nested-view-models/",
	"title": "Nested view models",
	"tags": [],
	"description": "",
	"content": "For more information on this topic, see nested user controls.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/behaviors-triggers/numeric-textbox/",
	"title": "NumericTextBox",
	"tags": [],
	"description": "",
	"content": "The NumericTextBox behavior makes it easy to allow specific numeric input on a TextBox.\n1) Add the following XML namespaces:\nxmlns:i=\u0026quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot;  2) Use the following definition:\n\u0026lt;TextBox Text={Binding Amount}\u0026quot;\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:NumericTextBox /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;/TextBox\u0026gt;  Use the properties on the behavior to customize the behavior to your needs\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/services/open-file-service/",
	"title": "OpenFileService",
	"tags": [],
	"description": "",
	"content": " The IOpenFileService allows a developer to let the user choose a file from inside a view model.\nOpening a file To open a file, it is required to set the right properties of the service and then make a call to the DetermineFile method:\nvar dependencyResolver = this.GetDependencyResolver(); var openFileService = dependencyResolver.Resolve\u0026lt;IOpenFileService\u0026gt;(); openFileService.Filter = \u0026quot;All files|*.*\u0026quot;; if (openFileService.DetermineFile()) { // User selected a file }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/parallel-invocation-tasks/",
	"title": "Parallel invocation and tasks",
	"tags": [],
	"description": "",
	"content": " This page contains helper classes in Catel to invoke specific actions on very large collections in parallel.\nRunning batches on large sets in parallel When handling a lot of items and invoking a method per item, it might be a viable option to execute the actions in batches. This normally requires quite some code to split up the large collection into batches and execute the method for each item. To make this process much easier, Catel introduces the ParallelHelper class.\nTo invoke an Initialize method on all types currently loaded by Catel, in batches of 2500 types per batch, use the following code:\nvar allTypes = new List\u0026lt;Type\u0026gt;(TypeCache.GetTypes()); ParallelHelper.ExecuteInParallel(allTypes, type =\u0026gt; { SomeInitializeTypeMethod(type); }, 2500, \u0026quot;Initialize types\u0026quot;);  It is really easy to tweak the number of items per batch to find the optimal performance of items per batch.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/services/please-wait-service/",
	"title": "PleaseWaitService",
	"tags": [],
	"description": "",
	"content": " The IPleaseWaitService allows a developer to show a please wait message (a.k.a. busy indicator) from a view model. Showing using Catel.IoC;  var dependencyResolver = this.GetDependencyResolver(); var pleaseWaitService = dependencyResolver.Resolve\u0026lt;IPleaseWaitService\u0026gt;(); pleaseWaitService.Show();  Hiding var dependencyResolver = this.GetDependencyResolver(); var pleaseWaitService = dependencyResolver.Resolve\u0026lt;IPleaseWaitService\u0026gt;(); pleaseWaitService.Hide();  Showing and automatically hide The IPleaseWaitService can automatically hide itself when an action is completed. To use this feature, simply pass a delegate to the Show method and the service will hide the window as soon as the delegate has completed.\nusing Catel.IoC;  var dependencyResolver = this.GetDependencyResolver(); var pleaseWaitService = dependencyResolver.Resolve\u0026lt;IPleaseWaitService\u0026gt;(); pleaseWaitService.Show(() =\u0026gt; Thread.Sleep(1500));  Changing the status var dependencyResolver = this.GetDependencyResolver(); var pleaseWaitService = dependencyResolver.Resolve\u0026lt;IPleaseWaitService\u0026gt;(); pleaseWaitService.UpdateStatus(\u0026quot;new status\u0026quot;);  Showing a determinate please wait window By default, the IPleaseWaitService shows an indeterminate state (no actual progress is visible).\nThe UpdateStatus method can be used to show the window. The statusFormat argument can contain \u0026lsquo;{0}\u0026rsquo; (represents the current item) and \u0026lsquo;{1}\u0026rsquo; (represents the total items). However, they can also be left out.\nvar dependencyResolver = this.GetDependencyResolver(); var pleaseWaitService = dependencyResolver.Resolve\u0026lt;IPleaseWaitService\u0026gt;(); pleaseWaitService.UpdateStatus(1, 5, \u0026quot;Updating item {0} of {1}\u0026quot;);  The determinate version can be hidden via a call to Hide or when the currentItem argument is larger than the number of totalItems.\nPush/Pop Sometimes, multiple view models or multiple actions use the service. It\u0026rsquo;s not possible to hide the window when the first action is completed, because the user will still have to wait for the other actions to complete (without a please wait window). To implement this correctly, it is possible to use the Push and Pop methods.\nThe Push method shows the window if it is not already visible and then increases an internal counter. At the start of each (asynchronous) action, the developer can call the Push method. When the action is completed, the developer calls Pop which will internally decrease the counter. If the counter hits zero (0), the window is automatically hidden.\nIt is possible to hide the window, even when the internal counter is not yet zero. A call to Hide will reset the counter to zero and thus hide the window.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/pooling/",
	"title": "Pooling",
	"tags": [],
	"description": "",
	"content": " Garbage collection in .NET can be very expensive, especially for objects on the Large Object Heap (LOH). .NET itself already uses pooling for threads to prevent the costly creation of threads but instead re-uses the already created threads using a thread pool. Catel provides an implementation of pooling using the PoolManager\u0026lt;TPoolable\u0026gt;. This allows both Catel and third party developers to create a pool for large objects so they can be reused.\nThe documentation uses a byte array of 4096 as poolable object as example. If _poolManager is used in the code below, it represents an instance of PoolManager\u0026lt;Buffer4096Poolable\u0026gt;\n\rIntroduction to the pool manager The pool manager internally uses a stack to manage the available objects in the pool. It\u0026rsquo;s important to understand how a pool works. The flow diagram below shows how the pool manager deals with objects:\nIt is recommended that a pool manager gets registered in the ServiceLocator so it can be re-used by multiple components.\nNote that the pool manager does not limit the number of objects in memory. It has a MaxSize property so it will store only a maximum amount of objects inside the internal pool, but if the pool is running out of instances and a new object is requested, it will return a new instance (and thus creating a new object which could be garbage collected).\n\rRetrieving objects from the pool Retrieving an object from the pool is very simple. When an instance of the PoolManager\u0026lt;TPoolable\u0026gt; is available, use the code below:\nvar poolableBuffer = _poolManager.GetObject();  The PoolManager\u0026lt;TPoolable\u0026gt; will automatically create a new object when no objects are available in the pool.\nReturning objects to the pool Objects should be automatically returned to the pool when the objects are disposed. This means the objects are not really disposed but the state is being reset and the object is being returned to the pool. To automatically take care of this, it\u0026rsquo;s best to use the PoolManager\u0026lt;TPoolable\u0026gt; as shown below:\nusing (var poolableBuffer = _poolManager.GetObject()) { var buffer = poolableBuffer.Data; // work with the buffer here } // outside the scope, the object is automatically disposed and returned to the pool  The flow chart below shows how the PoolManager\u0026lt;TPoolable\u0026gt; will handle the dispose:\nCustomizing a pool manager Catel implements pooling via the PoolManager\u0026lt;TPoolable\u0026gt; class. This class allows the caller to retrieve an object. There is no need to explicitly derive a class from the PoolManager\u0026lt;TPoolable\u0026gt;. It can be customized though.\nCustomizing the maximum size By default, the PoolManager\u0026lt;TPoolable\u0026gt; uses a maximum size of 5 MB per poolable type. If, for this example, the maximum size of byte buffers should be 1 MB, use the code below:\nvar poolManager = new PoolManager\u0026lt;Buffer4096Poolable\u0026gt;(); poolManager.MaxSize = 1024 * 1024 * 1;  If the MaxSize is reached, objects will not be added back to the internal pool but be left out and, if no other references exist to this object, be ready for garbage collection.\nCreating a poolable object Since the objects need to be re-used, it\u0026rsquo;s very important that the PoolManager\u0026lt;TPoolable\u0026gt; knows how to reset objects to the initial state. Therefore every poolable object needs to implement IPoolable which also implements IDisposable. Below is an example implementation of a poolable object.\npublic class Buffer4096Poolable : IPoolable { private const int BufferSize = 4096; protected IPoolManager _poolManager; public Buffer4096Poolable() { Data = new byte[BufferSize]; } public byte[] Data { get; private set; } public int Size { get { return BufferSize; } } public void Reset() { var buffer = Data; Array.Clear(buffer, 0, buffer.Length); } // Implemented explicitly so it can't be called accidentally void IPoolable.SetPoolManager(IPoolManager poolManager) { _poolManager = poolManager; } public void Dispose() { _poolManager.ReturnObject(this); } }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/preventing-memory-leaks/",
	"title": "Preventing memory leaks",
	"tags": [],
	"description": "",
	"content": "\r\rChange notification wrapper\r\r\rWeak events\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/services/process-service/",
	"title": "ProcessService",
	"tags": [],
	"description": "",
	"content": " The IProcessService allows a developer to run processes from inside a view model.\nStarting a process with arguments To start a process with arguments, use the following code:\nvar dependencyResolver = this.GetDependencyResolver(); var processService = dependencyResolver.Resolve\u0026lt;IProcessService\u0026gt;(); processService.StartProcess(\u0026quot;notepad.exe\u0026quot;, @\u0026quot;C:\\mytextfile.txt\u0026quot;);  Starting a process with arguments and completed callback To start a process with arguments and receive a callback on completion, use the following code:\nvar dependencyResolver = this.GetDependencyResolver(); var processService = dependencyResolver.Resolve\u0026lt;IProcessService\u0026gt;(); processService.StartProcess(\u0026quot;notepad.exe\u0026quot;, @\u0026quot;C:\\mytextfile.txt\u0026quot;, OnProcessCompleted);  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/bindings/property-bindings/",
	"title": "Property bindings",
	"tags": [],
	"description": "",
	"content": " Property bindings are very important in the MVVM pattern. The binding system in Catel will automatically map properties when the binding system is used.\nBinding properties one way To bind properties one way, use the code below.\nAndroid protected override void AddBindings(BindingContext bindingContext, IViewModel viewModel) { var vm = (MainViewModel) viewModel; bindingContext.AddBinding(() =\u0026gt; vm.FirstName, () =\u0026gt; _firstNameEditText.Text, BindingMode.OneWay); }  iOS iOS not yet documented\n\rBinding properties two way To bind properties two way, use the code below.\nAndroid protected override void AddBindings(BindingContext bindingContext, IViewModel viewModel) { var vm = (MainViewModel) viewModel; bindingContext.AddBinding(() =\u0026gt; vm.FirstName, () =\u0026gt; _firstNameEditText.Text).AddTargetEvent(\u0026quot;TextChanged\u0026quot;); }  Note that you need to use the AddTargetEvent to allow two way binding in Android\niOS iOS not yet documented\n\rBinding properties with a converter Converters are a well-known topic in MVVM. Catel supports the use of converters in the binding system. The example below will convert an integer (vm.Counter) to a string with a format to \u0026rdquo;{0} clicks!\u0026rdquo;. The converter will automatically be instantiated using the TypeFactory. Note that using converters in Catel support both TwoWay bindings and ConverterHelper.UnsetValue to prevent any changes in the binding system.\nAndroid protected override void AddBindings(BindingContext bindingContext, IViewModel viewModel) { var vm = (MainViewModel) viewModel; bindingContext.AddBindingWithConverter\u0026lt;ClicksConverter\u0026gt;(() =\u0026gt; vm.Counter, () =\u0026gt; _testButton.Text, BindingMode.OneWay); }  iOS iOS not yet documented\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/reflection/",
	"title": "Reflection",
	"tags": [],
	"description": "",
	"content": " Internally, Catel uses reflection to implement some of its behavior. And why not make all these excellent reflection classes public?\nGetting types without versioning Sometimes you know what type to get and what assembly it is living in. However, you don\u0026rsquo;t want to be version-dependent by specifying the fully qualified assembly name. Using the TypeHelper.GetType method, it is possible to get a type by only the assembly name (say Catel.Core) and the type name (say Catel.Data.ObservableObject).\nvar type = PropertyHelper.GetType(\u0026quot;Catel.Data.ObservableObject\u0026quot;, \u0026quot;Catel.Core\u0026quot;);  Setting or getting properties of objects In lots of cases, you need to possibility to set or get properties of an object via reflection. This behavior is implemented in the PropertyHelper class. Below are a few examples.\nCheck if a property is available on an object PropertyHelper.IsPropertyAvailable(person, \u0026quot;FirstName\u0026quot;);  Getting a property value PropertyHelper.GetValue(person, \u0026quot;FirstName\u0026quot;);  or\nstring firstName; PropertyHelper.TryGetValue(person, \u0026quot;FirstName\u0026quot;, out firstName);  Setting a property value PropertyHelper.SetValue(person, \u0026quot;FirstName\u0026quot;, \u0026quot;Geert\u0026quot;);  or\nPropertyHelper.TrySetValue(person, \u0026quot;FirstName\u0026quot;, \u0026quot;Geert\u0026quot;);  "
},
{
	"uri": "http://docs.catelproject.com/5.1/tips-tricks/mvvm/requery-commands-automatically/",
	"title": "Requery commands automatically using CommandManager",
	"tags": [],
	"description": "",
	"content": "For performance reasons, Catel no longer automatically subscribes to the CommandManager to invalidate the state (saves a lot of CanExecute calls). If you want this behavior back, you can create a custom class that subscribes to the command manager and invalidates the commands for you.\nThis was removed for a reason (performance), so this is not the recommended approach. But this allows you to get back the old behavior.\n\rTo use this class, instantiate it and register it in the ServiceLocator so it stays alive.\npublic class RequeryUsingCommandManager { private IViewModelManager _viewModelManager; public RequeryUsingCommandManager(IViewModelManager viewModelManager) { Argument.IsNotNull(() =\u0026gt; viewModelManager); _viewModelManager = viewModelManager; System.Windows.Input.CommandManager.RequerySuggested += OnCommandManagerRequerySuggested; } private void OnCommandManagerRequerySuggested(object sender, SomeEventArgs e) { InvalidateCommands(); } private void InvalidateCommands() { var viewModels = _viewModelManager.ActiveViewModels; foreach (var viewModel in viewModels) { var viewModelBase = viewModel as ViewModelBase; if (viewModelBase != null) { var viewModelCommandManager = viewModelBase.GetViewModelCommandManager(); viewModelCommandManager.InvalidateCommands(); } } } }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/logging/log-listeners/rolling-in-memory-log-listener/",
	"title": "RollingInMemoryLogListener",
	"tags": [],
	"description": "",
	"content": " In memory logging can be very useful to be able to query the latest log messages. Catel provides this via the RollingInMemoryLogListener and RollingInMemoryLogService. The *RollingInMemoryLogService *is a wrapper around the *RollingInMemoryLogListener* to provide a simple way to use the listener.\nEnabling the feature By default, the feature is disabled to not eat any CPU ticks when not being used. To use the feature, the only thing required is to resolve the type from the ServiceLocator:\nvar rollingInMemoryLogService = ServiceLocator.Default.ResolveType\u0026lt;IRollingInMemoryLogService\u0026gt;();  Querying log messages To query the latest log messages, use one of the following methods:\n GetLogEntries GetWarningLogEntries GetErrorLogEntries  Customizing number of items to keep in memory To customize the number of items being kept in memory, use one of the following properties:\n MaximumNumberOfLogEntries MaximumNumberOfWarningLogEntries MaximumNumberOfErrorLogEntries  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/designers/running-code-at-design-time/",
	"title": "Running code at design-time",
	"tags": [],
	"description": "",
	"content": " Sometimes one needs to run code during design-time. A good example is to register a custom LanguageResourceSource in the LanguageService to show translations in the designer. Unfortunately it is not as easy as putting some code in the code-behind to get this working.\nStarting with Catel 4.3, calling CatelEnvironment.IsInDesignTime will automatically invoke DesignTimeHelper.InitializeDesignTime if in design mode. This means you only have to add classes deriving from DesignTimeInitializer and they will automatically be invoked when any code is checking if it\u0026rsquo;s currently running inside a designer context (e.g. LanguageBinding)\n\rIntroducing the DesignTimeCode attribute To allow users to run code in the designer (Visual Studio or Blend), Catel introduces the DesignTimeCodeAttribute. This is an assembly-wide attribute which will specify the class to create at design time. This means that it is possible to create multiple attributes. Below is an example of the usage of the attribute:\n[assembly: DesignTimeCode(typeof(WpfApplication.Catel.DesignTimeLanguageService))] [assembly: DesignTimeCode(typeof(WpfApplication.Catel.DesignTimeServiceLocator))]  When the attribute is found by Catel, it will automatically construct the types specified in the attribute. This will allow the constructor to execute any code during design time.\nIntroducing the DesignTimeInitializer The DesignTimeCodeAttribute contains the types that are constructed during design-time. Although the reflection in Catel is protected by only checking these arguments at design-time, it cannot be guaranteed for other systems. Therefore Catel also provides the DesignTimeInitializer base class. This is a base class that checks whether the type being constructed is actually running inside a design tool.\nBelow is an example of the usage, which registers custom language resource sources in the language service. This allows real-time updates of the LanguageService in the designer.\npublic class DesignTimeLanguageService : Catel.DesignTimeInitializer { protected override void Initialize() { var dependencyResolver = this.GetDependencyResolver(); var languageService = dependencyResolver.Resolve\u0026lt;ILanguageService\u0026gt;(); languageService.CacheResults = false; var resourcesSource = new LanguageResourceSource(\u0026quot;WpfApplication.Catel\u0026quot;, \u0026quot;WpfApplication.Catel.Properties\u0026quot;, \u0026quot;Resources\u0026quot;); languageService.RegisterLanguageSource(resourcesSource); } }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.serialization.json/catel/runtime/",
	"title": "Runtime",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/services/save-file-service/",
	"title": "SaveFileService",
	"tags": [],
	"description": "",
	"content": " The ISaveFileService allows a developer to let the user choose a file from inside a view model.\nChoosing a file To select a file to save, it is required to set the right properties of the service and then make a call to the DetermineFile method:\nvar dependencyResolver = this.GetDependencyResolver(); var saveFileService = dependencyResolver.Resolve\u0026lt;ISaveFileService\u0026gt;(); saveFileService.Filter = \u0026quot;C# File|*.cs\u0026quot;; if (saveFileService.DetermineFile()) { // User selected a file }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/services/scheduler-service/",
	"title": "SchedulerService",
	"tags": [],
	"description": "",
	"content": " The ISchedulerService allows a developer to schedule an action in the relative or absolute future. The SchedulerService will use the DispatcherTimer to invoke the action.\nNote that the SchedulerService does not provide any persistence of actions and schedules. When the application is closed, all schedules are lost because they are kept in memory.\n\rScheduling an action in the relative future To schedule an action in the relative future, use the Schedule method with the TimeSpan overload. The code below starts the action with a delay of 50 milliseconds.\nvar dependencyResolver = this.GetDependencyResolver(); var schedulerService = dependencyResolver.Resolve\u0026lt;ISchedulerService\u0026gt;(); schedulerService.Schedule(() =\u0026gt; DoSomething(), new TimeSpan(0, 0, 0, 0, 50));  Scheduling an action in the absolute future To schedule an action in the absolute future, use the Schedule method with the DateTime overload. The code below starts the action in 5 minutes.\nvar dependencyResolver = this.GetDependencyResolver(); var schedulerService = dependencyResolver.Resolve\u0026lt;ISchedulerService\u0026gt;(); schedulerService.Schedule(() =\u0026gt; DoSomething(), DateTime.Now.AddMinutes(5));  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/scoping/",
	"title": "Scoping",
	"tags": [],
	"description": "",
	"content": "Sometimes scoping is important to share an object inside a specific scope which cannot be determined upfront. A great example is the serialization inside Catel which requires a serialization scope which can be shared over a lot of objects. Scoping in Catel is really easy. To create a scope of an object with a specific tag, use the code below:\nusing (var scopeManager = ScopeManager\u0026lt;object\u0026gt;.GetScopeManager(\u0026quot;object\u0026quot;)) { var scopeObject = scopeManager.ScopeObject; // scope can be used here }  When the scope does not yet exist, it will be created and the object will be created by the TypeFactory.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/services/select-directory-service/",
	"title": "SelectDirectoryService",
	"tags": [],
	"description": "",
	"content": " The ISelectDirectoryService allows a developer to let the user choose a directory from inside a view model.\nSelecting a directory To select a directory, it is required to set the right properties of the service and then make a call to the DetermineDirectory method:\nvar dependencyResolver = this.GetDependencyResolver(); var selectDirectoryService = dependencyResolver.Resolve\u0026lt;ISelectDirectoryService\u0026gt;(); if (selectDirectoryService.DetermineDirectory()) { // User selected a directory }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/behaviors-triggers/select-text-on-focus/",
	"title": "SelectTextOnFocus",
	"tags": [],
	"description": "",
	"content": "The SelectTextOnFocus behavior makes it easy to select all text when a TextBox receives the focus.\n1) Add the following XML namespaces:\nxmlns:i=\u0026quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot;  2) Use the following definition:\n\u0026lt;TextBox Text={Binding Amount}\u0026quot;\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:SelectTextOnFocus /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;/TextBox\u0026gt;  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/logging/log-listeners/seq-log-listener/",
	"title": "SeqLogListener",
	"tags": [],
	"description": "",
	"content": "Seq is a structured logs server for .NET Apps. It act like a logs repository, allow to diagnostic by query your logs using a natural syntax, react on notifying you through email or instant messages and so on \u0026hellip;\nTo use the Seq log listener, use the following code:\nvar logListener = new SeqLogListener(); logListener.IgnoreCatelLogging = true; // TODO: Customize options LogManager.AddListener(logListener);  This one can also be used on configuration file:\n\u0026lt;catel\u0026gt; \u0026lt;logging\u0026gt; \u0026lt;listeners\u0026gt; \u0026lt;listener type=\u0026quot;Catel.Logging.SeqLogListener\u0026quot; ServerUrl=\u0026quot;http://localhost:5341\u0026quot; IgnoreCatelLogging=\u0026quot;true\u0026quot; IsDebugEnabled=\u0026quot;false\u0026quot; IsInfoEnabled=\u0026quot;true\u0026quot; IsWarningEnabled=\u0026quot;true\u0026quot; IsErrorEnabled=\u0026quot;true\u0026quot; /\u0026gt; \u0026lt;/listeners\u0026gt; \u0026lt;/logging\u0026gt; \u0026lt;/catel\u0026gt;  This log listener is currently available only for the full .net framework\n\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.serialization.json/catel/runtime/serialization/",
	"title": "Serialization",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/serialization/",
	"title": "Serialization",
	"tags": [],
	"description": "",
	"content": " Serializing a model The code below shows how to save an object (which can, of course, be a complex graph of nested objects):\nvar myObject = new MyObject(); using (var fileStream = File.Create(@\u0026quot;C:\\myobject.dob\u0026quot;)) { myObject.Save(fileStream); }  Looks too easy, but this really is the only thing you need to do. You can specify the serialization mode in the several available overloads of the Save method.\nLoading is as easy as saving, as you can see in the following code:\nMyObject myObject = null; using (var fileStream = File.Open(@\u0026quot;C:\\myobject.dob\u0026quot;, FileMode.Open)) { myObject = ModelBase.Load\u0026lt;MyObject\u0026gt;(fileStream, SerializationMode.Xml); }  Note that for a model to support the Save and Load methods, it must derive from SavableModelBase\n\rWarming up serialization The first time a serializer needs to serialize an object, it needs to perform some reflection to gather all the required information. This can have a negative impact on performance for the end-user during serialization. This load cannot be prevented, but it is possible to warmup the serializer at any time when it is convenient (for example, during startup of the application).\nWarming up specific types This code will warm up all the specified types:\nvar typesToWarmup = new type[] { typeof(Settings) }; var xmlSerializer = SerializationFactory.GetXmlSerializer(); xmlSerializer.Warmup(typesToWarmup); var binarySerializer = SerializationFactory.GetBinarySerializer(); binarySerializer.Warmup(typesToWarmup);  Warming up automatically This code will warm up all types implementing the *ModelBase *class:\nvar xmlSerializer = SerializationFactory.GetXmlSerializer(); xmlSerializer.Warmup(); var binarySerializer = SerializationFactory.GetBinarySerializer(); binarySerialzier.Warmup();  Note that warming up for all types might take a serious amount of time and might increase the memory footprint of your application depending on the number of models\n\rWarming up using multiple threads By default, Catel will optimize the initialization and dispatch them to different threads. Using extensive testing, the Catel team discovered that approximately 1000 types / thread is the ideal load balancing (otherwise the spawning of the threads is more expensive than it handling it on the same thread). If this behavior needs to be customized, simply provide the number of types per thread. If -1 is specified, all types will be warmed up in a single thread.\nThe code example below shows how to initialize all types deriving from ModelBase on a single thread:\nvar xmlSerializer = SerializationFactory.GetXmlSerializer(); xmlSerialzier.Warmup(null, -1);  Backwards compatibility for binary serialization This example shows how an “old” (standard .NET) data class that uses custom binary serialization can easily be converted to a *ModelBase* to use the *ModelBase* even for all your existing classes.\nDeclare a new *ModelBase* class (remember the *‘dataobject’* code snippet). If the new class is in a new assembly, or has a new name or namespace, use the *RedirectType* attribute to let the *ModelBase* know that when it finds the old type, it should deserialize that type into the new type.\nThen, by default, the *ModelBase* class will try to deserialize the old object. If it fails to do so, it will fall back on the default values provided by the property declarations. However, it is also possible to override the *GetDataFromSerializationInfo* method:\n/// \u0026lt;summary\u0026gt; /// Retrieves the actual data from the serialization info. /// \u0026lt;/summary\u0026gt; /// \u0026lt;remarks\u0026gt; /// This method should only be implemented if backwards compatibility should be implemented for /// a class that did not previously implement the ModelBase class. /// \u0026lt;/remarks\u0026gt; protected override void GetDataFromSerializationInfo(SerializationInfo info) { // Check if deserialization succeeded if (DeserializationSucceeded) { return; } // Deserialization did not succeed for any reason, so retrieve the values manually // Luckily there is a helper class (SerializationHelper) // that eases the deserialization of \u0026quot;old\u0026quot; style objects FirstName = SerializationHelper.GetString(info, \u0026quot;FirstName\u0026quot;, FirstNameProperty.GetDefaultValue()); LastName = SerializationHelper.GetString(info, \u0026quot;LastName\u0026quot;, LastNameProperty.GetDefaultValue()); }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/services/",
	"title": "Services",
	"tags": [],
	"description": "",
	"content": "\r\rLocationService\r\r\rMessageService\r\r\rNavigationService\r\r\rOpenFileService\r\r\rPleaseWaitService\r\r\rProcessService\r\r\rSaveFileService\r\r\rSchedulerService\r\r\rSelectDirectoryService\r\r\rUIVisualizerService\r\r\rVibrateService\r\r\rViewExportService\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/system/",
	"title": "System",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.core/system/",
	"title": "System",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://docs.catelproject.com/5.1/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/parallel-invocation-tasks/thread-safe-code/",
	"title": "Thread safe code",
	"tags": [],
	"description": "",
	"content": " Writing a multiple threading application is always a challenge. Eventually you need use objects or statements with the ability to synchronize access to the critical sections of the code by taking and releasing a lock.\nBackground information The common solution to access the thread-sensitive resources is use the lock statement just as follow:\nprivate readonly object _syncObj = new object(); public void DoTheWork() { lock (_syncObj) { // Access to the thread-sensitive resources here. } }   But some times the scenario is not quite simple, then you need to use the Monitor class in order to synchronize cross method operations. Here is an example: private readonly object _syncObj = new object(); public void DoTheWork() { StartTheWork(); object result = EndTheWork(); } private void StartTheWork() { Monitor.Enter(_syncObj); try { // Access to the thread-sensitive resources here. } catch(Exception) { Monitor.Exit(_syncObj); throw; } } private object EndTheWork() { try { // Access to the thread-sensitive resources here. return new object(); } finally { Monitor.Exit(_syncObj); } }  To combine the power of the simplicity of the lock statement syntax and the flexibility of the Monitor class, Catel introduces the SynchronizationContext class, allowing you to write the code like this.\nprivate readonly List\u0026lt;IValidator\u0026gt; _validators = new List\u0026lt;IValidator\u0026gt;(); private readonly SynchronizationContext _synchronizationContext = new SynchronizationContext(); public bool Contains(IValidator validator) { Argument.IsNotNull(\u0026quot;validator\u0026quot;, validator); return _synchronizationContext.Execute(() =\u0026gt; _validators.Contains(validator)); } public void Remove(IValidator validator) { Argument.IsNotNull(\u0026quot;validator\u0026quot;, validator); _synchronizationContext.Execute(() =\u0026gt; _validators.Remove(validator)); } public void BeforeValidation(object instance, List\u0026lt;IFieldValidationResult\u0026gt; previousFieldValidationResults, List\u0026lt;IBusinessRuleValidationResult\u0026gt; previousBusinessRuleValidationResults) { _synchronizationContext.Acquire(); try { foreach (IValidator validator in _validators) { validator.BeforeValidation(instance, previousFieldValidationResults, previousBusinessRuleValidationResults); } } catch (Exception) { _synchronizationContext.Release(); throw; } } public void AfterValidateBusinessRules(object instance, List\u0026lt;IBusinessRuleValidationResult\u0026gt; validationResults) { try { foreach (IValidator validator in _validators) { validator.AfterValidateBusinessRules(instance, validationResults); } } catch (Exception) { _synchronizationContext.Release(); throw; } }  SynchronizationContext also allow you create asynchronous locking request.\n\rAcquiring a lock To acquire a lock, only a call to Acquire is required:\n_synchronizationContext.Acquire();  Releasing a lock\n To release a lock, only a call to Release is required:\n_synchronizationContext.Release();  Automatic locking of a method It is also possible to automatically lock and release a method call. This can be accomplished using the Execute method.\n_synchronizationContext.Execute(() =\u0026gt; ThreadSafeCodeExecution());  "
},
{
	"uri": "http://docs.catelproject.com/5.1/tips-tricks/core/",
	"title": "Tips &amp; tricks - Core",
	"tags": [],
	"description": "",
	"content": "\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/tips-tricks/mvvm/",
	"title": "Tips &amp; tricks - MVVM",
	"tags": [],
	"description": "",
	"content": "\r\rFinding the view of a view model\r\r\rRequery commands automatically using CommandManager\r\r\rUsing a tabbed interface with MVVM\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/services/ui-visualizer-service/",
	"title": "UIVisualizerService",
	"tags": [],
	"description": "",
	"content": " The IUIVisualizerService allows a developer to show (modal) windows or dialogs without actually referencing a specific view. Internally, the UIVisualizerService uses the ViewLocator to resolve views.\nScreenshot Showing a non-modal window To show a non-modal window, use the following code:\nvar viewModel = new EmployeeViewModel(); var dependencyResolver = this.GetDependencyResolver(); var uiVisualizerService = dependencyResolver.Resolve\u0026lt;IUIVisualizerService\u0026gt;(); uiVisualizerService.Show(viewModel);  Showing a modal window To show a modal window, use the following code:\nvar viewModel = new EmployeeViewModel(); var dependencyResolver = this.GetDependencyResolver(); var uiVisualizerService = dependencyResolver.Resolve\u0026lt;IUIVisualizerService\u0026gt;(); uiVisualizerService.ShowDialog(viewModel);  Showing a window with callback To show a (modal or non-modal) window and get a callback as soon as the window is closed, use the following code:\nvar viewModel = new EmployeeViewModel(); var dependencyResolver = this.GetDependencyResolver(); var uiVisualizerService = dependencyResolver.Resolve\u0026lt;IUIVisualizerService\u0026gt;(); uiVisualizerService.Show(viewModel, OnWindowClosed);  Registering a window To register a custom window which is not automatically detected via reflection, it is required to use the Register method:\nvar dependencyResolver = this.GetDependencyResolver(); var uiVisualizerService = dependencyResolver.Resolve\u0026lt;IUIVisualizerService\u0026gt;(); uiVisualizerService.Register(typeof(EmployeeViewModel), typeof(EmployeeView));  Using naming conventions to find windows Please see the ViewLocator topic.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/behaviors-triggers/update-binding-on-password-changed/",
	"title": "UpdateBindingOnPasswordChanged",
	"tags": [],
	"description": "",
	"content": "The UpdateBindingOnPasswordChanged is a very useful behavior which allows to bind the Password property of the PasswordBox Control. Use it, it\u0026rsquo;s really simple.\n 1) Add the following XML namespaces:\nxmlns:i=\u0026quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot;  2) Use the following definition:\n\u0026lt;PasswordBox\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:UpdateBindingOnPasswordChanged Password=\u0026quot;{Binding Password, Mode=TwoWay}\u0026quot; /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;/PasswordBox\u0026gt;  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/behaviors-triggers/update-binding-on-text-changed/",
	"title": "UpdateBindingOnTextChanged",
	"tags": [],
	"description": "",
	"content": "The UpdateBindingOnTextChange is a very useful behavior which allows to delay a binding update on the TextChanged event of a TextBox. This way, it is possible to implement search boxes that only start a search after a specific time when no new key presses have occurred. For example, when a user types a new search string, and the user doesn\u0026rsquo;t enter a new key for 500 ms, the binding is updated.\n1) Add the following XML namespaces:\nxmlns:i=\u0026quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot;  2) Use the following definition. This example will update the binding after 500 ms where normally it would only occur when the user tabs out of the TextBox:\n\u0026lt;TextBox Text=\u0026quot;{Binding SearchParam, Mode=TwoWay}\u0026quot;\u0026gt; \u0026lt;i:Interaction.Behaviors\u0026gt; \u0026lt;catel:UpdateBindingOnTextChanged UpdateDelay=\u0026quot;500\u0026quot; /\u0026gt; \u0026lt;/i:Interaction.Behaviors\u0026gt; \u0026lt;/TextBox\u0026gt;  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/locators-naming-conventions/url-locator/",
	"title": "UrlLocator",
	"tags": [],
	"description": "",
	"content": " The IUrlLocator class is responsible for resolving the right urls for the xaml views for a view model in navigation based applications. Before Catel 3.0, the INavigationService was responsible for resolving the url, but this responsibility is now taken over by the IUrlLocator. The NavigationService internally uses the IUrlLocator to resolve the views.\nResolving by naming convention It is possible to resolve views using the IUrlLocator. Then you can use the ResolveUrl method to resolve the url based on the type of the view model.\nFor example, the following view model:\nCatel.Examples.ViewModels.MyViewModel  will be resolved as:\n/Views/MyPage.xaml  Note that the UrlLocator checks whether the resource actually exists. If the resource does not exists, it will not be able to resolve a view\n\rManually resolving a naming convention To manually resolve a naming convention, use the following code:\nvar urlLocator = ServiceLocator.Instance.ResolveType\u0026lt;IUrlLocator\u0026gt;(); var url = urlLocator.ResolveUrl(typeof(MyViewModel));  Customizing naming conventions By default, the IUrlLocator uses the following naming conventions to resolve urls:\n /Views/[VM].xaml /Views/[VM]View.xaml /Views/[VM]Control.xaml /Views/[VM]Page.xaml /Views/[VM]Window.xaml /Controls/[VM].xaml /Controls/[VM]Control.xaml /Pages/[VM].xaml /Pages/[VM]Page.xaml /Windows/[VM].xaml /Windows/[VM]Window.xaml /UI.Views/[VM].xaml /UI.Views/[VM]View.xaml /UI.Views/[VM]Control.xaml /UI.Views/[VM]Page.xaml /UI.Views/[VM]Window.xaml /UI.Controls/[VM].xaml /UI.Controls/[VM]Control.xaml /UI.Pages/[VM].xaml /UI.Pages/[VM]Page.xaml /UI.Windows/[VM].xaml /UI.Windows/[VM]Window.xaml /[VM].xaml /[VM]Control.xaml /[VM]Page.xaml /[VM]Window.xaml  For more information about naming conventions, see Naming conventions\n\rHowever, it is possible to add or remove new naming conventions to support your own naming convention. For example, to add a new naming convention for a different assembly, use this code:\nvar urlLocator = ServiceLocator.Instance.ResolveType\u0026lt;IUrlLocator\u0026gt;(); urlLocator.NamingConventions.Add(\u0026quot;/MyPages/[VM]Page.xaml\u0026quot;);  Registering custom urls Sometimes, a class doesn\u0026rsquo;t follow a naming convention (for whatever reason possible). In such a case, it is possible to register a mapping manually using the following code:\nvar urlLocator = ServiceLocator.Instance.ResolveType\u0026lt;IUrlLocator\u0026gt;(); urlLocator.Register(typeof(MyViewModelNotFollowingNamingConvention), \u0026quot;/MyVerySpecialUrl.xaml\u0026quot;);  Using a custom UrlLocator If you want to have total freedom to determine which url is provided per view model (maybe there are other services that have an impact on this), it is possible to create a custom IUrlLocator implementation. Then the only thing to do is to register it using the following code:\nServiceLocator.Default.Register\u0026lt;IUrlLocator, MyUrlLocator\u0026gt;();  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/views/xaml/usercontrol/",
	"title": "UserControl",
	"tags": [],
	"description": "",
	"content": " The UserControl is a very interesting class of Catel, and fully shows the power of the MVVM Framework that ships with Catel. The user control is able to fully integrate MVVM on a user control level and solves the “nested user control” problem, which is explained in detail a bit further in this documentation.\nAutomatic construction without parameter It simplest thing to do is to create a view model that has an empty constructor (thus without parameters). If the UserControl is added to the visual tree, the view model is instantly constructed and available for usage. A view model that is used inside a UserControl implementation is exactly the same as the DataWindow implementation. This way, the developers don’t have to worry about whether they can currently writing a view model that is meant for a window or a control.\nAutomatic construction with parameter A bit harder (it’s still very easy, don’t worry), but much more powerful is the construction with a parameter. This way, a control is forced to use the data context to create the view model. If there is no valid data context that can be used to construct the view model, no view model will be constructed. This sounds a little abstract, but let’s take a look to a more meaningful example.\nSay, you want to write an application to manage company trees. The top-level of the data exists of a collection of Company objects (models). You want to display the companies inside an ItemsControl, which is a very good way to represent the companies. But how are you going to display the company details? You can simply create a template, but I wouldn\u0026rsquo;t recommend that because the company representation can become very complex (and dynamic), because it consists of Person objects that can have children (employees), and the children are person objects as well, that can have children, etc. You might thing that this is a very simple scenario, which it actually is to make sure that all readers understand it correctly. But, there can be a lot of complex tree scenarios. For example, for a client, I had to write a complete treatment overview of a patient, which consists of a lot of different objects, which all have a child collection of other object types. Then you can save yourself with writing a simple and generic data template. Below is a graphical form of the example:\nNow comes the real power of UserControl in to play. For example, to show the company and its managers, one has to write an items control that contains the companies and then a user control containing the details of the company. For the sake of simplicity, I will leave the employees out for now. The usage might seem a bit complex, but once you get the hang of it, it’s actually quite simple. First of all, create a view model that has a constructor of the model that you want to accept, in our case the Company class of which we will show the details:\n/// \u0026lt;summary\u0026gt; /// Initializes a new instance of the \u0026lt;see cref=\u0026quot;CompanyViewModel\u0026quot;/\u0026gt; class. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;company\u0026quot;\u0026gt;The company.\u0026lt;/param\u0026gt; public CompanyViewModel(Models.Company company) : base() { // Store values Company = company; }  As you can see, the view model can only be constructed by passing a company model. This is quite normal, because how can we show details of a non-existing (null) company? Now we have a view model, we can create our user control:\n\u0026lt;catel:UserControl x:Class=\u0026quot;Catel.Articles._03___MVVM.Examples.UserControlWithParameter.Company\u0026quot; xmlns=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation\u0026quot; xmlns:x=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot;\u0026gt; \u0026lt;!-- For the sake of simplicity, content is left out --\u0026gt; \u0026lt;/catel:UserControl\u0026gt;  Note that the class definition is now catel:UserControl instead of UserControl\n\rThe code behind is even simpler:\n/// \u0026lt;summary\u0026gt; /// Interaction logic for Company.xaml /// \u0026lt;/summary\u0026gt; public partial class Company : UserControl { /// \u0026lt;summary\u0026gt; /// Initializes a new instance of the \u0026lt;see cref=\u0026quot;Company\u0026quot;/\u0026gt; class. /// \u0026lt;/summary\u0026gt; public Company() { InitializeComponent(); } }  Now the control is created (I don’t want to focus on the actual control content here, since it’s not important), we can use the user control in our main window that has a collection of companies. The view model also has a SelectedCompany property representing the selected company inside the listbox. Then, we use the Company control and bind the data context to the SelectedCompany property:\n\u0026lt;!-- Items control of companies --\u0026gt; \u0026lt;ListBox Grid.Column=\u0026quot;0\u0026quot; ItemsSource=\u0026quot;{Binding CompanyCollection}\u0026quot; SelectedItem=\u0026quot;{Binding SelectedCompany}\u0026quot;\u0026gt; \u0026lt;ListBox.ItemTemplate\u0026gt; \u0026lt;DataTemplate\u0026gt; \u0026lt;StackPanel\u0026gt; \u0026lt;Label Content=\u0026quot;{Binding Name}\u0026quot; /\u0026gt; \u0026lt;Label Content=\u0026quot;{Binding CEO.FullName}\u0026quot; /\u0026gt; \u0026lt;/StackPanel\u0026gt; \u0026lt;/DataTemplate\u0026gt; \u0026lt;/ListBox.ItemTemplate\u0026gt; \u0026lt;/ListBox\u0026gt; \u0026lt;!-- Company details --\u0026gt; \u0026lt;UserControlWithParameter:Company Grid.Column=\u0026quot;1\u0026quot; DataContext=\u0026quot;{Binding SelectedCompany}\u0026quot; /\u0026gt;  As the code shows, there is a listbox containing all the companies. The data context of the user control is bound to the SelectedCompany. The cool thing is that as soon as a company is selected, the user control will create an instance of the CompanyViewModel because it accepts a Company instance in the constructor. The screenshot of the example application will (hopefully) give more insight in what change is causing the exact view model creation:\nIn the image above, you see 2 controls. The first one is an items control that binds to the CompaniesViewModel because the window represents list of companies. The second one is the CompanyControl, which dynamically constructs the CompanyViewModel as soon as a company is selected at the left. This means that for every company selection, and new view model is constructed. This way, you can handle the saving, canceling and closing of the view model before the next is view model is constructed.\nThe best thing about this is that you can actually start re-using user controls throughout your whole application. Instead of having the main view model have to define all the properties of (sub) controls, now each control has its own view model, and you don’t have to worry about the implementation in the parent of a control. Simply set the data context of the user control to the right type instance, and the user control will handle the rest.\nThe easiest way to create a new UserControl is to use item templates\n\rMapping properties from/to view model When developing custom user controls, you still want to use the power of MVVM, right? With Catel, all of this is possible. All other frameworks require a developer to manually set the data context on a user control. Or what about mapping user control properties from/to the view model?\nTo map a property of a custom user control to a view model and back, the only thing a developer has to do is to decorate the dependency property of the control with the ViewToViewModelAttribute. Normally, a developer has to build logic that subscribes to property changes of both the view model and the control, and then synchronize all the differences. Thanks to the ViewToViewModelAttribute, the UserControl that ships with Catel takes care of this. The usage of the attribute looks as follows:\n[ViewToViewModel] public bool MyDependencyProperty { get { return (bool)GetValue(MyDependencyPropertyProperty); } set { SetValue(MyDependencyPropertyProperty, value); } } // Using a DependencyProperty as the backing store for MyDependencyProperty. This enables animation, styling, binding, etc... public static readonly DependencyProperty MyDependencyPropertyProperty = DependencyProperty.Register(\u0026quot;MyDependencyProperty\u0026quot;, typeof(bool), typeof(MyControl), new UIPropertyMetadata(true));  By default, the attribute assumes that the name of the property on the view model is the same as the property on the user control. To specify a different name, use the overload of the attribute constructor as shown in the following example:\n[ViewToViewModel(\u0026quot;MyViewModelProperty\u0026quot;)] public bool MyDependencyProperty ... (remaining code left out for the sake of simplicity)  In the first place, all of this looks fine enough. However, what should happen when the current view model of the control is replaced by another instance? Or what if the developer only wants to map values from the control to the view model, but not back? By default, the view model will take the lead when this attribute is used. This means that as soon as the view model is changed, the values of the control will be overwritten by the values of the view model. If another behavior is required, the MappingType property of the attribute should be used:\n[ViewToViewModel(\u0026quot;MyViewModelProperty\u0026quot;, MappingType = ViewToViewModelMappingType.TwoWayControlWins)] public bool MyDependencyProperty ... (remaining code left out for the sake of simplicity)  The table below explains the options in detail:\nTwoWayDoNothing\nTwo way, which means that either the control or the view model will update the values of the other party as soon as they are updated.\nWhen this value is used, nothing happens when the view model of the user control changes. This way, it might be possible that the values of the control and the view model are different. The first one to update next will update the other.\nTwoWayViewWins\nTwo way, which means that either the control or the view model will update the values of the other party as soon as they are updated.\nWhen this value is used, the value of the control is used when the view model of the user control is changed, and is directly transferred to the view model value.\nTwoWayViewModelWins\nTwo way, which means that either the control or the view model will update the values of the other party as soon as they are updated.\nWhen this value is used, the value of the view model is used when the view model of the user control is changed, and is directly transferred to the control value.\nViewToViewModel\nThe mapping is from the control to the view model only.\nViewModelToView\nThe mapping is from the view model to the control only.\nKeeping view models alive The UserControl automatically closes view models in the Unloaded event. Reason for this is that there is no guarantee that the control will be loaded again. However, this can have some negative side effects. On of this side effects is a user control shown as a tab in a tab control. One of the behaviors of a tab control is that it unloads all non-active tabs from the visual tree. Therefore, the UserControl cancels and closes the view model. However, the state of the tab is lost then as well.\nTo prevent this behavior, it is possible to keep view models alive when a user control is unloaded. This can be done by setting CloseViewModelOnUnloaded to false. This way, the view model is not closed and will be re-used when the control is loaded again. The downside of this is that the responsibility of closing and disposing the view model is now in the hands of the developer. A great way to make a difference between unloading (tab switch) and closing is to create a close button on the tabs that will explicitly call ViewModel.CloseViewModel.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/views/xaml/advanced/usercontrol-under-the-hood/",
	"title": "UserControl - under the hood",
	"tags": [],
	"description": "",
	"content": " The UserControl is a pretty sophisticated class. In this part of the documentation, the inner workings of the control are explained. What better way is there than to using flowcharts. There are a few events very important for the inner workings of the user control. The flowcharts are created per event.\nKeep in mind that the actual logic is implemented in the UserControlLogic, which is used by the UserControl. This way, the logic can be used by any user control via the UserControlBehavior.\n\rManaging the custom DataContext The UserControl logic uses an additional layer to customize the DataContext. Below is a graphical representation of how it works.\nAnother view can be found in the image below:\nMain flow The following flowchart shows what happens with a user control in the main flow (the startup). First, it checks whether the user control is loaded (which is not in a normal case). If the control is loaded, it goes directly to determining the datacontext. Otherwise, it will postpone the action until the Loaded event. Loaded When the control is loaded, it starts checking for the first time whether the current datacontext can be used to create a view model. But, before it does this, it checks whether it should (and can) re-use an existing view model. To control whether view models should be re-used, use the CloseViewModelOnUnloaded property.\nIf a view model can and should be re-used, it sets the view model as data context and that\u0026rsquo;s it. If there is no view model, or the previous view model should not be re-used, the control continues to determine the datacontext.\nUnloaded Another event that is very important is the Unloaded event. In this event, the control either cleans up the view model or stores it so it can be re-used later. Then, it also restores the old datacontext so it never breaks existing application bindings. This way, the control won\u0026rsquo;t leave any traces behind.\nDataContextChanged The DataContextChanged event is used to react to changes of the datacontext. We use the DataContextHelper class for that. If the new datacontext is new (thus not a view model that the control just set itself), it it continues to determine the datacontext. Otherwise, it will not take any action.\nDetermineDataContext All other flowcharts eventually led to this flowchart, the determination of the datacontext. The determination of the datacontext is very important, because this is the moment where the user control transforms the datacontext into a new view model if possible. First it tries is to construct the view model with the datacontext. So, if the datacontext is an object of type Person, and the view model of the user control has a constructor that accepts a Person object, it injects the datacontext into the constructor of the view model. If that fails, or there is simply no constructor, the control checks whether the view model has an empty constructor. If so, it constructs the view model and sets it as the new datacontext. If not, it will leave the datacontext untouched.\nBasically, this is all that happens on a higher level to transform a datacontext into a view model. Under the hood, it\u0026rsquo;s a bit more complicated but again, on a higher level this is what happens.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/views/xaml/usercontrol-resources/",
	"title": "UserControl Resources",
	"tags": [],
	"description": "",
	"content": "For the most part the resources declared within a Catel UserControl behave the exact same as resources defined in the standard UserControl. However because of the way the Catel UserControl operates (see UserControl Under the hood) any bindings performed inside a Resource will not be found at runtime (example CollectionViewSource Source) . The solution is to declare the resource inside an element within the UserControl, not at the UserControl level. Example below:\nGiven this simple Model and ViewModel (Catel.Fody used for parameter declaration)\n public class DataSource : ModelBase { public int Id { get; set; } public string URI { get; set; } public string DataSourceType { get; set; } public string Description { get; set; } public string ShortURI { get { if (string.IsNullOrEmpty(URI)) return null; Uri uri = new System.Uri(URI); if (uri.IsFile) { return System.IO.Path.GetFileName(uri.LocalPath); } return URI; } } } public class DocumentViewModel : ViewModelBase { public DocumentViewModel(ICommandManager commandManager) { ProjectDataSources = new FastObservableCollection\u0026lt;DataSource\u0026gt;(); ProjectDataSources.Add(new DataSource() { Id = 1, URI = \u0026quot;file:///D:/src/TAnaylze/Data/DataSources/dnd-viewerPolygon_AoI-Intergranular_porosity.json\u0026quot;, DataSourceType = \u0026quot;tmapdd\u0026quot;, Description = \u0026quot;From TMap DragDrop\u0026quot; }); ProjectDataSources.Add(new DataSource() { Id = 2, URI = \u0026quot;file:///D:/src/TAnaylze/Data/DataSources/dnd-viewerPolygon_AoI-Intergranular_porosity.json\u0026quot;, DataSourceType = \u0026quot;tmapdd\u0026quot; }); ProjectDataSources.Add(new DataSource() { Id = 3, URI = \u0026quot;file:///D:/src/TAnaylze/Data/DataSources/Project X.tdb\u0026quot;, DataSourceType = \u0026quot;tdb\u0026quot;, Description = \u0026quot;Project X.tdb\u0026quot; }); ProjectDataSources.Add(new DataSource() { Id = 4, URI = \u0026quot;file:///D:/src/TAnaylze/Data/DataSources/TMap Workshop.tmap\u0026quot;, DataSourceType = \u0026quot;tmap\u0026quot;, Description = \u0026quot;TMap Workshop.tmap\u0026quot; }); } public FastObservableCollection\u0026lt;DataSource\u0026gt; ProjectDataSources { get; set; } }  and this View:\nView\n\u0026lt;catel:UserControl x:Class=\u0026quot;Catel.Examples.WPF.Commanding.Views.DocumentView\u0026quot; xmlns=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation\u0026quot; xmlns:x=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml\u0026quot; xmlns:sys=\u0026quot;clr-namespace:System;assembly=mscorlib\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot;\u0026gt; \u0026lt;catel:UserControl.Resources\u0026gt; \u0026lt;ResourceDictionary\u0026gt; \u0026lt;!-- The Resource ListViewTitle will be found at run time --\u0026gt; \u0026lt;sys:String x:Key=\u0026quot;ListViewTitle\u0026quot;\u0026gt;Items:\u0026lt;/sys:String\u0026gt; \u0026lt;!-- The Resource DataSourceGroup will be found but the binding will not work. --\u0026gt; \u0026lt;CollectionViewSource x:Key=\u0026quot;DataSourceGroup\u0026quot; Source=\u0026quot;{Binding ProjectDataSources}\u0026quot; IsLiveSortingRequested=\u0026quot;True\u0026quot; IsLiveGroupingRequested=\u0026quot;True\u0026quot;\u0026gt; \u0026lt;CollectionViewSource.GroupDescriptions\u0026gt; \u0026lt;PropertyGroupDescription PropertyName=\u0026quot;DataSourceType\u0026quot; /\u0026gt; \u0026lt;/CollectionViewSource.GroupDescriptions\u0026gt; \u0026lt;/CollectionViewSource\u0026gt; \u0026lt;/ResourceDictionary\u0026gt; \u0026lt;/catel:UserControl.Resources\u0026gt; \u0026lt;Grid\u0026gt; \u0026lt;Grid.ColumnDefinitions\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;*\u0026quot; /\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;5\u0026quot; /\u0026gt; \u0026lt;ColumnDefinition Width=\u0026quot;*\u0026quot; /\u0026gt; \u0026lt;/Grid.ColumnDefinitions\u0026gt; \u0026lt;ScrollViewer Grid.Column=\u0026quot;0\u0026quot;\u0026gt; \u0026lt;StackPanel\u0026gt; \u0026lt;StackPanel.Resources\u0026gt; \u0026lt;/StackPanel.Resources\u0026gt; \u0026lt;Label Foreground=\u0026quot;Blue\u0026quot; Margin=\u0026quot;5,5,5,0\u0026quot; Content=\u0026quot;{StaticResource ListViewTitle}\u0026quot;\u0026gt;\u0026lt;/Label\u0026gt; \u0026lt;ListView Name=\u0026quot;_datasourcelv1\u0026quot; ItemsSource=\u0026quot;{Binding Source={StaticResource DataSourceGroup}}\u0026quot;\u0026gt; \u0026lt;ListView.View\u0026gt; \u0026lt;GridView\u0026gt; \u0026lt;GridViewColumn Header=\u0026quot;Name\u0026quot; Width=\u0026quot;120\u0026quot; DisplayMemberBinding=\u0026quot;{Binding ShortURI}\u0026quot; /\u0026gt; \u0026lt;GridViewColumn Header=\u0026quot;Type\u0026quot; Width=\u0026quot;50\u0026quot; DisplayMemberBinding=\u0026quot;{Binding DataSourceType}\u0026quot; /\u0026gt; \u0026lt;/GridView\u0026gt; \u0026lt;/ListView.View\u0026gt; \u0026lt;ListView.GroupStyle\u0026gt; \u0026lt;GroupStyle\u0026gt; \u0026lt;GroupStyle.HeaderTemplate\u0026gt; \u0026lt;DataTemplate\u0026gt; \u0026lt;TextBlock Text=\u0026quot;{Binding Name}\u0026quot;/\u0026gt; \u0026lt;/DataTemplate\u0026gt; \u0026lt;/GroupStyle.HeaderTemplate\u0026gt; \u0026lt;/GroupStyle\u0026gt; \u0026lt;/ListView.GroupStyle\u0026gt; \u0026lt;/ListView\u0026gt; \u0026lt;/StackPanel\u0026gt; \u0026lt;/ScrollViewer\u0026gt; \u0026lt;GridSplitter Grid.Column=\u0026quot;1\u0026quot; Width=\u0026quot;5\u0026quot; HorizontalAlignment=\u0026quot;Stretch\u0026quot; /\u0026gt; \u0026lt;ScrollViewer Grid.Column=\u0026quot;2\u0026quot;\u0026gt; \u0026lt;StackPanel\u0026gt; \u0026lt;StackPanel.Resources\u0026gt; \u0026lt;!-- The solution is to embed the resource inside the UserControl, this way the binding is within the runtime Visual Tree. --\u0026gt; \u0026lt;CollectionViewSource x:Key=\u0026quot;DataSourceGroup2\u0026quot; Source=\u0026quot;{Binding ProjectDataSources}\u0026quot; IsLiveSortingRequested=\u0026quot;True\u0026quot; IsLiveGroupingRequested=\u0026quot;True\u0026quot;\u0026gt; \u0026lt;CollectionViewSource.GroupDescriptions\u0026gt; \u0026lt;PropertyGroupDescription PropertyName=\u0026quot;DataSourceType\u0026quot; /\u0026gt; \u0026lt;/CollectionViewSource.GroupDescriptions\u0026gt; \u0026lt;/CollectionViewSource\u0026gt; \u0026lt;/StackPanel.Resources\u0026gt; \u0026lt;Label Foreground=\u0026quot;Blue\u0026quot; Margin=\u0026quot;5,5,5,0\u0026quot; Content=\u0026quot;{StaticResource ListViewTitle}\u0026quot;\u0026gt;\u0026lt;/Label\u0026gt; \u0026lt;ListView Name=\u0026quot;_datasourcelv2\u0026quot; ItemsSource=\u0026quot;{Binding Source={StaticResource DataSourceGroup2}}\u0026quot;\u0026gt; \u0026lt;ListView.View\u0026gt; \u0026lt;GridView\u0026gt; \u0026lt;GridViewColumn Header=\u0026quot;Name\u0026quot; Width=\u0026quot;120\u0026quot; DisplayMemberBinding=\u0026quot;{Binding ShortURI}\u0026quot; /\u0026gt; \u0026lt;GridViewColumn Header=\u0026quot;Type\u0026quot; Width=\u0026quot;50\u0026quot; DisplayMemberBinding=\u0026quot;{Binding DataSourceType}\u0026quot; /\u0026gt; \u0026lt;/GridView\u0026gt; \u0026lt;/ListView.View\u0026gt; \u0026lt;ListView.GroupStyle\u0026gt; \u0026lt;GroupStyle\u0026gt; \u0026lt;GroupStyle.HeaderTemplate\u0026gt; \u0026lt;DataTemplate\u0026gt; \u0026lt;TextBlock Text=\u0026quot;{Binding Name}\u0026quot;/\u0026gt; \u0026lt;/DataTemplate\u0026gt; \u0026lt;/GroupStyle.HeaderTemplate\u0026gt; \u0026lt;/GroupStyle\u0026gt; \u0026lt;/ListView.GroupStyle\u0026gt; \u0026lt;/ListView\u0026gt; \u0026lt;/StackPanel\u0026gt; \u0026lt;/ScrollViewer\u0026gt; \u0026lt;/Grid\u0026gt; \u0026lt;/catel:UserControl\u0026gt;   Will produce this at runtime:\n The ListView on the left is not populated because the binding is not found and will produce this error:\nSystem.Windows.Data Error: 40 : BindingExpression path error: 'ProjectDataSources' property not found on 'object' ''MainWindowViewModel' (HashCode=-1500006600)'. BindingExpression:Path=ProjectDataSources; DataItem='MainWindowViewModel' (HashCode=-1500006600); target element is 'CollectionViewSource' (HashCode=5965360); target property is 'Source' (type 'Object')  While the ListView on the right has the correct content due to the proper binding. Further discussion on Stack Overflow.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/views/xaml/external-controls/using-custom-control/",
	"title": "Using a custom control",
	"tags": [],
	"description": "",
	"content": " In this part of the documentation, the RadTabItem of Telerik will be used as an example on how to create a RadTabItem that behaves like the UserControl.\nCreating the base class with behavior The first thing to do is to create a new base class that accepts a view model type argument. In this example, we will call it TabItem (to make it as \u0026ldquo;external control company independent\u0026rdquo; as possible). Below is the code for the control definition. The downside of xaml based applications is that you cannot derive from controls or windows that have a partial class defined in xaml. Therefore, all controls and code must be initialized via code as you can see in the code below.\n/// \u0026lt;summary\u0026gt; /// Base class for a control with the Catel mvvm behavior. /// \u0026lt;/summary\u0026gt; public class TabItem : RadTabItem, IUserControl { private readonly UserControlLogic _logic; private event EventHandler\u0026lt;EventArgs\u0026gt; _viewLoaded; private event EventHandler\u0026lt;EventArgs\u0026gt; _viewUnloaded; private event EventHandler\u0026lt;Catel.MVVM.Views.DataContextChangedEventArgs\u0026gt; _viewDataContextChanged; /// \u0026lt;summary\u0026gt; /// Initializes a new instance of the \u0026lt;see cref=\u0026quot;TabItem\u0026quot;/\u0026gt; class. /// \u0026lt;/summary\u0026gt; public TabItem() { _logic = new UserControlLogic(this, viewModelType); _logic.PropertyChanged += (sender, e) =\u0026gt; PropertyChanged.SafeInvoke(this, e); Loaded += (sender, e) =\u0026gt; _viewLoaded.SafeInvoke(this); Unloaded += (sender, e) =\u0026gt; _viewUnloaded.SafeInvoke(this); this.AddDataContextChangedHandler((sender, e) =\u0026gt; _viewDataContextChanged.SafeInvoke(this, new Catel.MVVM.Views.DataContextChangedEventArgs(e.OldValue, e.NewValue))); SetBinding(RadTabItem.HeaderProperty, new Binding(\u0026quot;Title\u0026quot;)); } /// \u0026lt;summary\u0026gt; /// Gets the view model that is contained by the container. /// \u0026lt;/summary\u0026gt; /// \u0026lt;value\u0026gt;The view model.\u0026lt;/value\u0026gt; public IViewModel ViewModel { get { return _logic.ViewModel; } } /// \u0026lt;summary\u0026gt; /// Occurs when a property on the container has changed. /// \u0026lt;/summary\u0026gt; /// \u0026lt;remarks\u0026gt; /// This event makes it possible to externally subscribe to property changes of a \u0026lt;see cref=\u0026quot;DependencyObject\u0026quot;/\u0026gt; /// (mostly the container of a view model) because the .NET Framework does not allows us to. /// \u0026lt;/remarks\u0026gt; public event PropertyChangedEventHandler PropertyChanged; /// \u0026lt;summary\u0026gt; /// Occurs when the view is loaded. /// \u0026lt;/summary\u0026gt; event EventHandler\u0026lt;EventArgs\u0026gt; IView.Loaded { add { _viewLoaded += value; } remove { _viewLoaded -= value; } } /// \u0026lt;summary\u0026gt; /// Occurs when the view is unloaded. /// \u0026lt;/summary\u0026gt; event EventHandler\u0026lt;EventArgs\u0026gt; IView.Unloaded { add { _viewUnloaded += value; } remove { _viewUnloaded -= value; } } /// \u0026lt;summary\u0026gt; /// Occurs when the data context has changed. /// \u0026lt;/summary\u0026gt; event EventHandler\u0026lt;Catel.MVVM.Views.DataContextChangedEventArgs\u0026gt; IView.DataContextChanged { add { _viewDataContextChanged += value; } remove { _viewDataContextChanged -= value; } } }  You would expect an abstract class here, but the designers (both Visual Studio and Expression Blend) can\u0026rsquo;t handle abstract base classes\n\rUsing the class The class can now be used the same as the UserControl class. For more information, see UserControl explained.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/views/xaml/external-controls/using-custom-window/",
	"title": "Using a custom window",
	"tags": [],
	"description": "",
	"content": " In this part of the documentation, the RadWindow of Telerik will be used as an example on how to create a WindowBase that behaves like the DataWindow.\nCreating the base class with behavior The first thing to do is to create a new base class that accepts a view model type argument. In this example, we will call it WindowBase (to make it as \u0026ldquo;external control company independent\u0026rdquo; as possible). Below is the code for the window definition. The downside of xaml based applications is that you cannot derive from controls or windows that have a partial class defined in xaml. Therefore, all controls and code must be initialized via code as you can see in the code below.\nBecause the RadWindow of Telerik does not close the window when the DialogResult is set, this window subscribes to the ViewModelClosed event to close the window\n/// \u0026lt;summary\u0026gt; /// Base class for a window with the Catel mvvm behavior. /// \u0026lt;/summary\u0026gt; public class Window : RadWindow, IDataWindow { private readonly WindowLogic _logic; private event EventHandler\u0026lt;EventArgs\u0026gt; _viewLoaded; private event EventHandler\u0026lt;EventArgs\u0026gt; _viewUnloaded; private event EventHandler\u0026lt;Catel.MVVM.Views.DataContextChangedEventArgs\u0026gt; _viewDataContextChanged; public Window() : this(null) { } public Window(IViewModel viewModel) { _logic = new WindowLogic(this, null, viewModel); _logic.ViewModelChanged += (sender, e) =\u0026gt; ViewModelChanged.SafeInvoke(this, e); _logic.PropertyChanged += (sender, e) =\u0026gt; PropertyChanged.SafeInvoke(this, e); Loaded += (sender, e) =\u0026gt; _viewLoaded.SafeInvoke(this); Unloaded += (sender, e) =\u0026gt; _viewUnloaded.SafeInvoke(this); this.AddDataContextChangedHandler((sender, e) =\u0026gt; _viewDataContextChanged.SafeInvoke(this, new Catel.MVVM.Views.DataContextChangedEventArgs(e.OldValue, e.NewValue))); // Because the RadWindow does not close when DialogResult is set, the following code is required ViewModelChanged += (sender, e) =\u0026gt; OnViewModelChanged(); // Call manually the first time (for injected view models) OnViewModelChanged(); WindowStartupLocation = WindowStartupLocation.CenterScreen; SetBinding(RadWindow.HeaderProperty, new Binding(\u0026quot;Title\u0026quot;)); } public IViewModel ViewModel { get { return _logic.ViewModel; } } public event PropertyChangedEventHandler PropertyChanged; public event EventHandler\u0026lt;EventArgs\u0026gt; ViewModelChanged; event EventHandler\u0026lt;EventArgs\u0026gt; IView.Loaded { add { _viewLoaded += value; } remove { _viewLoaded -= value; } } event EventHandler\u0026lt;EventArgs\u0026gt; IView.Unloaded { add { _viewUnloaded += value; } remove { _viewUnloaded -= value; } } event EventHandler\u0026lt;Catel.MVVM.Views.DataContextChangedEventArgs\u0026gt; IView.DataContextChanged { add { _viewDataContextChanged += value; } remove { _viewDataContextChanged -= value; } } private void OnViewModelChanged() { if (ViewModel != null \u0026amp;\u0026amp; !ViewModel.IsClosed) { ViewModel.Closed += ViewModelClosed; } } private void ViewModelClosed(object sender, ViewModelClosedEventArgs e) { Close(); } }  You would expect an abstract class here, but the designers (both Visual Studio and Expression Blend) can\u0026rsquo;t handle abstract base classes\n\rUsing the class The class can now be used the same as the DataWindow class. For more information, see Window and DataWindow.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/tips-tricks/mvvm/using-tabbed-interface-with-mvvm/",
	"title": "Using a tabbed interface with MVVM",
	"tags": [],
	"description": "",
	"content": " A common scenario in WPF is to use a tabbed interface to give the user the option to use multiple main views in a tabbed environment. This example shows how to implement this correctly with both closable and non-closable tabs.\nFor this example, we will have a few requirements:\n Be able to add, close and activate tabs via a service Be able to specify whether a tab can be closed by the end-user  Creating the model describing a tab item First of all, we need a model describing a tab item so we can interact with a service. We want the tab to be closeable via the service, but also via the view model it is representing.\npublic namespace TabDemo { using System; using System.Threading.Tasks; using Catel; using Catel.MVVM; public class TabItem { public TabItem(IViewModel viewModel) { Argument.IsNotNull(() =\u0026gt; viewModel); ViewModel = viewModel; CanClose = true; if (!viewModel.IsClosed) { viewModel.ClosedAsync += OnViewModelClosed; } } public IViewModel ViewModel { get; private set; } public bool CanClose { get; set; } public object Tag { get; set; } public event EventHandler\u0026lt;EventArgs\u0026gt; Closed; private async Task OnViewModelClosed(object sender, ViewModelClosedEventArgs e) { var vm = ViewModel; if (vm != null) { vm.ClosedAsync -= OnViewModelClosed; } Closed.SafeInvoke(this); } } }  Because we subscribe to the ClosedAsync event, we can close the tab from withing the view model.\nCreating the service Interface namespace TabDemo.Services { using System; using System.Collections.Generic; public interface ITabService { /// \u0026lt;summary\u0026gt; /// Gets all the tabs. /// \u0026lt;/summary\u0026gt; /// \u0026lt;value\u0026gt;The tabs.\u0026lt;/value\u0026gt; IEnumerable\u0026lt;TabItem\u0026gt; Tabs { get; } /// \u0026lt;summary\u0026gt; /// Gets the selected tab. /// \u0026lt;/summary\u0026gt; /// \u0026lt;value\u0026gt;The selected tab.\u0026lt;/value\u0026gt; TabItem SelectedTab { get; } /// \u0026lt;summary\u0026gt; /// Occurs when the selected tab has changed. /// \u0026lt;/summary\u0026gt; event EventHandler\u0026lt;TabItemEventArgs\u0026gt; SelectedTabChanged; /// \u0026lt;summary\u0026gt; /// Determines whether the specified tab item is visible. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;tabItem\u0026quot;\u0026gt;The tab item.\u0026lt;/param\u0026gt; /// \u0026lt;returns\u0026gt;\u0026lt;c\u0026gt;true\u0026lt;/c\u0026gt; if the specified tab item is visible; otherwise, \u0026lt;c\u0026gt;false\u0026lt;/c\u0026gt;.\u0026lt;/returns\u0026gt; /// \u0026lt;exception cref=\u0026quot;ArgumentNullException\u0026quot;\u0026gt;The \u0026lt;paramref name=\u0026quot;tabItem\u0026quot;/\u0026gt; is \u0026lt;c\u0026gt;null\u0026lt;/c\u0026gt;.\u0026lt;/exception\u0026gt; bool IsVisible(TabItem tabItem); /// \u0026lt;summary\u0026gt; /// Determines whether the specified tab item is active. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;tabItem\u0026quot;\u0026gt;The tab item.\u0026lt;/param\u0026gt; /// \u0026lt;returns\u0026gt;\u0026lt;c\u0026gt;true\u0026lt;/c\u0026gt; if the specified tab item is active; otherwise, \u0026lt;c\u0026gt;false\u0026lt;/c\u0026gt;.\u0026lt;/returns\u0026gt; /// \u0026lt;exception cref=\u0026quot;ArgumentNullException\u0026quot;\u0026gt;The \u0026lt;paramref name=\u0026quot;tabItem\u0026quot;/\u0026gt; is \u0026lt;c\u0026gt;null\u0026lt;/c\u0026gt;.\u0026lt;/exception\u0026gt; bool IsActive(TabItem tabItem); /// \u0026lt;summary\u0026gt; /// Shows the specified tab item in a tab. /// \u0026lt;para /\u0026gt; /// If the tab is already in the list of open tabs, this method won't do anything. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;tabItem\u0026quot;\u0026gt;The tab item.\u0026lt;/param\u0026gt; /// \u0026lt;exception cref=\u0026quot;ArgumentNullException\u0026quot;\u0026gt;The \u0026lt;paramref name=\u0026quot;tabItem\u0026quot;/\u0026gt; is \u0026lt;c\u0026gt;null\u0026lt;/c\u0026gt;.\u0026lt;/exception\u0026gt; void Add(TabItem tabItem); /// \u0026lt;summary\u0026gt; /// Shows the specified tab item in a tab. /// \u0026lt;para /\u0026gt; /// If the tab is already in the list of open tabs, this method won't do anything. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;index\u0026quot;\u0026gt;The index.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026quot;tabItem\u0026quot;\u0026gt;The tab item.\u0026lt;/param\u0026gt; /// \u0026lt;exception cref=\u0026quot;ArgumentNullException\u0026quot;\u0026gt;The \u0026lt;paramref name=\u0026quot;tabItem\u0026quot; /\u0026gt; is \u0026lt;c\u0026gt;null\u0026lt;/c\u0026gt;.\u0026lt;/exception\u0026gt; void Insert(int index, TabItem tabItem); /// \u0026lt;summary\u0026gt; /// Activates the specified tab item. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;tabItem\u0026quot;\u0026gt;The tab item.\u0026lt;/param\u0026gt; /// \u0026lt;exception cref=\u0026quot;ArgumentNullException\u0026quot;\u0026gt;The \u0026lt;paramref name=\u0026quot;tabItem\u0026quot;/\u0026gt; is \u0026lt;c\u0026gt;null\u0026lt;/c\u0026gt;.\u0026lt;/exception\u0026gt; /// \u0026lt;exception cref=\u0026quot;InvalidOperationException\u0026quot;\u0026gt;The \u0026lt;paramref name=\u0026quot;tabItem\u0026quot;/\u0026gt; is not visible, use \u0026lt;see cref=\u0026quot;Add\u0026quot;/\u0026gt; first.\u0026lt;/exception\u0026gt; void Activate(TabItem tabItem); /// \u0026lt;summary\u0026gt; /// Hides the specified tab item. /// \u0026lt;para /\u0026gt; /// If the tab is not in the list of open tabs, this method won't do anything. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;tabItem\u0026quot;\u0026gt;The tab item.\u0026lt;/param\u0026gt; /// \u0026lt;exception cref=\u0026quot;ArgumentNullException\u0026quot;\u0026gt;The \u0026lt;paramref name=\u0026quot;tabItem\u0026quot;/\u0026gt; is \u0026lt;c\u0026gt;null\u0026lt;/c\u0026gt;.\u0026lt;/exception\u0026gt; void Remove(TabItem tabItem); } }  Implementation namespace TabDemo.Services { using System; using System.Collections.Generic; using System.Linq; using System.Windows.Controls; using Catel; using Catel.Logging; using Catel.MVVM; using Catel.Windows.Threading; using TabItem = TabDemo.TabItem; public class TabService : ITabService { private static readonly ILog Log = LogManager.GetCurrentClassLogger(); private TabControl _tabControl; public TabService() { } public IEnumerable\u0026lt;TabItem\u0026gt; Tabs { get { if (_tabControl == null) { return new List\u0026lt;TabItem\u0026gt;(); } return (from tab in _tabControl.Items.Cast\u0026lt;object\u0026gt;() where tab is TabItem select (TabItem)tab).ToList(); } } public TabItem SelectedTab { get { if (_tabControl == null) { return null; } var tabItem = _tabControl.SelectedItem as TabItem; return tabItem; } } public event EventHandler\u0026lt;TabItemEventArgs\u0026gt; SelectedTabChanged; internal void SetTabControl(TabControl tabControl) { Argument.IsNotNull(() =\u0026gt; tabControl); if (_tabControl != null) { _tabControl.SelectionChanged -= OnTabControlSelectionChanged; } _tabControl = tabControl; _tabControl.SelectionChanged += OnTabControlSelectionChanged; } public bool IsVisible(TabItem tabItem) { Argument.IsNotNull(() =\u0026gt; tabItem); if (_tabControl == null) { return false; } var isVisible = (from item in _tabControl.Items.Cast\u0026lt;object\u0026gt;() where ReferenceEquals(tabItem, item) select true).Any(); return isVisible; } public bool IsActive(TabItem tabItem) { Argument.IsNotNull(() =\u0026gt; tabItem); if (_tabControl == null) { return false; } var selectedTab = SelectedTab; var isActive = ReferenceEquals(selectedTab, tabItem); return isActive; } public void Add(TabItem tabItem) { Argument.IsNotNull(() =\u0026gt; tabItem); if (_tabControl == null) { return; } Insert(_tabControl.Items.Count, tabItem); } public void Insert(int index, TabItem tabItem) { Argument.IsNotNull(() =\u0026gt; tabItem); if (_tabControl == null) { return; } var isVisible = IsVisible(tabItem); if (isVisible) { return; } tabItem.Closed += OnTabItemClosed; _tabControl.Items.Insert(index, tabItem); } public void Activate(TabItem tabItem) { Argument.IsNotNull(() =\u0026gt; tabItem); if (_tabControl == null) { return; } var isVisible = IsVisible(tabItem); if (!isVisible) { throw Log.ErrorAndCreateException\u0026lt;InvalidOperationException\u0026gt;(\u0026quot;Tab item is not visible, use the Show() method first\u0026quot;); } _tabControl.SelectedItem = tabItem; } public void Remove(TabItem tabItem) { Argument.IsNotNull(() =\u0026gt; tabItem); if (_tabControl == null) { return; } tabItem.Closed -= OnTabItemClosed; _tabControl.RemoveAndUpdateSelection(tabItem); } private void OnTabItemClosed(object sender, EventArgs e) { var tabItem = sender as TabItem; if (tabItem != null) { tabItem.Closed -= OnTabItemClosed; if (_tabControl == null) { return; } _tabControl.Dispatcher.BeginInvoke(() =\u0026gt; Remove(tabItem)); } } private void OnTabControlSelectionChanged(object sender, SelectionChangedEventArgs e) { var handler = SelectedTabChanged; if (handler != null) { var selectedTab = SelectedTab; handler(this, new TabItemEventArgs(selectedTab)); } } } }  Creating the views For this to work, the service needs to interact with views. We have a few views to create.\nCreating ClosableTabItem Xaml \u0026lt;UserControl x:Class=\u0026quot;TabDemo.Controls.ClosableTabItem\u0026quot; xmlns=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation\u0026quot; xmlns:x=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml\u0026quot; xmlns:mc=\u0026quot;http://schemas.openxmlformats.org/markup-compatibility/2006\u0026quot; xmlns:d=\u0026quot;http://schemas.microsoft.com/expression/blend/2008\u0026quot; xmlns:orchestra=\u0026quot;https://github.com/orcomp/orchestra\u0026quot; xmlns:gum=\u0026quot;http://www.wildgums.net.au/gum\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot; xmlns:controls=\u0026quot;clr-namespace:TabDemo.Controls\u0026quot; mc:Ignorable=\u0026quot;d\u0026quot; d:DesignHeight=\u0026quot;300\u0026quot; d:DesignWidth=\u0026quot;300\u0026quot;\u0026gt; \u0026lt;StackPanel Orientation=\u0026quot;Horizontal\u0026quot;\u0026gt; \u0026lt;TextBlock Text=\u0026quot;{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:ClosableTabItem}}, Path=Title}\u0026quot;/\u0026gt; \u0026lt;Button Click=\u0026quot;OnCloseButtonClick\u0026quot; Margin=\u0026quot;5,0,0,0\u0026quot; Background=\u0026quot;Transparent\u0026quot; Visibility=\u0026quot;{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:ClosableTabItem}}, Path=CanClose, Converter={catel:BooleanToCollapsingVisibilityConverter}}\u0026quot;\u0026gt; \u0026lt;Image Source=\u0026quot;{Image Source to a close Image}\u0026quot; Width=\u0026quot;12\u0026quot; Height=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;/Button\u0026gt; \u0026lt;/StackPanel\u0026gt; \u0026lt;/UserControl\u0026gt;  Code behind namespace Tabdemo.Controls { using System.Windows; using System.Windows.Controls; using System.Windows.Data; using Catel.MVVM; using Catel.Windows; public partial class ClosableTabItem { #region Constructors public ClosableTabItem() { InitializeComponent(); Loaded += OnLoaded; } #endregion public string Title { get { return (string)GetValue(TitleProperty); } set { SetValue(TitleProperty, value); } } public static readonly DependencyProperty TitleProperty = DependencyProperty.Register(\u0026quot;Title\u0026quot;, typeof(string), typeof(ClosableTabItem), new PropertyMetadata(string.Empty)); public bool CanClose { get { return (bool)GetValue(CanCloseProperty); } set { SetValue(CanCloseProperty, value); } } public static readonly DependencyProperty CanCloseProperty = DependencyProperty.Register(\u0026quot;CanClose\u0026quot;, typeof(bool), typeof(ClosableTabItem), new PropertyMetadata(true)); private void OnLoaded(object sender, RoutedEventArgs e) { var vmContainer = Content as IViewModelContainer; if (vmContainer == null) { return; } var vm = vmContainer.ViewModel; if (vm == null) { var frameworkElement = vmContainer as FrameworkElement; if (frameworkElement != null) { vm = frameworkElement.DataContext as IViewModel; } if (vm == null) { return; } } SetBinding(TitleProperty, new Binding { Source = vm, Path = new PropertyPath(\u0026quot;Title\u0026quot;) }); } private void OnCloseButtonClick(object sender, RoutedEventArgs e) { if (!CanClose) { return; } var tabControl = this.FindVisualAncestorByType\u0026lt;TabControl\u0026gt;(); if (tabControl != null) { tabControl.RemoveAndUpdateSelection(DataContext); } } } }  Creating main view (tab control container) Xaml \u0026lt;catel:UserControl x:Class=\u0026quot;TabDemo.Views.MainView\u0026quot; xmlns=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation\u0026quot; xmlns:x=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot; xmlns:controls=\u0026quot;clr-namespace:TabDemo.Controls\u0026quot;\u0026gt; \u0026lt;catel:TabControl x:Name=\u0026quot;tabControl\u0026quot; Margin=\u0026quot;-2\u0026quot; LoadTabItems=\u0026quot;LazyLoading\u0026quot;\u0026gt; \u0026lt;TabControl.ItemTemplate\u0026gt; \u0026lt;DataTemplate\u0026gt; \u0026lt;controls:ClosableTabItem Title=\u0026quot;{Binding ViewModel.Title}\u0026quot; CanClose=\u0026quot;{Binding CanClose}\u0026quot; /\u0026gt; \u0026lt;/DataTemplate\u0026gt; \u0026lt;/TabControl.ItemTemplate\u0026gt; \u0026lt;TabControl.ContentTemplate\u0026gt; \u0026lt;DataTemplate\u0026gt; \u0026lt;ContentControl Content=\u0026quot;{Binding ViewModel, Converter={catel:ViewModelToViewConverter}}\u0026quot; /\u0026gt; \u0026lt;/DataTemplate\u0026gt; \u0026lt;/TabControl.ContentTemplate\u0026gt; \u0026lt;/catel:TabControl\u0026gt; \u0026lt;/catel:UserControl\u0026gt;  Code behind namespace TabDemo.Views { using Catel.IoC; using Services; public partial class MainView { public MainView() { InitializeComponent(); var serviceLocator = this.GetServiceLocator(); var tabService = serviceLocator.ResolveType\u0026lt;ITabService\u0026gt;() as TabService; if (tabService != null) { tabService.SetTabControl(tabControl); } } } }  Useful extension methods Here are some useful extension methods\nITabServiceExtensions namespace TabDemo.Services { using Catel; using Catel.IoC; using Catel.MVVM; using Services; public static class ITabServiceExtensions { public static TabItem Add\u0026lt;TViewModel\u0026gt;(this ITabService tabService, object dataContext = null, bool canClose = false) where TViewModel : IViewModel { Argument.IsNotNull(() =\u0026gt; tabService); var tabItem = CreateTabItem\u0026lt;TViewModel\u0026gt;(tabService, dataContext); tabItem.CanClose = canClose; tabService.Add(tabItem); return tabItem; } public static TabItem AddAndActivate\u0026lt;TViewModel\u0026gt;(this ITabService tabService, object dataContext = null, bool canClose = false) where TViewModel : IViewModel { Argument.IsNotNull(() =\u0026gt; tabService); var tabItem = Add\u0026lt;TViewModel\u0026gt;(tabService, dataContext, canClose); tabService.Activate(tabItem); return tabItem; } public static TabItem CreateTabItem\u0026lt;TViewModel\u0026gt;(this ITabService tabService, object dataContext) where TViewModel : IViewModel { Argument.IsNotNull(() =\u0026gt; tabService); var dependencyResolver = tabService.GetDependencyResolver(); var viewModelFactory = dependencyResolver.Resolve\u0026lt;IViewModelFactory\u0026gt;(); var vm = viewModelFactory.CreateViewModel\u0026lt;TViewModel\u0026gt;(dataContext); return new TabItem(vm); } public static void AddAndActivate(this ITabService tabService, TabItem tabItem) { Argument.IsNotNull(() =\u0026gt; tabService); Argument.IsNotNull(() =\u0026gt; tabItem); tabService.Add(tabItem); tabService.Activate(tabItem); } } }  TabControlExtensions namespace TabDemo.Services { using System.Linq; using System.Windows.Controls; public static class TabControlExtensions { public static bool RemoveAndUpdateSelection(this TabControl tabControl, object tabItem) { var index = tabControl.Items.IndexOf(tabItem); if (index == -1) { return false; } var wasSelected = ReferenceEquals(tabControl.SelectedItem, tabItem); tabControl.Items.RemoveAt(index); if (wasSelected) { var newIndex = index; var newItem = newIndex \u0026lt; tabControl.Items.Count ? tabControl.Items[newIndex] : tabControl.Items.Cast\u0026lt;object\u0026gt;().LastOrDefault(x =\u0026gt; x is TabItem); tabControl.SelectedItem = newItem; } return true; } } }   Using the service Adding a new tab and activate it This adds and activates a new tab which the user is allowed to close:\n_tabService.AddAndActivate\u0026lt;DemoTabViewModel\u0026gt;(null, true);  Closing a tab from withing a view model This closes a tab from within a tab view model. Closing a view model causes the TabItem to raise the Closed event and the TabService will correctly close the tab and update its selection.\nthis.SaveAndCloseViewModelAsync();  Closing a tab from outside a view model This closes the currently active tab:\nvar selectedTab = _tabService.SelectedTab; _tabService.Remove(selectedTab);  Download example Download example\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/validation/",
	"title": "Validation",
	"tags": [],
	"description": "",
	"content": "The ViewModelBase derives from ModelBase, thus all information here also applies to the ViewModelBase\n\rValidation is very important for data objects. Therefore, the ModelBase supports all kinds of different validation:\n Internal validation via the ValidateFields and ValidateBusinessRules methods Validation via data annotations (attributes) External validators using the IValidatorProvider and IValidator interfaces  The validation results are cached and only executed when a property changes (the object becomes dirty) or when the validation is forced.\n\r\rValidation via validate methods\r\r\rValidation via data annotations\r\r\rValidation via special model validators\r\r\rValidation via IValidator\r\r\rUsing the validation context\r\r\rGetting a summary of validation results\r\r\rDeferring validation\r\r\rDifferent types of validation There are two different types of validation in Catel, namely warnings and errors. There are also two flavors of validations, namely field validation and business rule validation.\nOrder of execution of events The order of execution is very important if you want to perform very advanced validation (such as translating validations at the end of each validation sequence).\n IValidator.BeforeValidation OnValidation (raises Validating event) if not already validated IValidator.BeforeValidateFields OnValidatingFields (raises the ValidatingFields event) IValidator.ValidateFields ValidateFields OnValidatedFields (raises the ValidatedFields event) IValidator.AfterValidateFields IValidator.BeforeValidateBusinessRules OnValidatingBusinessRules (raises the ValidatingBusinessRules event) IValidator.ValidateBusinessRules ValidateBusinessRules OnValidatedBusinessRules (raises the ValidatedBusinessRules event) IValidator.AfterValidateBusinessRules end if not already validated OnValidated (raises the Validated event) IValidator.AfterValidation  There are lots of events, and it may seem complex and confusing at first sight. However, all these events give developers the opportunity to hook into the validation sequence at any time.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/views/xaml/validation-controls/",
	"title": "Validation controls",
	"tags": [],
	"description": "",
	"content": " There are some very important controls in Catel which help with visualizing the validation results.\nInfoBarMessageControl Ever wanted to show the details of error messages to your end-users? Then, the InfoBarMessageControl is the control to use! The control shows a summary of all business and field errors provided by bindings on objects that implement the IDataErrorInfo interface.\nIn combination with the WarningAndErrorValidator control, the InfoBarMessageControl can even show field and business warnings for objects that implement the IDataWarningInfo interface that ships with Catel.\n\u0026lt;catel:InfoBarMessageControl\u0026gt; \u0026lt;!-- Actual content here --\u0026gt; \u0026lt;/catel:InfoBarMessageControl\u0026gt;  The InfoBarMessageControl subscribes to the Validation class. This class is responsible for showing the red border around the controls that WPF shows by default. Then, it requests the actual field error property of the data item. This is added to an internal collection of error messages, and therefore the control is able to show the errors of all bindings.\nWhen the WarningAndErrorValidator control is found as a child control, the InfoBarMessageControl also subscribes to the events exposed by the WarningAndErrorValidator. The internal working of that control is explained later in this article. When a data object is subscribed via the WarningAndErrorValidator, the InfoBarMessageControl will also handle the warnings and business errors of that data object.\nWarningAndErrorValidator The WarningAndErrorValidator control is not visible to the end user. The only thing this control takes care of is to forward business errors and warnings to controls that are interested in them. The only control that ships with Catel is the InfoBarMessageControl. Thanks to the WarningAndErrorValidator, the InfoBarMessageControl is able to show business errors and warnings to the end user.\n\u0026lt;catel:WarningAndErrorValidator Source=\u0026quot;{Binding MyObject}\u0026quot; /\u0026gt;  The WarningAndErrorValidator needs to be placed inside an InfoBarMessageControl. The control then subscribes to all property changed events to make sure it receives all change notifications. Then, on every property change, the control checks whether the sender either implements the IDataErrorInfo or IDataWarningInfo interfaces.\nWhen an error or warning is found on the changed property, the control invokes the corresponding events so the InfoBarMessageControl can show the right information. When an error or warning no longer exists in a model, a Removed event is invoked so the InfoBarMessageControl knows that the error or warning should be removed from the summary.\nStyling in DataWindow A InfoBarMessageControl is automatically added to the DataWindow, if you want to use a different style for this InfoBarMessageControl, you must override the default style, add your own InfoBarMessageControl and disable the default InfoBarMessageControl from the DataWindow.\n Create a custom style based on the default style. Change the x:Key from x:Key=\u0026ldquo;{x:Type local:InfoBarMessageControl}\u0026rdquo; to x:Key=\u0026ldquo;yourCustomStyleKey\u0026rdquo; Set the InfoBarMessageControlGenerationMode to None\n /// \u0026lt;summary\u0026gt; /// Initializes a new instance of the \u0026lt;see cref=\u0026quot;DataWindow\u0026quot;/\u0026gt; class. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;viewModel\u0026quot;\u0026gt;The view model to inject.\u0026lt;/param\u0026gt; /// \u0026lt;remarks\u0026gt; /// This constructor can be used to use view-model injection. /// \u0026lt;/remarks\u0026gt; public DataWindow(DataWindowViewModel viewModel) : base(viewModel, DataWindowMode.Custom, null, DataWindowDefaultButton.None, true, InfoBarMessageControlGenerationMode.None) { InitializeComponent(); }  Add a new InfoBarMessageControl as root control to your DataWindow and set the style.\n\u0026lt;catel:InfoBarMessageControl Style=\u0026quot;{DynamicResource yourCustomStyleKey}\u0026quot;\u0026gt; \u0026lt;Grid\u0026gt; \u0026lt;catel:WarningAndErrorValidator Source=\u0026quot;{Binding}\u0026quot; /\u0026gt; //Your content \u0026lt;/Grid\u0026gt; \u0026lt;/catel:InfoBarMessageControl\u0026gt;   "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/view-models/validation-in-view-models/",
	"title": "Validation in view models",
	"tags": [],
	"description": "",
	"content": " Validation is very important to provide both feedback to the user, but also to make sure that no invalid data reaches the model or database. Catel offers several ways to implement validation. All options are described in this part of the documentation.\nValidation in models via mappings The best way is to put validation into a model. Most model objects nowadays implement INotifyPropertyChanged and IDataErrorInfo, the most important classes that are required to use mappings from/to a model inside a view model.\nThe great advantage of mapping properties from/to models automatically using Catel is that you don\u0026rsquo;t have to write lots of plumbing yourself (getting and setting values in the model and view model). However, if the model implements INotifyPropertyChanged and *IDataErrorInfo, Catel also automatically uses the validation from the model. For example, if there is aPersonmodel that checks if theFirstNameandLastName` are entered, why rewrite this validation again in the view model?\nThere are two ways to use automatic mappings.\nMapping via ViewModelToModelAttribute Mapping a model property by using the ViewModelToModelAttribute requires the definition of a model property and a separate property per mapped property. The code below automatically maps the FirstName property.\n/// \u0026lt;summary\u0026gt; /// Gets or sets the person. /// \u0026lt;/summary\u0026gt; [Model] public Person Person { get { return GetValue\u0026lt;Person\u0026gt;(PersonProperty); } private set { SetValue(PersonProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Person property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData PersonProperty = RegisterProperty(\u0026quot;Person\u0026quot;, typeof(Person)); /// \u0026lt;summary\u0026gt; /// Gets or sets the first name. /// \u0026lt;/summary\u0026gt; [ViewModelToModel(\u0026quot;Person\u0026quot;)] public string FirstName { get { return GetValue\u0026lt;string\u0026gt;(FirstNameProperty); } set { SetValue(FirstNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the FirstName property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData FirstNameProperty = RegisterProperty(\u0026quot;FirstName\u0026quot;, typeof(string));  If the Person.FirstName provides an error via the IDataErrorInfo interface, it will automatically be exposed by the view model as well.\nMapping via ExposeAttribute Mapping a property via the ExposeAttribute is even more simple, but has some disadvantages. First, let\u0026rsquo;s talk about the disadvantages before showing the code:\n Catel uses the ICustomTypeDescriptor interface to implement this behavior, and the interface is only available in WPF. The properties are not actually created, so you cannot use them inside your view model as real properties.  In other words, the ExposeAttribute is only very useful if 1) you are using WPF and 2) if the property is not used inside the view model but only declared to protect the model from the outside world. If both of these constraints are true, then the ExposeAttribute is definitely worth taking a look at. The usage is very simple:\n/// \u0026lt;summary\u0026gt; /// Gets or sets the person. /// \u0026lt;/summary\u0026gt; [Model] [Expose(\u0026quot;FirstName\u0026quot;)] [Expose(\u0026quot;MiddleName\u0026quot;)] [Expose(\u0026quot;LastName\u0026quot;)] private Person Person { get { return GetValue\u0026lt;Person\u0026gt;(PersonProperty); } set { SetValue(PersonProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the Person property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData PersonProperty = RegisterProperty(\u0026quot;Person\u0026quot;, typeof(Person));  Simply declare the model property and decorate it with one or multiple ExposeAttribute instances. Not only are the properties automatically available for binding, the view model also checks for errors and automatically maps these as well.\nValidation in view models Until now, we only spoke about automatic validation for validation that was written in the model. However, sometimes it is required to write validation inside the view model as well. One reason might be that the model is a POCO object not providing any validation. Or, sometimes there is a logical error that has nothing to do with the model, but should be shown to the user anyway.\nIn such a case, Catel offers lots of possibilities to write custom validation inside the view model. Below are the possibilities:\n Field warnings Field errors Business rule warnings Business rule errors  The difference between a field and business rule is that a field error or warning is specific for a property. These are returned via IDataErrorInfo[\u0026quot;propertyName\u0026quot;]. A business rule is a rule that applies to multiple fields or even a whole entity. Business rule validations are returned via IDataErrorInfo.Error.\nTo implement validation into a view model, only two methods need to be implemented. Catel clearly separates the field validation from the business rule validation to make it much clearer to the developer what is going on.\nValidating fields To validate fields, one should override the ValidateFields method. Below is an example of field validation on a view model:\n/// \u0026lt;summary\u0026gt; /// Validates the field values of this object. Override this method to enable /// validation of field values. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;validationResults\u0026quot;\u0026gt;The validation results, add additional results to this list.\u0026lt;/param\u0026gt; protected override void ValidateFields(List\u0026lt;IFieldValidationResult\u0026gt; validationResults) { if (!string.IsNullOrEmpty(FirstName)) { validationResults.Add(FieldValidationResult.CreateError(FirstNameProperty, \u0026quot;First name cannot be empty\u0026quot;)); } }  Validating business rules To validate business rules, one should override the ValidateBusinessRules method. Below is an example of business rule validation on a view model:\n/// \u0026lt;summary\u0026gt; /// Validates the field values of this object. Override this method to enable /// validation of field values. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;validationResults\u0026quot;\u0026gt;The validation results, add additional results to this list.\u0026lt;/param\u0026gt; protected override void ValidateBusinessRules(List\u0026lt;IBusinessRuleValidationResult\u0026gt; validationResults) { if (SomeBusinessErrorOccurs) { validationResults.Add(BusinessRuleValidationResult.CreateError(\u0026quot;A business error occurred\u0026quot;)); } }  Translating model validation in the view model Thanks to the validation system in Catel, it is very easy to implement very advanced validation features in view models. The example below shows how to translate errors that are added to a model in the Data Access Layer or validation layer. Assume that the following pseudo code is used to set an error on a model in the DAL:\nSetFieldError(“FirstName”, “FirstNameRequired”);  All errors that are mapped from the model to the view model automatically are available in the validationResults parameter. This way, the error can be easily translated:\n/// \u0026lt;summary\u0026gt; /// Validates the field values of this object. Override this method to enable /// validation of field values. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;validationResults\u0026quot;\u0026gt;The validation results, add additional results to this list.\u0026lt;/param\u0026gt; protected override void ValidateFields(List\u0026lt;IFieldValidationResult\u0026gt; validationResults) { foreach (var validationResult in validationResults) { if (validationResult.Message == \u0026quot;FirstNameRequired\u0026quot;) { validationResult.Message = Properties.Resources.FirstNameRequired; } } }  Of course this is not something you want to actually do in your view model, so you’ll probably have to write a helper class that translates the validation for you. You might or might not like delaying the translation of the model errors to as close as the view, but it shows how extremely powerful the improved validation of Catel is. And if you think a bit about it, wouldn\u0026rsquo;t it be a good idea to delay the translation from the server to the actual client to as close as the view…?\nValidating via annotations Some people like to add validation to their (view)models using annotations (attributes). Catel also supports this method, but adds additional functionality. The idea behind it is that in the end, Catel always provides all errors of an object via the IDataErrorInfo interface. This means that when attribute validation is used, the errors are internally registered and provided in the ValidateFields method. This way, all types of validation that are provided by the .NET framework are gathered into one single location where they can be used by the view.\n/// \u0026lt;summary\u0026gt; /// Gets or sets the first name. /// \u0026lt;/summary\u0026gt; [Required(\u0026quot;This value is required\u0026quot;)] private string FirstName { get { return GetValue\u0026lt;string\u0026gt;(FirstNameProperty); } set { SetValue(FirstNameProperty, value); } } /// \u0026lt;summary\u0026gt; /// Register the FirstName property so it is known in the class. /// \u0026lt;/summary\u0026gt; public static readonly PropertyData FirstNameProperty= RegisterProperty(\u0026quot;FirstName\u0026quot;, typeof(string));  To validate required fields or not to validate required fields at startup Catel does not validate the properties with data annotations at startup. It will only validate the data annotations when properties change or when the view model is about to be saved. This is implemented this way to allow a developer to show required fields with an asterisk (*) instead of errors. If a developer still wants to initially display errors, only a single call has to be made in the constructor:\nValidate(true, false);  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/services/vibrate-service/",
	"title": "VibrateService",
	"tags": [],
	"description": "",
	"content": " The IVibrateService allows a developer to start and stop vibration of the device via a service.\nStarting vibration To start the vibration, use the following code (will vibrate for 250 ms). Note that the time span must be between 0 and 5 seconds.\nvar dependencyResolver = this.GetDependencyResolver(); var vibrateService = dependencyResolver.Resolve\u0026lt;IVibrateService\u0026gt;(); vibrateService.Start(new TimeSpan(0, 0, 0, 0, 250);  Stopping the vibration earlier than initially planned By default, the vibration stops automatically after the specified time span has passed. However, it is possible to stop the vibration manually.\nvar dependencyResolver = this.GetDependencyResolver(); var vibrateService = dependencyResolver.Resolve\u0026lt;IVibrateService\u0026gt;(); vibrateService.Stop();  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/view-models/",
	"title": "View models",
	"tags": [],
	"description": "",
	"content": "The view model is a very important part in the MVVM pattern. The view model is responsible for the actual logic that ensures separation of concerns, but also allows unit testing on the view logic (which is implemented in the view model) without actually instantiating the views.\nLike almost every other MVVM framework, the base class for all View-Models is ViewModelBase. This base class is derived from the ModelBase class explained earlier in this article, which gives the following advantages:\n Dependency property a-like property registration; Automatic change notification; Support for field and business errors.  Because the class derives from ModelBase, you can simply add field and business errors that are automatically being reflected to the UI. Writing View-Models has never been so easy!\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/view-models/advanced/",
	"title": "View models (advanced)",
	"tags": [],
	"description": "",
	"content": "\r\rControlling the instantiation of view models\r\r\rExposing properties of a model automatically\r\r\rKeeping view models alive\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/services/view-export-service/",
	"title": "ViewExportService",
	"tags": [],
	"description": "",
	"content": " The IViewExportService allows a developer to export a specific view that belongs to a view model to the clipboard, a file or a printer.\nExporting a view To export a view, use the following code:\nvar dependencyResolver = this.GetDependencyResolver(); var viewExportService = dependencyResolver.Resolve\u0026lt;IViewExportService\u0026gt;(); viewExportService.Export(myViewModel, ExportMode.File);  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/locators-naming-conventions/view-locator/",
	"title": "ViewLocator",
	"tags": [],
	"description": "",
	"content": " The IViewLocator class is responsible for resolving the right views for a view model. Before Catel 3.0, the IUIVisualizerService was responsible for resolving the view, but this responsibility is now taken over by the IViewLocator. The UIVisualizerService internally uses the IViewLocator to resolve the views. Resolving by naming convention It is possible to resolve views using the IViewLocator. Then you can use the ResolveView method to resolve the view based on the type of the view model.\nFor example, the following view model:\nCatel.Examples.ViewModels.MyViewModel  will be resolved as:\nCatel.Examples.Views.MyView  Manually resolving a view using naming convention To manually resolve a view using naming convention, use the following code:\nvar viewLocator = ServiceLocator.Default.ResolveType\u0026lt;IViewLocator\u0026gt;(); var viewType = viewLocator.ResolveView(typeof(MyViewModel));  Customizing naming conventions By default, the IViewLocator uses the following naming conventions to resolve views:\n [UP].Views.[VM] [UP].Views.[VM]View [UP].Views.[VM]Control [UP].Views.[VM]Window [UP].Views.[VM]Page [UP].Views.[VM]Activity [UP].Views.[VM]Fragment [UP].Controls.[VM] [UP].Controls.[VM]Control [UP].Pages.[VM] [UP].Pages.[VM]Page [UP].Windows.[VM] [UP].Windows.[VM]Window [AS].Views.[VM] [AS].Views.[VM]View [AS].Views.[VM]Control [AS].Views.[VM]Page [AS].Views.[VM]Window [AS].Views.[VM]Activity [AS].Views.[VM]Fragment [AS].Controls.[VM] [AS].Controls.[VM]Control [AS].Pages.[VM] [AS].Pages.[VM]Page [AS].Windows.[VM] [AS].Windows.[VM]Window [AS].Activities.[VM] [AS].Activities.[VM]Activity [AS].Fragments.[VM] [AS].Fragments.[VM]Fragment [AS].UI.Views.[VM] [AS].UI.Views.[VM]View [AS].UI.Views.[VM]Control [AS].UI.Views.[VM]Page [AS].UI.Views.[VM]Window [AS].UI.Views.[VM]Activity [AS].UI.Views.[VM]Fragment [AS].UI.Controls.[VM] [AS].UI.Controls.[VM]Control [AS].UI.Pages.[VM] [AS].UI.Pages.[VM]Page [AS].UI.Windows.[VM] [AS].UI.Windows.[VM]Window [AS].UI.Activities.[VM] [AS].UI.Activities.[VM]Activity [AS].UI.Activities.[VM]Fragment [CURRENT].[VM]View [CURRENT].[VM]Control [CURRENT].[VM]Page [CURRENT].[VM]Window [CURRENT].[VM]Activity [CURRENT].[VM]Fragment  For more information about naming conventions, see Naming conventions\n\rHowever, it is possible to add or remove new naming conventions to support your own naming convention. For example, to add a new naming convention for a different assembly, use this code:\nvar viewLocator = ServiceLocator.Default.ResolveType\u0026lt;IViewLocator\u0026gt;(); viewLocator.NamingConventions.Add(\u0026quot;MyCustomAssembly.Views.[VM]View\u0026quot;);  Registering custom views Sometimes, a class doesn\u0026rsquo;t follow a naming convention (for whatever reason possible). In such a case, it is possible to register a mapping manually using the following code:\nvar viewLocator = ServiceLocator.Default.ResolveType\u0026lt;IViewLocator\u0026gt;(); viewLocator.Register(typeof(MyViewModelNotFollowingNamingConvention), typeof(MyView));  Using a custom ViewLocator If you want to have total freedom to determine which view is provided per view model (maybe there are other services that have an impact on this), it is possible to create a custom IViewLocator implementation. Then the only thing to do is to register it using the following code:\nServiceLocator.Default.RegisterType\u0026lt;IViewLocator, MyViewLocator\u0026gt;();  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/locators-naming-conventions/view-model-locator/",
	"title": "ViewModelLocator",
	"tags": [],
	"description": "",
	"content": " Starting with Catel 3.0, there are several ways to hook up a view model to the view. When a view is constructed, an MVVM behavior is added to the view. Thanks to these MVVM behaviors, it is possible to use exactly the same logic on 3rd party controls.\nNote that the while using the conventions, magic words such as \u0026ldquo;View\u0026rdquo;, \u0026ldquo;Control\u0026rdquo;, \u0026ldquo;UserControl\u0026rdquo;, \u0026ldquo;Window\u0026rdquo; and \u0026ldquo;Page\u0026rdquo; will be stripped from the view name while locating the view model type\n\rResolving by naming convention If the GetViewModelType method returns null (which is the default behavior), the view will resolve the IViewModelLocator from the ServiceLocator. Then it will use the ResolveViewModel method to resolve the view model based on the type of the view.\nFor example, the following view:\nCatel.Examples.Views.MyView  will be resolved as:\nCatel.Examples.ViewModels.MyViewModel  Manually resolving a view model using naming convention To manually resolve a view model using naming convention, use the following code:\nvar viewModelLocator = ServiceLocator.Default.ResolveType\u0026lt;IViewModelLocator\u0026gt;(); var viewModelType = viewModelLocator.ResolveViewModel(typeof(MyView));  Customizing naming conventions By default, the IViewModelLocator uses the following naming conventions to resolve view models:\n [UP].ViewModels.[VW]ViewModel [UP].ViewModels.[VW]ControlViewModel [UP].ViewModels.[VW]WindowViewModel [UP].ViewModels.[VW]PageViewModel [UP].ViewModels.[VW]ActivityViewModel [UP].ViewModels.[VW]FragmentViewModel [AS].ViewModels.[VW]ViewModel [AS].ViewModels.[VW]ControlViewModel [AS].ViewModels.[VW]WindowViewModel [AS].ViewModels.[VW]PageViewModel [AS].ViewModels.[VW]ActivityViewModel [AS].ViewModels.[VW]FragmentViewModel [CURRENT].[VW]ViewModel [CURRENT].[VW]ControlViewModel [CURRENT].[VW]WindowViewModel [CURRENT].[VW]PageViewModel [CURRENT].[VW]ActivityViewModel [CURRENT].[VW]FragmentViewModel  For more information about naming conventions, see Naming conventions\n\rHowever, it is possible to add or remove new naming conventions to support your own naming convention. For example, to add a new naming convention for a different assembly, use this code:\nvar viewModelLocator = ServiceLocator.Default.ResolveType\u0026lt;IViewModelLocator\u0026gt;(); viewModelLocator.NamingConventions.Add(\u0026quot;MyCustomAssembly.ViewModels.[VW]ViewModel\u0026quot;);  Registering custom view models Sometimes, a class doesn\u0026rsquo;t follow a naming convention (for whatever reason possible). In such a case, it is possible to register a mapping manually using the following code:\nvar viewModelLocator = ServiceLocator.Default.ResolveType\u0026lt;IViewModelLocator\u0026gt;(); viewModelLocator.Register(typeof(MyViewNotFollowingNamingConvention), typeof(MyViewModel));  Using a custom ViewModelLocator If you want to have total freedom to determine which view model is provided per view (maybe there are other services that have an impact on this), it is possible to create a custom IViewModelLocator implementation. Then the only thing to do is to register it using the following code:\nServiceLocator.Default.Register\u0026lt;IViewModelLocator, MyViewModelLocator\u0026gt;();  Using a generic implementation of the view Last but not least, it is still possible to use the \u0026ldquo;old-fashioned\u0026rdquo; way by using the generic view bases. These classes directly derive from the non-generic views and return the generic type definition of the view model using the GetViewModelType method.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/views/",
	"title": "Views",
	"tags": [],
	"description": "",
	"content": "\r\rXAML\r\r\rXamarin.Android\r\r\rXamarin.Forms\r\r\rXamarin.iOS\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/preventing-memory-leaks/weak-events/",
	"title": "Weak events",
	"tags": [],
	"description": "",
	"content": " You have probably heard about weak events before. This documentation is not about the issue of the cause of weak events, there are lots of articles about that. This documentation writes about the solution, which is the WeakEventListener. Shortly said, when you do this in every class (just for the sake of explaining the problem, don’t start thinking this code has no business value):\nvar log = Log.Instance; log.LogReceived += OnLogReceived;  As you can see, the log is a singleton, so there is only one living instance of the Log class. It will probably live as long as the app itself. Now you might be thinking: what’s wrong with this code? Nothing, until the app starts growing and growing and your users start complaining about memory issues.\nWhat happens here is that you subscribe to the LogReceived event of the Log class. This subscription contains 2 things:\n What class do I need to call (null for static, otherwise the instance of the class) What method do I need to call  So, in fact now the Log class knows about the instance of the class that just subscribed to it and holds a reference to it (how else can it deliver the event, if it doesn’t know the address). Thus, the classes that subscribe to the Log and that do no unsubscribe will never be collected by the garbage collection.\nOpen instance delegates The key feature behind this implementation of the weak event pattern is open instance delegates. You are probably wondering: what the hell are open instance delegates? Well, good question, and I will try to explain it. An open instance delegate is just as a regular delegate, it points to the method of a specific class, but the biggest difference is that it does not bind to a specific instance. This means that it can be described as: I know you live on that street (method), but I have not clue in which city (instance) that is. The instance can be specified later. The delegate for a regular event handler looks like this:\npublic delegate void OpenInstanceHandler(TTarget @this, object sender, TEventArgs e);  The @this is nothing special, it allows us to use the this keyword so everyone knows that the target should be passed there. As you can see, it contains 3 parameters. The first one is the target (the city), the second and third parameters are the parameters of the regular event handler.\nWeak references The weak event listener creates an open instance delegate and stores both the source and target in a WeakReference class. As soon as one of these references are no longer valid, the class is unbound. The good side of this approach is that this weak event listener does not leak when the event never fires.\nWhat does it support The following use cases are supported:\n Instance source (event) and instance target (handler) Static source (event) and instance target (handler) Instance source (event) and static target (handler)  So, actually it handles everything that can cause a memory leak via event subscriptions!\nWhat does it not support and what are the downsides This weak event listener follows the rules of the .NET framework. So, it cannot subscribe to private events. If you want private events, do your own hacking (the source is available, you only have to change the DefaultEventBindingFlags at the top of the class).\nThere are a few downsides about using a weak event listeners in general:\n It’s notation is ugly, the “original” .NET way looks way better You have to name the event by string, that sucks (if you know a better way, contact me!) It can only handle events with a handler of EventHandler\u0026lt;TEventArgs\u0026gt; You become a lazy developer not caring about subscriptions  How to use There are 4 categories of event subscriptions, all described below.\nInstance to instance This is the situation where an instance target subscribes to an instance event. The events are unbound as soon as either the target or source are collected.\nvar source = new EventSource(); var listener = new EventListener(); var weakEventListener = WeakEventListener\u0026lt;EventListener, EventSource, EventArgs\u0026gt;.SubscribeToWeakEvent(listener, source, \u0026quot;PublicEvent\u0026quot;, listener.OnPublicEvent);  Instance to static This is the situation where a static target subscribes to an instance event. The events are unbound as soon as the source is collected.\nvar source = new EventSource(); var weakEventListener = WeakEventListener\u0026lt;EventListener, EventSource, EventArgs\u0026gt;.SubscribeToWeakEvent(null, source, \u0026quot;PublicEvent\u0026quot;, EventListener.OnEventStaticHandler);  Static to instance This is the situation where an instance target subscribes to a static event. The events are unbound as soon as the target is collected.\nvar listener = new EventListener(); var weakEventListener = WeakEventListener\u0026lt;EventListener, EventSource, EventArgs\u0026gt;.SubscribeToWeakEvent(listener, null, \u0026quot;StaticEvent\u0026quot;, listener.OnPublicEvent);  Static to static This is not supported because you shouldn’t be using a weak event listener here. Static events with static event handlers simply cannot cause memory leaks because both the source and the target have no instance. However, it might be possible that you subscribe to an event too many times and the event fires too many times. But again, no memory issues here.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/views/xaml/window-and-datawindow/",
	"title": "Window and DataWindow",
	"tags": [],
	"description": "",
	"content": " Introduction to the Window The Window is a simplified class representing the same logic as the regular System.Windows.Window but with the binding support of Catel.\nIntroduction to the DataWindow When developing software in XAML, most developers always need the following three types of windows:\n OK / Cancel buttons for data windows; OK / Cancel / Apply buttons for application settings / options; Close button on windows for action windows.  Creating these windows is just boring and the steps are always the same:\nThe DataWindow class makes it much easier to create these basic windows, simply by specifying the mode of the Window. By using this window, you can concentrate on the actual implementation and you don’t have to worry about the implementation of the buttons itself, which saves you time! Using the DataWindow in MVVM The easiest object to use with the MVVM Framework is the DataWindow class. The DataWindow takes fully care of the construction of the view models and the validation of the view models.\nThe usage of the DataWindow class is very simple, once you know how to do it. First of all, you will have to specify the base class in the xaml file like shown below:\n\u0026lt;catel:DataWindow x:Class=\u0026quot;Catel.Articles._03___MVVM.Examples.DataWindow.PersonWindow\u0026quot; xmlns=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation\u0026quot; xmlns:x=\u0026quot;http://schemas.microsoft.com/winfx/2006/xaml\u0026quot; xmlns:catel=\u0026quot;http://schemas.catelproject.com\u0026quot;\u0026gt; \u0026lt;!-- Content left out for the sake of simplicity --\u0026gt; \u0026lt;/catel:DataWindow\u0026gt;  As you can see, one thing has changed in regard to a “normal” window definition:\n The type definition has changed from Window to catel:DataWindow;  The code-behind is even simpler:\n/// \u0026lt;summary\u0026gt; /// Interaction logic for PersonWindow.xaml /// \u0026lt;/summary\u0026gt; public partial class PersonWindow : DataWindow { /// \u0026lt;summary\u0026gt; /// Initializes a new instance of the \u0026lt;see cref=\u0026quot;PersonWindow\u0026quot;/\u0026gt; class. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026quot;viewModel\u0026quot;\u0026gt;The view model.\u0026lt;/param\u0026gt; public PersonWindow(PersonViewModel viewModel) : base(viewModel) { InitializeComponent(); } }  The code above is everything you will need when using the MVVM Framework of Catel. The easiest way to create a new DataWindow is to use item templates\nConstruction of view models There are multiple ways to construct a window with a view model. There are three options that you have to construct a view model:\n Constructor with view model This is the best option you can use. This way, it is possible to inject view models into the data window. Constructor with model It is possible to save a developer from creating a view model manually by accepting a model as input. Then, the data window will have to construct the view model manually and pass it through to its base constructor. Empty constructor If you use an empty constructor, the developer will have to set the data context manually. This something you really should avoid. But hey, it’s all up to you.  Automatic validation The cool thing about the DataWindow is that it automatically wraps the content that a developer defines into an InfoBarMessageControl. This way, errors and warnings are shown at the top of the window. Another feature of the DataWindow is that it automatically creates a WarningAndErrorValidator control and sets the view model as source. This way, all the warnings of the view model are also shown in the InfoBarMessageControl. In other words: you don’t have to do anything to implementation validation, except for actually setting the warnings and errors in your view model. And if the validation takes place in the model, you can use the ViewModelToModelAttribute so you don’t have to worry about that either.\nCustomizing the buttons It is possible to use custom buttons and still be able to use the DataWindow.\n First, use the base constructor to specify that you want to use custom mode.  /// \u0026lt;summary\u0026gt; /// Upload window. /// \u0026lt;/summary\u0026gt; public class UploadWindow : DataWindow { public UploadWindow() : base(DataWindowMode.Custom) { InitializeComponent(); } }   Add the custom buttons. This must be done before the call to InitializeComponent.  /// \u0026lt;summary\u0026gt; /// Upload window. /// \u0026lt;/summary\u0026gt; public class UploadWindow : DataWindow { public UploadWindow() : base(DataWindowMode.Custom) { AddCustomButton(new DataWindowButton(\u0026quot;Upload\u0026quot;, \u0026quot;Upload\u0026quot;)); InitializeComponent(); } }  Styling the DataWindow Starting with Catel 2.4, the DataWindow has its own styles. These are located in DataWindow.generic.xaml. Below is a table that contains the available styles and a short description.\nStyle key|Description -|- DataWindowStyle|The actual window style which can be used to decorate or customize the window itself. DataWindowButtonContainerStyle|The container that is used for the buttons. This is a WrapPanel, so the styles must match that. DataWindowButtonStyle|The style for the buttons. By default, the buttons are right aligned and have a fixed size.\nClosing the DataWindow with the Escape key The DataWindow can be configured to close with the Escape key using the CanCloseUsingEscape dependency property (default true). This is useful for when DataWindow is used in e.g. dialogs. When used as the main window, it is advised to set CanCloseUsingEscape=False, as the user can inadvertedly close the application by pressing the Escape key.\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/views/xaml/",
	"title": "XAML",
	"tags": [],
	"description": "",
	"content": "\r\rXAML - advanced\r\r\rXAML - external controls\r\r\rCustomizing DataContext subscription behavior\r\r\rImproving performance by defining the view model grid manually\r\r\rUserControl\r\r\rUserControl Resources\r\r\rValidation controls\r\r\rWindow and DataWindow\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/views/xaml/advanced/",
	"title": "XAML - advanced",
	"tags": [],
	"description": "",
	"content": "\r\rDataWindow - under the hood\r\r\rUserControl - under the hood\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/views/xaml/external-controls/",
	"title": "XAML - external controls",
	"tags": [],
	"description": "",
	"content": "\r\rUsing a custom control\r\r\rUsing a custom window\r\r\r"
},
{
	"uri": "http://docs.catelproject.com/5.1/reference/catel.mvvm/catel/xamarin/",
	"title": "Xamarin",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/views/xamarin-android/",
	"title": "Xamarin.Android",
	"tags": [],
	"description": "",
	"content": " Note that this guide is not a full Android development guide. It will cover the basics though.\n\rBindings Unfortunately Android does not have a powerful binding system like XAML does. Therefore it is required to manually synchronize data from the view to the view model and back or to use the binding system in Catel.\nBinding properties [Activity] public class SecondActivity : Catel.Android.App.Activity { private PersonView _personView; protected override void OnCreate(Bundle bundle) { base.OnCreate(bundle); // Set our view from the \u0026quot;main\u0026quot; layout resource SetContentView(Resource.Layout.Page_Second); _personView = FragmentManager.FindFragmentById\u0026lt;PersonView\u0026gt;(Resource.Id.PersonView); } protected override void AddBindings(BindingContext bindingContext, IViewModel viewModel) { var vm = (SecondViewModel) viewModel; bindingContext.AddBinding(() =\u0026gt; vm.Title, () =\u0026gt; Title); bindingContext.AddBinding(() =\u0026gt; vm.Person, () =\u0026gt; _personView.DataContext); } }  Binding properties with events public class PersonView : Catel.Android.App.Fragment { private EditText _firstNameEditText; private EditText _lastNameEditText; private TextView _lastNameMirrorTextView ; public override View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { var inflateResult = inflater.Inflate(Resource.Layout.Fragment_Person, container, false); return inflateResult; } public override void OnResume() { _firstNameEditText = Activity.FindViewById\u0026lt;EditText\u0026gt;(Resource.Id.firstNameText); _lastNameEditText = Activity.FindViewById\u0026lt;EditText\u0026gt;(Resource.Id.lastNameText); _lastNameMirrorTextView = Activity.FindViewById\u0026lt;TextView\u0026gt;(Resource.Id.lastNameMirrorTextView); base.OnResume(); } protected override void AddBindings(BindingContext bindingContext, IViewModel viewModel) { var vm = (PersonViewModel)viewModel; bindingContext.AddBinding(() =\u0026gt; vm.FirstName, () =\u0026gt; _firstNameEditText.Text).AddTargetEvent(\u0026quot;TextChanged\u0026quot;); bindingContext.AddBinding(() =\u0026gt; vm.LastName, () =\u0026gt; _lastNameEditText.Text).AddTargetEvent(\u0026quot;TextChanged\u0026quot;); bindingContext.AddBinding(() =\u0026gt; vm.LastName, () =\u0026gt; _lastNameMirrorTextView.Text, BindingMode.OneWay); } }  Binding properties with converters protected override void AddBindings(BindingContext bindingContext, IViewModel viewModel) { var vm = (MainViewModel)viewModel; bindingContext.AddBindingWithConverter\u0026lt;ClicksConverter\u0026gt;(() =\u0026gt; vm.Counter, () =\u0026gt; _testButton.Text, BindingMode.OneWay); }  Binding commands  protected override void AddBindings(BindingContext bindingContext, IViewModel viewModel) { var vm = (MainViewModel)viewModel; bindingContext.AddCommandBinding(_testButton, \u0026quot;Click\u0026quot;, vm.RunCommand); }  "
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/views/xamarin-forms/",
	"title": "Xamarin.Forms",
	"tags": [],
	"description": "",
	"content": "This documentation still needs to be written, feel free to help us out!\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-mvvm/views/xamarin-ios/",
	"title": "Xamarin.iOS",
	"tags": [],
	"description": "",
	"content": "This documentation still needs to be written, feel free to help us out!\n"
},
{
	"uri": "http://docs.catelproject.com/5.1/catel-core/serialization/supported-serializers/xml/",
	"title": "Xml",
	"tags": [],
	"description": "",
	"content": "The xml serializer uses the DataContractSerializer from .NET to serialize the object graphs.\n"
}]
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Catel.Threading on Catel docs</title>
    <link>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/</link>
    <description>Recent content in Catel.Threading on Catel docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AsyncLock</title>
      <link>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/asynclock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/asynclock/</guid>
      <description>Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class AsyncLock  A mutual exclusion lock that is compatible with async. Note that this lock is recursive!
Remarks This code originally comes from AsyncEx: https://github.com/StephenCleary/AsyncEx
Fields Constructors AsyncLock() Creates a new async-compatible mutual exclusion lock.</description>
    </item>
    
    <item>
      <title>AsyncWaitQueueExtensions</title>
      <link>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/asyncwaitqueueextensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/asyncwaitqueueextensions/</guid>
      <description>Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class AsyncWaitQueueExtensions  Provides extension methods for wait queues.
Remarks This code originally comes from AsyncEx: https://github.com/StephenCleary/AsyncEx
Methods EnqueueAsync(IAsyncWaitQueuethis, object syncObject, CancellationToken token) Creates a new entry and queues it to this wait queue.</description>
    </item>
    
    <item>
      <title>AwaitableDisposable</title>
      <link>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/awaitabledisposable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/awaitabledisposable/</guid>
      <description>Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public struct AwaitableDisposable&amp;lt;T&amp;gt; : ValueType where T : IDisposable  Base types ValueType
An awaitable wrapper around a task whose result is disposable. The wrapper is not disposable, so this prevents usage errors like &amp;ldquo;using (MyAsync())&amp;rdquo; when the appropriate usage should be &amp;ldquo;using (await MyAsync())&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>DefaultAsyncWaitQueue</title>
      <link>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/defaultasyncwaitqueue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/defaultasyncwaitqueue/</guid>
      <description>Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class DefaultAsyncWaitQueue&amp;lt;T&amp;gt; : IAsyncWaitQueue&amp;lt;T, T&amp;gt;  Base types
IAsyncWaitQueue
The default wait queue implementation, which uses a double-ended queue.
Type Parameters T The type of the results. If this isn&amp;rsquo;t needed, use.</description>
    </item>
    
    <item>
      <title>IAsyncWaitQueue</title>
      <link>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/iasyncwaitqueue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/iasyncwaitqueue/</guid>
      <description>Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public interface IAsyncWaitQueue&amp;lt;T, T&amp;gt;  A collection of cancelable instances. Implementations must be threadsafe must work correctly if the caller is holding a lock.
Type Parameters T The type of the results. If this isn&amp;rsquo;t needed, use.</description>
    </item>
    
    <item>
      <title>ReaderWriterLockSlimExtensions</title>
      <link>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/readerwriterlockslimextensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/readerwriterlockslimextensions/</guid>
      <description>Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class ReaderWriterLockSlimExtensions  Provides extensions for.
Methods PerformRead(ReaderWriterLockSlim lockSlim, Action criticalOperation) Performs operation that requires read access to shared resource.
Parameters    Name Description     lockSlim The reader-writer lock.</description>
    </item>
    
    <item>
      <title>SynchronizationContext</title>
      <link>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/synchronizationcontext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/synchronizationcontext/</guid>
      <description>Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class SynchronizationContext  Provides a synchronization context to acquire or release exclusive lock of an object and execute thread safe code.
Remarks Be aware when you use this class. If it is improperly used could provoke dead locks.</description>
    </item>
    
    <item>
      <title>SynchronizationContextExtensions</title>
      <link>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/synchronizationcontextextensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/synchronizationcontextextensions/</guid>
      <description>Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class SynchronizationContextExtensions  Extension methods for the SynchronizationContext.
Methods AcquireScope(SynchronizationContext synchronizationContext) Acquires the scope of the SynchronizationContext. When the token is disposed, the context is released.
Parameters    Name Description     synchronizationContext The synchronization context.</description>
    </item>
    
    <item>
      <title>TaskExtensions</title>
      <link>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/taskextensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/taskextensions/</guid>
      <description>Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class TaskExtensions  Class TaskExtensions.
Methods WaitAndUnwrapException(Task task) Waits for the task to complete, unwrapping any exceptions.
Parameters    Name Description     task The task. May not benull.</description>
    </item>
    
    <item>
      <title>TaskHelper</title>
      <link>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/taskhelper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/taskhelper/</guid>
      <description>Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class TaskHelper  Helper class for tasks.
Fields DefaultConfigureAwaitValue The default configure await value.
Properties Canceled A that has been canceled.
Completed A that has been completed.
Methods Run(Action action, bool configureAwait, CancellationToken cancellationToken) Runs the specified function using Task.</description>
    </item>
    
    <item>
      <title>TaskShim</title>
      <link>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/taskshim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/taskshim/</guid>
      <description>Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class TaskShim  Task wrapper so it works on all platforms.
Remarks This code originally comes from https://github.com/StephenCleary/AsyncEx/ (MIT license).
Methods Delay(TimeSpan dueTime) Starts a Task that will complete after the specified due time.</description>
    </item>
    
    <item>
      <title>Timeout</title>
      <link>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/timeout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/timeout/</guid>
      <description>Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public static class Timeout  The timeout class.
Fields Infinite A constant used to specify an infinite waiting period, for threading methods that accept an Int32 parameter.
InfiniteTimeSpan A constant used to specify an infinite waiting period, for threading methods that accept an TimeSpan parameter.</description>
    </item>
    
    <item>
      <title>Timer</title>
      <link>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/timer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/timer/</guid>
      <description>Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public class Timer : IDisposable  Base types IDisposable
Timer for WinRT since WinRT only provides the DispatcherTimer which cannot be used outside the UI thread.
Fields Constructors Timer() Initializes a new instance of the Timer class.</description>
    </item>
    
    <item>
      <title>TimerCallback</title>
      <link>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/timercallback/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.0/reference/catel.core/catel/threading/timercallback/</guid>
      <description>    Name Value     Assembly Catel.Core   Namespace Catel.Threading   Available on .NET Framework 4.5, .NET Framework 4.6, Portable Class Libraries, Xamarin - Android, Xamarin - iOS    public delegate TimerCallback : MulticastDelegate  Base types MulticastDelegate
Timer callback delegate.
Parameters    Name Description     state The state.    </description>
    </item>
    
  </channel>
</rss>
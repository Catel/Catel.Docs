<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MVVM on Catel docs</title>
    <link>https://docs.catelproject.com/5.11/tips-tricks/mvvm/</link>
    <description>Recent content in MVVM on Catel docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://docs.catelproject.com/5.11/tips-tricks/mvvm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Finding the view of a view model</title>
      <link>https://docs.catelproject.com/5.11/tips-tricks/mvvm/finding-view-of-view-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.11/tips-tricks/mvvm/finding-view-of-view-model/</guid>
      <description>Sometimes it is required to find the view of a view model. For example, this comes in handy when implementing drag and drop where you only want to support code via view models.
Internally, Catel uses with the IViewManager for this. As soon as a view is loaded (via the Loaded event), the view is registered to the view manager. The view manager will keep an eye on the events of the view and notice view model changes.</description>
    </item>
    
    <item>
      <title>Requery commands automatically using CommandManager</title>
      <link>https://docs.catelproject.com/5.11/tips-tricks/mvvm/requery-commands-automatically/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.11/tips-tricks/mvvm/requery-commands-automatically/</guid>
      <description>For performance reasons, Catel no longer automatically subscribes to the CommandManager to invalidate the state (saves a lot of CanExecute calls). If you want this behavior back, you can create a custom class that subscribes to the command manager and invalidates the commands for you.
This was removed for a reason (performance), so this is not the recommended approach. But this allows you to get back the old behavior.  To use this class, instantiate it and register it in theÂ ServiceLocator so it stays alive.</description>
    </item>
    
    <item>
      <title>Using a tabbed interface with MVVM</title>
      <link>https://docs.catelproject.com/5.11/tips-tricks/mvvm/using-tabbed-interface-with-mvvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.11/tips-tricks/mvvm/using-tabbed-interface-with-mvvm/</guid>
      <description>A common scenario in WPF is to use a tabbed interface to give the user the option to use multiple main views in a tabbed environment. This example shows how to implement this correctly with both closable and non-closable tabs.
For this example, we will have a few requirements:
 Be able to add, close and activate tabs via a service Be able to specify whether a tab can be closed by the end-user  Creating the model describing a tab item First of all, we need a model describing a tab item so we can interact with a service.</description>
    </item>
    
    <item>
      <title>Using compiled bindings</title>
      <link>https://docs.catelproject.com/5.11/tips-tricks/mvvm/using-compiled-bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.11/tips-tricks/mvvm/using-compiled-bindings/</guid>
      <description>A common scenario in UWP is to use x:Bind instead of Binding. This requires knowledge about the actual type of the view model.
There are 2 options to support this.
Use the VM property Catel by default exposes the ViewModel property as IViewModel. However, there is a reserved VM property you can use that is typed:
public sealed partial class BikeSummaryView { public BikeSummaryView() { InitializeComponent(); } internal BikeSummaryViewModel VM { get { return ViewModel as BikeSummaryViewModel; } } }  Since this is a reserved keyword, Catel will automatically take care of the change notifications and x:Bind can be used directly against VM:</description>
    </item>
    
  </channel>
</rss>
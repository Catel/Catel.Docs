<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Log listeners on Catel docs</title>
    <link>https://docs.catelproject.com/5.9/catel-core/logging/log-listeners/</link>
    <description>Recent content in Log listeners on Catel docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://docs.catelproject.com/5.9/catel-core/logging/log-listeners/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Batch log listeners</title>
      <link>https://docs.catelproject.com/5.9/catel-core/logging/log-listeners/batch-log-listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.9/catel-core/logging/log-listeners/batch-log-listeners/</guid>
      <description>A batch log listener is a class implementing the IBatchLogListener interface (and most probably deriving from BatchLogListenerBase). This interface adds a Flush method which allows a listener to be flushed. The advantage is that when a log listener writes to a slower persistence store, it will not have to access this expensive resource for every log event, but by batches.
Flushing all listeners When using batch log listeners, it is very important to flush the log listeners at important events such as application unhandled exceptions or when the application exits.</description>
    </item>
    
    <item>
      <title>ConsoleLogListener</title>
      <link>https://docs.catelproject.com/5.9/catel-core/logging/log-listeners/console-log-listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.9/catel-core/logging/log-listeners/console-log-listener/</guid>
      <description>The ConsoleLogListener writes messages to the console with automatic colors:
To add it, use the code below:
var logListener = new ConsoleLogListener(); logListener.IgnoreCatelLogging = true; // TODO: Customize options LogManager.AddListener(logListener);  </description>
    </item>
    
    <item>
      <title>DebugLogListener</title>
      <link>https://docs.catelproject.com/5.9/catel-core/logging/log-listeners/debug-log-listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.9/catel-core/logging/log-listeners/debug-log-listener/</guid>
      <description>The DebugLogListener is the best debugging tool there is during development. It shows you insight in your application in the output window of Visual Studio, even from messages generated by Catel. To use it, use this:
#if DEBUG LogManager.AddDebugListener(); #endif  For some platforms (like UWP), Catel uses Debug.WriteLine which gets removed in a release build. For such platforms, it is recommended to create a customer log listener as shown below.</description>
    </item>
    
    <item>
      <title>Event Tracing for Windows (ETW)</title>
      <link>https://docs.catelproject.com/5.9/catel-core/logging/log-listeners/event-tracing-for-windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.9/catel-core/logging/log-listeners/event-tracing-for-windows/</guid>
      <description>Starting with version 4.0.0, Catel supports Event Tracking for Windows (ETW) out of the box. To add a log listener, use the code below:
var logListener = new EtwLogListener(); logListener.IgnoreCatelLogging = true; // TODO: Customize options LogManager.AddListener(logListener);  </description>
    </item>
    
    <item>
      <title>EventLogListener</title>
      <link>https://docs.catelproject.com/5.9/catel-core/logging/log-listeners/event-log-listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.9/catel-core/logging/log-listeners/event-log-listener/</guid>
      <description>The EventLogListener allow to write log data to the system event log. To add it, use the code below:
var logListener = new EventLogListener(); logListener.IgnoreCatelLogging = true; // TODO: Customize options LogManager.AddListener(logListener);  This log listener is currently available only for the full .net framework
</description>
    </item>
    
    <item>
      <title>FileLogListener</title>
      <link>https://docs.catelproject.com/5.9/catel-core/logging/log-listeners/file-log-listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.9/catel-core/logging/log-listeners/file-log-listener/</guid>
      <description>Catel also supports very lightweight listeners to allow external logging libraries to hook on. To create a listener, first create a new class that implements the ILogListener interface. Next, register it in the LogManager using the LogManager.AddListener method.
The ILogListener has a separate method for each LogEvent, but also has a shared method that is called for each log event. For example, if a debug message is written to the log, both the Write and Debug methods are invoked on the ILogListener.</description>
    </item>
    
    <item>
      <title>RollingInMemoryLogListener</title>
      <link>https://docs.catelproject.com/5.9/catel-core/logging/log-listeners/rolling-in-memory-log-listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.9/catel-core/logging/log-listeners/rolling-in-memory-log-listener/</guid>
      <description>In memory logging can be very useful to be able to query the latest log messages. Catel provides this via the RollingInMemoryLogListener and RollingInMemoryLogService. The *RollingInMemoryLogService *is a wrapper around the *RollingInMemoryLogListener* to provide a simple way to use the listener.
Enabling the feature By default, the feature is disabled to not eat any CPU ticks when not being used. To use the feature, the only thing required is to resolve the type from the ServiceLocator:</description>
    </item>
    
    <item>
      <title>SeqLogListener</title>
      <link>https://docs.catelproject.com/5.9/catel-core/logging/log-listeners/seq-log-listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.9/catel-core/logging/log-listeners/seq-log-listener/</guid>
      <description>Seq is a structured logs server for .NET Apps. It act like a logs repository, allow to diagnostic by query your logs using a natural syntax, react on notifying you through email or instant messages and so on &amp;hellip;
To use the Seq log listener, use the following code:
var logListener = new SeqLogListener(); logListener.IgnoreCatelLogging = true; // TODO: Customize options LogManager.AddListener(logListener);  This one can also be used on configuration file:</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Behaviors &amp; triggers on Catel docs</title>
    <link>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/</link>
    <description>Recent content in Behaviors &amp; triggers on Catel docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/focus-first-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/focus-first-control/</guid>
      <description>FocusFirstControl The Focus behavior is very powerful, but sometimes you just need to focus the first control on a window or control. This can be done by using the FocusFirstControl behavior instead. This behavior will focus the first control on a window or control and has only one property: FocusParentFirst.
Add the following XML namespaces:
xmlns:i=&amp;quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity&amp;quot;xmlns:catel=&amp;quot;http://schemas.catelproject.com&amp;quot;Focus when the control is loaded The easiest and default method is to focus the first control.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/focus-on-key-press/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/focus-on-key-press/</guid>
      <description>FocusOnKeyPress Sometimes you need to handle a key press and then set the focus on an element.
 Add the following XML namespaces:  xmlns:i=&amp;quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity&amp;quot;xmlns:catel=&amp;quot;http://schemas.catelproject.com&amp;quot;Use the following definition:  &amp;lt;TextBox x:Name=&amp;quot;textBox&amp;quot;&amp;gt;&amp;lt;i:Interaction.Behaviors&amp;gt;&amp;lt;catel:FocusOnKeyPress Key=&amp;quot;F&amp;quot; Modifiers=&amp;quot;Ctrl&amp;quot; /&amp;gt;&amp;lt;/i:Interaction.Behaviors&amp;gt;&amp;lt;/ListBox&amp;gt;</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/authentication/</guid>
      <description>The Authentication behavior is able to hide, collapse or disable UI elements based on the current user state. The behavior uses the registered IAuthenticationProvider instances to determine whether the user has access to the specified UI element.
 Creating an authentication provider:  /// &amp;lt;summary&amp;gt;/// Example implementation of the &amp;lt;see cref=&amp;quot;AuthenticationProvider&amp;quot;/&amp;gt;. This class is not really implemented/// like it should, because it shouldn&#39;t be this easy to set the current role.</description>
    </item>
    
    <item>
      <title>AutoCompletionBehavior</title>
      <link>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/autocompletion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/autocompletion/</guid>
      <description>To enable auto completion features, once can use the services and behaviors provided by Catel. There are two components required for auto completion:
 AutoCompletionService =&amp;gt; takes care of the actual filtering AutoCompletionBehavior =&amp;gt; can be attached to a TextBox to support a dropdown with recommended values  The auto completion features looks like the screenshot below:
AutoCompletion service The default implementation automatically filters the collection specified. If there is no filter yet, it will filter the top 10 occurrences from the collection.</description>
    </item>
    
    <item>
      <title>AutoScroll</title>
      <link>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/autoscroll/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/autoscroll/</guid>
      <description>The AutoScroll behavior automatically scrolls to a specific direction when the ItemsSource of an ItemsControl changes.
 Add the following XML namespaces:  xmlns:i=&amp;quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity&amp;quot;xmlns:catel=&amp;quot;http://schemas.catelproject.com&amp;quot;Add behavior  &amp;lt;ListBox ItemsSource=&amp;quot;{Binding LogEntries}&amp;quot;&amp;gt;&amp;lt;i:Interaction.Behaviors&amp;gt;&amp;lt;catel:AutoScroll ScrollDirection=&amp;quot;Bottom&amp;quot; ScrollTreshold=&amp;quot;10&amp;quot; /&amp;gt;&amp;lt;/i:Interaction.Behaviors&amp;gt;&amp;lt;/ListBox&amp;gt;The ScrollDirection determines the direction (Top or Bottom).
The ScrollTreshold allows the treshold of the real offset (to determine whether auto scroll should be enabled). For example, when the user is manually scrolling, this behavior will pause.</description>
    </item>
    
    <item>
      <title>DelayBindingUpdate</title>
      <link>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/delay-binding-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/delay-binding-update/</guid>
      <description>Sometimes, a binding update should be delayed for performance reasons. This is possible using the DelayBindingUpdate behavior. This behavior modifies the binding mode to explicit and internally watches for property changes. If the bound dependency property changes, the behavior will wait for the time to pass and then update. If the value changes again within the timeframe, the timer is reset (so you won&amp;rsquo;t get &amp;ldquo;double&amp;rdquo; updates).
 Add the following XML namespaces:  xmlns:i=&amp;quot;clr-namespace:System.</description>
    </item>
    
    <item>
      <title>DoubleClickToCommand</title>
      <link>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/double-click-to-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/double-click-to-command/</guid>
      <description>Lots of times, a developer needs to handle a double click event. This trigger allows a developer to track a double click on any FrameworkElement and respond to that using a command.
 Add the following XML namespaces:  xmlns:i=&amp;quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity&amp;quot;xmlns:catel=&amp;quot;http://schemas.catelproject.com&amp;quot;Use the following definition. This example will invoke the Edit command of the view model when the item is double clicked):  &amp;lt;ListBox x:Name=&amp;quot;listBox&amp;quot; ItemsSource=&amp;quot;{Binding PersonCollection}&amp;quot; SelectedItem=&amp;quot;{Binding SelectedPerson}&amp;quot;&amp;gt;&amp;lt;ListBox.ItemTemplate&amp;gt;&amp;lt;DataTemplate&amp;gt;&amp;lt;Grid&amp;gt;&amp;lt;i:Interaction.</description>
    </item>
    
    <item>
      <title>EventToCommand</title>
      <link>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/event-to-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/event-to-command/</guid>
      <description>Almost every respectable MVVM framework supports the EventToCommand trigger. It is a trigger that allows a an event to be turned into a command. This way, you never have to manually add event handlers, search for the view model in the code-behind and then call the right command.
The usage is really simple, but requires the System.Windows.Interactivity.dll reference (ships with Catel). The example below shows how to add a trigger for the double click of a ListBox.</description>
    </item>
    
    <item>
      <title>Focus</title>
      <link>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/focus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/focus/</guid>
      <description>To set the focus on a UI element, one must write code in the code-behind. With the Focus behavior, this is no longer necessary. This behavior sets the focus only once on the first time the associated object is loaded.
Add the following XML namespaces:
xmlns:i=&amp;quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity&amp;quot;xmlns:catel=&amp;quot;http://schemas.catelproject.com&amp;quot;Focus when the control is loaded The easiest and default method is to set the focus when the associated control is loaded. In WPF, this is immediately when the control is focused.</description>
    </item>
    
    <item>
      <title>HideUntilViewModelLoaded</title>
      <link>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/hide-until-view-model-loaded/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/hide-until-view-model-loaded/</guid>
      <description>The HideUntilViewModelLoaded hides (Visibility.Collapsed) any view model container (IViewModelContainer) when it does not have a valid view model. This is a great way to hide lazy-loaded views that should only be visible when they contain an actual view model.
Add the following XML namespaces:
xmlns:i=&amp;quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity&amp;quot;xmlns:catel=&amp;quot;http://schemas.catelproject.com&amp;quot;Focus when the control is loaded The easiest and default method is to focus the first control. The parent is also focused by default (just in case if it doesn&amp;rsquo;t have any focus):</description>
    </item>
    
    <item>
      <title>KeyPressToCommand</title>
      <link>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/key-press-to-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/key-press-to-command/</guid>
      <description>Sometimes you need to handle a key press and convert it to a command. An excellent example is a ListBox that should respond to an Ctrl + Enter key press.
 Add the following XML namespaces:  xmlns:i=&amp;quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity&amp;quot;xmlns:catel=&amp;quot;http://schemas.catelproject.com&amp;quot;Use the following definition:  &amp;lt;ListBox x:Name=&amp;quot;listBox&amp;quot; ItemsSource=&amp;quot;{Binding PersonCollection}&amp;quot; SelectedItem=&amp;quot;{Binding SelectedPerson}&amp;quot;&amp;gt;&amp;lt;i:Interaction.Behaviors&amp;gt;&amp;lt;catel:KeyPressToCommand Command=&amp;quot;{Binding MyCommand}&amp;quot; Key=&amp;quot;Enter&amp;quot; Modifiers=&amp;quot;Ctrl&amp;quot; /&amp;gt;&amp;lt;/i:Interaction.Behaviors&amp;gt;&amp;lt;/ListBox&amp;gt;</description>
    </item>
    
    <item>
      <title>MouseInfo</title>
      <link>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/mouse-info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/mouse-info/</guid>
      <description> Add the following XML namespaces:  xmlns:i=&amp;quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity&amp;quot;xmlns:catel=&amp;quot;http://schemas.catelproject.com&amp;quot;Use the following definition:  &amp;lt;ListBox ItemsSource=&amp;quot;{Binding PersonCollection}&amp;quot; SelectedItem=&amp;quot;{Binding SelectedPerson}&amp;quot;&amp;gt;&amp;lt;i:Interaction.Behaviors&amp;gt;&amp;lt;catel:MouseInfo x:Name=&amp;quot;personCollectionMouseInfo&amp;quot; /&amp;gt;&amp;lt;/i:Interaction.Behaviors&amp;gt;&amp;lt;/ListBox&amp;gt;Now, it is easy to bind to the mouse information like this (textblock will become visible when the listbox is hovered):  &amp;lt;TextBlock Visibility=&amp;quot;{Binding ElementName=personCollectionMouseInfo, Path=IsMouseOver, Converter={StaticResource BooleanToCollapsingVisibilityConverter}, ConverterParameter=false}&amp;quot; Text=&amp;quot;Hovering listbox&amp;quot; /&amp;gt;</description>
    </item>
    
    <item>
      <title>Navigate</title>
      <link>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/navigate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/navigate/</guid>
      <description>Note that this behavior is only available for WPF
The Hyperlink control in WPF is very powerful, but it is hard to make them work outside pages.
Add the following XML namespaces:
xmlns:i=&amp;quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity&amp;quot;xmlns:catel=&amp;quot;http://schemas.catelproject.com&amp;quot;To execute the NavigateUrl, simply use the behavior as shown below:
&amp;lt;TextBlock&amp;gt;&amp;lt;Hyperlink NavigateUri=&amp;quot;http://schemas.catelproject.com&amp;quot;&amp;gt;&amp;lt;i:Interaction.Behaviors&amp;gt;&amp;lt;catel:Navigate /&amp;gt;&amp;lt;/i:Interaction.Behaviors&amp;gt;&amp;lt;TextBlock Text=&amp;quot;The best MVVM Framework&amp;quot; /&amp;gt;&amp;lt;/Hyperlink&amp;gt;&amp;lt;/TextBlock&amp;gt;Another alternative is to use the LinkLabel control from Orc.</description>
    </item>
    
    <item>
      <title>NumericTextBox</title>
      <link>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/numeric-textbox/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/numeric-textbox/</guid>
      <description>The NumericTextBox behavior makes it easy to allow specific numeric input on a TextBox.
 Add the following XML namespaces:  xmlns:i=&amp;quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity&amp;quot;xmlns:catel=&amp;quot;http://schemas.catelproject.com&amp;quot;Use the following definition:  &amp;lt;TextBox Text={Binding Amount}&amp;quot;&amp;gt;&amp;lt;i:Interaction.Behaviors&amp;gt;&amp;lt;catel:NumericTextBox /&amp;gt;&amp;lt;/i:Interaction.Behaviors&amp;gt;&amp;lt;/TextBox&amp;gt;Use the properties on the behavior to customize the behavior to your needs
</description>
    </item>
    
    <item>
      <title>SelectTextOnFocus</title>
      <link>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/select-text-on-focus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/select-text-on-focus/</guid>
      <description>The SelectTextOnFocus behavior makes it easy to select all text when a TextBox receives the focus.
 Add the following XML namespaces:  xmlns:i=&amp;quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity&amp;quot;xmlns:catel=&amp;quot;http://schemas.catelproject.com&amp;quot;Use the following definition:  &amp;lt;TextBox Text={Binding Amount}&amp;quot;&amp;gt;&amp;lt;i:Interaction.Behaviors&amp;gt;&amp;lt;catel:SelectTextOnFocus /&amp;gt;&amp;lt;/i:Interaction.Behaviors&amp;gt;&amp;lt;/TextBox&amp;gt;</description>
    </item>
    
    <item>
      <title>UpdateBindingOnPasswordChanged</title>
      <link>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/update-binding-on-password-changed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/update-binding-on-password-changed/</guid>
      <description>The UpdateBindingOnPasswordChanged is a very useful behavior which allows to bind the Password property of the PasswordBox Control. Use it, it&amp;rsquo;s really simple.
 1) Add the following XML namespaces:
xmlns:i=&amp;quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity&amp;quot;xmlns:catel=&amp;quot;http://schemas.catelproject.com&amp;quot;Use the following definition:  &amp;lt;PasswordBox&amp;gt;&amp;lt;i:Interaction.Behaviors&amp;gt;&amp;lt;catel:UpdateBindingOnPasswordChanged Password=&amp;quot;{Binding Password, Mode=TwoWay}&amp;quot; /&amp;gt;&amp;lt;/i:Interaction.Behaviors&amp;gt;&amp;lt;/PasswordBox&amp;gt;</description>
    </item>
    
    <item>
      <title>UpdateBindingOnTextChanged</title>
      <link>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/update-binding-on-text-changed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.x/catel-mvvm/behaviors-triggers/update-binding-on-text-changed/</guid>
      <description>The UpdateBindingOnTextChange is a very useful behavior which allows to delay a binding update on the TextChanged event of a TextBox. This way, it is possible to implement search boxes that only start a search after a specific time when no new key presses have occurred. For example, when a user types a new search string, and the user doesn&amp;rsquo;t enter a new key for 500 ms, the binding is updated.</description>
    </item>
    
  </channel>
</rss>

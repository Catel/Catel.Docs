<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>XAML - external controls on Catel docs</title>
    <link>https://docs.catelproject.com/5.x/catel-mvvm/views/xaml/external-controls/</link>
    <description>Recent content in XAML - external controls on Catel docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://docs.catelproject.com/5.x/catel-mvvm/views/xaml/external-controls/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using a custom control</title>
      <link>https://docs.catelproject.com/5.x/catel-mvvm/views/xaml/external-controls/using-custom-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.x/catel-mvvm/views/xaml/external-controls/using-custom-control/</guid>
      <description>In this part of the documentation, the RadTabItem of Telerik will be used as an example on how to create a RadTabItem that behaves like the UserControl.
Creating the base class with behavior The first thing to do is to create a new base class that accepts a view model type argument. In this example, we will call it TabItem (to make it as &amp;ldquo;external control company independent&amp;rdquo; as possible). Below is the code for the control definition.</description>
    </item>
    
    <item>
      <title>Using a custom window</title>
      <link>https://docs.catelproject.com/5.x/catel-mvvm/views/xaml/external-controls/using-custom-window/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.x/catel-mvvm/views/xaml/external-controls/using-custom-window/</guid>
      <description>In this part of the documentation, the RadWindow of Telerik will be used as an example on how to create a WindowBase that behaves like the DataWindow.
Creating the base class with behavior The first thing to do is to create a new base class that accepts a view model type argument. In this example, we will call it WindowBase (to make it as &amp;ldquo;external control company independent&amp;rdquo; as possible). Below is the code for the window definition.</description>
    </item>
    
  </channel>
</rss>

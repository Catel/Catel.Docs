<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Locators &amp; naming conventions on Catel docs</title>
    <link>https://docs.catelproject.com/5.12/catel-mvvm/locators-naming-conventions/</link>
    <description>Recent content in Locators &amp; naming conventions on Catel docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://docs.catelproject.com/5.12/catel-mvvm/locators-naming-conventions/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Naming conventions</title>
      <link>https://docs.catelproject.com/5.12/catel-mvvm/locators-naming-conventions/naming-conventions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.12/catel-mvvm/locators-naming-conventions/naming-conventions/</guid>
      <description>Some services in Catel support naming conventions. For example, the IViewLocator and IViewModelLocator allow naming conventions to prevent a user from having to register all views and view models. Internally, the naming conventions are resolved using the NamingConvention helper class. This part of the documentation explains the possible constants in naming conventions.
[AS] constant The [AS] constant will be replaced by the assembly name. For example, the following naming convention:</description>
    </item>
    
    <item>
      <title>UrlLocator</title>
      <link>https://docs.catelproject.com/5.12/catel-mvvm/locators-naming-conventions/url-locator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.12/catel-mvvm/locators-naming-conventions/url-locator/</guid>
      <description>The IUrlLocator class is responsible for resolving the right urls for the xaml views for a view model in navigation based applications. Before Catel 3.0, the INavigationService was responsible for resolving the url, but this responsibility is now taken over by the IUrlLocator. The NavigationService internally uses the IUrlLocator to resolve the views.
Resolving by naming convention It is possible to resolve views using the IUrlLocator. Then you can use the ResolveUrl method to resolve the url based on the type of the view model.</description>
    </item>
    
    <item>
      <title>ViewLocator</title>
      <link>https://docs.catelproject.com/5.12/catel-mvvm/locators-naming-conventions/view-locator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.12/catel-mvvm/locators-naming-conventions/view-locator/</guid>
      <description>The IViewLocator class is responsible for resolving the right views for a view model. Before Catel 3.0, the IUIVisualizerService was responsible for resolving the view, but this responsibility is now taken over by the IViewLocator. The UIVisualizerService internally uses the IViewLocator to resolve the views.Â Resolving by naming convention It is possible to resolve views using the IViewLocator. Then you can use the ResolveView method to resolve the view based on the type of the view model.</description>
    </item>
    
    <item>
      <title>ViewModelLocator</title>
      <link>https://docs.catelproject.com/5.12/catel-mvvm/locators-naming-conventions/view-model-locator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.catelproject.com/5.12/catel-mvvm/locators-naming-conventions/view-model-locator/</guid>
      <description>Starting with Catel 3.0, there are several ways to hook up a view model to the view. When a view is constructed, an MVVM behavior is added to the view. Thanks to these MVVM behaviors, it is possible to use exactly the same logic on 3rd party controls.
Resolving by naming convention If the GetViewModelType method returns null (which is the default behavior), the view will resolve the IViewModelLocator from the ServiceLocator.</description>
    </item>
    
  </channel>
</rss>
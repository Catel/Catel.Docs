<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data handling on Catel docs</title>
    <link>http://docs.catelproject.com/vnext/catel-core/data-handling/</link>
    <description>Recent content in Data handling on Catel docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://docs.catelproject.com/vnext/catel-core/data-handling/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ObservableObject</title>
      <link>http://docs.catelproject.com/vnext/catel-core/data-handling/observableobject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.catelproject.com/vnext/catel-core/data-handling/observableobject/</guid>
      <description>The ObservableObject is a very lightweight class that only implements the INotifyPropertyChanging and INotifyPropertyChanged interfaces. This class is ideal for simple objects that only need property notification. Below is an example:
public class Person : ObservableObject { private string _firstName; private string _middleName; private string _lastName; public Person(string firstName, string middleName, string lastName) { FirstName = firstName; MiddleName = middleName; LastName = lastName; } public string FirstName { get { return _firstName; } set { RaisePropertyChanging(() =&amp;gt; FirstName); var oldValue = _firstName; _firstName = value; RaisePropertyChanged(() =&amp;gt; FirstName, oldValue, value); } } public string MiddleName { get { return _middleName; } set { RaisePropertyChanging(() =&amp;gt; MiddleName); var oldValue = _middleName; _middleName = value; RaisePropertyChanged(() =&amp;gt; MiddleName, oldValue, value); } } public string LastName { get { return _lastName; } set { RaisePropertyChanging(() =&amp;gt; LastName); var oldValue = _lastName; _lastName = value; RaisePropertyChanged(() =&amp;gt; LastName, oldValue, value); } } }  </description>
    </item>
    
    <item>
      <title>DispatcherObservableObject</title>
      <link>http://docs.catelproject.com/vnext/catel-core/data-handling/dispatcherobservableobject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.catelproject.com/vnext/catel-core/data-handling/dispatcherobservableobject/</guid>
      <description>Note that the DispatcherObservableObject is located in Catel.MVVM because it uses the IDispatcherService
The DispatcherObservableObject is a class that derives from the ObservableObject class. The only difference is that the DispatcherObservableObject will dispatch all property change notifications to the UI thread. Below is a class that uses the DispatcherObservableObject and is thread-safe for the change notifications.
public class Person : DispatcherObservableObject { private string _firstName; private string _middleName; private string _lastName; public Person(string firstName, string middleName, string lastName) { FirstName = firstName; MiddleName = middleName; LastName = lastName; } public string FirstName { get { return _firstName; } set { RaisePropertyChanging(() =&amp;gt; FirstName); var oldValue = _firstName; _firstName = value; RaisePropertyChanged(() =&amp;gt; FirstName, oldValue, value); } } public string MiddleName { get { return _middleName; } set { RaisePropertyChanging(() =&amp;gt; MiddleName); var oldValue = _middleName; _middleName = value; RaisePropertyChanged(() =&amp;gt; MiddleName, oldValue, value); } } public string LastName { get { return _lastName; } set { RaisePropertyChanging(() =&amp;gt; LastName); var oldValue = _lastName; _lastName = value; RaisePropertyChanged(() =&amp;gt; LastName, oldValue, value); } } }  </description>
    </item>
    
    <item>
      <title>ModelBase</title>
      <link>http://docs.catelproject.com/vnext/catel-core/data-handling/modelbase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.catelproject.com/vnext/catel-core/data-handling/modelbase/</guid>
      <description>The ModelBase class is a generic base class that can be used for all your data classes.
 Fully serializable It is now really easy to store objects on disk or serialize them into memory, either binary or in XML. The data object supports this out of the box, and automatically handles the (de)serialization. Support property changed notifications The class supports the INotifyPropertyChanging and INotifyPropertyChanged interfaces so this class can easily be used in applications to reflect changes to the user.</description>
    </item>
    
    <item>
      <title>ValidatableModelBase</title>
      <link>http://docs.catelproject.com/vnext/catel-core/data-handling/validatablemodelbase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.catelproject.com/vnext/catel-core/data-handling/validatablemodelbase/</guid>
      <description>The ValidatableModelBase class extends the [ModelBase](/vnext/catel-core/data-handling/modelbase/) class with functionality to validate the model. The class implements the IDataErrorInfo interface so it is possible to validate the data object and check the errors. This way, no custom validation code needs to be written outside the data class.
More documentation should be written in the future
</description>
    </item>
    
    <item>
      <title>ComparableModelBase</title>
      <link>http://docs.catelproject.com/vnext/catel-core/data-handling/comparablemodelbase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.catelproject.com/vnext/catel-core/data-handling/comparablemodelbase/</guid>
      <description>The ComparableModelBase class extends the [ModelBase](/vnext/catel-core/data-handling/modelbase/) class with default equality comparer members. This logic has been moved to a separate class to improve the out-of-the-box performance of the ModelBase class.
More documentation should be written in the future
</description>
    </item>
    
    <item>
      <title>SavableModelBase</title>
      <link>http://docs.catelproject.com/vnext/catel-core/data-handling/savablemodelbase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.catelproject.com/vnext/catel-core/data-handling/savablemodelbase/</guid>
      <description>The SavableModelBase class extends the [ModelBase](/vnext/catel-core/data-handling/modelbase/) class with functionality to save the model to a persistence store.
Note that the SavableModelBase is just a convenience implementation. The ModelBase can be serialized by any ISerializer implementation as well.
More documentation should be written in the future
</description>
    </item>
    
    <item>
      <title>ChildAwareModelBase</title>
      <link>http://docs.catelproject.com/vnext/catel-core/data-handling/childawaremodelbase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.catelproject.com/vnext/catel-core/data-handling/childawaremodelbase/</guid>
      <description>The ChildAwareModelBase class extends the [ModelBase](/vnext/catel-core/data-handling/modelbase/) class with functionality to get change notifications of child objects of the model. The class uses the ChangeNotificationWrapper to subscribe to all child objects using weak events.
More documentation should be written in the future
</description>
    </item>
    
    <item>
      <title>Using ModelBase as base for entities</title>
      <link>http://docs.catelproject.com/vnext/catel-core/data-handling/using-modelbase-as-base-for-entities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.catelproject.com/vnext/catel-core/data-handling/using-modelbase-as-base-for-entities/</guid>
      <description>It is possible to use the ModelBase as base class when using EF or any other OR mapper.
Setting up ModelBase as base class There are a few caveats when using the ModelBase as base class for your entities. One of them is that IsDirty is always true because the properties from the persistence store are set after the constructor. This guide will explain how to work past that problem.</description>
    </item>
    
    <item>
      <title>Advanced property change notifications</title>
      <link>http://docs.catelproject.com/vnext/catel-core/data-handling/advanced-property-change-notifications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.catelproject.com/vnext/catel-core/data-handling/advanced-property-change-notifications/</guid>
      <description>Sometimes the old value is needed in case of property change event. However, the INotifyPropertyChanged interface does not provide any of this. To support this behavior, a new version of the PropertyChangedEventArgs is created called AdvancedPropertyChangedEventArgs. This class derives from PropertyChangedEventArgs so the interfaces are not broken, but it does add additional functionality to the software system.
Getting old value automatically When using the ModelBase or ViewModelBase classes, the old and new value of a property are automatically provided on a property change.</description>
    </item>
    
  </channel>
</rss>